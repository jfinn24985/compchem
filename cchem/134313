format 55
"expt" // /compchem/programs::expt
  revision 4
  modified_by 41 "finnerty"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_infonote default shadow default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default
  
  cpp_h_dir "programs/expt"
  cpp_src_dir "../src/programs/expt"
  cpp_namespace "expt"
  deploymentview 133161 "bin"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default
    artifact 150569 "main"
      stereotype "source"
      cpp_src "// #include \"log_manager.hpp\"
// #include \"log_entry.hpp\"
// #include \"log_experiment.hpp\"

int main(int argc
     , char** argv)
{
  experiment_log::journal l_log_man;
  l_log_man.get_view ().update ();
  // create and open a character archive for output
  std::ofstream l_ofstream (\"filename\");
  boost::archive::text_oarchive l_oarchive (l_ofstream);

  // write class instance to archive
  l_oarchive << l_log_man;
  // close archive
  l_ofstream.close ();

  // ... some time later restore the class instance to its orginal state
  // create and open an archive for input
  std::ifstream l_ifstream(\"filename\", std::ios::binary);
  boost::archive::text_iarchive l_iarchive(l_ifstream);
  // read class state from archive
  l_iarchive >> l_log_man;
  l_log_man.get_view ().update ();
  // close archive
  l_ifstream.close();
  return 0;
}
"
      associated_classes
      end
    end
  end

  classview 131753 "view"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_infonote default shadow default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default
    class 339753 "base_view"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This is the base class for view types.  The main responsibility assigned to view types in the design is to transfer data between one or more UI objects and a control object."
      class 339881 "window_t"
	visibility package stereotype "typedef" explicit_base_type "Gtk::Widget"
	cpp_decl "${comment}typedef ${type}*  ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 340009 "const_window_t"
	visibility package stereotype "typedef" explicit_base_type "Gtk::Widget"
	cpp_decl "${comment}typedef ${type}*const  ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 340137 "string_t"
	visibility package stereotype "typedef" explicit_base_type "Glib::ustring"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 269865 // rep (<directional composition>)
	relation 263849 *-->
	  a role_name "rep" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 269865 // rep (<directional composition>)
	  b parent class_ref 339881 // window_t
      end

      attribute 233257 "change_flag"
	private explicit_type "bool"
	cpp_mutable cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1045545 "base_view"
	public explicit_return_type ""
	nparams 2
	  param in name "a_key" type class_ref 340137 // string_t
	  param in name "a_url" type class_ref 340137 // string_t
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "//Constructor for UI application object.  a_url gives the location of the XML document containing the UI description. a_key gives the name of the window to instantiate as the top-level window. For simple applications this will only be invoked once.
//
//\\pre is_readable_file (a_url) [not directly tested]
//\\pre is_valid_key (a_key) [not directly tested]

${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)} 
: rep (ui_traits::find_representation (a_key, a_url))
, change_flag (0)
${throw}{
${body}}
"
	
	
	
	
	comment "Constructor for UI application object.  a_url gives the location of the XML document containing the UI description. a_key gives the name of the window to instantiate as the top-level window. For simple applications this will only be invoked once.

\\pre is_readable_file (a_url) [not directly tested]
\\pre is_valid_key (a_key) [not directly tested]"
      end

      operation 1045673 "base_view"
	public explicit_return_type ""
	nparams 2
	  param in name "a_key" type class_ref 340137 // string_t
	  param in name "a_parent" type class_ref 339753 // base_view
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "//General constructor for sub-windows.

${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)} 
:  rep (ui_traits::find_representation (a_key, a_parent.get_rep ()))
, change_flag (0)
${throw}{
${body}}
"
	
	
	
	
	comment "General constructor for sub-windows."
      end

      operation 1045801 "base_view"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 339753 // base_view
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment "Not defined, added to stop copying."
      end

      operation 1045929 "~base_view"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	
	
      end

      operation 1046057 "get_rep"
	cpp_inline public return_type class_ref 339881 // window_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return rep;
    };
"
	
	
	
	
	comment "Get the GUI-object."
      end

      operation 1046185 "get_rep"
	const cpp_inline public return_type class_ref 340009 // const_window_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return const_window_t (rep);
    };
"
	
	
	
	
	comment "Get the GUI-object in constant form"
      end

      operation 1046313 "is_changed"
	const cpp_virtual cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return change_flag;
    };
"
	
	
	
	
	comment "Are there edits to UI content that has not been passed to a control object?

\\post Result"
      end

      operation 1046441 "is_valid"
	const cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      INVARIANT (rep != NULL, \"Cannot have a view object without a valid UI object.\");
    };
"
	
	
	
	
	comment "Test class level invariant conditions 

\\inv get_rep() /= nul"
      end

      operation 1046569 "on_change"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
       change_flag = true;
     };
"
	
	
	
	
	comment "Indicate what data has been changed with a_flag.  The given value is ORed to the change_flag value.  This can be connected to a signal on a UI object that indicates editing."
      end

      operation 1046697 "on_change"
	const cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
       change_flag = true;
     };
"
	
	
	
	
	comment "Indicate that data has been changed.  This is the version that can be called during the is_changed method if it performs tests for changes.."
      end

      operation 1046825 "operator ="
	private return_type class_ref 339753 // base_view
	nparams 1
	  param in name "source" type class_ref 339753 // base_view
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Not defined, added to stop copying."
      end

      operation 1046953 "reset_change_flag"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      change_flag = false;
    };
"
	
	
	
	
	comment "Reset the change flag (to zero) to indicate the UI object hold the same data as the control object."
      end
    end

    class 340265 "entry_vw"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An abstract base class for objects that provide a view on an entry object."
      classrelation 269993 // <generalisation>
	relation 263977 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 269993 // <generalisation>
	  b parent class_ref 340393 // itemlist_vw
      end

      class 340521 "base_t"
	visibility package stereotype "typedef" base_type class_ref 340393 // itemlist_vw
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 270121 // <realization>
	  relation 264105 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 270121 // <realization>
	    b parent class_ref 340393 // itemlist_vw
	end
      end

      class 340649 "columns"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 270249 // <generalisation>
	  relation 264233 ---|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 270249 // <generalisation>
	    b parent class_ref 340777 // base_columns
	end

	class 340905 "base_column_t"
	  visibility package stereotype "typedef" base_type class_ref 340777 // base_columns
	  cpp_decl "${comment}typedef ${type} ${name};
"
	  java_decl ""
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	  classrelation 270377 // <realization>
	    relation 264361 -_-|>
	      a public
		cpp default "${type}"
		classrelation_ref 270377 // <realization>
	      b parent class_ref 340777 // base_columns
	  end
	end

	attribute 233385 "m_entrydate"
	  public explicit_type "Gtk::TreeModelColumn<Glib::ustring>"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1047081 "columns"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : base_column_t ()
        , m_entrydate ()
        {
          add (m_entrydate);
        };
"
	  
	  
	  
	  
	end

	operation 1047209 "~columns"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	  
	  
	  
	  
	end

	operation 1047337 "set_columns"
	  cpp_virtual public explicit_return_type "void"
	  nparams 1
	    param in name "a_tree_view" type class_ref 341033 // list_window_t
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "//Append columns to the tree view.

${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	  
	  
	  
	  
	  comment "Append columns to the tree view."
	end
      end

      attribute 233513 "date_view"
	private explicit_type "Gtk::Entry"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 233641 "sequence_view"
	private explicit_type "Gtk::Entry"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 233769 "observation_view"
	private explicit_type "Gtk::TextView"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 233897 "action_view"
	private explicit_type "Gtk::TextView"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1047465 "create_list_control"
	const cpp_virtual protected explicit_return_type "std::auto_ptr< control::item_ctl >"
	nparams 1
	  param in name "a_node" explicit_type "purpletree::dom::element"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Create a new list control.

${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Create a new list control."
      end

      operation 1047593 "entry_vw"
	public explicit_return_type ""
	nparams 1
	  param in name "a_journal_view" type class_ref 339753 // base_view
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "//PART TODO
//
//\\pre a_entry != NULL

${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}
: itemlist_vw (ENTRY_VIEW_KEY, ENTRYLIST_VIEW_KEY, a_journal_view, new columns)
, date_view (dynamic_cast< Gtk::Entry* > (ui_traits::find_representation (DATE_VIEW_KEY, get_rep ())))
, sequence_view (dynamic_cast< Gtk::Entry* > (ui_traits::find_representation (SEQUENCE_VIEW_KEY, get_rep ())))
, observation_view (dynamic_cast< Gtk::TextView* > (ui_traits::find_representation (OBSERVATION_VIEW_KEY, get_rep ())))
, action_view (dynamic_cast< Gtk::TextView* > (ui_traits::find_representation (ACTION_VIEW_KEY, get_rep ())))
${throw}{
${body}}
"
	
	
	
	
	comment "PART TODO

\\pre a_entry != NULL"
      end

      operation 1047721 "entry_vw"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 340265 // entry_vw
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment "Not defined, added to stop copying."
      end

      operation 1047849 "~entry_vw"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	
	
      end

      operation 1047977 "is_changed"
	const cpp_virtual public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Are there edits to UI content that has not been passed to a control object?
//
//\\post Result implies 0 /= get_change_flag ()

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Are there edits to UI content that has not been passed to a control object?

\\post Result implies 0 /= get_change_flag ()"
      end

      operation 1048105 "is_valid"
	const cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      INVARIANT (NULL != date_view, \"Wrong type or non-existent window for date view.\");
      INVARIANT (NULL != sequence_view, \"Wrong type or non-existent window for sequence view.\");
      INVARIANT (NULL != observation_view, \"Wrong type or non-existent window for observation view.\");
      INVARIANT (NULL != action_view, \"Wrong type or non-existent window for action view.\");
    };
"
	
	
	
	
	comment "Test invariant conditions."
      end

      operation 1048233 "operator ="
	private return_type class_ref 340265 // entry_vw
	nparams 1
	  param in name "source" type class_ref 340265 // entry_vw
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Not defined, added to stop copying."
      end

      operation 1048361 "set_row"
	protected explicit_return_type "void"
	nparams 2
	  param in name "a_row" type class_ref 341161 // row_iterator_t
	  param in name "a_cursor" explicit_type "control::item_iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Set the values in a_row from the data pointed to by a_cursor.

${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Set the values in a_row from the data pointed to by a_cursor."
      end

      operation 1048489 "virt_poll"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Poll the view for the changed data (Called from poll)

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Poll the view for the changed data (Called from poll)"
      end

      operation 1048617 "virt_update"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Update the display to view the current data (Creating a display if necessary)

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Update the display to view the current data (Creating a display if necessary)"
      end

      classrelation 270505 // ACTION_VIEW_KEY (<directional composition>)
	relation 264489 *-->
	  a role_name "ACTION_VIEW_KEY" init_value "(\"action_entry\")" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 270505 // ACTION_VIEW_KEY (<directional composition>)
	  b parent class_ref 340137 // string_t
      end

      classrelation 270633 // DATE_VIEW_KEY (<directional composition>)
	relation 264617 *-->
	  a role_name "DATE_VIEW_KEY" init_value "(\"date_entry\")" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 270633 // DATE_VIEW_KEY (<directional composition>)
	  b parent class_ref 340137 // string_t
      end

      classrelation 270761 // ENTRY_VIEW_KEY (<directional composition>)
	relation 264745 *-->
	  a role_name "ENTRY_VIEW_KEY" init_value "(\"entry_view\")" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 270761 // ENTRY_VIEW_KEY (<directional composition>)
	  b parent class_ref 340137 // string_t
      end

      classrelation 270889 // ENTRYLIST_VIEW_KEY (<directional composition>)
	relation 264873 *-->
	  a role_name "ENTRYLIST_VIEW_KEY" init_value "(\"entry_list\")" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 270889 // ENTRYLIST_VIEW_KEY (<directional composition>)
	  b parent class_ref 340137 // string_t
      end

      classrelation 271017 // OBSERVATION_VIEW_KEY (<directional composition>)
	relation 265001 *-->
	  a role_name "OBSERVATION_VIEW_KEY" init_value "(\"observation_entry\")" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 271017 // OBSERVATION_VIEW_KEY (<directional composition>)
	  b parent class_ref 340137 // string_t
      end

      classrelation 271145 // SEQUENCE_VIEW_KEY (<directional composition>)
	relation 265129 *-->
	  a role_name "SEQUENCE_VIEW_KEY" init_value "(\"sequence_entry\")" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 271145 // SEQUENCE_VIEW_KEY (<directional composition>)
	  b parent class_ref 340137 // string_t
      end
    end

    class 340393 "itemlist_vw"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This view class manages the display of a list of items.  It reports the selection event back to its control object."
      class 340777 "base_columns"
	abstract visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 272553 // <generalisation>
	  relation 266537 ---|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 272553 // <generalisation>
	    b parent class_ref 341801 // row_column_t
	end

	attribute 234537 "m_iterator"
	  public explicit_type "Gtk::TreeModelColumn<control::item_iterator>"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1050537 "base_columns"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : Gtk::TreeModel::ColumnRecord ()
        , m_iterator ()
        {
          add (m_iterator);
        };
"
	  
	  
	  
	  
	end

	operation 1050665 "~base_columns"
	  cpp_virtual cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	  
	  
	  
	  
	end

	operation 1050793 "set_columns"
	  abstract cpp_virtual public explicit_return_type "void"
	  nparams 1
	    param in name "a_tree_view" type class_ref 341033 // list_window_t
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	  
	  
	  
	  
	  comment "Append columns to the tree view."
	end
      end

      class 341033 "list_window_t"
	visibility package stereotype "typedef" explicit_base_type "Gtk::TreeView"
	cpp_decl "${comment}typedef ${type}*  ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 341161 "row_iterator_t"
	visibility package stereotype "typedef" explicit_base_type "Gtk::TreeModel::iterator"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 272297 // <generalisation>
	relation 266281 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 272297 // <generalisation>
	  b parent class_ref 339753 // base_view
      end

      class 341801 "row_column_t"
	visibility package stereotype "typedef" explicit_base_type "Gtk::TreeModel::ColumnRecord"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 341929 "button_t"
	visibility package stereotype "typedef" explicit_base_type "Gtk::Button"
	cpp_decl "${comment}typedef ${type}*  ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 342057 "base_t"
	visibility package stereotype "typedef" base_type class_ref 339753 // base_view
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 272425 // <realization>
	  relation 266409 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 272425 // <realization>
	    b parent class_ref 339753 // base_view
	end
      end

      attribute 234665 "list_control"
	protected explicit_type "std::auto_ptr< control::item_ctl >"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 234793 "m_model"
	protected explicit_type "Glib::RefPtr<Gtk::ListStore>"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 272681 // m_columns (<directional composition>)
	relation 266665 *-->
	  stereotype "std::auto_ptr"
	  a role_name "m_columns" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};"
	    classrelation_ref 272681 // m_columns (<directional composition>)
	  b parent class_ref 340777 // base_columns
      end

      attribute 234921 "cursor"
	private explicit_type "control::item_iterator"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 272809 // m_list (<directional composition>)
	relation 266793 *-->
	  a role_name "m_list" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 272809 // m_list (<directional composition>)
	  b parent class_ref 341033 // list_window_t
      end

      classrelation 272937 // m_button (<directional composition>)
	relation 266921 *-->
	  a role_name "m_button" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 272937 // m_button (<directional composition>)
	  b parent class_ref 341929 // button_t
      end

      operation 1050921 "clear_parent_node"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Save any unsaved data and remove all data from the display and desensitize the widgets.  Then discard the control object.
//
//\\pre is_state_two () or is_state_three ()
//\\post is_state_one ()

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Save any unsaved data and remove all data from the display and desensitize the widgets.  Then discard the control object.

\\pre is_state_two () or is_state_three ()
\\post is_state_one ()"
      end

      operation 1051049 "create_new_item"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//[UI Callback] Create a new item and add it to the list.  Set the current item view to this item.

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "[UI Callback] Create a new item and add it to the list.  Set the current item view to this item."
      end

      operation 1051177 "create_list_control"
	abstract const cpp_virtual protected explicit_return_type "std::auto_ptr< control::item_ctl >"
	nparams 1
	  param in name "a_node" explicit_type "purpletree::dom::element"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "Create a new list control.  Derived classes should return the list control type specific to their type.

\\post Result /= null"
      end

      operation 1051305 "find_row"
	cpp_inline protected explicit_return_type "control::item_iterator"
	nparams 1
	  param in name "a_row_cursor" type class_ref 341161 // row_iterator_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} {
      REQUIRE (is_state_four () or is_state_three ()
               , \"Can only get a row in state three or four.\");
      control::item_iterator Result ((*a_row_cursor)[m_columns->m_iterator]);
      ENSURE (Result.get_parent () == list_control.get ()
    	  , \"Iterator is not from the current model.\");
      ENSURE (Result != list_control->end ()
              , \"Iterator from a row should never equal end()\");
      return Result;
    };
"
	
	
	
	
	comment "Find the corresponding item iterator for a_row_cursor.

\\pre is_state_three or is_state_four
\\post Result.get_parent = list_control
\\post Result /= list_control.end ()"
      end

      operation 1051433 "find_row"
	protected return_type class_ref 341161 // row_iterator_t
	nparams 1
	  param in name "a_cursor" explicit_type "control::item_iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Find the corresponding row iterator for a_cursor.
//
//\\pre is_state_three or is_state_four
//\\pre a_cursor.get_parent = list_control
//\\post Result is a valid row

${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Find the corresponding row iterator for a_cursor.

\\pre is_state_three or is_state_four
\\pre a_cursor.get_parent = list_control
\\post Result is a valid row"
      end

      operation 1051561 "get_cursor"
	const cpp_inline public explicit_return_type "control::item_iterator"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      is_valid ();
      REQUIRE (not is_state_one (), \"Cannot query an inactive list.\");
      return cursor;
    };
"
	
	
	
	
	comment "Get a control iterator to the currently selected item (or list_control.end ())

\\pre not is_state_one"
      end

      operation 1051689 "get_cursor"
	cpp_inline public explicit_return_type "control::item_iterator"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      is_valid ();
      REQUIRE (not is_state_one (), \"Cannot query an inactive list.\");
      return cursor;
    };
"
	
	
	
	
	comment "Get a control iterator to the currently selected item (or list_control.end ())

\\pre not is_state_one"
      end

      operation 1051817 "is_state_one"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return NULL == list_control.get ();
    };
"
	
	
	
	
	comment "Is the list in state one.  In this state the parent node is not set and view is insensitive"
      end

      operation 1051945 "is_state_two"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return NULL != list_control.get () and m_model->children ().empty ();
    };
"
	
	
	
	
	comment "Is the list in state two.  In this state the parent node is set but is empty so the view is insensitive except the \"add item\" button."
      end

      operation 1052073 "is_state_three"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return NULL != list_control.get () and not m_model->children ().empty () and cursor == list_control->end ();
    };
"
	
	
	
	
	comment "Is the list in state two.  In this state the parent node is set and has content, but there are no selected items so the view is insensitive."
      end

      operation 1052201 "is_state_four"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return NULL != list_control.get () and not m_model->children ().empty () and cursor != list_control->end ();
    };
"
	
	
	
	
	comment "Is the list in state two.  In this state the parent node is set and has content, one of which is selected so the view is sensitive."
      end

      operation 1052329 "is_valid"
	const protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Test invariant conditions.
//
//\\inv m_columns /= nul, m_model /= nul, m_list /= nul, m_button /= nul
//\\inv not is_state_one --> list_control /= nul
//                   , cursor /= nul or cursor == list_control.end
//                   , m_list->model = m_model
//\\inv is_state_one --> list_control = nul, cursor = nul

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Test invariant conditions.

\\inv m_columns /= nul, m_model /= nul, m_list /= nul, m_button /= nul
\\inv not is_state_one --> list_control /= nul
                   , cursor /= nul or cursor == list_control.end
                   , m_list->model = m_model
\\inv is_state_one --> list_control = nul, cursor = nul"
      end

      operation 1052457 "itemlist_vw"
	public explicit_return_type ""
	nparams 4
	  param in name "a_key" type class_ref 340137 // string_t
	  param in name "a_list_key" type class_ref 340137 // string_t
	  param in name "a_window" type class_ref 339753 // base_view
	  param inout name "a_column" type class_ref 340777 // base_columns
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} * ${p3}${)}${volatile}${throw};
"
	cpp_def "//Create an object to manage a view with a list.

${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} * ${p3}${)} 
: base_view (a_key, a_window)
, list_control ()
, m_model ()
, m_columns (a_column)
, cursor ()
, m_list (dynamic_cast<list_window_t> (ui_traits::find_representation (a_list_key, get_rep ())))
, m_button (dynamic_cast<button_t> (ui_traits::find_representation (a_list_key + \"_button\", get_rep ())))
${throw}{
${body}}
"
	
	
	
	
	comment "Create an object to manage a view with a list."
      end

      operation 1052585 "itemlist_vw"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 340393 // itemlist_vw
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment "Not defined, added to stop copying."
      end

      operation 1052713 "~itemlist_vw"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	
	
      end

      operation 1052841 "poll"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      is_valid ();
      virt_poll ();
      ENSURE (false == is_changed (), \"After poll a view should have no changes.\");
    };
"
	
	
	
	
	comment "Poll the view for the changed data.  This transfer data from the UI objects to the control object.

(The virtual part of the operation is in virt_poll, which should be overridden in derived classes.)
\\post not is_changed ()."
      end

      operation 1052969 "operator ="
	private return_type class_ref 340393 // itemlist_vw
	nparams 1
	  param in name "source" type class_ref 340393 // itemlist_vw
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Not defined, added to stop copying."
      end

      operation 1053097 "select_item"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//[UI Callback] This method is called (from the UI objects) to indicate that the selection in the UI object has been changed.

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "[UI Callback] This method is called (from the UI objects) to indicate that the selection in the UI object has been changed."
      end

      operation 1053225 "set_parent_node"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_node" explicit_type "purpletree::dom::element"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Set a_node as the data in the display and make the displayed objects sensitive.
//
//\\pre is_state_one()
//\\pre not a_node.is_null ()
//\\post is_state_two () or is_state_three ()
//\\post not is_changed ()

${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Set a_node as the data in the display and make the displayed objects sensitive.

\\pre is_state_one()
\\pre not a_node.is_null ()
\\post is_state_two () or is_state_three ()
\\post not is_changed ()"
      end

      operation 1053353 "set_row"
	abstract cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param in name "a_row" type class_ref 341161 // row_iterator_t
	  param in name "a_cursor" explicit_type "control::item_iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "Set the values in a_row from the data pointed to by a_cursor.  Derived classes define this method to insert data into the UI model object based on their column  definition."
      end

      operation 1053481 "update"
	cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Update the display to view the current data. This transfers data from the control object into UI objects.
//
//(The virtual part of the operation is in virt_update, which should be overridden in derived classes.)
//\\post not is_changed ().

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Update the display to view the current data. This transfers data from the control object into UI objects.

(The virtual part of the operation is in virt_update, which should be overridden in derived classes.)
\\post not is_changed ()."
      end

      operation 1053609 "virt_create_item"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 1
	  param inout name "a_cursor" explicit_type "control::item_iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} {};
"
	
	
	
	
	comment "Populate the newly created item in a_cursor with queried data.  The base function does nothing, derived types that need to perform extra operations to ensure a valid data item should do so here."
      end

      operation 1053737 "virt_poll"
	abstract cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "Poll the view for the changed data (Called from poll).  This does nothing with an itemlist view as the list is not editable."
      end

      operation 1053865 "virt_update"
	abstract cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "Update the display to view the current data (Creating a display if necessary).  This does not change the selection.

\\pre false = is_changed ().
\\post false = is_changed ()."
      end
    end

    class 341289 "info_vw"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Manage the display of the information items of a journal page."
      classrelation 271273 // <generalisation>
	relation 265257 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 271273 // <generalisation>
	  b parent class_ref 340393 // itemlist_vw
      end

      class 341417 "base_t"
	visibility package stereotype "typedef" base_type class_ref 340393 // itemlist_vw
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 271401 // <realization>
	  relation 265385 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 271401 // <realization>
	    b parent class_ref 340393 // itemlist_vw
	end
      end

      class 341545 "columns"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 271529 // <generalisation>
	  relation 265513 ---|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 271529 // <generalisation>
	    b parent class_ref 340777 // base_columns
	end

	class 341673 "base_column_t"
	  visibility package stereotype "typedef" base_type class_ref 340777 // base_columns
	  cpp_decl "${comment}typedef ${type} ${name};
"
	  java_decl ""
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	  classrelation 271657 // <realization>
	    relation 265641 -_-|>
	      a public
		cpp default "${type}"
		classrelation_ref 271657 // <realization>
	      b parent class_ref 340777 // base_columns
	  end
	end

	attribute 234025 "m_name"
	  public explicit_type "Gtk::TreeModelColumn<Glib::ustring>"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 234153 "m_value"
	  public explicit_type "Gtk::TreeModelColumn<Glib::ustring>"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1048745 "columns"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : base_column_t ()
        , m_name ()
        , m_value ()
        {
          add (m_name);
          add (m_value);
        };
"
	  
	  
	  
	  
	end

	operation 1048873 "~columns"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	  
	  
	  
	  
	end

	operation 1049001 "set_columns"
	  cpp_virtual public explicit_return_type "void"
	  nparams 1
	    param in name "a_tree_view" type class_ref 341033 // list_window_t
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "//Append columns to the tree view.

${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	  
	  
	  
	  
	  comment "Append columns to the tree view."
	end
      end

      attribute 234281 "name_view"
	private explicit_type "Gtk::Entry"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 234409 "value_view"
	private explicit_type "Gtk::Entry"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1049129 "create_list_control"
	const cpp_virtual protected explicit_return_type "std::auto_ptr< control::item_ctl >"
	nparams 1
	  param in name "a_node" explicit_type "purpletree::dom::element"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Create a new list control.

${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Create a new list control."
      end

      operation 1049257 "is_changed"
	const cpp_virtual public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Are there edits to UI content that has not been passed to a control object?
//
//\\post Result implies 0 /= get_change_flag ()

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Are there edits to UI content that has not been passed to a control object?

\\post Result implies 0 /= get_change_flag ()"
      end

      operation 1049385 "is_valid"
	const cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      INVARIANT (NULL != name_view, \"Viewer must have a valid name entry object.\");
      INVARIANT (NULL != value_view, \"Viewer must have a valid value entry object.\");
    };
"
	
	
	
	
	comment "Test invariant conditions."
      end

      operation 1049513 "info_vw"
	public explicit_return_type ""
	nparams 1
	  param in name "a_view" type class_ref 339753 // base_view
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "//Main constructor.

${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}
: itemlist_vw (INFO_VIEW_KEY, INFOLIST_VIEW_KEY, a_view, new columns)
, name_view (dynamic_cast< Gtk::Entry* > (ui_traits::find_representation (NAME_VIEW_KEY, get_rep ())))
, value_view (dynamic_cast< Gtk::Entry* > (ui_traits::find_representation (VALUE_VIEW_KEY, get_rep ())))
${throw}{
${body}}
"
	
	
	
	
	comment "Main constructor."
      end

      operation 1049641 "~info_vw"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	
	
      end

      operation 1049769 "info_vw"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 341289 // info_vw
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment "Not defined, added to stop copying."
      end

      operation 1049897 "operator ="
	private return_type class_ref 341289 // info_vw
	nparams 1
	  param in name "source" type class_ref 341289 // info_vw
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Not defined, added to stop copying."
      end

      operation 1050025 "set_row"
	protected explicit_return_type "void"
	nparams 2
	  param in name "a_row" type class_ref 341161 // row_iterator_t
	  param in name "a_cursor" explicit_type "control::item_iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Set the values in a_row from the data pointed to by a_cursor.

${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Set the values in a_row from the data pointed to by a_cursor."
      end

      operation 1050153 "virt_create_item"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "a_cursor" explicit_type "control::item_iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Populate the newly created item in a_cursor with queried data.  The base function does nothing, derived types that need to perform extra operations to ensure a valid data item should do so here.

${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Populate the newly created item in a_cursor with queried data.  The base function does nothing, derived types that need to perform extra operations to ensure a valid data item should do so here."
      end

      operation 1050281 "virt_poll"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Poll the view for the changed data (Called from poll)

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Poll the view for the changed data (Called from poll)"
      end

      operation 1050409 "virt_update"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Update the display to view the current data (Creating a display if necessary)
//
//\\pre false = is_changed ().

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Update the display to view the current data (Creating a display if necessary)

\\pre false = is_changed ()."
      end

      classrelation 271785 // INFOLIST_VIEW_KEY (<directional composition>)
	relation 265769 *-->
	  a role_name "INFOLIST_VIEW_KEY" init_value "(\"info_list\")" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 271785 // INFOLIST_VIEW_KEY (<directional composition>)
	  b parent class_ref 340137 // string_t
      end

      classrelation 271913 // INFO_VIEW_KEY (<directional composition>)
	relation 265897 *-->
	  a role_name "INFO_VIEW_KEY" init_value "(\"info_view\")" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 271913 // INFO_VIEW_KEY (<directional composition>)
	  b parent class_ref 340137 // string_t
      end

      classrelation 272041 // NAME_VIEW_KEY (<directional composition>)
	relation 266025 *-->
	  a role_name "NAME_VIEW_KEY" init_value "(\"name_entry\")" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 272041 // NAME_VIEW_KEY (<directional composition>)
	  b parent class_ref 340137 // string_t
      end

      classrelation 272169 // VALUE_VIEW_KEY (<directional composition>)
	relation 266153 *-->
	  a role_name "VALUE_VIEW_KEY" init_value "(\"value_entry\")" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 272169 // VALUE_VIEW_KEY (<directional composition>)
	  b parent class_ref 340137 // string_t
      end
    end

    class 342185 "journal_vw"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Objects of this class manage UI Window that displays a journal document. This is the object that maintains the top level window."
      classrelation 273065 // <generalisation>
	relation 267049 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 273065 // <generalisation>
	  b parent class_ref 339753 // base_view
      end

      class 342313 "base_t"
	visibility package stereotype "typedef" base_type class_ref 339753 // base_view
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 273193 // <realization>
	  relation 267177 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 273193 // <realization>
	    b parent class_ref 339753 // base_view
	end
      end

      attribute 235049 "journal"
	private explicit_type "std::auto_ptr<control::journal_ctl>"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 273321 // page_view (<directional composition>)
	relation 267305 *-->
	  a role_name "page_view" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 273321 // page_view (<directional composition>)
	  b parent class_ref 342441 // page_vw
      end

      attribute 235177 "open_document_signal"
	private explicit_type "sigc::signal1< void, bool >"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 235305 "dirty_document_signal"
	private explicit_type "sigc::signal1< void, bool >"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1053993 "close_document"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//[UI callback] Optionally closes the currently viewed journal (and any associated views).  This will cause this object to be deconstructed.  If there are unsaved changes then the user is queried and the user may elect to cancel the close process.
//
//\\pre is_open ()

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "[UI callback] Optionally closes the currently viewed journal (and any associated views).  This will cause this object to be deconstructed.  If there are unsaved changes then the user is queried and the user may elect to cancel the close process.

\\pre is_open ()"
      end

      operation 1054121 "exit"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//[UI callback] This function attempts to exit the application.  This function will test to see if there are any unsaved changes.  If there are unsaved changes and then a_unstoppable is true a back-up version of the journal will be saved otherwise the user will be queried for the save action.  This method should never return.

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "[UI callback] This function attempts to exit the application.  This function will test to see if there are any unsaved changes.  If there are unsaved changes and then a_unstoppable is true a back-up version of the journal will be saved otherwise the user will be queried for the save action.  This method should never return."
      end

      operation 1054249 "get_journal"
	const cpp_inline private explicit_return_type "control::journal_ctl"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return *journal;
    };
"
	
	
	
	
      end

      operation 1054377 "is_open"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return NULL != journal.get ();
    };
"
	
	
	
	
	comment "Indicate if there is an open document"
      end

      operation 1054505 "is_valid"
	const private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Test invariant conditions

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Test invariant conditions"
      end

      operation 1054633 "no_stop_exit"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//This function attempts to exit the application.  This function will test to see if there are any unsaved changes.  If there are unsaved changes and then a_unstoppable is true a back-up version of the journal will be saved otherwise the user will be queried for the save action.  This method should never return.

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "This function attempts to exit the application.  This function will test to see if there are any unsaved changes.  If there are unsaved changes and then a_unstoppable is true a back-up version of the journal will be saved otherwise the user will be queried for the save action.  This method should never return."
      end

      operation 1054761 "open_document"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//[UI callback] Open and display an existing journal document.  This will close a document if one is open.  The user is asked several questions which can lead to cancelling the process, so there may not be an open document at the end.
//
//The user requests a journal stored in a permanent storage be loaded into the current application.  This version looks at the case when only a single journal can be opened at a time. If is_open () returns true then \"Close Journal\" use-case is called before ask_url().

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "[UI callback] Open and display an existing journal document.  This will close a document if one is open.  The user is asked several questions which can lead to cancelling the process, so there may not be an open document at the end.

The user requests a journal stored in a permanent storage be loaded into the current application.  This version looks at the case when only a single journal can be opened at a time. If is_open () returns true then \"Close Journal\" use-case is called before ask_url()."
      end

      operation 1054889 "open_new_document"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//[UI callback] Open and display an newly created journal document. This will close a document if one is open.  The user is asked several questions if a document is closed, so the document may be the existing document.
//
//\\post is_open ()

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "[UI callback] Open and display an newly created journal document. This will close a document if one is open.  The user is asked several questions if a document is closed, so the document may be the existing document.

\\post is_open ()"
      end

      operation 1055017 "journal_vw"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "//Main constructor.  

${comment}${inline}${class}::${name}${(}${)}
: base_view (JOURNAL_VIEW_KEY, UI_SOURCE_URL)
, journal ()
, page_view (*this)
, open_document_signal ()
, dirty_document_signal ()
${throw}{
${body}}
"
	
	
	
	
	comment "Main constructor.  "
      end

      operation 1055145 "~journal_vw"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 1055273 "journal_vw"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 342185 // journal_vw
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment "Not defined, added to stop copying."
      end

      operation 1055401 "operator ="
	private return_type class_ref 342185 // journal_vw
	nparams 1
	  param in name "source" type class_ref 342185 // journal_vw
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Not defined, added to stop copying."
      end

      operation 1055529 "save_as_document"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//[UI callback] Save the journal document.  This may fail to save the document.

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "[UI callback] Save the journal document.  This may fail to save the document."
      end

      operation 1055657 "save_document"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//[UI callback] Save the journal document.  This may fail.

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "[UI callback] Save the journal document.  This may fail."
      end

      operation 1055785 "save_sensitivity_test"
	private explicit_return_type "void"
	nparams 2
	  param inout name "a_item" type class_ref 339881 // window_t
	  param in name "a_is_dirty" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//[impl] Used to set the senstivity of a \"save\" widget to indicate when a document (is_open and) is_dirty and has_filename.
//
//\\pre is_open ()
//\\pre a_widget /= nul

${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "[impl] Used to set the senstivity of a \"save\" widget to indicate when a document (is_open and) is_dirty and has_filename.

\\pre is_open ()
\\pre a_widget /= nul"
      end

      classrelation 273449 // JOURNAL_VIEW_KEY (<directional composition>)
	relation 267433 *-->
	  a role_name "JOURNAL_VIEW_KEY" init_value "(\"journal_window\")" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 273449 // JOURNAL_VIEW_KEY (<directional composition>)
	  b parent class_ref 340137 // string_t
      end

      classrelation 273577 // UI_SOURCE_URL (<directional composition>)
	relation 267561 *-->
	  a role_name "UI_SOURCE_URL" init_value "(\"expt.glade\")" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 273577 // UI_SOURCE_URL (<directional composition>)
	  b parent class_ref 340137 // string_t
      end

      attribute 235433 "backup_suffix"
	class_attribute private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1055913 "get_backup_suffix"
	class_operation cpp_inline public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 1056041 "set_backup_suffix"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 342441 "page_vw"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Objects of this class manage a view of the current page."
      classrelation 273705 // <generalisation>
	relation 267689 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 273705 // <generalisation>
	  b parent class_ref 340393 // itemlist_vw
      end

      class 342569 "base_t"
	visibility package stereotype "typedef" base_type class_ref 340393 // itemlist_vw
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 273833 // <realization>
	  relation 267817 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 273833 // <realization>
	    b parent class_ref 340393 // itemlist_vw
	end
      end

      class 342697 "columns"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 273961 // <generalisation>
	  relation 267945 ---|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 273961 // <generalisation>
	    b parent class_ref 340777 // base_columns
	end

	class 342825 "base_column_t"
	  visibility package stereotype "typedef" base_type class_ref 340777 // base_columns
	  cpp_decl "${comment}typedef ${type} ${name};
"
	  java_decl ""
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	  classrelation 274089 // <realization>
	    relation 268073 -_-|>
	      a public
		cpp default "${type}"
		classrelation_ref 274089 // <realization>
	      b parent class_ref 340777 // base_columns
	  end
	end

	attribute 235561 "m_pageref"
	  public explicit_type "Gtk::TreeModelColumn<Glib::ustring>"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1056169 "columns"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : base_column_t ()
        , m_pageref ()
        {
          add (m_pageref);
        };
"
	  
	  
	  
	  
	end

	operation 1056297 "~columns"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	  
	  
	  
	  
	end

	operation 1056425 "set_columns"
	  cpp_virtual public explicit_return_type "void"
	  nparams 1
	    param in name "a_tree_view" type class_ref 341033 // list_window_t
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "//Append columns to the tree view.

${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	  
	  
	  
	  
	  comment "Append columns to the tree view."
	end
      end

      classrelation 274217 // entry_view (<directional composition>)
	relation 268201 *-->
	  a role_name "entry_view" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 274217 // entry_view (<directional composition>)
	  b parent class_ref 340265 // entry_vw
      end

      classrelation 274345 // info_view (<directional composition>)
	relation 268329 *-->
	  a role_name "info_view" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 274345 // info_view (<directional composition>)
	  b parent class_ref 341289 // info_vw
      end

      attribute 235689 "enddate_view"
	private explicit_type "Gtk::Entry"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 235817 "finalise_button"
	private explicit_type "Gtk::Button"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 235945 "pageref_view"
	private explicit_type "Gtk::Entry"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 236073 "startdate_view"
	private explicit_type "Gtk::Entry"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 236201 "title_view"
	private explicit_type "Gtk::Entry"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1056553 "create_list_control"
	const cpp_virtual protected explicit_return_type "std::auto_ptr< control::item_ctl >"
	nparams 1
	  param in name "a_node" explicit_type "purpletree::dom::element"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Create a new list control.

${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Create a new list control."
      end

      operation 1056681 "finalise_page"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//[UI Callback] Called when the \"Finalise\" button is clicked.

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "[UI Callback] Called when the \"Finalise\" button is clicked."
      end

      operation 1056809 "is_changed"
	const cpp_virtual public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//This view is changed if it or it's children are changed

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "This view is changed if it or it's children are changed"
      end

      operation 1056937 "is_valid"
	const private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Test invariant conditions

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Test invariant conditions"
      end

      operation 1057065 "operator ="
	private return_type class_ref 342441 // page_vw
	nparams 1
	  param in name "source" type class_ref 342441 // page_vw
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Not defined, added to stop copying."
      end

      operation 1057193 "page_vw"
	public explicit_return_type ""
	nparams 1
	  param in name "a_journal_view" type class_ref 339753 // base_view
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)} 
: itemlist_vw (PAGE_VIEW_KEY, PAGELIST_VIEW_KEY, a_journal_view, new columns)
, entry_view (*this)
, info_view (*this)
, enddate_view (dynamic_cast <Gtk::Entry*> (ui_traits::find_representation (ENDDATE_VIEW_KEY, get_rep ())))
, finalise_button (dynamic_cast <Gtk::Button*> (ui_traits::find_representation (FINALISE_BUTTON_KEY, get_rep ())))
, pageref_view (dynamic_cast <Gtk::Entry*> (ui_traits::find_representation (PAGEREF_VIEW_KEY, get_rep ())))
, startdate_view (dynamic_cast <Gtk::Entry*> (ui_traits::find_representation (STARTDATE_VIEW_KEY, get_rep ())))
, title_view (dynamic_cast <Gtk::Entry*> (ui_traits::find_representation (TITLE_VIEW_KEY, get_rep ())))
${throw}{
${body}}
"
	
	
	
	
      end

      operation 1057321 "~page_vw"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	
	
      end

      operation 1057449 "page_vw"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 342441 // page_vw
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment "Not defined, added to stop copying."
      end

      operation 1057577 "set_row"
	protected explicit_return_type "void"
	nparams 2
	  param in name "a_row" type class_ref 341161 // row_iterator_t
	  param in name "a_cursor" explicit_type "control::item_iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Set the values in a_row from the data pointed to by a_cursor.

${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Set the values in a_row from the data pointed to by a_cursor."
      end

      operation 1057705 "virt_create_item"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "a_cursor" explicit_type "control::item_iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Populate the newly created item in a_cursor with queried data.  The base function does nothing.

${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Populate the newly created item in a_cursor with queried data.  The base function does nothing."
      end

      operation 1057833 "virt_poll"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Poll the view for the changed data (Called from poll)

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Poll the view for the changed data (Called from poll)"
      end

      operation 1057961 "virt_update"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Update the display to view the current data (Creating a display if necessary)
//
//\\pre false = is_changed ().

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Update the display to view the current data (Creating a display if necessary)

\\pre false = is_changed ()."
      end

      classrelation 274473 // PAGELIST_VIEW_KEY (<directional composition>)
	relation 268457 *-->
	  a role_name "PAGELIST_VIEW_KEY" init_value "(\"page_list\")" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 274473 // PAGELIST_VIEW_KEY (<directional composition>)
	  b parent class_ref 340137 // string_t
      end

      classrelation 274601 // PAGE_VIEW_KEY (<directional composition>)
	relation 268585 *-->
	  a role_name "PAGE_VIEW_KEY" init_value "(\"page_view\")" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 274601 // PAGE_VIEW_KEY (<directional composition>)
	  b parent class_ref 340137 // string_t
      end

      classrelation 274729 // TITLE_VIEW_KEY (<directional composition>)
	relation 268713 *-->
	  a role_name "TITLE_VIEW_KEY" init_value "(\"title_entry\")" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 274729 // TITLE_VIEW_KEY (<directional composition>)
	  b parent class_ref 340137 // string_t
      end

      classrelation 274857 // PAGEREF_VIEW_KEY (<directional composition>)
	relation 268841 *-->
	  a role_name "PAGEREF_VIEW_KEY" init_value "(\"pageref_entry\")" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 274857 // PAGEREF_VIEW_KEY (<directional composition>)
	  b parent class_ref 340137 // string_t
      end

      classrelation 274985 // STARTDATE_VIEW_KEY (<directional composition>)
	relation 268969 *-->
	  a role_name "STARTDATE_VIEW_KEY" init_value "(\"startdate_entry\")" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 274985 // STARTDATE_VIEW_KEY (<directional composition>)
	  b parent class_ref 340137 // string_t
      end

      classrelation 275113 // ENDDATE_VIEW_KEY (<directional composition>)
	relation 269097 *-->
	  a role_name "ENDDATE_VIEW_KEY" init_value "(\"enddate_entry\")" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 275113 // ENDDATE_VIEW_KEY (<directional composition>)
	  b parent class_ref 340137 // string_t
      end

      classrelation 275241 // FINALISE_BUTTON_KEY (<directional composition>)
	relation 269225 *-->
	  a role_name "FINALISE_BUTTON_KEY" init_value "(\"finalise_button\")" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 275241 // FINALISE_BUTTON_KEY (<directional composition>)
	  b parent class_ref 340137 // string_t
      end
    end

    class 342953 "ui_traits"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 343081 "window_t"
	visibility package stereotype "typedef" explicit_base_type "Gtk::Widget"
	cpp_decl "${comment}typedef ${type}*  ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 343209 "const_window_t"
	visibility package stereotype "typedef" explicit_base_type "Gtk::Widget"
	cpp_decl "${comment}typedef ${type}*const  ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 343337 "string_t"
	visibility package stereotype "typedef" explicit_base_type "Glib::ustring"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 343465 "ask_info"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 275369 // message (<directional composition>)
	  relation 269353 *-->
	    a role_name "message" const_relation public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 275369 // message (<directional composition>)
	    b parent class_ref 340137 // string_t
	end

	classrelation 275497 // help_message (<directional composition>)
	  relation 269481 *-->
	    a role_name "help_message" const_relation public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 275497 // help_message (<directional composition>)
	    b parent class_ref 340137 // string_t
	end

	classrelation 275625 // yes (<directional composition>)
	  relation 269609 *-->
	    a role_name "yes" const_relation public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 275625 // yes (<directional composition>)
	    b parent class_ref 340137 // string_t
	end

	classrelation 275753 // no (<directional composition>)
	  relation 269737 *-->
	    a role_name "no" const_relation public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 275753 // no (<directional composition>)
	    b parent class_ref 340137 // string_t
	end

	classrelation 275881 // cancel (<directional composition>)
	  relation 269865 *-->
	    a role_name "cancel" const_relation public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 275881 // cancel (<directional composition>)
	    b parent class_ref 340137 // string_t
	end

	operation 1058089 "ask_info"
	  cpp_inline public explicit_return_type ""
	  nparams 5
	    param in name "a_message" type class_ref 340137 // string_t
	    param in name "a_help" type class_ref 340137 // string_t
	      defaultvalue "std::string()"
	    param in name "a_yes" type class_ref 340137 // string_t
	      defaultvalue "std::string()"
	    param in name "a_no" type class_ref 340137 // string_t
	      defaultvalue "std::string()"
	    param in name "a_cancel" type class_ref 340137 // string_t
	      defaultvalue "std::string()"
	  cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, const ${t4} & ${p4}${)}${volatile}${throw} : message(a_message)
        , help_message(a_help)
        , yes(a_yes)
        , no(a_no)
        , cancel(a_cancel)
        {};
"
	  
	  
	  
	  
	end
      end

      operation 1058217 "ask_query"
	class_operation public explicit_return_type "uint"
	nparams 2
	  param in name "a_message" type class_ref 343465 // ask_info
	  param inout name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Ask the user for a piece of information with initial value given by and returned in a_value.  If you do not specify (or specify an empty string) Yes/No/Cancel buttons titles then the corresponding button is not diplayed. If not titles are set then a default \"Ok\" button will be used (which returns YES).
//
//Note that the NO value is returned if the dialog is closed by the window manager.
//\\post result == YES, NO or CANCEL

${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Ask the user for a piece of information with initial value given by and returned in a_value.  If you do not specify (or specify an empty string) Yes/No/Cancel buttons titles then the corresponding button is not diplayed. If not titles are set then a default \"Ok\" button will be used (which returns YES).

Note that the NO value is returned if the dialog is closed by the window manager.
\\post result == YES, NO or CANCEL"
      end

      operation 1058345 "ask_url"
	class_operation public explicit_return_type "uint"
	nparams 3
	  param in name "a_message" type class_ref 343465 // ask_info
	  param inout name "a_filename" explicit_type "string"
	  param in name "a_is_read" explicit_type "bool"
	    defaultvalue "false"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Ask the user for a filename or URL.  Use a_message to inform the user the reason for request.  If a_message is an empty string then a default message is displayed.
//
//The a_filename is used to obtain an initial filename.  It is used as the starting location presented to the user.  If it is empty then the current working directory is displayed.  When a filename is selected a_filename set to the value.
//
//TODO: ensure a_filename is a valid path.  If a_filename is an empty string, use the current working directory.
//
//If Yes or Cancel button titles are empty strings then default buttons will be used.  If No button title is empty then no corresponding button will be displayed. 
//
//\\param a_is_read  Whether the file will be read or writen to.  When a_is_read is true then the document must already exist.  When false then a non-existant document may be chosen. (Default is false)
//\\post result == YES, NO or CANCEL

${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Ask the user for a filename or URL.  Use a_message to inform the user the reason for request.  If a_message is an empty string then a default message is displayed.

The a_filename is used to obtain an initial filename.  It is used as the starting location presented to the user.  If it is empty then the current working directory is displayed.  When a filename is selected a_filename set to the value.

TODO: ensure a_filename is a valid path.  If a_filename is an empty string, use the current working directory.

If Yes or Cancel button titles are empty strings then default buttons will be used.  If No button title is empty then no corresponding button will be displayed. 

\\param a_is_read  Whether the file will be read or writen to.  When a_is_read is true then the document must already exist.  When false then a non-existant document may be chosen. (Default is false)
\\post result == YES, NO or CANCEL"
      end

      operation 1058473 "ask_user"
	class_operation public explicit_return_type "uint"
	nparams 1
	  param in name "a_message" type class_ref 343465 // ask_info
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Ask the user a yes/no question with option to cancel.  For displaying information messages do not set the Yes/No/Cancel buttons titles then a default \"Ok\" button will be used and the return value will be relatively meaningless.
//
//Note that the NO value is returned if the dialog is closed by the window manager.
//\\post result == YES, NO or CANCEL 

${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Ask the user a yes/no question with option to cancel.  For displaying information messages do not set the Yes/No/Cancel buttons titles then a default \"Ok\" button will be used and the return value will be relatively meaningless.

Note that the NO value is returned if the dialog is closed by the window manager.
\\post result == YES, NO or CANCEL "
      end

      operation 1058601 "date_to_text"
	class_operation public return_type class_ref 340137 // string_t
	nparams 1
	  param in name "a_date" explicit_type "boost::gregorian::date"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Convert a date into a UI string.

${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Convert a date into a UI string."
      end

      operation 1058729 "find_representation"
	class_operation public return_type class_ref 339881 // window_t
	nparams 2
	  param in name "a_key" type class_ref 340137 // string_t
	  param in name "a_parent" type class_ref 340009 // const_window_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Find or create a UI object based on a_key.  The UI object will be created relative to a_parent.
//
//\\pre a_key.empty () /= true
//\\pre a_parent /= nul

${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Find or create a UI object based on a_key.  The UI object will be created relative to a_parent.

\\pre a_key.empty () /= true
\\pre a_parent /= nul"
      end

      operation 1058857 "find_representation"
	class_operation public return_type class_ref 339881 // window_t
	nparams 2
	  param in name "a_key" type class_ref 340137 // string_t
	  param in name "a_url" type class_ref 340137 // string_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Instantiate UI library and load UI from a_url.  Instantiate window located using a_key as the top-level window.  Return the window.
//
//\\pre a_key.empty () /= true amd a_url.empty ()
//
//\\post Result /= nul

${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Instantiate UI library and load UI from a_url.  Instantiate window located using a_key as the top-level window.  Return the window.

\\pre a_key.empty () /= true amd a_url.empty ()

\\post Result /= nul"
      end

      operation 1058985 "response_conv"
	class_operation private explicit_return_type "uint"
	nparams 1
	  param in name "a_response" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//This converts a Gtk::Response value into Yes/No/Cancel.
//
//\\post Result == YES or NO or CANCEL

${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "This converts a Gtk::Response value into Yes/No/Cancel.

\\post Result == YES or NO or CANCEL"
      end

      operation 1059113 "text_to_date"
	class_operation public explicit_return_type "boost::gregorian::date"
	nparams 1
	  param in name "a_str_date" type class_ref 340137 // string_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Convert a UI string into a date.

${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Convert a UI string into a date."
      end

      attribute 236329 "NO"
	class_attribute const_attribute public explicit_type "uint"
	init_value "(1)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 236457 "CANCEL"
	class_attribute const_attribute public explicit_type "uint"
	init_value "(4)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 236585 "YES"
	class_attribute const_attribute public explicit_type "uint"
	init_value "(2)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 343593 "ui_traits_test"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class consists of various test sequences on the ui_traits class."
      operation 1059241 "test_dates"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//This function tests if a date can be read to and from a UI string to return the same value.

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "This function tests if a date can be read to and from a UI string to return the same value."
      end

      operation 1059369 "test_ask_query"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Test the \"ask_query\" method

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Test the \"ask_query\" method"
      end

      operation 1059497 "test_ask_url"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Test the \"ask_user\" method

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Test the \"ask_user\" method"
      end

      operation 1059625 "test_ask_user"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Test the \"ask_user\" method

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Test the \"ask_user\" method"
      end

      operation 1059753 "main"
	public explicit_return_type "int"
	nparams 2
	  param in name "argc" explicit_type "int"
	  param inout name "argv" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} * * ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * * ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 1059881 "show_ask_info"
	public explicit_return_type "void"
	nparams 2
	  param inout name "a_os" explicit_type "std::ostream"
	  param in name "a_info" type class_ref 343465 // ask_info
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Pretty-print the content of a_info on a_os

${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Pretty-print the content of a_info on a_os"
      end
    end
  end

  deploymentview 133033 "view"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default
    artifact 149545 "base_view"
      stereotype "source"
      cpp_h "#ifndef ${NAME}_HPP
#define ${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 339753 // base_view
      end
    end

    artifact 149673 "entry_vw"
      stereotype "source"
      cpp_h "#ifndef ${NAME}_HPP
#define ${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 340265 // entry_vw
      end
    end

    artifact 149801 "info_vw"
      stereotype "source"
      cpp_h "#ifndef ${NAME}_HPP
#define ${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 341289 // info_vw
      end
    end

    artifact 149929 "itemlist_vw"
      stereotype "source"
      cpp_h "#ifndef ${NAME}_HPP
#define ${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 340393 // itemlist_vw
      end
    end

    artifact 150057 "journal_vw"
      stereotype "source"
      cpp_h "#ifndef ${NAME}_HPP
#define ${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 342185 // journal_vw
      end
    end

    artifact 150185 "page_vw"
      stereotype "source"
      cpp_h "#ifndef ${NAME}_HPP
#define ${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 342441 // page_vw
      end
    end

    artifact 150313 "ui_traits"
      stereotype "source"
      cpp_h "#ifndef ${NAME}_HPP
#define ${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 342953 // ui_traits
      end
    end

    artifact 150441 "ui_traits_test"
      stereotype "source"
      cpp_h "#ifndef ${NAME}_HPP
#define ${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 343593 // ui_traits_test
      end
    end
  end

  classview 131625 "control"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_infonote default shadow default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default
    class 338473 "entry_ctl"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A control object for the entry on a journal page.  This control maintains the current date, optional subjective observation, a decision/action, a cross-reference and/or an objective result present in an entry.

Modelled concepts controlled:
* entry_date
* observation
* action
* sequence (cross-reference, may be used to link objective result)

Future work:
* Only the last entry should be editable.


Model XML

<entry date=\"...\" sequence=\"...\"?><observation/>?<action/>?</entry>"
      classrelation 268841 // <generalisation>
	relation 262825 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 268841 // <generalisation>
	  b parent class_ref 338601 // item_ctl
      end

      class 338729 "base_t"
	visibility package stereotype "typedef" base_type class_ref 338601 // item_ctl
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 268969 // <realization>
	  relation 262953 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 268969 // <realization>
	    b parent class_ref 338601 // item_ctl
	end
      end

      operation 1031337 "create_item"
	public return_type class_ref 338857 // item_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Create a new DOM node, add it to the document and return an iterator to it.
//
//\\post Result != end () and not (*Result.is_null ())

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Create a new DOM node, add it to the document and return an iterator to it.

\\post Result != end () and not (*Result.is_null ())"
      end

      operation 1031465 "entry_ctl"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "a_parent" explicit_type "purpletree::dom::element"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} : item_ctl (a_parent)
    {
      is_valid ();
    };
"
	
	
	
	
	comment "Construct a new object to control \"entry\" node children of a_parent.

\\pre not a_parent.is_null ()"
      end

      operation 1031593 "~entry_ctl"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	
	
	comment "Destructor, this derived class has no special actions here."
      end

      operation 1031721 "entry_ctl"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 338473 // entry_ctl
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment "Not defined, added to stop copying."
      end

      operation 1031849 "get_action"
	class_operation public explicit_return_type "string"
	nparams 1
	  param in name "a_cursor" type class_ref 338857 // item_iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Get the text associated with the action concept in the model. This string may be empty.
//
//\\pre is_valid_iterator(a_cursor) and (*a_cursor).has_attribute (DATE_ATTR_NAME)

${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Get the text associated with the action concept in the model. This string may be empty.

\\pre is_valid_iterator(a_cursor) and (*a_cursor).has_attribute (DATE_ATTR_NAME)"
      end

      operation 1031977 "get_entry_date"
	class_operation public explicit_return_type "boost::gregorian::date"
	nparams 1
	  param in name "a_cursor" type class_ref 338857 // item_iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Get the date associated with the current entry model.
//
//\\pre is_valid_iterator(a_cursor) [implies (*a_cursor).has_attribute (DATE_ATTR_NAME)]
//\\post not Result.is_not_a_date

${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Get the date associated with the current entry model.

\\pre is_valid_iterator(a_cursor) [implies (*a_cursor).has_attribute (DATE_ATTR_NAME)]
\\post not Result.is_not_a_date"
      end

      operation 1032105 "get_node_name"
	const cpp_inline public explicit_return_type "purpletree::dom::dom_string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      is_valid ();
      ENSURE (not ENTRY_NODE_NAME.empty (), \"Empty node name string.\");
      return ENTRY_NODE_NAME;
    };
"
	
	
	
	
	comment "Return the DOM node name for the represented elements.

\\post not Result.empty ()"
      end

      operation 1032233 "get_observation"
	class_operation public explicit_return_type "string"
	nparams 1
	  param in name "a_cursor" type class_ref 338857 // item_iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Get the observation in the current model.  Result string may be empty.
//
//\\pre is_valid_iterator(a_cursor) and (*a_cursor).has_attribute (DATE_ATTR_NAME)

${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Get the observation in the current model.  Result string may be empty.

\\pre is_valid_iterator(a_cursor) and (*a_cursor).has_attribute (DATE_ATTR_NAME)"
      end

      operation 1032361 "get_sequence"
	class_operation cpp_inline public explicit_return_type "string"
	nparams 1
	  param in name "a_cursor" type class_ref 338857 // item_iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} {
      require_valid_iterator (a_cursor);
      return purpletree::dom::get_utf8 ((*a_cursor).get_attribute (SEQUENCE_ATTR_NAME));
    };
"
	
	
	
	
	comment "Get the identifier that can be used to link log entry to some external item, for example the filename of a stored spectrum. Result may be an empty string.

\\pre is_valid_iterator(a_cursor) and (*a_cursor).has_attribute (DATE_ATTR_NAME)"
      end

      operation 1032489 "is_valid"
	const protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Class local test of invariants.

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Class local test of invariants."
      end

      operation 1032617 "is_valid_iterator"
	class_operation public explicit_return_type "bool"
	nparams 1
	  param in name "a_cursor" type class_ref 338857 // item_iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Check the iterator has a valid DOM Element with name == get_node_name ()
//
//\\post implies not (*a_cursor).is_null () and (*a_cursor).node_name () == get_node_name ()

${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Check the iterator has a valid DOM Element with name == get_node_name ()

\\post implies not (*a_cursor).is_null () and (*a_cursor).node_name () == get_node_name ()"
      end

      operation 1032745 "operator ="
	private return_type class_ref 338473 // entry_ctl
	nparams 1
	  param in name "source" type class_ref 338473 // entry_ctl
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Not defined, added to stop copying."
      end

      operation 1032873 "require_valid_iterator"
	class_operation cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "a_cursor" type class_ref 338857 // item_iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} {
      REQUIRE (is_valid_iterator (a_cursor), \"Require iterator to 'entry' type node\");
      REQUIRE (not (*a_cursor).get_attribute (DATE_ATTR_NAME).empty ()
    	 , \"Invalid 'entry' node, 'date' attribute is empty.\");
    };
"
	
	
	
	
	comment "Check the iterator is valid for page_ctl

\\post (*a_cursor).node_name == ENTRY_NODE_NAME
\\post  (*a_cursor).has_attribute (DATE_ATTR_NAME)
\\post  (*a_cursor).has_child_with_name (ACTION_NODE_NAME)"
      end

      operation 1033001 "set_action"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "a_cursor" type class_ref 338857 // item_iterator
	  param in name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Attempt to set the action associated with current entry model.  This is always successful.  The given string always replaces the current datum in the model.
//
//\\pre is_valid_iterator(a_cursor) and (*a_cursor).has_attribute (DATE_ATTR_NAME)
//\\post a_value = get_action(a_cursor)

${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Attempt to set the action associated with current entry model.  This is always successful.  The given string always replaces the current datum in the model.

\\pre is_valid_iterator(a_cursor) and (*a_cursor).has_attribute (DATE_ATTR_NAME)
\\post a_value = get_action(a_cursor)"
      end

      operation 1033129 "set_observation"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "a_cursor" type class_ref 338857 // item_iterator
	  param in name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Set the value of the observation in the modelled entry.  This is always successful. The given text simply replaces the current datum.
//
//\\pre is_valid_iterator(a_cursor) and (*a_cursor).has_attribute (DATE_ATTR_NAME)
//\\post a_value = get_observeration (a_cursor)

${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Set the value of the observation in the modelled entry.  This is always successful. The given text simply replaces the current datum.

\\pre is_valid_iterator(a_cursor) and (*a_cursor).has_attribute (DATE_ATTR_NAME)
\\post a_value = get_observeration (a_cursor)"
      end

      operation 1033257 "set_sequence"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "a_cursor" type class_ref 338857 // item_iterator
	  param in name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Attempt to set the sequence string for the modelled entry.  This is always successful.  The given string replaces any existing datum.
//
//** This should be a valid cross-reference value.  This is not tested in version 1.0 **
//
//\\pre is_valid_iterator(a_cursor) and (*a_cursor).has_attribute (DATE_ATTR_NAME)
//\\post a_value = get_sequence (a_cursor)

${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Attempt to set the sequence string for the modelled entry.  This is always successful.  The given string replaces any existing datum.

** This should be a valid cross-reference value.  This is not tested in version 1.0 **

\\pre is_valid_iterator(a_cursor) and (*a_cursor).has_attribute (DATE_ATTR_NAME)
\\post a_value = get_sequence (a_cursor)"
      end

      attribute 229673 "ACTION_NODE_NAME"
	class_attribute const_attribute public explicit_type "purpletree::dom::dom_string"
	init_value "(purpletree::dom::set_utf8(\"action\"))"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 229801 "DATE_ATTR_NAME"
	class_attribute const_attribute public explicit_type "purpletree::dom::dom_string"
	init_value "(purpletree::dom::set_utf8(\"date\"))"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 229929 "ENTRY_NODE_NAME"
	class_attribute const_attribute public explicit_type "purpletree::dom::dom_string"
	init_value "(purpletree::dom::set_utf8(\"entry\"))"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 230057 "PARENT_NODE_NAME"
	class_attribute const_attribute public explicit_type "purpletree::dom::dom_string"
	init_value "(page_ctl::LOG_NODE_NAME)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 230185 "OBSERVATION_NODE_NAME"
	class_attribute const_attribute public explicit_type "purpletree::dom::dom_string"
	init_value "(purpletree::dom::set_utf8(\"observation\"))"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 230313 "SEQUENCE_ATTR_NAME"
	class_attribute const_attribute public explicit_type "purpletree::dom::dom_string"
	init_value "(purpletree::dom::set_utf8(\"sequence\"))"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 338601 "item_ctl"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "In several situations you have a list of DOM element objects that you want to be able scan and to manipulate individually.  This type has an associated list view to display the objects as a list and maintains a cursor to the currently selected item. Derived classes can use this cursor to display an item in detail.

The list is publicly available through an STL like iterator interface.

The type is abstract and requires derived classes to provide the following:
* create_item - A method to create a new DOM element.
* get_node_name - Return a DOM string of the name of the DOM element.
* on_change - Signal method called when the cursor is changed.
* The UI object to be managed by the item list view."
      attribute 230825 "parent_node"
	private explicit_type "purpletree::dom::element"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 269353 // m_end (<directional composition>)
	relation 263337 *-->
	  a role_name "m_end" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 269353 // m_end (<directional composition>)
	  b parent class_ref 338857 // item_iterator
      end

      operation 1035049 "begin"
	const public return_type class_ref 338857 // item_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Get an interator to the first item in the list.
//
//\\post Result == end() or (*Result).node_name == get_node_name

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Get an interator to the first item in the list.

\\post Result == end() or (*Result).node_name == get_node_name"
      end

      operation 1035177 "create_item"
	abstract cpp_virtual public return_type class_ref 338857 // item_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "Create a new DOM node, add it to the parent element and return an iterator to it.  Derived classes must create nodes with node_name () == get_node_name () and ensure that the created element is a valid twiglet in the DTD/Schema

\\post Result != end () and not (*Result).is_null () and (*Result).node_name == get_node_name"
      end

      operation 1035305 "empty"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      is_valid ();
      return begin () == end ();
    };
"
	
	
	
	
	comment "Are there any items?"
      end

      operation 1035433 "end"
	const cpp_inline public return_type class_ref 338857 // item_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      is_valid ();
      return m_end;
    };
"
	
	
	
	
	comment "Get an iterator to one-past-end of list of items."
      end

      operation 1035561 "get_node_name"
	abstract const cpp_virtual public explicit_return_type "purpletree::dom::dom_string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "The DOM node name for the represented elements.

\\post not Result.empty ()"
      end

      operation 1035689 "get_parent_node"
	const cpp_inline public explicit_return_type "purpletree::dom::element"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      is_valid ();
      return parent_node;
    };
"
	
	
	
	
	comment "The DOM element that is parent to all the items.

\\post not Result.is_null()"
      end

      operation 1035817 "get_parent_node"
	cpp_inline public explicit_return_type "purpletree::dom::element"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
  is_valid ();
  return parent_node;
};
"
	
	
	
	
	comment "The DOM element that is parent to all the items.

\\post not Result.is_null()"
      end

      operation 1035945 "is_valid"
	const cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      INVARIANT (not parent_node.is_null (), \"List control must have a non-null parent element.\");
    };
"
	
	
	
	
	comment "Test type invariants"
      end

      operation 1036073 "item_ctl"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "a_parent" explicit_type "purpletree::dom::element"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} : parent_node (a_parent)
    , m_end (*this)
    {
      REQUIRE (not a_parent.is_null (), \"Cannot create list control with null DOM element.\");
      REQUIRE (not a_parent.owner_document ().is_null (), \"Cannot create list control with null DOM document.\");
      is_valid ();
    };
"
	
	
	
	
	comment "Construct a new object that manages a set of children of a_parent."
      end

      operation 1036201 "item_ctl"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 338601 // item_ctl
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment "Not defined, added to stop copying."
      end

      operation 1036329 "~item_ctl"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	
	
	comment "Destructor, this class has no special actions here."
      end

      operation 1036457 "operator ="
	private return_type class_ref 338601 // item_ctl
	nparams 1
	  param in name "source" type class_ref 338601 // item_ctl
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Not defined, added to stop copying."
      end

      operation 1036585 "size"
	const cpp_inline public explicit_return_type "uint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      // LOCAL
      unsigned int Result(0);
      is_valid ();
      // DO
      for (item_iterator cursor(begin()); cursor != end(); ++cursor, ++Result) {} // Do nothing in loop
      return Result;
    };
"
	
	
	
	
	comment "The number of items in the list.  This iterates over the list so has time O(N)."
      end
    end

    class 338857 "item_iterator"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A type for iterating over a list of items."
      classrelation 269481 // parent (<unidirectional association>)
	relation 263465 --->
	  a role_name "parent" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 269481 // parent (<unidirectional association>)
	  b parent class_ref 338601 // item_ctl
      end

      attribute 230953 "cursor"
	private explicit_type "purpletree::dom::element"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1036713 "get_parent"
	const cpp_inline public return_type class_ref 338601 // item_ctl
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * const ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return parent;
    };
"
	
	
	
	
	comment "Get the owning list control object."
      end

      operation 1036841 "is_null"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return NULL == parent or cursor.is_null ();
    };
"
	
	
	
	
	comment "Test if the element the iterator points to is_null.  Note that for all lists: end().is_null ()"
      end

      operation 1036969 "item_iterator"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${)}${volatile}${throw} : parent (NULL)
    , cursor ()
    {
      ENSURE (is_null (), \"No-argument constructor should produce a null node.\");
    };
"
	
	
	
	
	comment "Empty constructor for creating iterators that will be assigned a new value (This should be avoided.)

\\post is_null()"
      end

      operation 1037097 "item_iterator"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "a_parent" type class_ref 338601 // item_ctl
	  param in name "a_start" explicit_type "purpletree::dom::element"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw} : parent (&a_parent)
    , cursor (a_start) 
    {
      REQUIRE (not a_start.is_null (), \"Require a non-null element to create a valid iterator.\");
      ENSURE (not is_null (), \"Main constructor should create a non-null iterator.\");
    };
"
	
	
	
	
	comment "Main constructor used to create a useful iterator.

\\pre not a_start.is_null()
\\post not is_null ()"
      end

      operation 1037225 "item_iterator"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "a_parent" type class_ref 338601 // item_ctl
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} : parent (&a_parent)
    , cursor ()
    {
      ENSURE (is_null (), \"One argument constructor should create a null iterator.\");
    };
"
	
	
	
	
	comment "Constructor for creating list end() iterators.

\\post is_null ()"
      end

      operation 1037353 "~item_iterator"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	
	
      end

      operation 1037481 "item_iterator"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 338857 // item_iterator
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} : parent (source.parent)
    , cursor (source.cursor)
    {
      ENSURE (source == *this, \"Copied operator should equal original.\");
    };
"
	
	
	
	
	comment "Copy constructor.

\\post *this == source"
      end

      operation 1037609 "operator *"
	cpp_inline public explicit_return_type "purpletree::dom::element"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return cursor; };
"
	
	
	
	
	comment "Return the DOM element pointed to by this iterator.  Result may be null."
      end

      operation 1037737 "operator *"
	const cpp_inline public explicit_return_type "purpletree::dom::element"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return cursor; };
"
	
	
	
	
	comment "Return the DOM element pointed to by this iterator.  Result may be null. (const version)"
      end

      operation 1037865 "operator ++"
	public return_type class_ref 338857 // item_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Increment the iterator.

${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Increment the iterator."
      end

      operation 1037993 "operator bool"
	const cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return not is_null ();
    };
"
	
	
	
	
	comment "Convert to boolean.

\\post Result == not is_null()"
      end

      operation 1038121 "operator ="
	cpp_inline public return_type class_ref 338857 // item_iterator
	nparams 1
	  param in name "source" type class_ref 338857 // item_iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} {
      parent = source.parent;
      cursor = source.cursor;
      ENSURE (source == *this, \"Copied operator should equal original.\");
      return *this;
    };
"
	
	
	
	
	comment "Assignment operator.

\\post *this == source"
      end

      operation 1038249 "is_equal"
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "a_other" type class_ref 338857 // item_iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} { return (parent == a_other.parent) and ((cursor.is_null () and a_other.cursor.is_null ()) or cursor.is_equal (a_other.cursor)); };
"
	
	
	
	
	comment "Compare two iterators for equality.
\\post true implies both have the same parent and either both are null or have the same cursor element."
      end

      operation 1038377 "operator =="
	friend cpp_inline public explicit_return_type "bool"
	nparams 2
	  param in name "a_lhs" type class_ref 338857 // item_iterator
	  param in name "a_rhs" type class_ref 338857 // item_iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract} { return a_lhs.is_equal (a_rhs); };
"
	
	
	
	
      end

      operation 1038505 "operator !="
	friend cpp_inline public explicit_return_type "bool"
	nparams 2
	  param in name "a_lhs" type class_ref 338857 // item_iterator
	  param in name "a_rhs" type class_ref 338857 // item_iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract} { return not a_lhs.is_equal (a_rhs); };
"
	
	
	
	
      end
    end

    class 338985 "information_ctl"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A map of name/value pairs that categorise the given current object.

<reference>(<info name=\"...\">...value...</info>)*</reference>"
      classrelation 269097 // <generalisation>
	relation 263081 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 269097 // <generalisation>
	  b parent class_ref 338601 // item_ctl
      end

      class 339113 "base_t"
	visibility package stereotype "typedef" base_type class_ref 338601 // item_ctl
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 269225 // <realization>
	  relation 263209 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 269225 // <realization>
	    b parent class_ref 338601 // item_ctl
	end
      end

      operation 1033385 "create_item"
	public return_type class_ref 338857 // item_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Create a new DOM node, add it to the document and return an iterator to it.
//
//\\post Result != end () and not (*Result.is_null ())

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Create a new DOM node, add it to the document and return an iterator to it.

\\post Result != end () and not (*Result.is_null ())"
      end

      operation 1033513 "get_node_name"
	const cpp_inline public explicit_return_type "purpletree::dom::dom_string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      is_valid ();
      ENSURE (not INFORMATION_NODE_NAME.empty (), \"Node name of 'information' elements cannot be empty.\");
      return INFORMATION_NODE_NAME;
    };
"
	
	
	
	
	comment "The DOM node name for the represented elements.

\\post not Result.empty ()"
      end

      operation 1033641 "get_name"
	class_operation cpp_inline public explicit_return_type "string"
	nparams 1
	  param in name "a_cursor" type class_ref 338857 // item_iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} {
      require_valid_iterator (a_cursor);
      return purpletree::dom::get_utf8 ((*a_cursor).get_attribute (NAME_ATTR_NAME));
    };
"
	
	
	
	
	comment "Get the \"name\" attribute of the \"information\" node.

\\pre is_valid_iterator(a_cursor) 
\\post Result.empty () implies get_value (a_cursor).empty ()"
      end

      operation 1033769 "get_value"
	class_operation public explicit_return_type "string"
	nparams 1
	  param in name "a_cursor" type class_ref 338857 // item_iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Get the text from the \"information\" node as the \"value\" of the information. Result may be an empty string.
//
//\\pre is_valid_iterator(a_cursor) 

${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Get the text from the \"information\" node as the \"value\" of the information. Result may be an empty string.

\\pre is_valid_iterator(a_cursor) "
      end

      operation 1033897 "information_ctl"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "a_parent" explicit_type "purpletree::dom::element"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} : item_ctl (a_parent)
    {
      is_valid ();
    };
"
	
	
	
	
	comment "Public constructor.  Construct a new object to control \"information\" node children of a_parent.

\\pre not a_parent.is_null ()"
      end

      operation 1034025 "information_ctl"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 338985 // information_ctl
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment "Not defined, added to stop copying."
      end

      operation 1034153 "~information_ctl"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	
	
	comment "Destructor, this derived class has no special actions here."
      end

      operation 1034281 "is_valid"
	const protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Class local test of invariants.

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Class local test of invariants."
      end

      operation 1034409 "is_valid_iterator"
	class_operation public explicit_return_type "bool"
	nparams 1
	  param in name "a_cursor" type class_ref 338857 // item_iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Check the iterator is valid for page_ctl

${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Check the iterator is valid for page_ctl"
      end

      operation 1034537 "operator ="
	private return_type class_ref 338985 // information_ctl
	nparams 1
	  param in name "source" type class_ref 338985 // information_ctl
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Not defined, added to stop copying."
      end

      operation 1034665 "require_valid_iterator"
	class_operation private explicit_return_type "void"
	nparams 1
	  param in name "a_cursor" type class_ref 338857 // item_iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Check the iterator is not null and contains a valid \"information\" element.  A valid \"information\" element requires a non-empty \"name\" attribute before it can contain a value.

${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Check the iterator is not null and contains a valid \"information\" element.  A valid \"information\" element requires a non-empty \"name\" attribute before it can contain a value."
      end

      operation 1034793 "set_name"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "a_cursor" type class_ref 338857 // item_iterator
	  param in name "a_string" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Set the \"name\" attribute of the \"information\" node.
//
//\\pre not a_string.empty()
//\\pre is_valid_iterator(a_cursor)
//\\pre get_name(a_cursor).empty () implies get_value(a_cursor).empty().

${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Set the \"name\" attribute of the \"information\" node.

\\pre not a_string.empty()
\\pre is_valid_iterator(a_cursor)
\\pre get_name(a_cursor).empty () implies get_value(a_cursor).empty()."
      end

      operation 1034921 "set_value"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "a_cursor" type class_ref 338857 // item_iterator
	  param in name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Set the content of a node as the \"value\" of the \"information\" node.
//
//\\pre a_string.empty() or not get_name(a_cursor).empty ()
//\\pre is_valid_iterator(a_cursor)
//\\pre get_name(a_cursor).empty () implies get_value(a_cursor).empty().

${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Set the content of a node as the \"value\" of the \"information\" node.

\\pre a_string.empty() or not get_name(a_cursor).empty ()
\\pre is_valid_iterator(a_cursor)
\\pre get_name(a_cursor).empty () implies get_value(a_cursor).empty()."
      end

      attribute 230441 "INFORMATION_NODE_NAME"
	class_attribute const_attribute public explicit_type "purpletree::dom::dom_string"
	init_value "(purpletree::dom::set_utf8(\"info\"))"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 230569 "PARENT_NODE_NAME"
	class_attribute const_attribute public explicit_type "purpletree::dom::dom_string"
	init_value "(page_ctl::REFERENCE_NODE_NAME)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 230697 "NAME_ATTR_NAME"
	class_attribute const_attribute public explicit_type "purpletree::dom::dom_string"
	init_value "(purpletree::dom::set_utf8 (\"name\"))"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 339241 "journal_ctl"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This classes manages the application task and manages the experiment log document.  This includes log openning/closing and configuration.

Control the model of the laboratory journal (lab-book) of an experimenter.  The role of the type is to manage the textual observations for a set of experiments (an experiment is modelled by the journal_page class)

In this model of a journal, each user has a single journal.  Thus each instance of an application will only have a single journal.

Features not implemented in this release: 
* Link to experimenter.
* Link to result data."
      attribute 231081 "dirty"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 231209 "document_node"
	private explicit_type "purpletree::dom::document"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 231337 "filename"
	private explicit_type "boost::filesystem::path"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 231465 "is_dirty_signal"
	private explicit_type "sigc::signal1< void, bool >"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1038633 "create"
	class_operation public explicit_return_type "std::auto_ptr<journal_ctl>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Create a new empty journal document object.

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Create a new empty journal document object."
      end

      operation 1038761 "get_document_element"
	const cpp_inline public explicit_return_type "purpletree::dom::element"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      is_valid ();
      return document_node.document_element ();
    };
"
	
	
	
	
	comment "Get the document level DOM element (const version)"
      end

      operation 1038889 "get_document_element"
	cpp_inline public explicit_return_type "purpletree::dom::element"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      is_valid ();
      return document_node.document_element ();
    };
"
	
	
	
	
	comment "Get the document level DOM object"
      end

      operation 1039017 "get_filename"
	const cpp_inline public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return filename.string();
    };
"
	
	
	
	
	comment "Get the filename of the currently open document.

\\pre has_filename ()"
      end

      operation 1039145 "get_is_dirty_signal"
	cpp_inline public explicit_return_type "sigc::signal1< void, bool >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Get a handler for the is_dirty signal.  This signal is emitted when the document becomes dirty due to editting or clean due to saving.  There is no 'undo' operation...

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Get a handler for the is_dirty signal.  This signal is emitted when the document becomes dirty due to editting or clean due to saving.  There is no 'undo' operation..."
      end

      operation 1039273 "has_filename"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      is_valid ();
      return not filename.empty ();
    };
"
	
	
	
	
	comment "Does the current journal document have a filename?

This will only be false for new documents."
      end

      operation 1039401 "is_dirty"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      is_valid ();
      return dirty;
    };
"
	
	
	
	
	comment "Is there unsaved modifications in the model document?"
      end

      operation 1039529 "is_journal_document"
	class_operation public explicit_return_type "bool"
	nparams 1
	  param in name "a_filename" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Does the file exist and contain an XML file of the right type?
//
//\\post true implies boost::filesystem::exists (a_filename) and
//dom::implementation::open (a_filename).doctype () == JOURNAL_DOCTYPE
//
//\\note Note that our DOM library doesn't support comparison operators. The only test that we can use for comparing doctype nodes is therefore to compare the names of the base elements. This is a necessary but not sufficient condition.  More rigorous tests would be a better, such as a proper comparison operator and/or a method that allows validation of a DOM tree against a given doctype node.

${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Does the file exist and contain an XML file of the right type?

\\post true implies boost::filesystem::exists (a_filename) and
dom::implementation::open (a_filename).doctype () == JOURNAL_DOCTYPE

\\note Note that our DOM library doesn't support comparison operators. The only test that we can use for comparing doctype nodes is therefore to compare the names of the base elements. This is a necessary but not sufficient condition.  More rigorous tests would be a better, such as a proper comparison operator and/or a method that allows validation of a DOM tree against a given doctype node."
      end

      operation 1039657 "is_valid"
	const cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      INVARIANT (not document_node.is_null (), \"Journal must have a valid document.\");
    };
"
	
	
	
	
	comment "Test invariant conditions"
      end

      operation 1039785 "make_dirty"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "a_doc" explicit_type "purpletree::dom::document"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Indicate that changes have been made to the document.  This uses a map of document to journal_ctl pointers.

${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Indicate that changes have been made to the document.  This uses a map of document to journal_ctl pointers."
      end

      operation 1039913 "make_dirty"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      is_valid ();
      if (not dirty)
        {
          dirty = true;
          is_dirty_signal.emit (true);
          ENSURE (is_dirty (), \"When a document is made dirty it should be dirty.\");
        }
    };
"
	
	
	
	
	comment "Indicate that changes have been made to the document."
      end

      operation 1040041 "open"
	class_operation public explicit_return_type "std::auto_ptr<journal_ctl>"
	nparams 1
	  param in name "a_filename" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Construct a valid document object from the file/document identified by a_filename.
//
//\\pre is_journal_document (a_filename) = true

${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Construct a valid document object from the file/document identified by a_filename.

\\pre is_journal_document (a_filename) = true"
      end

      operation 1040169 "serialise"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Attempt to save the document.
//
//\\pre is_dirty ()
//\\pre has_filename ()
//\\result true if document successfully saved.
//
//\\post not is_dirty ()

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Attempt to save the document.

\\pre is_dirty ()
\\pre has_filename ()
\\result true if document successfully saved.

\\post not is_dirty ()"
      end

      operation 1040297 "set_filename"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Set the filename of the current document.

${comment}${inline}${type} ${class}::${name}${(}const ${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Set the filename of the current document."
      end

      operation 1040425 "journal_ctl"
	private explicit_return_type ""
	nparams 2
	  param inout name "a_doc_node" explicit_type "purpletree::dom::document"
	  param in name "a_filename" explicit_type "string"
	    defaultvalue "std::string()"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "//Constructor for a journal object.
//
//\\pre not a_doc_node.is_null ()

${comment}${inline}${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)} 
: dirty (false)
, document_node (a_doc_node)
, filename (a_filename, boost::filesystem::native)
, is_dirty_signal ()
${throw}{
${body}}
"
	
	
	
	
	comment "Constructor for a journal object.

\\pre not a_doc_node.is_null ()"
      end

      operation 1040553 "~journal_ctl"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 1040681 "journal_ctl"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 339241 // journal_ctl
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment "Not defined, added to stop copying."
      end

      operation 1040809 "operator ="
	private return_type class_ref 339241 // journal_ctl
	nparams 1
	  param in name "source" type class_ref 339241 // journal_ctl
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Not defined, added to stop copying."
      end

      attribute 231593 "JOURNAL_DOC_NODE_NAME"
	class_attribute const_attribute public explicit_type "purpletree::dom::dom_string"
	init_value "(purpletree::dom::set_utf8(\"journal\"))"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 231721 "JOURNAL_DOC_PUBLIC_ID"
	class_attribute const_attribute public explicit_type "purpletree::dom::dom_string"
	init_value "(purpletree::dom::set_utf8(\"http://cchem.org/journal/version 1.0/2006\"))"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 231849 "JOURNAL_DOC_SYSTEM_ID"
	class_attribute const_attribute public explicit_type "purpletree::dom::dom_string"
	init_value "(purpletree::dom::set_utf8(\"journal.dtd\"))"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 339369 "page_ctl"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Control the page of the lab journal of an experimenter. The controlled model has identifying information such as starting date, title; categorising information such as expt template; cross reference information such as pageref, code name.

Controlled Model concepts:
* title
* pageref
* starting date (use date of first page_entry)
* code name, expt template id (use add_information/get_formation)

<page start-date=\"...\" (end-date=\"...\")? pageref=\"...\"><title/><reference <??>*><log <entry>*></>"
      classrelation 269609 // <generalisation>
	relation 263593 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 269609 // <generalisation>
	  b parent class_ref 338601 // item_ctl
      end

      class 339497 "base_t"
	visibility package stereotype "typedef" base_type class_ref 338601 // item_ctl
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 269737 // <realization>
	  relation 263721 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 269737 // <realization>
	    b parent class_ref 338601 // item_ctl
	end
      end

      operation 1040937 "create_item"
	public return_type class_ref 338857 // item_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Create a new 'page' item, add it to the parent node and return an iterator to it.
//
//\\post Result != end () and not (*Result).is_null () and (*Result).node_name == get_node_name

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Create a new 'page' item, add it to the parent node and return an iterator to it.

\\post Result != end () and not (*Result).is_null () and (*Result).node_name == get_node_name"
      end

      operation 1041065 "finalise"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "a_cursor" type class_ref 338857 // item_iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Indicate the experiment on this page is complete, (sets the final_date.)
//
//\\post true = is_done()

${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Indicate the experiment on this page is complete, (sets the final_date.)

\\post true = is_done()"
      end

      operation 1041193 "find"
	const public return_type class_ref 338857 // item_iterator
	nparams 1
	  param in name "a_pageref" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Get an iterator for a page that has the given pageref.  If pageref doesn't exist then returned iterator == end()
//
//\\post Result == end () or get_pageref (Result) = a_pageref

${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Get an iterator for a page that has the given pageref.  If pageref doesn't exist then returned iterator == end()

\\post Result == end () or get_pageref (Result) = a_pageref"
      end

      operation 1041321 "generate_pageref"
	public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Generate a new pageref based on the pageref_format string.  See documentation of pageref_format for how this method generates the new pageref.
//
//\\post not Result.empty ()

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Generate a new pageref based on the pageref_format string.  See documentation of pageref_format for how this method generates the new pageref.

\\post not Result.empty ()"
      end

      operation 1041449 "get_entry_parent_node"
	class_operation public explicit_return_type "purpletree::dom::element"
	nparams 1
	  param inout name "a_cursor" type class_ref 338857 // item_iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Get the parent element of the entry list for the 'page' at a_cursor
//
//\\post not Result.is_null ()

${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Get the parent element of the entry list for the 'page' at a_cursor

\\post not Result.is_null ()"
      end

      operation 1041577 "get_final_date"
	class_operation public explicit_return_type "boost::gregorian::date"
	nparams 1
	  param in name "a_cursor" type class_ref 338857 // item_iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Get the final date associated with the current 'page'.  This requires the 'page' is finished, which is set using 'finalise()' and tested by 'is_done'.
//
//\\pre is_valid_iterator (a_cursor), test is a_cursor is a page iterator.
//\\pre is_done (a_cursor)
//\\post not Result.is_not_a_date

${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Get the final date associated with the current 'page'.  This requires the 'page' is finished, which is set using 'finalise()' and tested by 'is_done'.

\\pre is_valid_iterator (a_cursor), test is a_cursor is a page iterator.
\\pre is_done (a_cursor)
\\post not Result.is_not_a_date"
      end

      operation 1041705 "get_information_parent_node"
	class_operation public explicit_return_type "purpletree::dom::element"
	nparams 1
	  param inout name "a_cursor" type class_ref 338857 // item_iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Get the parent element of the entry list for the 'page' at a_cursor
//
//\\post not Result.is_null ()

${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Get the parent element of the entry list for the 'page' at a_cursor

\\post not Result.is_null ()"
      end

      operation 1041833 "get_node_name"
	const cpp_inline public explicit_return_type "purpletree::dom::dom_string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      ENSURE (not PAGE_NODE_NAME.empty (), \"Node name cannot be an empty string.\");
      return PAGE_NODE_NAME;
    };
"
	
	
	
	
	comment "Return the DOM node name for the 'page' list elements.

\\post not Result.empty"
      end

      operation 1041961 "get_pageref"
	class_operation cpp_inline public explicit_return_type "string"
	nparams 1
	  param in name "a_cursor" type class_ref 338857 // item_iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} {
      require_valid_iterator (a_cursor);
      std::string Result (purpletree::dom::get_utf8 ((*a_cursor).get_attribute (PAGEREF_ATTR_NAME)));
      ENSURE (not Result.empty (), \"A valid entry must have a non-empty page reference.\");
      return Result;
    };
"
	
	
	
	
	comment "Get the page reference for the 'page' pointed to by a_cursor. 

\\pre is_valid_iterator (a_cursor), test if a_cursor is a page iterator.
\\post not Result.empty ()"
      end

      operation 1042089 "get_start_date"
	class_operation public explicit_return_type "boost::gregorian::date"
	nparams 1
	  param in name "a_cursor" type class_ref 338857 // item_iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Get the start date associated with the current 'page'.
//
//\\pre is_valid_iterator (a_cursor), test is a_cursor is a page iterator.
//\\pre is_done (a_cursor)
//\\post not Result.is_not_a_date

${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Get the start date associated with the current 'page'.

\\pre is_valid_iterator (a_cursor), test is a_cursor is a page iterator.
\\pre is_done (a_cursor)
\\post not Result.is_not_a_date"
      end

      operation 1042217 "get_title"
	class_operation public explicit_return_type "string"
	nparams 1
	  param in name "a_cursor" type class_ref 338857 // item_iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Get the title for the 'page'.
//
//\\post not Result.empty()

${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Get the title for the 'page'.

\\post not Result.empty()"
      end

      operation 1042345 "has_pageref"
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "a_pageref" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} {
      is_valid ();
      return end() != find (a_pageref);
    };
"
	
	
	
	
	comment "Is there a 'page' item in the list with a page reference equal to a_pageref?

\\post Result = (find(a_pageref) /= end())"
      end

      operation 1042473 "is_done"
	class_operation cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "a_cursor" type class_ref 338857 // item_iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} {
      require_valid_iterator (a_cursor);
      return not (*a_cursor).get_attribute (FINAL_DATE_ATTR_NAME).empty ();
    };
"
	
	
	
	
	comment "Is this 'page' finished, tested by seeing if the 'page' has a final date?"
      end

      operation 1042601 "is_done"
	class_operation public explicit_return_type "bool"
	nparams 1
	  param in name "a_control" type class_ref 338601 // item_ctl
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Test if this entry is from a \"done\" page

${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Test if this entry is from a \"done\" page"
      end

      operation 1042729 "is_valid"
	const protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Class local test of invariants.

${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Class local test of invariants."
      end

      operation 1042857 "is_valid_iterator"
	class_operation public explicit_return_type "bool"
	nparams 1
	  param in name "a_cursor" type class_ref 338857 // item_iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Check the iterator is valid for 'page' item
//
//\\post (*a_cursor).node_name = get_node_name
//\\post (*a_cursor).has_attribute(START_DATE_ATTR_NAME)
//\\post [not tested] not get_title(a_cursor).empty
//\\post [not tested] not find_node_by_name(a_cursor, LOG_NODE_NAME).is_null
//\\post [not tested] not find_node_by_name(a_cursor, REFERENCE_NODE_NAME).is_null

${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Check the iterator is valid for 'page' item

\\post (*a_cursor).node_name = get_node_name
\\post (*a_cursor).has_attribute(START_DATE_ATTR_NAME)
\\post [not tested] not get_title(a_cursor).empty
\\post [not tested] not find_node_by_name(a_cursor, LOG_NODE_NAME).is_null
\\post [not tested] not find_node_by_name(a_cursor, REFERENCE_NODE_NAME).is_null"
      end

      operation 1042985 "require_valid_iterator"
	class_operation cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "a_cursor" type class_ref 338857 // item_iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} {
      REQUIRE (is_valid_iterator (a_cursor), \"Require iterator to 'page' type node\");
    };
"
	
	
	
	
	comment "Check the iterator has a valid 'page' item"
      end

      operation 1043113 "operator ="
	private return_type class_ref 339369 // page_ctl
	nparams 1
	  param in name "source" type class_ref 339369 // page_ctl
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Not defined, added to stop copying."
      end

      operation 1043241 "page_ctl"
	public explicit_return_type ""
	nparams 1
	  param in name "a_parent_node" explicit_type "purpletree::dom::element"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "//General constructor.
//
//\\pre not a_parent_node.is_null ()

${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}
: item_ctl (a_parent_node)
${throw}{
${body}}
"
	
	
	
	
	comment "General constructor.

\\pre not a_parent_node.is_null ()"
      end

      operation 1043369 "page_ctl"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 339369 // page_ctl
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment "Not defined, added to stop copying."
      end

      operation 1043497 "~page_ctl"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	
	
      end

      operation 1043625 "set_pageref"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "a_cursor" type class_ref 338857 // item_iterator
	  param in name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Set the current reference for the 'page' item at a_cursor. 
//
//\\pre is_valid_iterator (a_cursor), test if a_cursor is a page iterator.
//\\pre not a_value.empty: can not set page reference to an empty string
//\\post a_value = get_pageref (a_cursor)

${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Set the current reference for the 'page' item at a_cursor. 

\\pre is_valid_iterator (a_cursor), test if a_cursor is a page iterator.
\\pre not a_value.empty: can not set page reference to an empty string
\\post a_value = get_pageref (a_cursor)"
      end

      operation 1043753 "set_title"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "a_cursor" type class_ref 338857 // item_iterator
	  param in name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Set the 'title' of the 'page' item at a_cursor.
//
//\\pre is_valid_iterator (a_cursor)
//\\pre not a_value.empty: can not set title to an empty string
//\\post a_value == get_title (a_cursor)

${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Set the 'title' of the 'page' item at a_cursor.

\\pre is_valid_iterator (a_cursor)
\\pre not a_value.empty: can not set title to an empty string
\\post a_value == get_title (a_cursor)"
      end

      operation 1043881 "unfinalise"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "[** Currently unimplemented **]
If an experiment has been finalised, this can be undone if the experiment has not been saved.

\\pre true = is_done ()
\\pre true = is_dirty ()
\\post false = is_done ()"
      end

      attribute 231977 "FINAL_DATE_ATTR_NAME"
	class_attribute const_attribute public explicit_type "purpletree::dom::dom_string"
	init_value "(purpletree::dom::set_utf8 (\"final-date\"))"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 232105 "LOG_NODE_NAME"
	class_attribute const_attribute public explicit_type "purpletree::dom::dom_string"
	init_value "(purpletree::dom::set_utf8 (\"log\"))"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 232233 "PAGE_NODE_NAME"
	class_attribute const_attribute public explicit_type "purpletree::dom::dom_string"
	init_value "(purpletree::dom::set_utf8 (\"page\"))"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 232361 "PAGEREF_ATTR_NAME"
	class_attribute const_attribute public explicit_type "purpletree::dom::dom_string"
	init_value "(purpletree::dom::set_utf8 (\"pageref\"))"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 232489 "PARENT_NODE_NAME"
	class_attribute const_attribute public explicit_type "purpletree::dom::dom_string"
	init_value "(journal_ctl::JOURNAL_DOC_NODE_NAME)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 232617 "REFERENCE_NODE_NAME"
	class_attribute const_attribute public explicit_type "purpletree::dom::dom_string"
	init_value "(purpletree::dom::set_utf8 (\"reference\"))"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 232745 "START_DATE_ATTR_NAME"
	class_attribute const_attribute public explicit_type "purpletree::dom::dom_string"
	init_value "(purpletree::dom::set_utf8 (\"start-date\"))"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 232873 "TITLE_NODE_NAME"
	class_attribute const_attribute public explicit_type "purpletree::dom::dom_string"
	init_value "(purpletree::dom::set_utf8 (\"title\"))"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 233001 "experimenter_initials"
	class_attribute private explicit_type "string"
	init_value "(\"JJF\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 233129 "pageref_format"
	class_attribute private explicit_type "string"
	init_value "(\"OLYYYY_AA_##\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1044009 "get_experimenter_initials"
	class_operation cpp_inline private explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Get the configured experimenter intials

${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Get the configured experimenter intials"
      end

      operation 1044137 "get_pageref_format"
	class_operation cpp_inline private explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Get the configured page reference format string.

${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Get the configured page reference format string."
      end

      operation 1044265 "set_experimenter_initials"
	class_operation private explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Set the configured experiment initials.

${comment}${inline}${type} ${class}::${name}${(}const ${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Set the configured experiment initials."
      end

      operation 1044393 "set_pageref_format"
	class_operation private explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Set the configured page reference format string.

${comment}${inline}${type} ${class}::${name}${(}const ${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Set the configured page reference format string."
      end
    end

    class 339625 "xml_traits"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A set of XML/DOM related helper methods."
      operation 1044521 "find_node_by_name"
	class_operation public explicit_return_type "purpletree::dom::node"
	nparams 2
	  param in name "a_start" explicit_type "purpletree::dom::node"
	  param in name "a_name" explicit_type "purpletree::dom::dom_string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Find the first element that has a_name starting from a_start node (inclusive).
//
//\\post Result.is_null () or (Result.node_name() = a_name and Result.node_type() = ELEMENT_NODE)

${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Find the first element that has a_name starting from a_start node (inclusive).

\\post Result.is_null () or (Result.node_name() = a_name and Result.node_type() = ELEMENT_NODE)"
      end

      operation 1044649 "find_last_node_by_name"
	class_operation public explicit_return_type "purpletree::dom::node"
	nparams 2
	  param in name "a_start" explicit_type "purpletree::dom::node"
	  param in name "a_name" explicit_type "purpletree::dom::dom_string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Find the last element that has a_name starting from a_start node (inclusive).
//
//\\post Result.is_null () or (Result.node_name() = a_name and Result.node_type() = ELEMENT_NODE)

${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Find the last element that has a_name starting from a_start node (inclusive).

\\post Result.is_null () or (Result.node_name() = a_name and Result.node_type() = ELEMENT_NODE)"
      end

      operation 1044777 "get_date_attribute"
	class_operation public explicit_return_type "boost::gregorian::date"
	nparams 2
	  param in name "a_cursor" explicit_type "purpletree::dom::element"
	  param in name "a_attr_name" explicit_type "purpletree::dom::dom_string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Convert the ISO representation of a date in the attribute of a_cursor as a date.
//
//\\pre not a_cursor.is_null
//\\pre not a_attr_name.empty 
//\\pre not a_cursor.get_attribute (a_attr_name).empty
//\\post not Result.is_not_a_date ()

${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Convert the ISO representation of a date in the attribute of a_cursor as a date.

\\pre not a_cursor.is_null
\\pre not a_attr_name.empty 
\\pre not a_cursor.get_attribute (a_attr_name).empty
\\post not Result.is_not_a_date ()"
      end

      operation 1044905 "get_node_content"
	class_operation public explicit_return_type "string"
	nparams 1
	  param in name "a_node" explicit_type "purpletree::dom::element"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Retrieve the text content of an element. It is the concatentation of all text nodes. Returned value may be an empty string
//
//\\pre not a_node.is_null

${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Retrieve the text content of an element. It is the concatentation of all text nodes. Returned value may be an empty string

\\pre not a_node.is_null"
      end

      operation 1045033 "is_element"
	class_operation cpp_inline public explicit_return_type "bool"
	nparams 2
	  param in name "a_node" explicit_type "purpletree::dom::node"
	  param in name "a_node_name" explicit_type "purpletree::dom::dom_string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract} {
      return not a_node.is_null ()
             and purpletree::dom::node::ELEMENT_NODE == a_node.node_type ()
             and a_node.node_name () == a_node_name;
    };
"
	
	
	
	
	comment "Is a_node a DOM element with tag of a_node_name?

\\post Result implies: not a_node.is_null
                                and a_node.node_name== a_node_name
                                and a_node.node_type = ELEMENT"
      end

      operation 1045161 "set_attribute"
	class_operation public explicit_return_type "bool"
	nparams 3
	  param inout name "a_cursor" explicit_type "purpletree::dom::element"
	  param in name "a_attr_name" explicit_type "purpletree::dom::dom_string"
	  param in name "a_value" explicit_type "purpletree::dom::dom_string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Set attribute with a_attr_name of a_cursor to a_value.  If a_value is an empty string then attribute is removed. Return value indicates if attribute value was actually changed.
//
//\\pre not a_cursor.is_null
//\\post false implies a_value = (a_cursor_OLD).get_attribute (a_attr_name)
//\\post a_value = a_cursor.get_attribute (a_attr_name)

${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Set attribute with a_attr_name of a_cursor to a_value.  If a_value is an empty string then attribute is removed. Return value indicates if attribute value was actually changed.

\\pre not a_cursor.is_null
\\post false implies a_value = (a_cursor_OLD).get_attribute (a_attr_name)
\\post a_value = a_cursor.get_attribute (a_attr_name)"
      end

      operation 1045289 "set_date_attribute"
	class_operation public explicit_return_type "bool"
	nparams 4
	  param inout name "a_cursor" explicit_type "purpletree::dom::element"
	  param in name "a_attr_name" explicit_type "purpletree::dom::dom_string"
	  param in name "a_value" explicit_type "boost::gregorian::date"
	  param in name "a_initial" explicit_type "bool"
	    defaultvalue "false"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Set an attribute of a_cursor to be a representation of a_date in ISO format.
//
//\\pre not a_cursor.is_null and not a_attr_name.empty
//\\pre not a_value.is_not_a_date
//\\pre a_initial implies a_cursor.get_attribute (a_attr_name).empty()
//\\post false implies a_value = get_date_attribute (a_cursor_OLD, a_attr_name)
//\\post a_value = get_date_attribute (a_cursor, a_attr_name)

${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Set an attribute of a_cursor to be a representation of a_date in ISO format.

\\pre not a_cursor.is_null and not a_attr_name.empty
\\pre not a_value.is_not_a_date
\\pre a_initial implies a_cursor.get_attribute (a_attr_name).empty()
\\post false implies a_value = get_date_attribute (a_cursor_OLD, a_attr_name)
\\post a_value = get_date_attribute (a_cursor, a_attr_name)"
      end

      operation 1045417 "set_node_content"
	class_operation public explicit_return_type "bool"
	nparams 2
	  param inout name "a_node" explicit_type "purpletree::dom::element"
	  param in name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//Set the text content of the node.  If any text nodes exist, the content of the first will be deleted and all other text nodes will be removed.  If no text nodes exist, one will be created and appended to the node. If a_value is empty then all content is removed.
//
//\\pre a_node.node_type () = ELEMENT_TYPE
//\\post a_value = get_node_content (a_node)

${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Set the text content of the node.  If any text nodes exist, the content of the first will be deleted and all other text nodes will be removed.  If no text nodes exist, one will be created and appended to the node. If a_value is empty then all content is removed.

\\pre a_node.node_type () = ELEMENT_TYPE
\\post a_value = get_node_content (a_node)"
      end
    end
  end

  deploymentview 132905 "control"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default
    artifact 148649 "entry_ctl"
      stereotype "source"
      cpp_h "#ifndef ${NAME}_HPP
#define ${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 338473 // entry_ctl
      end
    end

    artifact 148777 "information_ctl"
      stereotype "source"
      cpp_h "#ifndef ${NAME}_HPP
#define ${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 338985 // information_ctl
      end
    end

    artifact 148905 "item_ctl"
      stereotype "source"
      cpp_h "#ifndef ${NAME}_HPP
#define ${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 338601 // item_ctl
      end
    end

    artifact 149033 "item_iterator"
      stereotype "source"
      cpp_h "#ifndef ${NAME}_HPP
#define ${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 338857 // item_iterator
      end
    end

    artifact 149161 "journal_ctl"
      stereotype "source"
      cpp_h "#ifndef ${NAME}_HPP
#define ${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 339241 // journal_ctl
      end
    end

    artifact 149289 "page_ctl"
      stereotype "source"
      cpp_h "#ifndef ${NAME}_HPP
#define ${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 339369 // page_ctl
      end
    end

    artifact 149417 "xml_traits"
      stereotype "source"
      cpp_h "#ifndef ${NAME}_HPP
#define ${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 339625 // xml_traits
      end
    end
  end

  package_ref 135081 // test
end
