class plugin_test
!!!1075241.cpp!!!	error_method(in a_msg : string, in a_id : int) : void
std::cout << "In Plugin Test Error Handler.\n";
if (0 != a_id) {
std::cout << "Error [ID = " << a_id << "]: " << a_msg << "\n"; }
else {
std::cout << "Error: " << a_msg << "\n"; }
m_result = a_id;
m_error = true;
!!!1074985.cpp!!!	main() : void
// PRE
COMPCHEM_REQUIRE ((not m_conf_file.empty () and boost::filesystem::exists (m_conf_file)) or NULL != m_manager.get (), "Have no list of plugins.");
COMPCHEM_REQUIRE (not m_filenames.empty (), "Have no target files");
// LOCAL
// DO
if (NULL == m_manager.get ())
{
  m_manager.reset (new filter_manager (m_conf_file));
}
COMPCHEM_CHECK (NULL != m_manager.get (), "Manager should never be nul");

for (std::vector < std::string >::iterator l_source_ptr = m_filenames.begin ();
    l_source_ptr != m_filenames.end ();
    ++l_source_ptr)
{
  std::cout << title () << ": Source file-name = " << *l_source_ptr << std::endl;
  COMPCHEM_REQUIRE (boost::filesystem::exists (*l_source_ptr), "Target file does not exist");

  m_manager->prepare (*l_source_ptr);

  // Test have input data
  if (not m_manager->have_file ())
  {
    m_result = 1;
    std::cerr << title () << ": " << *l_source_ptr << " is not recognised source type\n";
  }
  else if (not m_manager->have_filters ())
  {
    m_result = 1;
    std::cerr << title () << ": No valid filters found for source\n";
  }
  else if (m_manager->is_error ())
  {
    m_result = 1;
    std::cerr << title () << ": An error occured while initialising filter system\n";
  }
  else
  {
    std::cout << title () << ": Filter manager has prepared source file." << std::endl;
    // We can now read the entire "gaussian" file and gather the results.
    purpletree::dom::document l_output (data_scheme::document_type::new_document (purpletree::dom::set_utf8 ("memo")));
    data_scheme::memo l_top (l_output.document_element ());

    m_manager->process (l_top);
    std::cout << title () << ": ---- Start filter results  ---- \n";
    l_output.implementation ().serialise (l_output, std::cout);
    std::cout << title () << ": ---- End filter results  ---- \n";
  }
  m_manager->reset ();
}
!!!1075497.cpp!!!	plugin_test(in argc : int, in argv : char)
: m_conf_file ()
, m_error (false)
, m_filenames ()
, m_manager ()
, m_result () {
  if (process_options (argc, argv)) {
    COMPCHEM_CHECK (not m_filenames.empty (), "No source files.");
    COMPCHEM_CHECK (not m_conf_file.empty (), "No configuration file.");
    COMPCHEM_CHECK (boost::filesystem::exists (m_conf_file), ("No configuration file: " + m_conf_file));
    main (); }}
!!!1325225.cpp!!!	process_options(in argc : int, in argv : char) : bool
// LOCAL
bool Result (true);
// The Option Processing system
boost::program_options::options_description l_desc ("Plugin test options");
// Add program specific options
l_desc.add_options () ("help,h", "produce help")
    ("usage,?", "also produce help")
    ("file,f", boost::program_options::value< std::vector< std::string > > (&m_filenames), "gaussian log filename(s) to process [required].")
    ("conf,c", boost::program_options::value< std::string > (&m_conf_file), "configuration file [required]");
// Set arguments without preceding options to act as if predeced by -file
boost::program_options::positional_options_description l_pos_args;
l_pos_args.add("file", -1);
// Process arguments
boost::program_options::variables_map l_vm;
try {
  boost::program_options::store (boost::program_options::command_line_parser (argc, argv).options (l_desc).positional (l_pos_args).run (), l_vm); }
catch (const std::exception& a_err) { // Assume option parsing error.
  std::cout << "Error: " << a_err.what () << "\n";
  Result = false; }
boost::program_options::notify (l_vm);
// Output help if require
if (not Result or l_vm.count("help") or l_vm.count("usage") or not l_vm.count("file") or not l_vm.count("conf")) {
  std::cout << l_desc << "\n";
  Result = false; }
return Result;
