class settings
!!!1406761.cpp!!!	add_child(in a_name : string, inout a_label : string) : basic_datum
basic_datum * Result (NULL);
if (data_access::names::datum_name () == a_name)
{
  COMPCHEM_ALWAYS (not has_data (), "Can not add more than one datum object here");
  m_datum.reset (new datum (*this, a_label));
  Result = m_datum.get ();
}
else if (data_access::names::info_name () == a_name)
{
  COMPCHEM_ALWAYS (not has_information (), "Can not add more than one info object here");
  m_info.reset (new info (*this, a_label));
  Result = m_info.get ();
}
else
{
  const bool bad_child_name (false);
  COMPCHEM_ALWAYS (bad_child_name, serial_name() + " class has no child with name " + a_name);
}
append_child (*Result);
return *Result;
!!!1426473.cpp!!!	add_datum(in a_label : string) : datum
COMPCHEM_REQUIRE (not has_data (), "Can not add more than one datum object here");
m_datum.reset (new datum (*this, a_label));
// Always last
append_child (*(m_datum.get ()));
return *(m_datum.get ());
!!!1426345.cpp!!!	add_info(in a_label : string) : info
COMPCHEM_REQUIRE (not has_information (), "Can not add more than one info object here");
m_info.reset (new info (*this, a_label));
// Always last
append_child (*(m_info.get ()));
return *(m_info.get ());
!!!1407401.cpp!!!	get_attribute(in a_name : string, out a_value : string) : bool
bool Result (false);
if (data_access::names::label_name () == a_name)
{
  a_value.assign (label ());
  Result = true;
}
else if (data_access::names::filter_name () == a_name)
{
  if (not this->m_filters.empty ())
  {
    a_value.assign (this->m_filters);
    Result = true;
  }
}
else if (data_access::names::outcome_name () == a_name)
{
  if (not this->m_outcomes.empty ())
  {
    a_value.assign (this->m_outcomes);
    Result = true;
  }
}
return Result;
!!!1407273.cpp!!!	set_attribute(in a_name : string, in a_value : string) : void
if (data_access::names::outcome_name () == a_name)
{
  m_outcomes.swap (a_value);
}
else if (data_access::names::filter_name () == a_name)
{
  m_filters.swap (a_value);
}
else if (data_access::names::label_name () == a_name) 
{
  COMPCHEM_ALWAYS (a_value == label (), serial_name () + " object labels cannot be changed after construction");
}
else
{
  const bool bad_attribute_name (false);
  COMPCHEM_ALWAYS (bad_attribute_name, serial_name () + " objects do not have an attribute named " + a_name);
}

!!!1663529.cpp!!!	virt_remove_child(inout a_datum : basic_datum) : void
// formula*, identity* or info?
COMPCHEM_ALWAYS (has_data () or has_information (), "attempt to remove child from empty object");
// a_datum should be an info object!
if (m_info.get () == a_datum)
{
  m_info.reset ();
}
else
{
  COMPCHEM_ALWAYS (m_datum.get () == a_datum, "attempt to remove non-child object");
  m_datum.reset ();
}
