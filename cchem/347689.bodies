class vibration
!!!1074473.cpp!!!	vibration()
: m_ordinal ()
, m_depolar ()
, m_force ()
, m_frequency ()
, m_intensity ()
, m_mode ()
, m_raman ()
, m_redms ()
, m_dispvec () {}
!!!1074729.cpp!!!	vibration(in source : vibration)
: m_ordinal (source.m_ordinal)
, m_depolar (source.m_depolar)
, m_force (source.m_force)
, m_frequency (source.m_frequency)
, m_intensity (source.m_intensity)
, m_mode (source.m_mode)
, m_raman (source.m_raman)
, m_redms (source.m_redms )
, m_dispvec (source.m_dispvec)
{}
!!!1085993.cpp!!!	serialise(inout a_os : std::ostream, in a_delim : string = ', ', in a_flags : uchar = NO_DISPLACEMENT_VEC) : void
class helper
{
public:
  // Helper function to output the values.
  static inline void output (std::ostream & A_os, const std::string & A_delim, const unsigned char A_flags, const std::string & A_value, const unsigned char A_flag_select, const unsigned char A_flag_follow_mask)
  {
    DLOG ("FLAG[");
    DLOG (int (A_flag_select));
      DLOG ("][");
      DLOG ((int) (~A_flags & A_flag_follow_mask));
      DLOG ("]: ");
      DLOG (A_value);
      DLOG ("\n");
    if (not (A_flags & A_flag_select))
    {
      if (not A_value.empty ())
      {
        A_os << A_value;
      }
      if (~A_flags & A_flag_follow_mask)
      {
        A_os << A_delim;
      }
    }
  }
};
unsigned int l_mask (255);
l_mask ^= NO_ORDINAL;
helper::output (a_os, a_delim, a_flags, ordinal (), NO_ORDINAL, l_mask);
helper::output (a_os, a_delim, a_flags, frequency (), 0, l_mask);
l_mask ^= NO_INTENSITY;
helper::output (a_os, a_delim, a_flags, intensity (), NO_INTENSITY, l_mask);
l_mask ^= NO_RAMAN;
helper::output (a_os, a_delim, a_flags, raman (), NO_RAMAN, l_mask);
l_mask ^= NO_FORCE;
helper::output (a_os, a_delim, a_flags, force (), NO_FORCE, l_mask);
l_mask ^= NO_DEPOLAR;
helper::output (a_os, a_delim, a_flags, depolar (), NO_DEPOLAR, l_mask);
l_mask ^= NO_MODE;
helper::output (a_os, a_delim, a_flags, mode (), NO_MODE, l_mask);
l_mask ^= NO_REDUCED_MASS;
helper::output (a_os, a_delim, a_flags, reduced_mass (), NO_REDUCED_MASS, l_mask);
helper::output (a_os, a_delim, a_flags, displacement_vector (), NO_DISPLACEMENT_VEC, 0);
a_os << "\n";
!!!1086121.cpp!!!	serialise_header(inout a_os : std::ostream, in a_delim : string = ', ', in a_flags : uchar = NO_DISPLACEMENT_VEC) : void
class helper
{
public:
  // Helper function to output the values.
  static inline void output (std::ostream & A_os, const std::string & A_delim, const unsigned char A_flags, const std::string & A_value, const unsigned char A_flag_select)
  {
    if (not A_flags & A_flag_select)
    {
      A_os << A_value;
      if (not A_flags & !(unsigned char) ((A_flag_select >> 1) - 1))
      {
        A_os << A_delim;
      }
    }
}};

helper::output (a_os, a_delim, a_flags, "Ordinal", NO_ORDINAL);
helper::output (a_os, a_delim, a_flags, "Frequency", 0);
helper::output (a_os, a_delim, a_flags, "Intensity", NO_INTENSITY);
helper::output (a_os, a_delim, a_flags, "Raman Activity", NO_RAMAN);
helper::output (a_os, a_delim, a_flags, "Force Constants", NO_FORCE);
helper::output (a_os, a_delim, a_flags, "Depolar", NO_DEPOLAR);
helper::output (a_os, a_delim, a_flags, "Mode", NO_MODE);
helper::output (a_os, a_delim, a_flags, "Reduced Mass", NO_REDUCED_MASS);
helper::output (a_os, a_delim, a_flags, "Displacement Vector", NO_DISPLACEMENT_VEC);
