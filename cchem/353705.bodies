class mechanism
!!!1423529.cpp!!!	add_child(in a_name : string, inout a_label : string) : basic_datum
basic_datum * Result (NULL);
if (data_access::names::info_name () == a_name)
{
  COMPCHEM_ALWAYS (not has_information (), "You can only add one info object here");
  m_info.reset (new info (*this, a_label));
  Result = m_info.get ();
}
else if (data_access::names::filter_name () == a_name)
{
  m_filter_set.push_back (new filter (*this, a_label));
  Result= &(m_filter_set.back ());
}
else if (data_access::names::settings_name () == a_name)
{
  m_command_set.push_back (new settings (*this, a_label));
  Result = &(m_command_set.back ());
}
else
{
  const bool bad_child_name (false);
  COMPCHEM_ALWAYS (bad_child_name, serial_name() + " class has no child with name " + a_name);
}
append_child (*Result);
return *Result;
!!!1423401.cpp!!!	add_info(in a_label : string) : info
COMPCHEM_REQUIRE (not has_information (), "You can only add one info object here");
m_info.reset (new info (*this, a_label));
// Always first
if (not m_filter_set.empty ())
{
  insert_child (m_filter_set.front (), *(m_info.get ()));
}
else if (not m_command_set.empty ())
{
  insert_child (m_command_set.front (), *(m_info.get ()));
}
else 
{
  append_child (*(m_info.get ()));
}
return *(m_info.get ());
!!!1409961.cpp!!!	add_filter(in a_label : string) : filter
m_filter_set.push_back (new filter (*this, a_label));
if (not m_command_set.empty ())
{
  insert_child (m_command_set.front (), m_filter_set.back ());
}
else
{
  append_child (m_filter_set.back ());
}
return m_filter_set.back ();
!!!1423657.cpp!!!	add_setting(in a_label : string) : settings
m_command_set.push_back (new settings (*this, a_label));
// Always last
append_child (m_command_set.back ());
return m_command_set.back ();
!!!1518121.cpp!!!	find_filter(in a_label : string) : filter_iterator
return std::find_if (m_filter_set.begin (), m_filter_set.end (), boost::bind (std::equal_to< std::string >(), boost::bind (&filter::label, _1), a_label));
!!!1518249.cpp!!!	find_filter(in a_label : string) : const_filter_iterator
return std::find_if (m_filter_set.begin (), m_filter_set.end (), boost::bind (std::equal_to< std::string >(), boost::bind (&filter::label, _1), a_label));
!!!1410345.cpp!!!	get_attribute(in a_name : string, out a_value : string) : bool
bool Result (false);
if (data_access::names::label_name () == a_name)
{
  a_value.assign (m_label);
  Result = true;
}
return Result;
!!!1682217.cpp!!!	remove_priv(inout a_datum : filter) : void
COMPCHEM_REQUIRE (&(a_datum.parent ()) == this, "attempt to remove an object that is not a child of this object.");
bool object_is_child (false);
for (filter_iterator l_f = begin_filter (); l_f != end_filter (); ++l_f)
{
  if (&(*l_f) == &a_datum)
  {
    m_filter_set.erase (l_f);
    object_is_child = true;
    break;
  }
}
COMPCHEM_ENSURE (true == object_is_child, "child object not found in child list");
!!!1681961.cpp!!!	remove_priv(inout a_datum : settings) : void
COMPCHEM_REQUIRE (&(a_datum.parent ()) == this, "attempt to remove an object that is not a child of this object.");
bool object_is_child (false);
for (settings_iterator l_f = begin_settings (); l_f != end_settings (); ++l_f)
{
  if (&(*l_f) == &a_datum)
  {
    m_command_set.erase (l_f);
    object_is_child = true;
    break;
  }
}
COMPCHEM_ENSURE (true == object_is_child, "child object not found in child list");
!!!1527209.cpp!!!	set_attribute(in a_name : string, in a_value : string) : void
if (data_access::names::label_name () == a_name) 
{
  COMPCHEM_ALWAYS (a_value == label (), serial_name () + " object labels cannot be changed after construction");
}
else
{
  const bool bad_attribute_name (false);
  COMPCHEM_ALWAYS (bad_attribute_name, serial_name () + " objects do not have an attribute named " + a_name);
}

!!!1663017.cpp!!!	virt_remove_child(inout a_datum : basic_datum) : void
// info,filter*,setting*
COMPCHEM_ALWAYS (not empty_filter () or not empty_settings () or has_information ()
                 , "attempt to remove child of empty object");
if (has_information () and m_info.get () == a_datum)
{
  m_info.reset ();
}
else
{
  bool object_is_my_child (false);
  if (not empty_filter ())
  {
    filter * l_tmp (dynamic_cast< filter * >(a_datum));
    if (NULL != l_tmp)
    {
      object_is_my_child = true;
      remove_priv (*l_tmp);
    }
  }
  if (not object_is_my_child and not empty_settings ())
  {
    settings * l_tmp (dynamic_cast< settings * >(a_datum));
    if (NULL != l_tmp)
    {
      object_is_my_child = true;
      remove_priv (*l_tmp);
    }
  }
  COMPCHEM_ALWAYS (true == object_is_my_child, "attempt to remove non-child object");
}
