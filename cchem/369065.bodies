class test_program
!!!1205289.cpp!!!	main_test() : void
// DO
int Result (0);
std::auto_ptr < data_scheme::program > l_program;

log () << COMM << "Getting test database\n";
if (m_doc_filename.empty ())
{
  log () << IFNO << "No data filename set, please provide a database name\n";
  Result = 1;
}
if (not boost::filesystem::exists (m_doc_filename))
{
  log () << IFNO << "Data filename: [" << m_doc_filename << "]\n does not exist, please provide a valid database name\n";
  Result = 1;
}

if (0 == Result)
{
  // Read in the document..
  l_program.reset (new data_scheme::program (m_doc_filename));
  // Perform tests on data_scheme objects.
  test_object_visitor l_tester;
  l_program->visit (l_tester);
  // Move old version
  const boost::filesystem::path l_dir (m_doc_filename);
  const boost::filesystem::path l_base (l_dir.branch_path ());
  const boost::filesystem::path l_old (l_base.branch_path () / (l_base.leaf () + ".old"));
  const boost::filesystem::path l_new (l_base.branch_path () / (l_base.leaf () + ".new"));
  log () << COMM << "Base path is :" << l_base.string () << "\n";
  log () << COMM << "Old path is :" << l_old.string () << "\n";
  log () << COMM << "New path is :" << l_new.string () << "\n";
  boost::filesystem::rename (l_base, l_old);
  // Attempt to save 'new' version
  log () << COMM << "Attempting to write Program.\n";
  l_program->write ();
  if (boost::filesystem::exists (l_new))
  {
    boost::filesystem::remove_all (l_new);
  }
  boost::filesystem::rename (l_base, l_new);
  boost::filesystem::rename (l_old, l_base);
}
!!!1351593.cpp!!!	register_options() : void
if (NULL == utility::program_options::helper ().public_options ().find_nothrow ("database", true))
{
  // Add option
  utility::program_options::helper ().public_options ().add_options () ("database", boost::program_options::value< std::string >(&m_doc_filename), "Test database file");
}
