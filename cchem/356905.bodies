class experiment
!!!1422249.cpp!!!	add_child(in a_name : string, in a_label : string) : basic_datum
basic_datum * Result (NULL);
if (data_access::names::memo_name () == a_name)
{
  m_results.push_back (new memo (*this, a_label));
  Result = &(m_results.back ());
}
else if (data_access::names::memo_src_name () == a_name)
{
  m_results.push_back (new memo (*this));
  m_results.back ().connect (a_label);
  Result = &(m_results.back ());
}
else if (data_access::names::info_name () == a_name)
{
  m_info.push_back (new info (*this, a_label));
  Result = &(m_info.back ());
}
else
{
  const bool bad_child_name (false);
  COMPCHEM_ALWAYS (bad_child_name, serial_name() + " class has no child with name " + a_name);
}
append_child (*Result);
return *Result;
!!!1421737.cpp!!!	add_info(in a_label : string) : info
m_info.push_back (new info (*this, a_label));
// Infos are first
if (m_results.empty ())
{
  append_child (m_info.back ());
}
else
{
  insert_child (m_results.front (), m_info.back ());
} 
return m_info.back ();
!!!1412905.cpp!!!	add_memo(in a_label : string) : memo
m_results.push_back (new memo (*this, a_label));
// Memos are last
append_child (m_results.back ());
return m_results.back ();
!!!1421609.cpp!!!	add_memo_src(in a_label : string) : memo
m_results.push_back (new memo (*this));
m_results.back ().connect (a_label);
// Memos are last
append_child (m_results.back ());
return m_results.back ();
!!!1557929.cpp!!!	find_memo(in a_label : string) : memo_iterator
return std::find_if (m_results.begin (), m_results.end (), boost::bind (std::equal_to< std::string >(), boost::bind (&memo::label, _1), a_label));
!!!1659817.cpp!!!	find_memo(in a_label : string) : const_memo_iterator
return std::find_if (m_results.begin (), m_results.end (), boost::bind (std::equal_to< std::string >(), boost::bind (&memo::label, _1), a_label));
!!!1413289.cpp!!!	get_attribute(in a_name : string, out a_value : string) : bool
bool Result (false);
if (data_access::names::reference_name () == a_name)
{
  a_value.assign (m_reference);
  Result = true;
}
else if (data_access::names::date_start_name () == a_name)
{
  a_value.assign (m_date_start);
  Result = true;
}
else if (data_access::names::date_end_name () == a_name)
{
  if (not m_date_end.empty ()) 
  {
    a_value.assign (m_date_end);
  Result = true;
  }
}
else if (data_access::names::priority_name () == a_name)
{
  if (0 != m_priority)
  {
    a_value.assign (boost::lexical_cast< std::string > (m_priority));
  Result = true;
  }
}
else if (data_access::names::worker_name () == a_name)
{
  a_value.assign (m_workers);
  Result = true;
}
return Result;
!!!1612073.cpp!!!	initialise() : void
// Set date-start and worker if not already set.
if (m_workers.empty ())
{
  m_workers = utility::program_options::helper ().current_worker ();
}
if (m_date_start.empty ())
{
  date_start (boost::gregorian::day_clock::local_day());
}

!!!1680681.cpp!!!	remove_priv(inout a_datum : memo) : void
COMPCHEM_REQUIRE (&(a_datum.parent ()) == this, "attempt to remove an object that is not a child of this object.");
bool object_is_child (false);
for (memo_iterator l_f = begin_memo (); l_f != end_memo (); ++l_f)
{
  if (&(*l_f) == &a_datum)
  {
    m_results.erase (l_f);
    object_is_child = true;
    break;
  }
}
COMPCHEM_ENSURE (true == object_is_child, "child object not found in child list");
!!!1681065.cpp!!!	remove_priv(inout a_datum : info) : void
COMPCHEM_REQUIRE (&(a_datum.parent ()) == this, "attempt to remove an object that is not a child of this object.");
bool object_is_child (false);
for (info_iterator l_f = begin_info (); l_f != end_info (); ++l_f)
{
  if (&(*l_f) == &a_datum)
  {
    m_info.erase (l_f);
    object_is_child = true;
    break;
  }
}
COMPCHEM_ENSURE (true == object_is_child, "child object not found in child list");
!!!1413161.cpp!!!	set_attribute(in a_name : string, in a_value : string) : void
if (data_access::names::date_start_name () == a_name)
{
  m_date_start.swap (a_value);
}
else if (data_access::names::date_end_name () == a_name)
{
  m_date_end.swap (a_value);
}
else if (data_access::names::priority_name () == a_name)
{
  try
  {
    m_priority = boost::lexical_cast< unsigned int > (a_value);
  }
  catch (const boost::bad_lexical_cast &a_err)
  {
    const bool priority_value_is_not_a_positive_integer (false);
    COMPCHEM_ALWAYS (priority_value_is_not_a_positive_integer, a_err.what ());
  }
}
else if (data_access::names::worker_name () == a_name)
{
  m_workers.swap (a_value);
}
else if (data_access::names::reference_name () == a_name) 
{
  COMPCHEM_ALWAYS (a_value == reference (), serial_name () + " object reference labels cannot be changed after construction");
}
else
{
  const bool bad_attribute_name (false);
  COMPCHEM_ALWAYS (bad_attribute_name, serial_name () + " objects do not have an attribute named " + a_name);
}

!!!1662761.cpp!!!	virt_remove_child(inout a_datum : basic_datum) : void
// info*, memo*
COMPCHEM_ALWAYS (not empty_memo () or not empty_info ()
                 , "attempt to remove child from empty object");
bool object_is_my_child (false);
if (not empty_memo ())
{
  memo * l_tmp (dynamic_cast< memo * >(a_datum));
  if (NULL != l_tmp)
  {
    object_is_my_child = true;
    remove_priv (*l_tmp);
  }
}
if (not object_is_my_child and not empty_info ())
{
  info * l_tmp (dynamic_cast< info * >(a_datum));
  if (NULL != l_tmp)
  {
    object_is_my_child = true;
    remove_priv (*l_tmp);
  }
}
COMPCHEM_ALWAYS (true == object_is_my_child, "attempt to remove non-child object");
