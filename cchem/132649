format 55
"gtkmm" // External Components::gtkmm
  revision 4
  modified_by 41 "finnerty"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_infonote default shadow default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default
  
  stereotype "library"
  cpp_src_dir ".."
  cpp_namespace "Gtk"
  classview 130473 "gtkmm"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_infonote default shadow default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default
    class 280617 "AccelFlags"
      visibility package stereotype "enum"
      cpp_external cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " $Id: 132649,v 1.1.1.1 2007/06/23 09:39:15 finnerty Exp $ 
 enums.h
 * 
 * Copyright (C) 2002 The gtkmm Development Team 
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 
* @addtogroup gtkmmEnums Enums and Flags 
*
 * @ingroup gtkmmEnums
 * @par Bitwise operators:
 * <tt>%AccelFlags operator|(AccelFlags, AccelFlags)</tt><br>
 * <tt>%AccelFlags operator&(AccelFlags, AccelFlags)</tt><br>
 * <tt>%AccelFlags operator^(AccelFlags, AccelFlags)</tt><br>
 * <tt>%AccelFlags operator~(AccelFlags)</tt><br>
 * <tt>%AccelFlags& operator|=(AccelFlags&, AccelFlags)</tt><br>
 * <tt>%AccelFlags& operator&=(AccelFlags&, AccelFlags)</tt><br>
 * <tt>%AccelFlags& operator^=(AccelFlags&, AccelFlags)</tt><br>
 "
      attribute 180905 "ACCEL_VISIBLE"
	public explicit_type ""
	init_value " 1 << 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 181033 "ACCEL_LOCKED"
	public explicit_type ""
	init_value " 1 << 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 181161 "ACCEL_MASK"
	public explicit_type ""
	init_value " 0x07
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 182953 "AccelGroup"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/accelgroup.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* A Gtk::AccelGroup represents a group of keyboard accelerators, typically
 * attached to a toplevel Gtk::Window (with Gtk::Window::add_accel_group()).
 * Usually you won't need to create a Gtk::AccelGroup directly; instead, gtkmm
 * automatically sets up the accelerators for your menus.  Note that
 * accelerators are different from mnemonics.  Accelerators are shortcuts for
 * activating a menu item; they appear alongside the menu item for which
 * they're a shortcut. For example \"Ctrl+Q\" might appear alongside the \"Quit\"
 * menu item.  Mnemonics are shortcuts for GUI elements such as text entries or
 * buttons; they appear as underlined characters. See the Gtk::Label
 * constructor. Menu items can have both accelerators and mnemonics, of course.
 *
 * You can use Gtk::Window::get_accel_group() to get an accel group for that window,
 * then use it with other widgets too.
 "
      class 183209 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 182953 // AccelGroup
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 173481 // <realization>
	  relation 171817 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 173481 // <realization>
	    b parent class_ref 182953 // AccelGroup
	end
      end

      class 183337 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "AccelGroup_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 128809 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkAccelGroup"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 128937 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkAccelGroupClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 128681 // accelgroup_class_ (<directional composition>)
	relation 128681 *-->
	  a role_name "accelgroup_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 128681 // accelgroup_class_ (<directional composition>)
	  b parent class_ref 183337 // CppClassType
      end

      operation 347305 "AccelGroup"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 182953 // AccelGroup
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 347433 "operator ="
	private return_type class_ref 182953 // AccelGroup
	nparams 1
	  param in name "" type class_ref 182953 // AccelGroup
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 347561 "AccelGroup"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 347689 "AccelGroup"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkAccelGroup"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 347817 "~AccelGroup"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 347945 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 348073 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 348201 "gobj"
	cpp_inline public explicit_return_type "GtkAccelGroup"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkAccelGroup*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 348329 "gobj"
	const cpp_inline public explicit_return_type "GtkAccelGroup"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkAccelGroup*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 348457 "gobj_copy"
	public explicit_return_type "GtkAccelGroup"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs."
      end

      operation 348585 "AccelGroup"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 348713 "create"
	class_operation public explicit_return_type "Glib::RefPtr<AccelGroup>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Creates a new Gtk::AccelGroup object.
   * @return A Glib::RefPtr<> to a newly created Gtk::AccelGroup object.
   "
      end

      operation 348841 "lock"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Locks the given accelerator group.
   * 
   * Locking an acelerator group prevents the accelerators contained
   * within it to be changed during runtime. Refer to
   * gtk_accel_map_change_entry() about runtime accelerator changes.
   * 
   * If called more than once, @a accel_group  remains locked until
   * unlock() has been called an equivalent number
   * of times.
   "
      end

      operation 348969 "unlock"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Undoes the last call to lock() on this @a accel_group .
   "
      end

      operation 349097 "disconnect_key"
	public explicit_return_type "bool"
	nparams 2
	  param in name "accel_key" explicit_type "guint"
	  param in name "accel_mods" explicit_type "Gdk::ModifierType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Removes an accelerator previously installed through
   * connect().
   * @param accel_key Key value of the accelerator.
   * @param accel_mods Modifier combination of the accelerator.
   * @return <tt>true</tt> if there was an accelerator which could be 
   * removed, <tt>false</tt> otherwise.
   "
      end

      operation 349225 "valid"
	class_operation public explicit_return_type "bool"
	nparams 2
	  param in name "keyval" explicit_type "guint"
	  param in name "modifiers" explicit_type "Gdk::ModifierType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Determines whether a given keyval and modifier mask constitute
  * a valid keyboard accelerator. For example, the 'a' keyval
  * plus Gdk::CONTROL_MASK is valid - this is a \"Ctrl+a\" accelerator.
  * But you can't, for instance, use the GDK_Control_L keyval
  * as an accelerator.
  "
      end

      operation 349353 "parse"
	class_operation public explicit_return_type "void"
	nparams 3
	  param in name "accelerator" explicit_type "Glib::ustring"
	  param inout name "accelerator_key" explicit_type "guint"
	  param inout name "accelerator_mods" explicit_type "Gdk::ModifierType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Parse the accelerator string.
   * @param accelerator See the Gtk::AccelKey constructor for the format.
   * @param accelerator_key Output argument
   * @param accelerator_mods Output argument
   "
      end

      operation 349481 "name"
	class_operation public explicit_return_type "Glib::ustring"
	nparams 2
	  param in name "accelerator_key" explicit_type "guint"
	  param in name "accelerator_mods" explicit_type "Gdk::ModifierType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Converts an accelerator keyval and modifier mask
   * into a string parseable by parse().
   * For example, if you pass in 'q' and Gdk::CONTROL_MASK, it returns \"&lt;Control&gt;q\".
   "
      end

      operation 349609 "set_default_mod_mask"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "default_mod_mask" explicit_type "Gdk::ModifierType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the modifiers that will be considered significant for keyboard
   * accelerators. The default mod mask is Gdk::CONTROL_MASK |
   * Gdk::SHIFT_MASK | Gdk::MOD1_MASK, that is, Control, Shift, and Alt.
   * Other modifiers will ignored by default.
   * You must include at least the three default modifiers in any
   * value you pass to this function.
   *
   * The default mod mask should be changed on application startup,
   * before using any accelerator groups.
   "
      end

      operation 349737 "get_default_mod_mask"
	class_operation public explicit_return_type "Gdk::ModifierType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/ See set_default_mod_mask()."
      end

      operation 349865 "activate"
	public explicit_return_type "bool"
	nparams 4
	  param in name "accel_quark" explicit_type "GQuark"
	  param in name "acceleratable" explicit_type "Glib::RefPtr<Glib::Object>"
	  param in name "accel_key" explicit_type "guint"
	  param in name "accel_mods" explicit_type "Gdk::ModifierType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO: This is undocumented in GTK+ at the moment. When would it be used and where does the quark come from? murrayc."
      end

      operation 349993 "activate"
	class_operation public explicit_return_type "bool"
	nparams 3
	  param inout name "object" explicit_type "Gtk::Object"
	  param in name "accel_key" explicit_type "guint"
	  param in name "accel_mods" explicit_type "Gdk::ModifierType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Let's not wrap this, because the GtkAccelGroupFindFunc callback uses GClosures, and it's not clear that this is useful.
AccelKey find(const SlotFind& slot);
GtkAccelKey*	gtk_accel_group_find(GtkAccelGroup* accel_group, GtkAccelGroupFindFunc find_func, gpointer data);
* Finds the first accelerator in any Gtk::AccelGroup attached
   * to @a object  that matches @a accel_key  and @a accel_mods , and
   * activates that accelerator.
   * If an accelerator was activated and handled this keypress, <tt>true</tt>
   * is returned.
   * @param object The G::Object, usually a Gtk::Window, on which
   * to activate the accelerator.
   * @param accel_key Accelerator keyval from a key event.
   * @param accel_mods Keyboard state mask from a key event.
   * @return <tt>true</tt> if the accelerator was handled, <tt>false</tt> otherwise.
   "
      end

      operation 350121 "signal_accel_activate"
	public explicit_return_type "Glib::SignalProxy3< bool,const Glib::RefPtr<Glib::Object>&,guint,Gdk::ModifierType >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO: Discover real parameter names:"
      end

      operation 131113 "signal_accel_changed"
	public explicit_return_type "Glib::SignalProxy3< void,guint,Gdk::ModifierType,GClosure* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO: The C type is unpleasant:"
      end

      operation 131241 "on_accel_changed"
	cpp_virtual protected explicit_return_type "void"
	nparams 3
	  param in name "keyval" explicit_type "guint"
	  param in name "modifier" explicit_type "Gdk::ModifierType"
	  param inout name "accel_closure" explicit_type "GClosure"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} * ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} * ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end
    end

    class 129065 "AccelKey"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/accelkey.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Defines accelerator key combinations.
 * For instance, pressing Control-Q to activate the File|Quit menu item.
 * Typedefed as Gtk::Menu::AccelKey
 *
 * By defining accelerator paths you can allow the user of your application
 * to change accelerators himself. An example of an accelerator might be
 * \"<MainWindow>/File/Open\". Modified accelerators may be saved 
 * @see Gtk::AccelMap
 * @ingroup Menus
 "
      operation 131369 "AccelKey"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 131497 "AccelKey"
	public explicit_return_type ""
	nparams 3
	  param in name "accel_key" explicit_type "guint"
	  param in name "accel_mods" explicit_type "Gdk::ModifierType"
	  param in name "accel_path" explicit_type "Glib::ustring"
	    defaultvalue " \"\""
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}, ${t1} ${p1}, const ${t2} & ${p2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, const ${t2} & ${p2}${)}${throw}{
${body}}
"
	
	
	
	
	comment "* AccelKey constructor.
  * @param accel_key For instance, 'q'
  * @param accel_mods For instance, Gdk::CONTROL_MASK
  * @param accel_path For instance, \"<MainWindow>/File/Open\"
  "
      end

      operation 131625 "AccelKey"
	public explicit_return_type ""
	nparams 2
	  param in name "accelerator" explicit_type "Glib::ustring"
	  param in name "accel_path" explicit_type "Glib::ustring"
	    defaultvalue " Glib::ustring()"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${throw}{
${body}}
"
	
	
	
	
	comment "* AccelKey constructor.
   * @param accelerator For instance, &quot;&lt;control&gt;q&quot; - Use 
   *     &lt;control&gt;, &lt;shift&gt;, &lt;alt&gt; and &lt;release&gt;. 
   *     Use F1, F2, etc, for function keys.
   * @param accel_path For instance, \"<MainWindow>/File/Open\"
   "
      end

      operation 131753 "AccelKey"
	public explicit_return_type ""
	nparams 1
	  param in name "src" type class_ref 129065 // AccelKey
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 131881 "operator ="
	public return_type class_ref 129065 // AccelKey
	nparams 1
	  param in name "src" type class_ref 129065 // AccelKey
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 132009 "is_null"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 132137 "get_key"
	const public explicit_return_type "guint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "*
   * Gets the accelerator key.
   "
      end

      operation 132265 "get_mod"
	const public explicit_return_type "Gdk::ModifierType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "*
   * Gets the accelerator modifier.
   "
      end

      operation 132393 "get_path"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "*
   * Gets the accelerator path.
   "
      end

      operation 132521 "get_abbrev"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "*
   * Gets the accelerator representation for labels.
   "
      end

      attribute 128169 "key_"
	protected explicit_type "guint"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 128297 "mod_"
	protected explicit_type "Gdk::ModifierType"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 128425 "path_"
	protected explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 129193 "AccelLabel"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/accellabel.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* A label which displays an accelerator key on the right of the text.
 * Used for menu item labels, for instance.
 *
 * @ingroup Widgets
 "
      classrelation 128809 // <generalisation>
	relation 128809 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 128809 // <generalisation>
	  b parent class_ref 129321 // Label
      end

      class 129449 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 129193 // AccelLabel
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 128937 // <realization>
	  relation 128937 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 128937 // <realization>
	    b parent class_ref 129193 // AccelLabel
	end
      end

      class 129705 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "AccelLabel_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 129833 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkAccelLabel"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 129961 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkAccelLabelClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 132649 "~AccelLabel"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 129321 // accellabel_class_ (<directional composition>)
	relation 129321 *-->
	  a role_name "accellabel_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 129321 // accellabel_class_ (<directional composition>)
	  b parent class_ref 129705 // CppClassType
      end

      operation 132777 "AccelLabel"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 129193 // AccelLabel
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 132905 "operator ="
	private return_type class_ref 129193 // AccelLabel
	nparams 1
	  param in name "" type class_ref 129193 // AccelLabel
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 133033 "AccelLabel"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 133161 "AccelLabel"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkAccelLabel"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 133289 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 133417 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 133545 "gobj"
	cpp_inline public explicit_return_type "GtkAccelLabel"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkAccelLabel*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 133673 "gobj"
	const cpp_inline public explicit_return_type "GtkAccelLabel"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkAccelLabel*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 133801 "AccelLabel"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::
The default ctor doesn't correspond to any _new function, but gtkmenuitem.cc does a simple g_object_new() with no properties.
* Default constructor to create an AccelLabel object
   "
      end

      operation 133929 "AccelLabel"
	public explicit_return_type ""
	nparams 2
	  param in name "label" explicit_type "Glib::ustring"
	  param in name "mnemonic" explicit_type "bool"
	    defaultvalue " false"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${throw}{
${body}}
"
	
	
	
	
	comment "* Constructor to create an AccelLabel object with a default label
   * @param label The label string.
   * @param mnemonic If true, characters preceded by an underscore (_) will be underlined and used as a keyboard accelerator.
   "
      end

      operation 134057 "set_accel_widget"
	public explicit_return_type "void"
	nparams 1
	  param in name "accel_widget" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the widget to be monitored by this accelerator label.
   * @param accel_widget The widget to be monitored.
   "
      end

      operation 134185 "unset_accel_widget"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/ Forget the accel widget previously set by set_accel_widget()."
      end

      operation 134313 "get_accel_widget"
	public return_type class_ref 130089 // Widget
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Fetches the widget monitored by this accelerator label. See
   * set_accel_widget().
   * @return The object monitored by the accelerator label,
   * or <tt>0</tt>.
   "
      end

      operation 134441 "get_accel_widget"
	const public return_type class_ref 130089 // Widget
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Fetches the widget monitored by this accelerator label. See
   * set_accel_widget().
   * @return The object monitored by the accelerator label,
   * or <tt>0</tt>.
   "
      end

      operation 134569 "get_accel_width"
	const public explicit_return_type "guint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the width needed to display this accelerator label. This is used by menus to align all of the Gtk::MenuItem widgets, and shouldn't be needed by applications.
   * @return Width of this accelerator label.
   "
      end

      operation 134697 "refetch"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Recreates the string representing the accelerator keys.
   * @return Always returns <tt>false</tt>.
   "
      end

      operation 134825 "property_accel_widget"
	public explicit_return_type "Glib::PropertyProxy<Gtk::Widget*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "_WRAP_PROPERTY(\"accel-closure\", Glib::Object) //GClosure
* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 134953 "property_accel_widget"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Gtk::Widget*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end
    end

    class 130217 "Action"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/action.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 130345 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 130217 // Action
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 129577 // <realization>
	  relation 129577 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 129577 // <realization>
	    b parent class_ref 130217 // Action
	end
      end

      class 130601 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Action_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 130729 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkAction"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 130857 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkActionClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 129961 // action_class_ (<directional composition>)
	relation 129961 *-->
	  a role_name "action_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 129961 // action_class_ (<directional composition>)
	  b parent class_ref 130601 // CppClassType
      end

      operation 135081 "Action"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 130217 // Action
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 135209 "operator ="
	private return_type class_ref 130217 // Action
	nparams 1
	  param in name "" type class_ref 130217 // Action
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 135337 "Action"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 135465 "Action"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkAction"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 135593 "~Action"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 135721 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 135849 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 135977 "gobj"
	cpp_inline public explicit_return_type "GtkAction"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkAction*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 136105 "gobj"
	const cpp_inline public explicit_return_type "GtkAction"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkAction*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 136233 "gobj_copy"
	public explicit_return_type "GtkAction"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs."
      end

      operation 136361 "Action"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 136489 "Action"
	protected explicit_return_type ""
	nparams 4
	  param in name "name" explicit_type "Glib::ustring"
	  param in name "stock_id" type class_ref 130985 // StockID
	  param in name "label" explicit_type "Glib::ustring"
	    defaultvalue " Glib::ustring()"
	  param in name "tooltip" explicit_type "Glib::ustring"
	    defaultvalue " Glib::ustring()"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 136617 "create"
	class_operation public explicit_return_type "Glib::RefPtr<Action>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 765993 "create"
	class_operation public explicit_return_type "Glib::RefPtr<Action>"
	nparams 3
	  param in name "name" explicit_type "Glib::ustring"
	  param in name "label" explicit_type "Glib::ustring"
	    defaultvalue "  Glib::ustring()"
	  param in name "tooltip" explicit_type "Glib::ustring"
	    defaultvalue "  Glib::ustring()"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 766121 "create"
	class_operation public explicit_return_type "Glib::RefPtr<Action>"
	nparams 4
	  param in name "name" explicit_type "Glib::ustring"
	  param in name "stock_id" explicit_type "Gtk::StockID"
	  param in name "label" explicit_type "Glib::ustring"
	    defaultvalue "  Glib::ustring()"
	  param in name "tooltip" explicit_type "Glib::ustring"
	    defaultvalue "  Glib::ustring()"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 766249 "get_name"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the name of the action.
   * @return The name of the action. The string belongs to GTK+ and should not
   * be freed.
   * 
   * Since: 2.4.
   "
      end

      operation 766377 "is_sensitive"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether the action is effectively sensitive.
   * @return <tt>true</tt> if the action and its associated action group 
   * are both sensitive.
   * 
   * Since: 2.4.
   "
      end

      operation 766505 "get_sensitive"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether the action itself is sensitive. Note that this doesn't 
   * necessarily mean effective sensitivity. See is_sensitive() 
   * for that.
   * @return <tt>true</tt> if the action itself is sensitive.
   * 
   * Since: 2.4.
   "
      end

      operation 766633 "set_tooltip"
	public explicit_return_type "void"
	nparams 1
	  param in name "tooltip" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO: Just wrap gtk_action_set_sensitive() when they put it in GTK+."
      end

      operation 766761 "set_sensitive"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO: Just wrap gtk_action_set_tooltip() when they put it in GTK+."
      end

      operation 766889 "is_visible"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether the action is effectively visible.
   * @return <tt>true</tt> if the action and its associated action group 
   * are both visible.
   * 
   * Since: 2.4.
   "
      end

      operation 767017 "get_visible"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether the action itself is visible. Note that this doesn't 
   * necessarily mean effective visibility. See is_sensitive() 
   * for that.
   * @return <tt>true</tt> if the action itself is visible.
   * 
   * Since: 2.4.
   "
      end

      operation 767145 "activate"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Emits the \"activate\" signal on the specified action, if it isn't 
   * insensitive. This gets called by the proxy widgets when they get 
   * activated.
   * 
   * It can also be used to manually activate an action.
   * 
   * Since: 2.4
   "
      end

      operation 767273 "create_icon"
	public return_type class_ref 131113 // Image
	nparams 1
	  param in name "icon_size" type class_ref 131241 // IconSize
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* This function is intended for use by action implementations to
   * create icons displayed in the proxy widgets.
   * @param icon_size The size of the icon that should be created.
   * @return A widget that displays the icon for this action.
   * 
   * Since: 2.4.
   "
      end

      operation 767401 "create_menu_item"
	public return_type class_ref 131369 // MenuItem
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Creates a menu item widget that proxies for the given action.
   * @return A menu item connected to the action.
   * 
   * Since: 2.4.
   "
      end

      operation 767529 "create_tool_item"
	public return_type class_ref 131497 // ToolItem
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Creates a toolbar item widget that proxies for the given action.
   * @return A toolbar item connected to the action.
   * 
   * Since: 2.4.
   "
      end

      operation 767657 "connect_proxy"
	public explicit_return_type "void"
	nparams 1
	  param inout name "proxy" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Connects a widget to an action object as a proxy.  Synchronises 
   * various properties of the action with the widget (such as label 
   * text, icon, tooltip, etc), and attaches a callback so that the 
   * action gets activated when the proxy widget does.
   * 
   * If the widget is already connected to an action, it is disconnected
   * first.
   * 
   * Since: 2.4
   * @param proxy The proxy widget.
   "
      end

      operation 767785 "disconnect_proxy"
	public explicit_return_type "void"
	nparams 1
	  param inout name "proxy" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Disconnects a proxy widget from an action.  
   * Does <em>not</em> destroy the widget, however.
   * 
   * Since: 2.4
   * @param proxy The proxy widget.
   "
      end

      operation 767913 "get_proxies"
	public explicit_return_type "Glib::SListHandle<Widget*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the proxy widgets for an action.
   * @return A G::SList of proxy widgets. The list is owned by the action and
   * must not be modified.
   * 
   * Since: 2.4.
   "
      end

      operation 768041 "get_proxies"
	const public explicit_return_type "Glib::SListHandle<const Widget*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the proxy widgets for an action.
   * @return A G::SList of proxy widgets. The list is owned by the action and
   * must not be modified.
   * 
   * Since: 2.4.
   "
      end

      operation 768169 "connect_accelerator"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Installs the accelerator for @a action  if @a action  has an
   * accel path and group. See set_accel_path() and 
   * set_accel_group()
   * 
   * Since multiple proxies may independently trigger the installation
   * of the accelerator, the @a action  counts the number of times this
   * function has been called and doesn't remove the accelerator until
   * disconnect_accelerator() has been called as many times.
   * 
   * Since: 2.4
   "
      end

      operation 768297 "disconnect_accelerator"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Undoes the effect of one call to connect_accelerator().
   * 
   * Since: 2.4
   "
      end

      class 131625 "SlotActivate"
	visibility package stereotype "typedef" explicit_base_type "sigc::slot<void>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 768425 "signal_activate"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 768553 "set_accel_path"
	public explicit_return_type "void"
	nparams 1
	  param in name "accel_path" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Used by AccelGroup:
* Sets the accel path for this action.  All proxy widgets associated
   * with the action will have this accel path, so that their
   * accelerators are consistent.
   * 
   * Since: 2.4
   * @param accel_path The accelerator path.
   "
      end

      operation 768681 "set_accel_group"
	public explicit_return_type "void"
	nparams 1
	  param in name "accel_group" explicit_type "Glib::RefPtr<AccelGroup>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the Gtk::AccelGroup in which the accelerator for this action
   * will be installed.
   * 
   * Since: 2.4
   * @param accel_group A Gtk::AccelGroup or <tt>0</tt>.
   "
      end

      operation 768809 "property_name"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 768937 "property_label"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 769065 "property_label"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 769193 "property_short_label"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 769321 "property_short_label"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 769449 "property_tooltip"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 769577 "property_tooltip"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 769705 "property_stock_id"
	public explicit_return_type "Glib::PropertyProxy<StockID>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 769833 "property_stock_id"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<StockID>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 769961 "property_visible_horizontal"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 770089 "property_visible_horizontal"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 770217 "property_visible_vertical"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 770345 "property_visible_vertical"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 770473 "property_is_important"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 770601 "property_is_important"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 770729 "property_hide_if_empty"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 770857 "property_hide_if_empty"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 770985 "property_sensitive"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 771113 "property_sensitive"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 771241 "property_visible"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 771369 "property_visible"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 771497 "block_activate_from"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "proxy" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "For use by child actions:  
* Disables calls to the activate()
   * function by signals on the given proxy widget.  This is used to
   * break notification loops for things like check or radio actions.
   * 
   * This function is intended for use by action implementations.
   * 
   * Since: 2.4
   * @param proxy A proxy widget.
   "
      end

      operation 771625 "unblock_activate_from"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "proxy" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Re-enables calls to the activate()
   * function by signals on the given proxy widget.  This undoes the
   * blocking done by block_activate_from().
   * 
   * This function is intended for use by action implementations.
   * 
   * Since: 2.4
   * @param proxy A proxy widget.
   "
      end

      operation 771753 "create_menu_item_vfunc"
	cpp_virtual protected return_type class_ref 130089 // Widget
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Widget-creation routines:"
      end

      operation 771881 "create_tool_item_vfunc"
	cpp_virtual protected return_type class_ref 130089 // Widget
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 142761 "connect_proxy_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "proxy" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 142889 "disconnect_proxy_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "proxy" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 772009 "on_activate"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end
    end

    class 131753 "ActionGroup"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/actiongroup.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk"
      class 131881 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 131753 // ActionGroup
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 130217 // <realization>
	  relation 130217 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 130217 // <realization>
	    b parent class_ref 131753 // ActionGroup
	end
      end

      class 132137 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "ActionGroup_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 132265 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkActionGroup"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 132393 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkActionGroupClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 130601 // actiongroup_class_ (<directional composition>)
	relation 130601 *-->
	  a role_name "actiongroup_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 130601 // actiongroup_class_ (<directional composition>)
	  b parent class_ref 132137 // CppClassType
      end

      operation 143145 "ActionGroup"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 131753 // ActionGroup
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 143273 "operator ="
	private return_type class_ref 131753 // ActionGroup
	nparams 1
	  param in name "" type class_ref 131753 // ActionGroup
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 143401 "ActionGroup"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 143529 "ActionGroup"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkActionGroup"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 143657 "~ActionGroup"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 143785 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 143913 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 144041 "gobj"
	cpp_inline public explicit_return_type "GtkActionGroup"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkActionGroup*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 144169 "gobj"
	const cpp_inline public explicit_return_type "GtkActionGroup"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkActionGroup*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 144297 "gobj_copy"
	public explicit_return_type "GtkActionGroup"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs."
      end

      operation 144425 "ActionGroup"
	protected explicit_return_type ""
	nparams 1
	  param in name "name" explicit_type "Glib::ustring"
	    defaultvalue " Glib::ustring()"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 144553 "create"
	class_operation public explicit_return_type "Glib::RefPtr<ActionGroup>"
	nparams 1
	  param in name "name" explicit_type "Glib::ustring"
	    defaultvalue "  Glib::ustring()"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 773289 "get_name"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the name of the action group.
   * @return The name of the action group.
   * 
   * Since: 2.4.
   "
      end

      operation 144809 "get_sensitive"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns <tt>true</tt> if the group is sensitive.  The constituent actions
   * can only be logically sensitive (see is_sensitive()) if
   * they are sensitive (see get_sensitive()) and their group
   * is sensitive.
   * @return <tt>true</tt> if the group is sensitive.
   * 
   * Since: 2.4.
   "
      end

      operation 144937 "set_sensitive"
	public explicit_return_type "void"
	nparams 1
	  param in name "sensitive" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Changes the sensitivity of @a action_group 
   * 
   * Since: 2.4
   * @param sensitive New sensitivity.
   "
      end

      operation 145065 "get_visible"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns <tt>true</tt> if the group is visible.  The constituent actions
   * can only be logically visible (see is_visible()) if
   * they are visible (see get_visible()) and their group
   * is visible.
   * @return <tt>true</tt> if the group is sensitive.
   * 
   * Since: 2.4.
   "
      end

      operation 145193 "set_visible"
	public explicit_return_type "void"
	nparams 1
	  param in name "visible" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Changes the visible of @a action_group .
   * 
   * Since: 2.4
   * @param visible New visiblity.
   "
      end

      operation 145321 "get_action"
	public explicit_return_type "Glib::RefPtr<Action>"
	nparams 1
	  param in name "action_name" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Looks up an action in the action group by name.
   * @param action_name The name of the action.
   * @return The action, or <tt>0</tt> if no action by that name exists
   * 
   * Since: 2.4.
   "
      end

      operation 145449 "get_action"
	const public explicit_return_type "Glib::RefPtr<const Action>"
	nparams 1
	  param in name "action_name" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Looks up an action in the action group by name.
   * @param action_name The name of the action.
   * @return The action, or <tt>0</tt> if no action by that name exists
   * 
   * Since: 2.4.
   "
      end

      operation 145577 "get_actions"
	public explicit_return_type "Glib::ListHandle< Glib::RefPtr<Action> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Lists the actions in the action group.
   * @return An allocated list of the action objects in the action group
   * 
   * Since: 2.4.
   "
      end

      operation 145705 "get_actions"
	const public explicit_return_type "Glib::ListHandle< Glib::RefPtr<const Action> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Lists the actions in the action group.
   * @return An allocated list of the action objects in the action group
   * 
   * Since: 2.4.
   "
      end

      operation 145833 "add"
	public explicit_return_type "void"
	nparams 1
	  param in name "action" explicit_type "Glib::RefPtr<Action>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 145961 "add"
	public explicit_return_type "void"
	nparams 2
	  param in name "action" explicit_type "Glib::RefPtr<Action>"
	  param in name "accel_key" type class_ref 129065 // AccelKey
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "We want it to always try to use the stock accelerator,
so we use gtk_action_group_add_action_with_accel(), instead of gtk_action_group_add_action(),
passing null for the accelerator."
      end

      operation 146089 "add"
	public explicit_return_type "void"
	nparams 2
	  param in name "action" explicit_type "Glib::RefPtr<Action>"
	  param in name "slot" type class_ref 131625 // SlotActivate
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "We need to duplicate the gtk_action_group_add_action_with_accel() implementation, because we want to
use AccelKey, not just the accelerator string format that is _one_ of the ways to create an AccelKey.
TODO: Could this whole class have an STL-style interface?"
      end

      operation 146217 "add"
	public explicit_return_type "void"
	nparams 3
	  param in name "action" explicit_type "Glib::RefPtr<Action>"
	  param in name "accel_key" type class_ref 129065 // AccelKey
	  param in name "slot" type class_ref 131625 // SlotActivate
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 146345 "remove"
	public explicit_return_type "void"
	nparams 1
	  param in name "action" explicit_type "Glib::RefPtr<Action>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Removes an action object from the action group.
   * 
   * Since: 2.4
   * @param action An action.
   "
      end

      operation 146473 "signal_connect_proxy"
	public explicit_return_type "Glib::SignalProxy2< void,const Glib::RefPtr<Action>&,Widget* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "These are just C convenience methods:
These are also just C convenience methods that are useless unless you are using the other convenience methods:"
      end

      operation 146601 "signal_disconnect_proxy"
	public explicit_return_type "Glib::SignalProxy2< void,const Glib::RefPtr<Action>&,Widget* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 146729 "signal_pre_activate"
	public explicit_return_type "Glib::SignalProxy1< void,const Glib::RefPtr<Action>& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 146857 "signal_post_activate"
	public explicit_return_type "Glib::SignalProxy1< void,const Glib::RefPtr<Action>& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 132521 "Adjustment"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/adjustment.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* A class representing an adjustable bounded value.
 *
 * The Gtk::Adjustment object represents a value which has an associated
 * lower and upper bound, together with step and page increments, and a page
 * size.  It is used within several gtkmm widgets, including
 * Gtk::SpinButton, Gtk::Viewport, and Gtk::Range (which is a base class for
 * Gtk::HScrollbar, Gtk::VScrollbar, Gtk::HScale, and Gtk::VScale).
 *
 * The Gtk::Adjustment object does not update the value itself. Instead it
 * is left up to the owner of the Gtk::Adjustment to control the value.
 *
 * The owner of the Gtk::Adjustment typically calls the value_changed() and
 * changed() functions after changing the value and its bounds. This results
 * in the emission of the \"value_changed\" or \"changed\" signal respectively. 
 *
 "
      classrelation 130729 // <generalisation>
	relation 130729 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 130729 // <generalisation>
	  b parent class_ref 132649 // Object
      end

      class 281769 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 132521 // Adjustment
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 130857 // <realization>
	  relation 130857 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 130857 // <realization>
	    b parent class_ref 132521 // Adjustment
	end
      end

      class 281897 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Adjustment_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 282025 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkAdjustment"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 282153 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkAdjustmentClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 773417 "~Adjustment"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 131241 // adjustment_class_ (<directional composition>)
	relation 131241 *-->
	  a role_name "adjustment_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 131241 // adjustment_class_ (<directional composition>)
	  b parent class_ref 281897 // CppClassType
      end

      operation 147113 "Adjustment"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 132521 // Adjustment
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 147241 "operator ="
	private return_type class_ref 132521 // Adjustment
	nparams 1
	  param in name "" type class_ref 132521 // Adjustment
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 147369 "Adjustment"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 147497 "Adjustment"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkAdjustment"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 147625 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 147753 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 147881 "gobj"
	cpp_inline public explicit_return_type "GtkAdjustment"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkAdjustment*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 148009 "gobj"
	const cpp_inline public explicit_return_type "GtkAdjustment"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkAdjustment*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 148137 "on_changed"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 148265 "on_value_changed"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      classrelation 131369 // <dependency>
	relation 131369 -_->
	  stereotype "friend"
	  a default
	    cpp default "${type}"
	    classrelation_ref 131369 // <dependency>
	  b parent class_ref 282281 // Range
      end

      classrelation 234153 // <dependency>
	relation 234153 -_->
	  stereotype "friend"
	  a default
	    cpp default "${type}"
	    classrelation_ref 234153 // <dependency>
	  b parent class_ref 282409 // HScrollbar
      end

      classrelation 234281 // <dependency>
	relation 234281 -_->
	  stereotype "friend"
	  a default
	    cpp default "${type}"
	    classrelation_ref 234281 // <dependency>
	  b parent class_ref 282537 // VScrollbar
      end

      operation 148393 "Adjustment"
	public explicit_return_type ""
	nparams 6
	  param in name "value" explicit_type "double"
	  param in name "lower" explicit_type "double"
	  param in name "upper" explicit_type "double"
	  param in name "step_increment" explicit_type "double"
	    defaultvalue " 1"
	  param in name "page_increment" explicit_type "double"
	    defaultvalue " 10"
	  param in name "page_size" explicit_type "double"
	    defaultvalue " 0"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throw}{
${body}}
"
	
	
	
	
	comment "* Constructor to create an Adjustment object.
   * @param value The initial value
   * @param lower The minimum value
   * @param upper The maximum value
   * @param step_increment The step increment
   * @param page_increment The page increment
   * @param page_size The page size
   "
      end

      operation 148521 "changed"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Emits a \"changed\" signal from the Adjustment.  This is typically called by the owner of the Adjustment after it has changed any of the Adjustment fields other than the value.
   "
      end

      operation 148649 "value_changed"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Emits a \"value_changed\" signal from the Adjustment.  This is typically called by the owner of the Adjustment after it has changed the Adjustment value field.
   "
      end

      operation 148777 "clamp_page"
	public explicit_return_type "void"
	nparams 2
	  param in name "lower" explicit_type "double"
	  param in name "upper" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Updates the Adjustment value to ensure that the range between the parameters @a lower  and @a upper  is in the current page (i.e.\\ between @a value  and @a value  + @a page_size ).  If this range is larger than the page size, then only the start of it will be in the current page.  A \"changed\" signal will be emitted if the value is changed.
   * @param upper The upper value.
   * @param lower The lower value.
   "
      end

      operation 773545 "set_value"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the current value of the Adjustment
   * @param value The new value of the Adjustment.
   "
      end

      operation 149033 "get_value"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the current value of the adjustment. See
   * set_value().
   * @return The current value of the adjustment.
   "
      end

      operation 149161 "get_lower"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " Other internal fields accessors
* Retrieve the @a lower member variable.
   * @return The current value of @a lower.
   "
      end

      operation 149289 "get_upper"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieve the @a upper member variable.
   * @return The current value of @a upper.
   "
      end

      operation 149417 "get_step_increment"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieve the @a step_increment variable.
   * @return The current value of @a step_increment.
   "
      end

      operation 149545 "get_page_increment"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieve the @a page_increment variable.
   * @return The current value of @a page_increment.
   "
      end

      operation 773673 "get_page_size"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieve the @a page_size variable.
   * @return The current value of @a page_size.
   "
      end

      operation 149801 "set_lower"
	public explicit_return_type "void"
	nparams 1
	  param in name "lower" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " TODO: This section needs changing. We must be able to set more at a time,
 emitting \"changed\" signal only once.
* Sets the @a lower member variable
   * @param lower The value to set the @a lower member variable to.
   "
      end

      operation 773801 "set_upper"
	public explicit_return_type "void"
	nparams 1
	  param in name "upper" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the @a upper member variable
   * @param upper The value to set the @a upper member variable to.
   "
      end

      operation 150057 "set_step_increment"
	public explicit_return_type "void"
	nparams 1
	  param in name "incr" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the @a step_increment member variable
   * @param incr The value to set the @a step_incrememnt member variable to.
   "
      end

      operation 150185 "set_page_increment"
	public explicit_return_type "void"
	nparams 1
	  param in name "incr" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the @a page_increment member variable
   * @param incr The value to set the @a page_increment member variable to.
   "
      end

      operation 150313 "set_page_size"
	public explicit_return_type "void"
	nparams 1
	  param in name "size" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the @a page_size member variable
   * @param size The value to set the @ page_size member varialbe to.
   "
      end

      operation 150441 "signal_changed"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 150569 "signal_value_changed"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 282793 "Alignment"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/alignment.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* A widget which controls the alignment and size of its child.
 *
 * Normally, a widget is allocated at least as much size as it requests, and,
 * most widgets expand to fill any extra allocated space, but sometimes
 * this behavior is not desired. The alignment widget allows the
 * programmer to specify how a widget should expand and position itself
 * to fill the area it is allocated.
 *
 * It has four settings: xscale, yscale, xalign, and yalign:
 * The scale settings specify how much the child widget should expand to fill the space allocated to the Gtk::Alignment. The values can range from 0 (meaning the child doesn't expand at all) to 1 (meaning the child expands to fill all of the available space).
 * The align settings place the child widget within the available area. The values range from 0 (top or left) to 1 (bottom or right). Of course, if the scale settings are both set to 1, the alignment settings have no effect.
 *
 * @ingroup Widgets
 * @ingroup Containers
 "
      classrelation 234409 // <generalisation>
	relation 234409 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 234409 // <generalisation>
	  b parent class_ref 281385 // Bin
      end

      class 282921 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 282793 // Alignment
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 131881 // <realization>
	  relation 131881 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 131881 // <realization>
	    b parent class_ref 282793 // Alignment
	end
      end

      class 283049 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Alignment_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 134441 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkAlignment"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 283177 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkAlignmentClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 150697 "~Alignment"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 132265 // alignment_class_ (<directional composition>)
	relation 132265 *-->
	  a role_name "alignment_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 132265 // alignment_class_ (<directional composition>)
	  b parent class_ref 283049 // CppClassType
      end

      operation 150825 "Alignment"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 282793 // Alignment
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 150953 "operator ="
	private return_type class_ref 282793 // Alignment
	nparams 1
	  param in name "" type class_ref 282793 // Alignment
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 151081 "Alignment"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 151209 "Alignment"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkAlignment"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 151337 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 151465 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 151593 "gobj"
	cpp_inline public explicit_return_type "GtkAlignment"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkAlignment*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 151721 "gobj"
	const cpp_inline public explicit_return_type "GtkAlignment"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkAlignment*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 151849 "Alignment"
	public explicit_return_type ""
	nparams 4
	  param in name "xalign" explicit_type "float"
	    defaultvalue " 0.5"
	  param in name "yalign" explicit_type "float"
	    defaultvalue " 0.5"
	  param in name "xscale" explicit_type "float"
	    defaultvalue " 1.0"
	  param in name "yscale" explicit_type "float"
	    defaultvalue " 1.0"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::
* Constructor to create an Alignment object.
   * @param xalign The initial horizontal alignment of the child.
   * @param yalign The initial vertical alignment of the child.
   * @param xscale The initial amount that the child expands horizontally to fill up unused space.
   * @param yscale The initial amount that the child expands vertically to fill up unused space.
   "
      end

      operation 151977 "Alignment"
	public explicit_return_type ""
	nparams 4
	  param in name "xalign" type class_ref 134697 // AlignmentEnum
	  param in name "yalign" type class_ref 134697 // AlignmentEnum
	    defaultvalue " Gtk::ALIGN_CENTER"
	  param in name "xscale" explicit_type "float"
	    defaultvalue " 1.0"
	  param in name "yscale" explicit_type "float"
	    defaultvalue " 1.0"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throw}{
${body}}
"
	
	
	
	
	comment "* Constructor to create an Alignment object.
   * @param xalign A Gtk::AlignmentEnum describing the initial horizontal alignment of the child.
   * @param yalign A Gtk::AlignmentEnum describing the initial vertical alignment of the child.
   * @param xscale The initial amount that the child expands horizontally to fill up unused space.
   * @param yscale The initial amount that the child expands vertically to fill up unused space.
   "
      end

      operation 152105 "set"
	public explicit_return_type "void"
	nparams 4
	  param in name "xalign" explicit_type "float"
	    defaultvalue " 0.5"
	  param in name "yalign" explicit_type "float"
	    defaultvalue " 0.5"
	  param in name "xscale" explicit_type "float"
	    defaultvalue " 1.0"
	  param in name "yscale" explicit_type "float"
	    defaultvalue "  1.0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the Alignment values.
   * @param xalign The horizontal alignment of the child of this Alignment, from 0 (left) to 1 (right).
   * @param yalign The vertical alignment of the child of this Alignment, from 0 (top) to 1 (bottom).
   * @param xscale The amount that the child expands horizontally to fill up unused space, from 0 to 1.  A value of 0 indicates that the child widget should never expand.  A value of 1 indicates that the child widget will expand to fill all the space allocated for the Alignment.
   * @param yscale The amount that the child widget expands vertically to fill up unused space from 0 to 1.  The values are similar to @a xscale .
   "
      end

      operation 152233 "set"
	public explicit_return_type "void"
	nparams 4
	  param in name "xalign" type class_ref 134697 // AlignmentEnum
	  param in name "yalign" type class_ref 134697 // AlignmentEnum
	    defaultvalue " Gtk::ALIGN_CENTER"
	  param in name "xscale" explicit_type "float"
	    defaultvalue " 1.0"
	  param in name "yscale" explicit_type "float"
	    defaultvalue "  1.0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the Alignment values.
   * @param xalign The horizontal alignment of the child of this Alignment, from 0 (left) to 1 (right).
   * @param yalign The vertical alignment of the child of this Alignment, from 0 (top) to 1 (bottom).
   * @param xscale The amount that the child expands horizontally to fill up unused space, from 0 to 1.  A value of 0 indicates that the child widget should never expand.  A value of 1 indicates that the child widget will expand to fill all the space allocated for the Alignment.
   * @param yscale The amount that the child widget expands vertically to fill up unused space from 0 to 1.  The values are similar to @a xscale .
   "
      end

      operation 773929 "set_padding"
	public explicit_return_type "void"
	nparams 4
	  param in name "padding_top" explicit_type "guint"
	  param in name "padding_bottom" explicit_type "guint"
	  param in name "padding_left" explicit_type "guint"
	  param in name "padding_right" explicit_type "guint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "New in GTK+ 2.4
* Sets the padding on the different sides of the widget.
   * The padding adds blank space to the sides of the widget. For instance,
   * this can be used to indent the child widget towards the right by adding
   * padding on the left.
   * 
   * Since: 2.4
   * @param padding_top The padding at the top of the widget.
   * @param padding_bottom The padding at the bottom of the widget.
   * @param padding_left The padding at the left of the widget.
   * @param padding_right The padding at the right of the widget.
   "
      end

      operation 152489 "get_padding"
	public explicit_return_type "void"
	nparams 4
	  param inout name "padding_top" explicit_type "guint"
	  param inout name "padding_bottom" explicit_type "guint"
	  param inout name "padding_left" explicit_type "guint"
	  param inout name "padding_right" explicit_type "guint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}, ${t3} & ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}, ${t3} & ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the padding on the different sides of the widget.
   * See set_padding().
   * 
   * Since: 2.4
   * @param padding_top Location to store the padding for the top of the widget, or <tt>0</tt>.
   * @param padding_bottom Location to store the padding for the bottom of the widget, or <tt>0</tt>.
   * @param padding_left Location to store the padding for the left of the widget, or <tt>0</tt>.
   * @param padding_right Location to store the padding for the right of the widget, or <tt>0</tt>.
   "
      end

      operation 774057 "property_xalign"
	public explicit_return_type "Glib::PropertyProxy<float>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 774185 "property_xalign"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<float>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 774313 "property_yalign"
	public explicit_return_type "Glib::PropertyProxy<float>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 774441 "property_yalign"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<float>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 774569 "property_xscale"
	public explicit_return_type "Glib::PropertyProxy<float>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 774697 "property_xscale"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<float>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 774825 "property_yscale"
	public explicit_return_type "Glib::PropertyProxy<float>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 774953 "property_yscale"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<float>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 775081 "property_top_padding"
	public explicit_return_type "Glib::PropertyProxy<guint>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "New in GTK+ 2.4
* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 775209 "property_top_padding"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<guint>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 775337 "property_bottom_padding"
	public explicit_return_type "Glib::PropertyProxy<guint>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 775465 "property_bottom_padding"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<guint>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 775593 "property_left_padding"
	public explicit_return_type "Glib::PropertyProxy<guint>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 775721 "property_left_padding"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<guint>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 775849 "property_right_padding"
	public explicit_return_type "Glib::PropertyProxy<guint>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 775977 "property_right_padding"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<guint>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end
    end

    class 134697 "AlignmentEnum"
      visibility package stereotype "enum"
      cpp_external cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Methods are overriden so you can use these simple enums, or floats for more precision.
   * @ingroup gtkmmEnums
   "
      attribute 172585 "ALIGN_LEFT"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 172713 "ALIGN_CENTER"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 172841 "ALIGN_RIGHT"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 172969 "ALIGN_TOP"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 173097 "ALIGN_BOTTOM"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 308265 "AnchorType"
      visibility package stereotype "enum"
      cpp_external cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 "
      attribute 181289 "ANCHOR_CENTER"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 181417 "ANCHOR_NORTH"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 181545 "ANCHOR_NORTH_WEST"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 181673 "ANCHOR_NORTH_EAST"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 181801 "ANCHOR_SOUTH"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 181929 "ANCHOR_SOUTH_WEST"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 182057 "ANCHOR_SOUTH_EAST"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 182185 "ANCHOR_WEST"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 182313 "ANCHOR_EAST"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 182441 "ANCHOR_N"
	public explicit_type ""
	init_value " ANCHOR_NORTH"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 182569 "ANCHOR_NW"
	public explicit_type ""
	init_value " ANCHOR_NORTH_WEST"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 182697 "ANCHOR_NE"
	public explicit_type ""
	init_value " ANCHOR_NORTH_EAST"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 182825 "ANCHOR_S"
	public explicit_type ""
	init_value " ANCHOR_SOUTH"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 182953 "ANCHOR_SW"
	public explicit_type ""
	init_value " ANCHOR_SOUTH_WEST"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 183081 "ANCHOR_SE"
	public explicit_type ""
	init_value " ANCHOR_SOUTH_EAST"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 183209 "ANCHOR_W"
	public explicit_type ""
	init_value " ANCHOR_WEST"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 183337 "ANCHOR_E"
	public explicit_type ""
	init_value " ANCHOR_EAST
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 283689 "Arrow"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/arrow.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* Produces an arrow pointing in one of the four cardinal directions.
 *
 * This is intended for use where a directional arrow (in one of the four
 * cardinal directions) is desired. As such, it has very limited
 * functionality and basically only draws itself in a particular direction
 * and with a particular shadow type.
 *
 * Gtk::Arrow will fill any space alloted to it, but since it is inherited
 * from Gtk::Misc, it can be padded and/or aligned, to fill exactly the
 * space the programmer desires.
 *
 * @ingroup Widgets
 "
      classrelation 132393 // <generalisation>
	relation 132393 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 132393 // <generalisation>
	  b parent class_ref 183465 // Misc
      end

      class 283817 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 283689 // Arrow
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 132521 // <realization>
	  relation 132521 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 132521 // <realization>
	    b parent class_ref 283689 // Arrow
	end
      end

      class 135337 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Arrow_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 283945 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkArrow"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 284073 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkArrowClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 778409 "~Arrow"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 132905 // arrow_class_ (<directional composition>)
	relation 132905 *-->
	  a role_name "arrow_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 132905 // arrow_class_ (<directional composition>)
	  b parent class_ref 135337 // CppClassType
      end

      operation 778537 "Arrow"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 283689 // Arrow
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 778665 "operator ="
	private return_type class_ref 283689 // Arrow
	nparams 1
	  param in name "" type class_ref 283689 // Arrow
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 778793 "Arrow"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 778921 "Arrow"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkArrow"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 779049 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 779177 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 779305 "gobj"
	cpp_inline public explicit_return_type "GtkArrow"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkArrow*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 779433 "gobj"
	const cpp_inline public explicit_return_type "GtkArrow"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkArrow*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 779561 "Arrow"
	public explicit_return_type ""
	nparams 2
	  param in name "arrow_type" type class_ref 284201 // ArrowType
	  param in name "shadow_type" type class_ref 284329 // ShadowType
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::
* Creates an arrow.
   *
   * @param arrow_type A Gtk::ArrowType enum describing the arrow direction.
   * @param shadow_type A Gtk::ShadowType enum describing the shadow type of
   * the arrow.
   "
      end

      operation 779689 "set"
	public explicit_return_type "void"
	nparams 2
	  param in name "arrow_type" type class_ref 284201 // ArrowType
	  param in name "shadow_type" type class_ref 284329 // ShadowType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " Changes the direction and shadow of an arrow.
* Sets the direction and shadow of this Arrow.
   * @param arrow_type A Gtk::ArrowType enum describing what arrow type to set this Arrow to.
   * @param shadow_type A Gtk::ShadowType enum describing what shadow type to set this Arrow to.
   "
      end

      operation 779817 "property_arrow_type"
	public explicit_return_type "Glib::PropertyProxy<ArrowType>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 779945 "property_arrow_type"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<ArrowType>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 780073 "property_shadow_type"
	public explicit_return_type "Glib::PropertyProxy<ShadowType>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 780201 "property_shadow_type"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<ShadowType>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end
    end

    class 284201 "ArrowType"
      visibility package stereotype "enum"
      cpp_external cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Used to indicate the direction in which a Gtk::Arrow should point.
 * @ingroup gtkmmEnums
 "
      attribute 173225 "ARROW_UP"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 173353 "ARROW_DOWN"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 173481 "ARROW_LEFT"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 173609 "ARROW_RIGHT"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 284457 "AspectFrame"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/aspectframe.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* A frame that constrains its child to a particular aspect ratio.
 *
 * The Gtk::AspectFrame is useful when you want pack a widget so that it can
 * resize but always retains the same aspect ratio.  For instance, one might
 * be drawing a small preview of a larger image. Because it derives from
 * Gtk::Frame, it can draw a label and a frame around the child. The frame
 * will be \"shrink-wrapped\" to the size of the child.
 *
 * @ingroup Widgets
 * @ingroup Containers
 "
      classrelation 133033 // <generalisation>
	relation 133033 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 133033 // <generalisation>
	  b parent class_ref 284585 // Frame
      end

      class 284713 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 284457 // AspectFrame
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 133161 // <realization>
	  relation 133161 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 133161 // <realization>
	    b parent class_ref 284457 // AspectFrame
	end
      end

      class 284841 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "AspectFrame_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 284969 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkAspectFrame"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 285097 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkAspectFrameClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 780329 "~AspectFrame"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 133545 // aspectframe_class_ (<directional composition>)
	relation 133545 *-->
	  a role_name "aspectframe_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 133545 // aspectframe_class_ (<directional composition>)
	  b parent class_ref 284841 // CppClassType
      end

      operation 780457 "AspectFrame"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 284457 // AspectFrame
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 780585 "operator ="
	private return_type class_ref 284457 // AspectFrame
	nparams 1
	  param in name "" type class_ref 284457 // AspectFrame
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 780713 "AspectFrame"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 780841 "AspectFrame"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkAspectFrame"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 780969 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 781097 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 781225 "gobj"
	cpp_inline public explicit_return_type "GtkAspectFrame"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkAspectFrame*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 781353 "gobj"
	const cpp_inline public explicit_return_type "GtkAspectFrame"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkAspectFrame*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 781481 "AspectFrame"
	public explicit_return_type ""
	nparams 5
	  param in name "label" explicit_type "Glib::ustring"
	    defaultvalue " Glib::ustring()"
	  param in name "xalign" type class_ref 134697 // AlignmentEnum
	    defaultvalue " Gtk::ALIGN_CENTER"
	  param in name "yalign" type class_ref 134697 // AlignmentEnum
	    defaultvalue " Gtk::ALIGN_CENTER"
	  param in name "ratio" explicit_type "float"
	    defaultvalue " 1.0"
	  param in name "obey_child" explicit_type "bool"
	    defaultvalue " false"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::
* Constructor to create a new AspectFrame object.
   * @param label Label text.
   * @param xalign Horizontal alignment of the child within the allocation of this
   * AspectFrame.  For possible values, see Gtk::AlignmentEnum.
   * @param yalign Vertical alignment of the child within the allocation of this 
   * AspectFrame. For possible values, see Gtk::AlignmentEnum.
   * @param ratio The desired aspect ratio.
   * @param obey_child If <tt>true</tt>, @a ratio  is ignored and the aspect ratio
   * is taken from the requisition of the child.
   "
      end

      operation 781609 "AspectFrame"
	public explicit_return_type ""
	nparams 5
	  param in name "label" explicit_type "Glib::ustring"
	  param in name "xalign" explicit_type "float"
	  param in name "yalign" explicit_type "float"
	  param in name "ratio" explicit_type "float"
	    defaultvalue " 1.0"
	  param in name "obey_child" explicit_type "bool"
	    defaultvalue " false"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throw}{
${body}}
"
	
	
	
	
	comment "* Constructor to create a new AspectFrame object.
   * @param label Label text.
   * @param xalign Horizontal alignment of the child within the allocation of this 
   * AspectFrame.  This ranges from 0.0 (left aligned) to 1.0 (right aligned).
   * @param yalign Vertical alignment of the child within the allocation of this 
   * AspectFrame. This ranges from 0.0 (top aligned) to 1.0 (bottom aligned).
   * @param ratio The desired aspect ratio.
   * @param obey_child If <tt>true</tt>, @a ratio  is ignored and the aspect ratio 
   * is taken from the requisition of the child.
   "
      end

      operation 781737 "set"
	public explicit_return_type "void"
	nparams 4
	  param in name "xalign" explicit_type "float"
	  param in name "yalign" explicit_type "float"
	  param in name "ratio" explicit_type "float"
	  param in name "obey_child" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO: Is \"obey_child = true\" a good default?
* Set the properties of this AspectFrame.
   * @param xalign Horizontal alignment of the child within the allocation of this 
   * AspectFrame.  This ranges from 0.0 (left aligned) to 1.0 (right aligned).
   * @param yalign Vertical alignment of the child within the allocation of this 
   * AspectFrame.  This ranges from 0.0 (top aligned) to 1.0 (bottom aligned).
   * @param ratio The desired aspect ratio.
   * @param obey_child If <tt>true</tt>, @a ratio  is ignored and the aspect ratio 
   * is taken from the requisition of the child.
   "
      end

      operation 781865 "set"
	public explicit_return_type "void"
	nparams 4
	  param in name "xalign" type class_ref 134697 // AlignmentEnum
	  param in name "yalign" type class_ref 134697 // AlignmentEnum
	  param in name "ratio" explicit_type "float"
	  param in name "obey_child" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Set the properties of this AspectFrame.
   * @param xalign Horizontal alignment of the child within the allocation of this 
   * AspectFrame.  For possible values, see Gtk::AlignmentEnum.
   * @param yalign Vertical alignment of the child within the allocation of this 
   * AspectFrame.  For possible values, see Gtk::AlignmentEnum.
   * @param ratio The desired aspect ratio.
   * @param obey_child If <tt>true</tt>, @a ratio  is ignored and the aspect ratio
   * is taken from the requisition of the child.
   "
      end

      operation 781993 "property_xalign"
	public explicit_return_type "Glib::PropertyProxy<float>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 782121 "property_xalign"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<float>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 782249 "property_yalign"
	public explicit_return_type "Glib::PropertyProxy<float>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 782377 "property_yalign"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<float>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 782505 "property_ratio"
	public explicit_return_type "Glib::PropertyProxy<float>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 782633 "property_ratio"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<float>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 782761 "property_obey_child"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 782889 "property_obey_child"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end
    end

    class 308905 "AttachOptions"
      visibility package stereotype "enum"
      cpp_external cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " TODO: There must be a better way to document the enum values.
       Extract them from the GTK+ docs as well?
! @var ArrowType ARROW_UP
 * Represents an upward pointing arrow.
 
! @var ArrowType ARROW_DOWN
 * Represents a downward pointing arrow.
 
! @var ArrowType ARROW_LEFT
 * Represents a left pointing arrow.
 
! @var ArrowType ARROW_RIGHT
 * Represents a right pointing arrow.
 
* Denotes the expansion properties that a widget will have when it (or its parent) is resized.
 * @ingroup gtkmmEnums
 * @par Bitwise operators:
 * <tt>%AttachOptions operator|(AttachOptions, AttachOptions)</tt><br>
 * <tt>%AttachOptions operator&(AttachOptions, AttachOptions)</tt><br>
 * <tt>%AttachOptions operator^(AttachOptions, AttachOptions)</tt><br>
 * <tt>%AttachOptions operator~(AttachOptions)</tt><br>
 * <tt>%AttachOptions& operator|=(AttachOptions&, AttachOptions)</tt><br>
 * <tt>%AttachOptions& operator&=(AttachOptions&, AttachOptions)</tt><br>
 * <tt>%AttachOptions& operator^=(AttachOptions&, AttachOptions)</tt><br>
 "
      attribute 183465 "EXPAND"
	public explicit_type ""
	init_value " 1 << 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 183593 "SHRINK"
	public explicit_type ""
	init_value " 1 << 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 183721 "FILL"
	public explicit_type ""
	init_value " 1 << 2
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 281385 "Bin"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/bin.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* A container with just one child.
 *
 * This is an abstract base class from which all classes holding
 * up to 1 widget inside of them derive.  It provides access to methods
 * relevent to a single object, such as add_label, add_pixmap, etc.
 *
 * @ingroup Widgets
 "
      classrelation 133673 // <generalisation>
	relation 133673 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 133673 // <generalisation>
	  b parent class_ref 280745 // Container
      end

      class 137001 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 281385 // Bin
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 133801 // <realization>
	  relation 133801 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 133801 // <realization>
	    b parent class_ref 281385 // Bin
	end
      end

      class 283305 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Bin_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 283433 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkBin"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 283561 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkBinClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 776105 "~Bin"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 134185 // bin_class_ (<directional composition>)
	relation 134185 *-->
	  a role_name "bin_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 134185 // bin_class_ (<directional composition>)
	  b parent class_ref 283305 // CppClassType
      end

      operation 776233 "Bin"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 281385 // Bin
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 776361 "operator ="
	private return_type class_ref 281385 // Bin
	nparams 1
	  param in name "" type class_ref 281385 // Bin
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 776489 "Bin"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 776617 "Bin"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkBin"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 776745 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 776873 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 777001 "gobj"
	cpp_inline public explicit_return_type "GtkBin"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkBin*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 777129 "gobj"
	const cpp_inline public explicit_return_type "GtkBin"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkBin*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 777257 "Bin"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 777385 "get_child"
	public return_type class_ref 130089 // Widget
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " get_child() is a convenience function to get a c++ wrapper of
 the contained widget. It may return NULL if such an item is not
 available."
      end

      operation 777513 "get_child"
	const public return_type class_ref 130089 // Widget
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 777641 "remove"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Remove the contained object
   * Since this can only hold one object it is not necessary to
   * specify which object to remove like other containers.
   *
   * When calling remove() on a Gtk::ScrolledWindow this might not remove the
   * expected child directly, because Gtk::ScrolledWindow::add() sometimes creates a
   * Gtk::ViewPort child and places the widget in that.
   "
      end

      operation 777769 "add_label"
	public explicit_return_type "void"
	nparams 4
	  param in name "label" explicit_type "Glib::ustring"
	  param in name "mnemonic" explicit_type "bool"
	    defaultvalue " false"
	  param in name "x_align" explicit_type "double"
	    defaultvalue " 0.5"
	  param in name "y_align" explicit_type "double"
	    defaultvalue " 0.5"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Convenience methods that don't correspond to GTK+ functions:
* Add a Label object.
   * This does not correspond to any GTK+ function and is provided purely for
   * convenience.
   * @param label The text for the label.
   * @param mnemonic If <tt>true</tt>, characters preceded by an underscore 
   * (_) will be underlined and used as a keyboard accelerator (shortcut).
   * @param x_align The horizontal alignment of the text.  This ranges from 
   * 0.0 (left aligned) to 1.0 (right aligned).
   * @param y_align The vertical alignment of the text.  This ranges from 
   * 0.0 (top aligned) to 1.0 (bottom aligned).
   "
      end

      operation 777897 "add_label"
	public explicit_return_type "void"
	nparams 4
	  param in name "label" explicit_type "Glib::ustring"
	  param in name "mnemonic" explicit_type "bool"
	  param in name "x_align" type class_ref 134697 // AlignmentEnum
	  param in name "y_align" type class_ref 134697 // AlignmentEnum
	    defaultvalue " ALIGN_CENTER"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Add a Label object.
   * This does not correspond to any GTK+ function and is provided purely for
   * convenience.
   * @param label The label text.
   * @param mnemonic If <tt>true</tt>, characters preceded by an underscore
   * (_) will be underlined and used as a keyboard accelerator (shortcut).
   * @param x_align The horizontal alignment of the text.  For possible 
   * values, see Gtk::AlignmentEnum.
   * @param y_align The vertical alignment of the text.  For possible 
   * values, see Gtk::AlignmentEnum.
   "
      end

      operation 778025 "add_pixmap"
	public explicit_return_type "void"
	nparams 2
	  param in name "pixmap" explicit_type "Glib::RefPtr<Gdk::Pixmap>"
	  param in name "mask" explicit_type "Glib::RefPtr<Gdk::Bitmap>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Add an Image object.
   * This does not correspond to any GTK+ function and is provided purely for
   * convenience.
   * This will create, manage, add, and show a new Image to this Bin.
   * @param pixmap A Glib::RefPtr to a Gdk::Pixmap.
   * @param mask A Glib::RefPtr to a Gdk::Bitmap.
   "
      end

      operation 778153 "add_pixlabel"
	public explicit_return_type "void"
	nparams 5
	  param in name "pixmap" explicit_type "Glib::RefPtr<Gdk::Pixmap>"
	  param in name "mask" explicit_type "Glib::RefPtr<Gdk::Bitmap>"
	  param in name "label" explicit_type "Glib::ustring"
	  param in name "x_align" explicit_type "double"
	    defaultvalue " 0.5"
	  param in name "y_align" explicit_type "double"
	    defaultvalue " 0.5"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Add Image and Label objects.
   * This does not correspond to any GTK+ function and is provided purely for
   * convenience.
   * This will create, manage, add, and show a new Image and Label (within an 
   * HBox) to this Bin.
   * @param pixmap A Glib::RefPtr to a Gdk::Pixmap.
   * @param mask A Glib::RefPtr to a Gdk::Bitmap.
   * @param label The text for the label.
   * @param x_align The horizontal alignment of the text in the label.
   * @param y_align The vertical alignment of the text in the label.
   "
      end

      operation 778281 "add_pixlabel"
	public explicit_return_type "void"
	nparams 4
	  param in name "pixfile" explicit_type "Glib::ustring"
	  param in name "label" explicit_type "Glib::ustring"
	  param in name "x_align" explicit_type "double"
	    defaultvalue " 0.5"
	  param in name "y_align" explicit_type "double"
	    defaultvalue " 0.5"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Add Image and Label objects.
   * This does not correspond to any GTK+ function and is provided purely for
   * convenience.
   * This will create, manage, add, and show a new Image and Label (within an 
   * HBox) to this Bin.
   * @param pixfile The path to a file to be displayed.
   * @param label The text for the label.
   * @param x_align The horizontal alignment of the text in the label.
   * @param y_align The vertical alignment of the text in the label.
   "
      end
    end

    class 287145 "Box"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/box.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Box_Helpers 
* A base class for box containers
 *
 * Abstract base class for horizontal and vertical boxes, which organize a
 * variable number of widgets into a rectangular area.  This is an abstract
 * class and it defers choice of which way the widgets are packed to the screen
 * to the derived classes.  It provides a common interface for inserting
 * widgets to a box indepenently of how it is shown in the screen.
 *
 * Gtk::Box uses a notion of packing. Packing refers to adding widgets with
 * reference to a particular position in a Gtk::Container. There are two
 * reference positions: the start and the end of the box. For a VBox, the start
 * is defined as the top of the box and the end is defined as the bottom.  For
 * a HBox the start is defined as the left side and the end is defined as the
 * right side.  Use repeated calls to pack_start() to pack widgets into a
 * Gtk::Box from start to end. Use pack_end() to add widgets from end to start.
 * You may intersperse these calls and add widgets from both ends of the same
 * Gtk::Box.
 *
 * Because Gtk::Box is a Gtk::Container, you may also use Gtk::Container::add()
 * to insert widgets, and they will be packed as if with pack_start(). Use
 * Gtk::Container::remove() to remove widgets.
 *
 * Use set_homogeneous() to specify whether or not all children of the Gtk::Box
 * occupy the same amount of space.  Use set_spacing() to determine the minimum
 * space placed between all children in the Gtk::Box.  Use reorder_child() to
 * move a child widget to a different place in the box.  Use
 * set_child_packing() to reset the pack options and padding attributes of any
 * Gtk::Box child. Use query_child_packing() to query these fields.
 "
      classrelation 135209 // <generalisation>
	relation 135209 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 135209 // <generalisation>
	  b parent class_ref 280745 // Container
      end

      class 287273 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 287145 // Box
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 135337 // <realization>
	  relation 135337 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 135337 // <realization>
	    b parent class_ref 287145 // Box
	end
      end

      class 287401 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Box_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 287529 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkBox"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 287657 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkBoxClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 798377 "~Box"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 135721 // box_class_ (<directional composition>)
	relation 135721 *-->
	  a role_name "box_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 135721 // box_class_ (<directional composition>)
	  b parent class_ref 287401 // CppClassType
      end

      operation 798505 "Box"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 287145 // Box
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 798633 "operator ="
	private return_type class_ref 287145 // Box
	nparams 1
	  param in name "" type class_ref 287145 // Box
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 798761 "Box"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 798889 "Box"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkBox"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 799017 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 799145 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 799273 "gobj"
	cpp_inline public explicit_return_type "GtkBox"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkBox*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 799401 "gobj"
	const cpp_inline public explicit_return_type "GtkBox"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkBox*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      class 287785 "BoxList"
	visibility package stereotype "typedef" base_type class_ref 286761 // BoxList
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 135849 // <realization>
	  relation 135849 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 135849 // <realization>
	    b parent class_ref 286761 // BoxList
	end
      end

      operation 799529 "Box"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 799657 "pack_start"
	public explicit_return_type "void"
	nparams 4
	  param inout name "child" type class_ref 130089 // Widget
	  param in name "expand" explicit_type "bool"
	  param in name "fill" explicit_type "bool"
	  param in name "padding" explicit_type "guint"
	    defaultvalue " 0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Left side insert a widget to a box.
   * The expand argument to pack_start() or pack_end()
   * controls whether the widgets are laid out in the box to fill in all
   * the extra space in the box so the box is expanded to fill the area
   * allocated to it (<tt>true</tt>). Or the box is shrunk to just fit the widgets
   * (<tt>false</tt>).  Setting @a expand  to <tt>false</tt> will allow you to do right and left
   * justifying of your widgets.  Otherwise, they will all expand to fit in
   * the box, and the same effect could be achieved by using only one of
   * pack_start() or pack_end() functions.
   * 
   * The @a fill  argument to the pack_start()/pack_end() functions control whether the
   * extra space is allocated to the objects themselves (<tt>true</tt>), or as extra
   * padding in the box around these objects (<tt>false</tt>). It only has an effect
   * if the @a expand  argument is also <tt>true</tt>.
   * 
   * The difference between spacing (set when the box is created)
   * and padding (set when elements are packed) is, that spacing is added between
   * objects, and padding is added on either side of an object.
   "
      end

      operation 799785 "pack_start"
	public explicit_return_type "void"
	nparams 3
	  param inout name "child" type class_ref 130089 // Widget
	  param in name "options" type class_ref 285993 // PackOptions
	    defaultvalue " PACK_EXPAND_WIDGET"
	  param in name "padding" explicit_type "guint"
	    defaultvalue " 0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Left side insert a widget to a box.
   * @param child A Widget to be added to box.
   * @param options Controls how the widget expands to fill space, and how the space around them is used.
   * @param padding Padding that is added on either side of the widget. This is different to spacing set when the box is created (or with set_spacing()) - spacing is added between objects, and padding is added on either side of an object.
   "
      end

      operation 799913 "pack_end"
	public explicit_return_type "void"
	nparams 4
	  param inout name "child" type class_ref 130089 // Widget
	  param in name "expand" explicit_type "bool"
	  param in name "fill" explicit_type "bool"
	  param in name "padding" explicit_type "guint"
	    defaultvalue " 0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 800041 "pack_end"
	public explicit_return_type "void"
	nparams 3
	  param inout name "child" type class_ref 130089 // Widget
	  param in name "options" type class_ref 285993 // PackOptions
	    defaultvalue " PACK_EXPAND_WIDGET"
	  param in name "padding" explicit_type "guint"
	    defaultvalue " 0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Right side insert a widget to a box.
   * @param child A Widget to be added to box.
   * @param options Controls how the widget expands to fill space, and how the space around them is used.
   * @param padding Padding that is added on either side of the widget. This is different to spacing set when the box is created (or with set_spacing()) - spacing is added between objects, and padding is added on either side of an object.
   "
      end

      operation 800169 "set_homogeneous"
	public explicit_return_type "void"
	nparams 1
	  param in name "homogeneous" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 800297 "get_homogeneous"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether the box is homogeneous (all children are the
   * same size). See set_homogeneous().
   * @return <tt>true</tt> if the box is homogeneous.
   "
      end

      operation 800425 "set_spacing"
	public explicit_return_type "void"
	nparams 1
	  param in name "spacing" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 800553 "get_spacing"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the value set by set_spacing().
   * @return Spacing between children.
   "
      end

      operation 800681 "reorder_child"
	public explicit_return_type "void"
	nparams 2
	  param inout name "child" type class_ref 130089 // Widget
	  param in name "pos" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 800809 "children"
	public return_type class_ref 287785 // BoxList
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " Get the child widgets.
   * @result An STL-style container of pointers to the box's child widgets.
   "
      end

      operation 800937 "children"
	const public return_type class_ref 287785 // BoxList
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " Get the child widgets.
   * @result An STL-style container of pointers to the box's child widgets.
   "
      end

      operation 801065 "property_spacing"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 801193 "property_spacing"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 801321 "property_homogeneous"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 801449 "property_homogeneous"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      classrelation 135977 // children_proxy_ (<directional composition>)
	relation 135977 *-->
	  a role_name "children_proxy_" protected
	    cpp mutable default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 135977 // children_proxy_ (<directional composition>)
	  b parent class_ref 287785 // BoxList
      end
    end

    class 286761 "BoxList"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/boxlist.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 795817 "BoxList"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 795945 "BoxList"
	public explicit_return_type ""
	nparams 1
	  param inout name "gparent" explicit_type "GtkBox"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 796073 "BoxList"
	public explicit_return_type ""
	nparams 1
	  param in name "src" type class_ref 286761 // BoxList
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 796201 "~BoxList"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	
	
      end

      operation 796329 "operator ="
	public return_type class_ref 286761 // BoxList
	nparams 1
	  param in name "src" type class_ref 286761 // BoxList
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      class 287017 "type_base"
	visibility package stereotype "typedef" explicit_base_type "Glib::HelperList< Child, const Element,  Glib::List_Iterator< Child > >"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 796457 "gparent"
	public explicit_return_type "GtkBox"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 796585 "gparent"
	const public explicit_return_type "GtkBox"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 796713 "glist"
	const cpp_virtual public explicit_return_type "GList"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 796841 "erase"
	cpp_virtual public explicit_return_type "void"
	nparams 2
	  param in name "start" explicit_type "iterator"
	  param in name "stop" explicit_type "iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " front of list"
      end

      operation 796969 "erase"
	cpp_virtual public explicit_return_type "iterator"
	nparams 1
	  param in name "" explicit_type "iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 797097 "remove"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "" explicit_type "const_reference"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Implented as custom or by LIST_CONTAINER_REMOVE"
      end

      operation 797225 "operator []"
	const public explicit_return_type "reference"
	nparams 1
	  param in name "l" explicit_type "size_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Implented as custom or by LIST_CONTAINER_REMOVE
/ This is order n. (use at own risk)"
      end

      operation 797353 "insert"
	public explicit_return_type "iterator"
	nparams 2
	  param in name "position" explicit_type "iterator"
	  param inout name "e" explicit_type "element_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 797481 "insert"
	stereotype "template"
	cpp_inline public explicit_return_type "void"
	nparams 3
	  param in name "position" explicit_type "iterator"
	  param in name "first" explicit_type "InputIterator"
	  param in name "last" explicit_type "InputIterator"
	cpp_decl "    ${comment}template<class InputIterator>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract} {
    for(;first != last; ++first)
      position = insert(position, *first);
  };
"
	
	
	
	
	comment "custom-implemented."
      end

      operation 797609 "push_front"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "element_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} { insert(begin(), e); };
"
	
	
	
	
      end

      operation 797737 "push_back"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "element_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} { insert(end(), e); };
"
	
	
	
	
      end

      operation 797865 "find"
	public explicit_return_type "iterator"
	nparams 1
	  param in name "c" explicit_type "const_reference"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "The standard iterator, instead of List_Cpp_Iterator,
only works because Child is derived from _GtkBoxChild."
      end

      operation 797993 "find"
	public explicit_return_type "iterator"
	nparams 1
	  param inout name "" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 798121 "remove"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param inout name "w" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 798249 "reorder"
	public explicit_return_type "void"
	nparams 2
	  param in name "loc" explicit_type "iterator"
	  param in name "pos" explicit_type "iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Implented as custom or by LIST_CONTAINER_REMOVE
 Non-standard"
      end
    end

    class 281001 "BuiltinIconSize"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 "
      attribute 185897 "ICON_SIZE_INVALID"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 186025 "ICON_SIZE_MENU"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 186153 "ICON_SIZE_SMALL_TOOLBAR"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 186281 "ICON_SIZE_LARGE_TOOLBAR"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 186409 "ICON_SIZE_BUTTON"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 186537 "ICON_SIZE_DND"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 186665 "ICON_SIZE_DIALOG"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 242601 "BuiltinStockID"
      visibility package stereotype "struct"
      cpp_external cpp_decl "${name}
#include <gtkmm/builtinstockid.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Created like so:
 const BuiltinStockID DIALOG_INFO = { GTK_STOCK_DIALOG_INFO }
* See the list of pre-defined stock items, in the Stock namespace.
 "
      attribute 205097 "id"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 141353 "Button"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/button.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* A widget that creates a signal when clicked on.
 *
 * This widget is generally used with a signal handler that is called when the button is pressed.
 * It can hold any valid child widget.  The most commonly used child is the Gtk::Label.
 *
 * @ingroup Widgets
 "
      classrelation 235561 // <generalisation>
	relation 235561 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 235561 // <generalisation>
	  b parent class_ref 281385 // Bin
      end

      class 141481 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 141353 // Button
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 137513 // <realization>
	  relation 137513 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 137513 // <realization>
	    b parent class_ref 141353 // Button
	end
      end

      class 141737 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Button_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 141865 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkButton"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 141993 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkButtonClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 804137 "~Button"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 235689 // button_class_ (<directional composition>)
	relation 235689 *-->
	  a role_name "button_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 235689 // button_class_ (<directional composition>)
	  b parent class_ref 141737 // CppClassType
      end

      operation 804265 "Button"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 141353 // Button
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 804393 "operator ="
	private return_type class_ref 141353 // Button
	nparams 1
	  param in name "" type class_ref 141353 // Button
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 804521 "Button"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 804649 "Button"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkButton"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 804777 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 804905 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 805033 "gobj"
	cpp_inline public explicit_return_type "GtkButton"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkButton*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 805161 "gobj"
	const cpp_inline public explicit_return_type "GtkButton"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkButton*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 805289 "on_pressed"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 805417 "on_released"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 805545 "on_clicked"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 805673 "on_enter"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 805801 "on_leave"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 805929 "on_activate"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 806057 "Button"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "* Create an empty button.
   * With an empty button, you can Gtk::Button::add() a widget
   * such as a Gtk::Pixmap or Gtk::Box.
   *
   * If you just wish to add a Gtk::Label,
   * you may want to
   * use the Gtk::Button(const Glib::ustring& label) ctor
   * directly instead.
   "
      end

      operation 173993 "Button"
	public explicit_return_type ""
	nparams 2
	  param in name "label" explicit_type "Glib::ustring"
	  param in name "mnemonic" explicit_type "bool"
	    defaultvalue " false"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${throw}{
${body}}
"
	
	
	
	
	comment "* Simple Push Button with label.
   * Create a button with the given label inside. You won't be able
   * to add a widget in this button since it already has a Gtk::Label
   * in it
   "
      end

      operation 806185 "Button"
	public explicit_return_type ""
	nparams 1
	  param in name "stock_id" type class_ref 130985 // StockID
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 806313 "pressed"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 806441 "released"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 806569 "clicked"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 806697 "enter"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 806825 "leave"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 806953 "set_relief"
	public explicit_return_type "void"
	nparams 1
	  param in name "newstyle" type class_ref 142121 // ReliefStyle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 807081 "get_relief"
	const public return_type class_ref 142121 // ReliefStyle
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 807209 "set_label"
	public explicit_return_type "void"
	nparams 1
	  param in name "label" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the text of the label of the button to @a str . This text is
   * also used to select the stock item if set_use_stock()
   * is used.
   * 
   * This will also clear any previously set labels.
   * @param label A string.
   "
      end

      operation 807337 "get_label"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Fetches the text from the label of the button, as set by
   * set_label(). If the label text has not 
   * been set the return value will be <tt>0</tt>. This will be the 
   * case if you create an empty button with new() to 
   * use as a container.
   * @return The text of the label widget. This string is owned
   * by the widget and must not be modified or freed.
   "
      end

      operation 807465 "set_use_underline"
	public explicit_return_type "void"
	nparams 1
	  param in name "use_underline" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* If true, an underline in the text of the button label indicates
   * the next character should be used for the mnemonic accelerator key.
   * @param use_underline <tt>true</tt> if underlines in the text indicate mnemonics.
   "
      end

      operation 807593 "get_use_underline"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether an embedded underline in the button label indicates a
   * mnemonic. See set_use_underline().
   * @return <tt>true</tt> if an embedded underline in the button label
   * indicates the mnemonic accelerator keys.
   "
      end

      operation 807721 "set_use_stock"
	public explicit_return_type "void"
	nparams 1
	  param in name "use_stock" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* If true, the label set on the button is used as a
   * stock id to select the stock item for the button.
   * @param use_stock <tt>true</tt> if the button should use a stock item.
   "
      end

      operation 807849 "get_use_stock"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether the button label is a stock item.
   * @return <tt>true</tt> if the button label is used to
   * select a stock item instead of being
   * used directly as the label text.
   "
      end

      operation 807977 "set_focus_on_click"
	public explicit_return_type "void"
	nparams 1
	  param in name "focus_on_click" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets whether the button will grab focus when it is clicked with the mouse.
   * Making mouse clicks not grab focus is useful in places like toolbars where
   * you don't want the keyboard focus removed from the main area of the
   * application.
   * 
   * Since: 2.4
   * @param focus_on_click Whether the mouse grabs focus when clicked with the mouse.
   "
      end

      operation 808105 "get_focus_on_click"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether the button grabs focus when it is clicked with the mouse.
   * See set_focus_on_click().
   * @return <tt>true</tt> if the button grabs focus when it is clicked with
   * the mouse.
   * 
   * Since: 2.4.
   "
      end

      operation 808233 "set_alignment"
	public explicit_return_type "void"
	nparams 2
	  param in name "xalign" explicit_type "float"
	  param in name "yalign" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the alignment of the child. This property has no effect unless 
   * the child is a Gtk::Misc or a Gtk::Aligment.
   * 
   * Since: 2.4
   * @param xalign The horizontal position of the child, 0.0 is left aligned, 
   * 1.0 is right aligned.
   * @param yalign The vertical position of the child, 0.0 is top aligned, 
   * 1.0 is bottom aligned.
   "
      end

      operation 808361 "get_alignment"
	public explicit_return_type "void"
	nparams 2
	  param inout name "xalign" explicit_type "float"
	  param inout name "yalign" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the alignment of the child in the button.
   * 
   * Since: 2.4
   * @param xalign Return location for horizontal alignment.
   * @param yalign Return location for vertical alignment.
   "
      end

      operation 808489 "signal_pressed"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 808617 "signal_released"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 808745 "signal_clicked"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 808873 "signal_enter"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 809001 "signal_leave"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 809129 "signal_activate"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 809257 "property_label"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 809385 "property_label"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 809513 "property_relief"
	public explicit_return_type "Glib::PropertyProxy<ReliefStyle>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 809641 "property_relief"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<ReliefStyle>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 809769 "property_use_underline"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 809897 "property_use_underline"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 810025 "property_use_stock"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 810153 "property_use_stock"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 810281 "property_focus_on_click"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 810409 "property_focus_on_click"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end
    end

    class 142377 "ButtonBox"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/buttonbox.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Base class for Gtk::HButtonBox and Gtk::VButtonBox
 *
 * A button box should be used to provide a consistent layout of buttons
 * throughout your application.  There is one default layout and a default
 * spacing value that are persistant across all ButtonBox widgets.
 "
      classrelation 235817 // <generalisation>
	relation 235817 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 235817 // <generalisation>
	  b parent class_ref 287145 // Box
      end

      class 142505 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 142377 // ButtonBox
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 235945 // <realization>
	  relation 235945 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 235945 // <realization>
	    b parent class_ref 142377 // ButtonBox
	end
      end

      class 142761 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "ButtonBox_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 142889 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkButtonBox"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 143017 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkButtonBoxClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 810537 "~ButtonBox"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 236073 // buttonbox_class_ (<directional composition>)
	relation 236073 *-->
	  a role_name "buttonbox_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 236073 // buttonbox_class_ (<directional composition>)
	  b parent class_ref 142761 // CppClassType
      end

      operation 810665 "ButtonBox"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 142377 // ButtonBox
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 810793 "operator ="
	private return_type class_ref 142377 // ButtonBox
	nparams 1
	  param in name "" type class_ref 142377 // ButtonBox
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 810921 "ButtonBox"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 811049 "ButtonBox"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkButtonBox"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 811177 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 811305 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 811433 "gobj"
	cpp_inline public explicit_return_type "GtkButtonBox"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkButtonBox*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 811561 "gobj"
	const cpp_inline public explicit_return_type "GtkButtonBox"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkButtonBox*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 811689 "get_layout"
	const public return_type class_ref 143145 // ButtonBoxStyle
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 811817 "set_layout"
	public explicit_return_type "void"
	nparams 1
	  param in name "layout_style" type class_ref 143145 // ButtonBoxStyle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 811945 "set_child_secondary"
	public explicit_return_type "void"
	nparams 2
	  param inout name "child" type class_ref 130089 // Widget
	  param in name "is_secondary" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets whether @a child  should appear in a secondary group of children.
   * A typical use of a secondary child is the help button in a dialog.
   * 
   * This group appears after the other children if the style
   * is Gtk::BUTTONBOX_START, Gtk::BUTTONBOX_SPREAD or
   * Gtk::BUTTONBOX_EDGE, and before the the other children if the style
   * is Gtk::BUTTONBOX_END. For horizontal button boxes, the definition
   * of before/after depends on direction of the widget (see
   * Gtk::Widget::set_direction()). If the style is Gtk::BUTTONBOX_START
   * or Gtk::BUTTONBOX_END, then the secondary children are aligned at
   * the other end of the button box from the main children. For the
   * other styles, they appear immediately next to the main children.
   * @param child A child of @a widget .
   * @param is_secondary If <tt>true</tt>, the @a child  appears in a secondary group of the
   * button box.
   "
      end

      operation 812073 "get_child_secondary"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "child" explicit_type "Gtk::Widget"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether @a child  should appear in a secondary group of children.
   * @param child A child of @a widget .
   * @return Whether @a child  should appear in a secondary group of children.
   * 
   * Since: 2.4.
   "
      end

      operation 812201 "get_child_min_width"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 812329 "set_child_min_width"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 812457 "get_child_min_height"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 812585 "set_child_min_height"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 812713 "get_child_ipadding_x"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 812841 "set_child_ipadding_x"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 812969 "get_child_ipadding_y"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 813097 "set_child_ipadding_y"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 813225 "property_layout_style"
	public explicit_return_type "Glib::PropertyProxy<ButtonBoxStyle>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 813353 "property_layout_style"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<ButtonBoxStyle>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end
    end

    class 210601 "ButtonsType"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 "
      attribute 200361 "BUTTONS_NONE"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 200489 "BUTTONS_OK"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 200617 "BUTTONS_CLOSE"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 200745 "BUTTONS_CANCEL"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 200873 "BUTTONS_YES_NO"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 201001 "BUTTONS_OK_CANCEL"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 143145 "ButtonBoxStyle"
      visibility package stereotype "enum"
      cpp_external cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "! @var AttachOptions EXPAND
 * The widget should expand to take up any extra space in its container that has been allocated.
 
! @var AttachOptions SHRINK
 * The widget should shrink as and when possible.
 
! @var AttachOptions FILL
 * The widget should fill the space allocated to it.
 
*
 * @ingroup gtkmmEnums
 "
      attribute 175017 "BUTTONBOX_DEFAULT_STYLE"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 175145 "BUTTONBOX_SPREAD"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 175273 "BUTTONBOX_EDGE"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 175401 "BUTTONBOX_START"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 175529 "BUTTONBOX_END"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 288425 "Calendar"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/calendar.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Display a calendar and/or allow the user to select a date.
 *
 * This is a widget that displays a calendar, one month at a time.
 *
 * The month and year currently displayed can be altered with
 * select_month().  The exact day can be selected from the displayed month
 * using select_day().
 *
 * The way in which the calendar itself is displayed can be altered using
 * set_display_options().
 *
 * The selected date can be retrieved from a GtkCalendar using get_date().
 *
 * If performing many 'mark' operations, the calendar can be frozen to
 * prevent flicker, using freeze(), and 'thawed' again using thaw().
 *
 * @ingroup Widgets
 "
      classrelation 236585 // <generalisation>
	relation 236585 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 236585 // <generalisation>
	  b parent class_ref 130089 // Widget
      end

      class 288553 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 288425 // Calendar
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 236713 // <realization>
	  relation 236713 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 236713 // <realization>
	    b parent class_ref 288425 // Calendar
	end
      end

      class 288681 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Calendar_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 288809 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkCalendar"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 288937 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkCalendarClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 816169 "~Calendar"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 140585 // calendar_class_ (<directional composition>)
	relation 140585 *-->
	  a role_name "calendar_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 140585 // calendar_class_ (<directional composition>)
	  b parent class_ref 288681 // CppClassType
      end

      operation 816297 "Calendar"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 288425 // Calendar
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 816425 "operator ="
	private return_type class_ref 288425 // Calendar
	nparams 1
	  param in name "" type class_ref 288425 // Calendar
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 816553 "Calendar"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 816681 "Calendar"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkCalendar"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 816809 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 816937 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 817065 "gobj"
	cpp_inline public explicit_return_type "GtkCalendar"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkCalendar*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 817193 "gobj"
	const cpp_inline public explicit_return_type "GtkCalendar"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkCalendar*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 817321 "on_month_changed"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 817449 "on_day_selected"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 817577 "on_day_selected_double_click"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 817705 "on_prev_month"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 817833 "on_next_month"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 817961 "on_prev_year"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 818089 "on_next_year"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 818217 "Calendar"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 818345 "select_month"
	public explicit_return_type "int"
	nparams 2
	  param in name "month" explicit_type "guint"
	  param in name "year" explicit_type "guint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 818473 "select_day"
	public explicit_return_type "void"
	nparams 1
	  param in name "day" explicit_type "guint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 818601 "mark_day"
	public explicit_return_type "int"
	nparams 1
	  param in name "day" explicit_type "guint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 818729 "unmark_day"
	public explicit_return_type "int"
	nparams 1
	  param in name "day" explicit_type "guint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 818857 "clear_marks"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 818985 "display_options"
	public explicit_return_type "void"
	nparams 1
	  param in name "flags" type class_ref 144809 // CalendarDisplayOptions
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 819113 "set_display_options"
	public explicit_return_type "void"
	nparams 1
	  param in name "flags" type class_ref 144809 // CalendarDisplayOptions
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets display options (whether to display the heading and the month  
   * headings).
   * 
   * Since: 2.4
   * @param flags The display options to set.
   "
      end

      operation 819241 "get_display_options"
	const public return_type class_ref 144809 // CalendarDisplayOptions
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the current display options of @a calendar .
   * @return The display options.
   * 
   * Since: 2.4.
   "
      end

      operation 819369 "get_date"
	const public explicit_return_type "void"
	nparams 3
	  param inout name "year" explicit_type "guint"
	  param inout name "month" explicit_type "guint"
	  param inout name "day" explicit_type "guint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 819497 "freeze"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 819625 "thaw"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 819753 "signal_month_changed"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 819881 "signal_day_selected"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 820009 "signal_day_selected_double_click"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 820137 "signal_prev_month"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 820265 "signal_next_month"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 820393 "signal_prev_year"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 820521 "signal_next_year"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 144809 "CalendarDisplayOptions"
      visibility package stereotype "enum"
      cpp_external cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* @addtogroup gtkmmEnums Enums and Flags 
*
 * @ingroup gtkmmEnums
 * @par Bitwise operators:
 * <tt>%CalendarDisplayOptions operator|(CalendarDisplayOptions, CalendarDisplayOptions)</tt><br>
 * <tt>%CalendarDisplayOptions operator&(CalendarDisplayOptions, CalendarDisplayOptions)</tt><br>
 * <tt>%CalendarDisplayOptions operator^(CalendarDisplayOptions, CalendarDisplayOptions)</tt><br>
 * <tt>%CalendarDisplayOptions operator~(CalendarDisplayOptions)</tt><br>
 * <tt>%CalendarDisplayOptions& operator|=(CalendarDisplayOptions&, CalendarDisplayOptions)</tt><br>
 * <tt>%CalendarDisplayOptions& operator&=(CalendarDisplayOptions&, CalendarDisplayOptions)</tt><br>
 * <tt>%CalendarDisplayOptions& operator^=(CalendarDisplayOptions&, CalendarDisplayOptions)</tt><br>
 "
      attribute 175657 "CALENDAR_SHOW_HEADING"
	public explicit_type ""
	init_value " 1 << 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 175785 "CALENDAR_SHOW_DAY_NAMES"
	public explicit_type ""
	init_value " 1 << 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 175913 "CALENDAR_NO_MONTH_CHANGE"
	public explicit_type ""
	init_value " 1 << 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 176041 "CALENDAR_SHOW_WEEK_NUMBERS"
	public explicit_type ""
	init_value " 1 << 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 176169 "CALENDAR_WEEK_START_MONDAY"
	public explicit_type ""
	init_value " 1 << 4
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 289065 "CellEditable"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/celleditable.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk"
      class 289321 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 289065 // CellEditable
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 140841 // <realization>
	  relation 140841 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 140841 // <realization>
	    b parent class_ref 289065 // CellEditable
	end
      end

      class 289449 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "CellEditable_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 289577 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkCellEditable"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 289705 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkCellEditableIface"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 236969 // celleditable_class_ (<directional composition>)
	relation 236969 *-->
	  a role_name "celleditable_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 236969 // celleditable_class_ (<directional composition>)
	  b parent class_ref 289449 // CppClassType
      end

      operation 820649 "CellEditable"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 289065 // CellEditable
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 820777 "operator ="
	private return_type class_ref 289065 // CellEditable
	nparams 1
	  param in name "" type class_ref 289065 // CellEditable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 820905 "CellEditable"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 821033 "CellEditable"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkCellEditable"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " you must derive from this class"
      end

      operation 821161 "~CellEditable"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 821289 "add_interface"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "gtype_implementer" explicit_type "GType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 821417 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 821545 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 821673 "gobj"
	cpp_inline public explicit_return_type "GtkCellEditable"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkCellEditable*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 821801 "gobj"
	const cpp_inline public explicit_return_type "GtkCellEditable"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkCellEditable*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject.  "
      end

      operation 821929 "start_editing"
	public explicit_return_type "void"
	nparams 1
	  param inout name "event" explicit_type "GdkEvent"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Begins editing on a @a cell_editable .  @a event  is the Gdk::Event that began the
   * editing process.  It may be <tt>0</tt>, in the instance that editing was initiated
   * through programatic means.
   * @param event A Gdk::Event, or <tt>0</tt>.
   "
      end

      operation 822057 "editing_done"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Emits the \"editing_done\" signal.  This signal is a sign for the cell renderer
   * to update its value from the cell.
   "
      end

      operation 822185 "remove_widget"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Emits the \"remove_widget\" signal.  This signal is meant to indicate that the
   * cell is finished editing, and the widget may now be destroyed.
   "
      end

      operation 822313 "signal_editing_done"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 822441 "signal_remove_widget"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 822569 "start_editing_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "event" explicit_type "GdkEvent"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 822697 "on_editing_done"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 822825 "on_remove_widget"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 289833 "CellLayout"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/celllayout.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk"
      class 289961 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 289833 // CellLayout
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 141481 // <realization>
	  relation 141481 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 141481 // <realization>
	    b parent class_ref 289833 // CellLayout
	end
      end

      class 290089 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "CellLayout_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 290217 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkCellLayout"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 290345 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkCellLayoutIface"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 141865 // celllayout_class_ (<directional composition>)
	relation 141865 *-->
	  a role_name "celllayout_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 141865 // celllayout_class_ (<directional composition>)
	  b parent class_ref 290089 // CppClassType
      end

      operation 822953 "CellLayout"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 289833 // CellLayout
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 823081 "operator ="
	private return_type class_ref 289833 // CellLayout
	nparams 1
	  param in name "" type class_ref 289833 // CellLayout
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 823209 "CellLayout"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 823337 "CellLayout"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkCellLayout"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " you must derive from this class"
      end

      operation 823465 "~CellLayout"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 823593 "add_interface"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "gtype_implementer" explicit_type "GType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 823721 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 823849 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 823977 "gobj"
	cpp_inline public explicit_return_type "GtkCellLayout"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkCellLayout*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 824105 "gobj"
	const cpp_inline public explicit_return_type "GtkCellLayout"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkCellLayout*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject.  "
      end

      operation 824233 "pack_start"
	stereotype "template"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "model_column" explicit_type "TreeModelColumn<ColumnType>"
	  param in name "expand" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}template<class ColumnType>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 824361 "pack_start"
	public explicit_return_type "void"
	nparams 2
	  param inout name "cell" type class_ref 290473 // CellRenderer
	  param in name "expand" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Packs the @a cell  into the beginning of @a cell_layout . If @a expand  is <tt>false</tt>,
   * then the @a cell  is allocated no more space than it needs. Any unused space
   * is divided evenly between cells for which @a expand  is <tt>true</tt>.
   * 
   * Since: 2.4
   * @param cell A Gtk::CellRenderer.
   * @param expand <tt>true</tt> if @a cell  is to be given extra space allocated to @a cell_layout .
   "
      end

      operation 824489 "pack_end"
	public explicit_return_type "void"
	nparams 2
	  param inout name "cell" type class_ref 290473 // CellRenderer
	  param in name "expand" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Adds the @a cell  to the end of @a cell_layout . If @a expand  is <tt>false</tt>, then the
   *  @a cell  is allocated no more space than it needs. Any unused space is
   * divided evenly between cells for which @a expand  is <tt>true</tt>.
   * 
   * Since: 2.4
   * @param cell A Gtk::CellRenderer.
   * @param expand <tt>true</tt> if @a cell  is to be given extra space allocated to @a cell_layout .
   "
      end

      operation 824617 "clear"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Unsets all the mappings on all renderers on @a cell_layout .
   * 
   * Since: 2.4
   "
      end

      operation 824745 "add_attribute"
	public explicit_return_type "void"
	nparams 3
	  param inout name "cell" type class_ref 290473 // CellRenderer
	  param in name "attribute" explicit_type "Glib::ustring"
	  param in name "column" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "I think this is just a convenience method, equivalent to clear() and multiple add_attribute()s. murrayc.
* Adds an attribute mapping to the list in @a cell_layout . The @a column  is the
   * column of the model to get a value from, and the @a attribute  is the
   * parameter on @a cell  to be set from the value. So for example if column 2
   * of the model contains strings, you could have the \"text\" attribute of a
   * Gtk::CellRendererText get its values from column 2.
   * 
   * Since: 2.4
   * @param cell A Gtk::CellRenderer.
   * @param attribute An attribute on the renderer.
   * @param column The column position on the model to get the attribute from.
   "
      end

      operation 824873 "add_attribute"
	public explicit_return_type "void"
	nparams 2
	  param in name "property" explicit_type "Glib::PropertyProxy_Base"
	  param in name "column" explicit_type "TreeModelColumnBase"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      class 290601 "SlotCellData"
	visibility package stereotype "typedef" explicit_base_type "sigc::slot<void, const TreeModel::const_iterator&>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 192937 "set_cell_data_func"
	public explicit_return_type "void"
	nparams 2
	  param inout name "cell" type class_ref 290473 // CellRenderer
	  param in name "slot" type class_ref 290601 // SlotCellData
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 193065 "clear_attributes"
	public explicit_return_type "void"
	nparams 1
	  param inout name "cell" type class_ref 290473 // CellRenderer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Clears all existing attributes previously set with
   * set_attributes().
   * 
   * Since: 2.4
   * @param cell A Gtk::CellRenderer to clear the attribute mapping on.
   "
      end

      operation 193193 "reorder"
	public explicit_return_type "void"
	nparams 2
	  param inout name "cell" type class_ref 290473 // CellRenderer
	  param in name "position" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Re-inserts @a cell  at @a position . Note that @a cell  has already to be packed
   * into @a cell_layout  for this to function properly.
   * 
   * Since: 2.4
   * @param cell A Gtk::CellRenderer to reorder.
   * @param position New position to insert @a cell  at.
   "
      end

      operation 193321 "pack_start_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param inout name "cell" type class_ref 290473 // CellRenderer
	  param in name "expand" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 193449 "pack_end_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param inout name "cell" type class_ref 290473 // CellRenderer
	  param in name "expand" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 193577 "clear_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 193705 "add_attribute_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 3
	  param inout name "cell" type class_ref 290473 // CellRenderer
	  param in name "attribute" explicit_type "Glib::ustring"
	  param in name "column" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 193833 "clear_attributes_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "cell" type class_ref 290473 // CellRenderer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO:  _WRAP_VFUNC(void set_cell_data_func(CellRenderer* cell, GtkCellLayoutDataFunc func, gpointer func_data, GDestroyNotify destroy), set_cell_data_func)"
      end

      operation 193961 "reorder_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param inout name "cell" type class_ref 290473 // CellRenderer
	  param in name "position" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 290473 "CellRenderer"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/cellrenderer.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* CellRenderers are used by Gtk::TreeView columns to render the Gtk::TreeModel column data appropriately.
 * They display, and allow editing of, the values of their _property_renderable() properties.
 * In most cases, Gtl::TreeView::append_column() will automatically choose the appropriate renderer for the mode column's data type,
 * so you will rarely need to worry about these classes.
 * @ingroup TreeView
 "
      class 290857 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 290473 // CellRenderer
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 142377 // <realization>
	  relation 142377 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 142377 // <realization>
	    b parent class_ref 290473 // CellRenderer
	end
      end

      class 290985 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "CellRenderer_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 291113 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkCellRenderer"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 291241 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkCellRendererClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 194345 "~CellRenderer"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 142761 // cellrenderer_class_ (<directional composition>)
	relation 142761 *-->
	  a role_name "cellrenderer_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 142761 // cellrenderer_class_ (<directional composition>)
	  b parent class_ref 290985 // CppClassType
      end

      operation 194473 "CellRenderer"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 290473 // CellRenderer
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 194601 "operator ="
	private return_type class_ref 290473 // CellRenderer
	nparams 1
	  param in name "" type class_ref 290473 // CellRenderer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 194729 "CellRenderer"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 194857 "CellRenderer"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkCellRenderer"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 194985 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 195113 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 195241 "gobj"
	cpp_inline public explicit_return_type "GtkCellRenderer"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkCellRenderer*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 195369 "gobj"
	const cpp_inline public explicit_return_type "GtkCellRenderer"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkCellRenderer*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 195497 "on_editing_canceled"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 195625 "get_size"
	const public explicit_return_type "void"
	nparams 6
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "cell_area" explicit_type "Gdk::Rectangle"
	  param inout name "x_offset" explicit_type "int"
	  param inout name "y_offset" explicit_type "int"
	  param inout name "width" explicit_type "int"
	  param inout name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, ${t2} & ${p2}, ${t3} & ${p3}, ${t4} & ${p4}, ${t5} & ${p5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, ${t2} & ${p2}, ${t3} & ${p3}, ${t4} & ${p4}, ${t5} & ${p5}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Obtains the width and height needed to render the cell. Used by view widgets
   * to determine the appropriate size for the cell_area passed to
   * render().  Fills in the x and y
   * offsets of the cell relative to this location.  Please note that the
   * values set in @a width  and @a height , as well as those in @a x_offset  and @a y_offset 
   * are inclusive of the xpad and ypad properties.
   * @param widget The widget the renderer is rendering to.
   * @param cell_area The area a cell will be allocated.
   * @param x_offset Location to return x offset of cell relative to @a cell_area .
   * @param y_offset Location to return y offset of cell relative to @a cell_area .
   * @param width Location to return width needed to render a cell.
   * @param height Location to return height needed to render a cell.
   "
      end

      operation 195753 "get_size"
	const public explicit_return_type "void"
	nparams 5
	  param inout name "widget" type class_ref 130089 // Widget
	  param inout name "x_offset" explicit_type "int"
	  param inout name "y_offset" explicit_type "int"
	  param inout name "width" explicit_type "int"
	  param inout name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}, ${t3} & ${p3}, ${t4} & ${p4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}, ${t3} & ${p3}, ${t4} & ${p4}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Obtains the width and height needed to render the cell. Used by view widgets
   * to determine the appropriate size for the cell_area passed to
   * render().  Fills in the x and y
   * offsets of the cell relative to this location.  Please note that the
   * values set in @a width  and @a height , as well as those in @a x_offset  and @a y_offset
   * are inclusive of the xpad and ypad properties.
   * @param widget The widget the renderer is rendering to.
   * @param x_offset Location to return x offset of cell relative to @a cell_area.
   * @param y_offset Location to return y offset of cell relative to @a cell_area.
   * @param width Location to return width needed to render a cell.
   * @param height Location to return height needed to render a cell.
   "
      end

      operation 195881 "render"
	public explicit_return_type "void"
	nparams 6
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "background_area" explicit_type "Gdk::Rectangle"
	  param in name "cell_area" explicit_type "Gdk::Rectangle"
	  param in name "expose_area" explicit_type "Gdk::Rectangle"
	  param in name "flags" type class_ref 291369 // CellRendererState
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, const ${t4} & ${p4}, ${t5} ${p5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, const ${t4} & ${p4}, ${t5} ${p5}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Invokes the virtual render function of the Gtk::CellRenderer. The three
   * passed-in rectangles are areas of @a window . Most renderers will draw within
   *  @a cell_area ; the xalign, yalign, xpad, and ypad fields of the Gtk::CellRenderer
   * should be honored with respect to @a cell_area . @a background_area  includes the
   * blank space around the cell, and also the area containing the tree expander;
   * so the @a background_area  rectangles for all cells tile to cover the entire
   *  @a window .  @a expose_area  is a clip rectangle.
   * @param window A Gdk::Drawable to draw to.
   * @param widget The widget owning @a window .
   * @param background_area Entire cell area (including tree expanders and maybe padding on the sides).
   * @param cell_area Area normally rendered by a cell renderer.
   * @param expose_area Area that actually needs updating.
   * @param flags Flags that affect rendering.
   "
      end

      operation 196009 "activate"
	public explicit_return_type "bool"
	nparams 6
	  param inout name "event" explicit_type "GdkEvent"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "path" explicit_type "Glib::ustring"
	  param in name "background_area" explicit_type "Gdk::Rectangle"
	  param in name "cell_area" explicit_type "Gdk::Rectangle"
	  param in name "flags" type class_ref 291369 // CellRendererState
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}, ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, const ${t4} & ${p4}, ${t5} ${p5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, const ${t4} & ${p4}, ${t5} ${p5}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Passes an activate event to the cell renderer for possible processing.  Some
   * cell renderers may use events; for example, Gtk::CellRendererToggle toggles
   * when it gets a mouse click.
   * @param event A Gdk::Event.
   * @param widget Widget that received the event.
   * @param path Widget-dependent string representation of the event location; e.g. for Gtk::TreeView, a string representation of Gtk::TreePath.
   * @param background_area Background area as passed to @a gtk_cell_renderer_render .
   * @param cell_area Cell area as passed to @a gtk_cell_renderer_render .
   * @param flags Render flags.
   * @return <tt>true</tt> if the event was consumed/handled.
   "
      end

      operation 196137 "start_editing"
	public return_type class_ref 289065 // CellEditable
	nparams 6
	  param inout name "event" explicit_type "GdkEvent"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "path" explicit_type "Glib::ustring"
	  param in name "background_area" explicit_type "Gdk::Rectangle"
	  param in name "cell_area" explicit_type "Gdk::Rectangle"
	  param in name "flags" type class_ref 291369 // CellRendererState
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}, ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, const ${t4} & ${p4}, ${t5} ${p5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} * ${p0}, ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, const ${t4} & ${p4}, ${t5} ${p5}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Passes an activate event to the cell renderer for possible processing.
   * @param event A Gdk::Event.
   * @param widget Widget that received the event.
   * @param path Widget-dependent string representation of the event location; e.g. for Gtk::TreeView, a string representation of Gtk::TreePath.
   * @param background_area Background area as passed to @a gtk_cell_renderer_render .
   * @param cell_area Cell area as passed to @a gtk_cell_renderer_render .
   * @param flags Render flags.
   * @return A new Gtk::CellEditable, or <tt>0</tt>.
   "
      end

      operation 196265 "set_fixed_size"
	public explicit_return_type "void"
	nparams 2
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the renderer size to be explicit, independent of the properties set.
   * @param width The width of the cell renderer, or -1.
   * @param height The height of the cell renderer, or -1.
   "
      end

      operation 196393 "get_fixed_size"
	const public explicit_return_type "void"
	nparams 2
	  param inout name "width" explicit_type "int"
	  param inout name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Fills in @a width  and @a height  with the appropriate size of @a cell .
   * @param width Location to fill in with the fixed width of the widget.
   * @param height Location to fill in with the fixed height of the widget.
   "
      end

      operation 196521 "editing_canceled"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Causes the cell renderer to emit the \"editing-canceled\" signal.  This
   * function is for use only by implementations of cell renderers that need to
   * notify the client program that an editing process was canceled and the
   * changes were not committed.
   * 
   * Since: 2.4
   "
      end

      operation 196649 "_property_renderable"
	cpp_virtual public explicit_return_type "Glib::PropertyProxy_Base"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the property that this CellRenderer renders.
   * For instance, property_text for CellRendererText, and property_active for CellRendererToggle
   * Needs to be overridden in derived classes.
   "
      end

      operation 196777 "signal_editing_canceled"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 196905 "property_mode"
	public explicit_return_type "Glib::PropertyProxy<CellRendererMode>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 197033 "property_mode"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<CellRendererMode>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 197161 "property_visible"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 197289 "property_visible"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 197417 "property_xalign"
	public explicit_return_type "Glib::PropertyProxy<float>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 197545 "property_xalign"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<float>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 197673 "property_yalign"
	public explicit_return_type "Glib::PropertyProxy<float>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 197801 "property_yalign"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<float>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 197929 "property_xpad"
	public explicit_return_type "Glib::PropertyProxy<unsigned int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 198057 "property_xpad"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<unsigned int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 198185 "property_ypad"
	public explicit_return_type "Glib::PropertyProxy<unsigned int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 198313 "property_ypad"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<unsigned int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 198441 "property_width"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 198569 "property_width"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 198697 "property_height"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 198825 "property_height"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 198953 "property_is_expander"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 199081 "property_is_expander"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 199209 "property_is_expanded"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 199337 "property_is_expanded"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 199465 "property_cell_background"
	public explicit_return_type "Glib::PropertyProxy_WriteOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 199593 "property_cell_background"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 199721 "property_cell_background_gdk"
	public explicit_return_type "Glib::PropertyProxy<Gdk::Color>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 199849 "property_cell_background_gdk"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Gdk::Color>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 199977 "property_cell_background_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 200105 "property_cell_background_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 200233 "CellRenderer"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 200361 "get_size_vfunc"
	const cpp_virtual protected explicit_return_type "void"
	nparams 6
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "cell_area" explicit_type "Gdk::Rectangle"
	  param inout name "x_offset" explicit_type "int"
	  param inout name "y_offset" explicit_type "int"
	  param inout name "width" explicit_type "int"
	  param inout name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} * ${p1}, ${t2} * ${p2}, ${t3} * ${p3}, ${t4} * ${p4}, ${t5} * ${p5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} * ${p1}, ${t2} * ${p2}, ${t3} * ${p3}, ${t4} * ${p4}, ${t5} * ${p5}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Override this in derived CellRenderers.
   *
   * Obtains the width and height needed to render the cell. Used by view widgets
   * to determine the appropriate size for the cell_area passed to
   * render().  If @a cell_area is not 0, fills in the x and y
   * offsets (if set) of the cell relative to this location.  Please note that the
   * values set in @a width and @a height, as well as those in @a x_offset and @a y_offset
   * are inclusive of the xpad and ypad properties.
   *
   * @param widget The widget the renderer is rendering to.
   * @param cell_area The area a cell will be allocated, or 0.
   * @param x_offset x offset of cell relative to @a cell_area.
   * @param y_offset y offset of cell relative to @a cell_area.
   * @param width Width needed to render a cell.
   * @param height Height needed to render a cell.
   *"
      end

      operation 200489 "render_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 6
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Drawable>"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "background_area" explicit_type "Gdk::Rectangle"
	  param in name "cell_area" explicit_type "Gdk::Rectangle"
	  param in name "expose_area" explicit_type "Gdk::Rectangle"
	  param in name "flags" type class_ref 291369 // CellRendererState
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, const ${t4} & ${p4}, ${t5} ${p5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, const ${t4} & ${p4}, ${t5} ${p5}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 200617 "activate_vfunc"
	cpp_virtual protected explicit_return_type "bool"
	nparams 6
	  param inout name "event" explicit_type "GdkEvent"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "path" explicit_type "Glib::ustring"
	  param in name "background_area" explicit_type "Gdk::Rectangle"
	  param in name "cell_area" explicit_type "Gdk::Rectangle"
	  param in name "flags" type class_ref 291369 // CellRendererState
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}, ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, const ${t4} & ${p4}, ${t5} ${p5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, const ${t4} & ${p4}, ${t5} ${p5}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 200745 "start_editing_vfunc"
	cpp_virtual protected return_type class_ref 289065 // CellEditable
	nparams 6
	  param inout name "event" explicit_type "GdkEvent"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "path" explicit_type "Glib::ustring"
	  param in name "background_area" explicit_type "Gdk::Rectangle"
	  param in name "cell_area" explicit_type "Gdk::Rectangle"
	  param in name "flags" type class_ref 291369 // CellRendererState
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}, ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, const ${t4} & ${p4}, ${t5} ${p5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} * ${p0}, ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, const ${t4} & ${p4}, ${t5} ${p5}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 291753 "CellRendererMode"
      visibility package stereotype "enum"
      cpp_external cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 "
      attribute 176937 "CELL_RENDERER_MODE_INERT"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 177065 "CELL_RENDERER_MODE_ACTIVATABLE"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 177193 "CELL_RENDERER_MODE_EDITABLE"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 292137 "CellRendererPixbuf"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/cellrendererpixbuf.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
*
 * @ingroup TreeView
 "
      classrelation 142889 // <generalisation>
	relation 142889 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 142889 // <generalisation>
	  b parent class_ref 290473 // CellRenderer
      end

      class 292265 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 292137 // CellRendererPixbuf
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 143017 // <realization>
	  relation 143017 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 143017 // <realization>
	    b parent class_ref 292137 // CellRendererPixbuf
	end
      end

      class 149801 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "CellRendererPixbuf_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 149929 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkCellRendererPixbuf"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 150057 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkCellRendererPixbufClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 200873 "~CellRendererPixbuf"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 237097 // cellrendererpixbuf_class_ (<directional composition>)
	relation 237097 *-->
	  a role_name "cellrendererpixbuf_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 237097 // cellrendererpixbuf_class_ (<directional composition>)
	  b parent class_ref 149801 // CppClassType
      end

      operation 201001 "CellRendererPixbuf"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 292137 // CellRendererPixbuf
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 201129 "operator ="
	private return_type class_ref 292137 // CellRendererPixbuf
	nparams 1
	  param in name "" type class_ref 292137 // CellRendererPixbuf
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 201257 "CellRendererPixbuf"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 201385 "CellRendererPixbuf"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkCellRendererPixbuf"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 201513 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 201641 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 201769 "gobj"
	cpp_inline public explicit_return_type "GtkCellRendererPixbuf"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkCellRendererPixbuf*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 201897 "gobj"
	const cpp_inline public explicit_return_type "GtkCellRendererPixbuf"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkCellRendererPixbuf*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 202025 "CellRendererPixbuf"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 202153 "property_pixbuf"
	public explicit_return_type "Glib::PropertyProxy< Glib::RefPtr<Gdk::Pixbuf> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 202281 "property_pixbuf"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gdk::Pixbuf> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 202409 "property_pixbuf_expander_open"
	public explicit_return_type "Glib::PropertyProxy< Glib::RefPtr<Gdk::Pixbuf> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 202537 "property_pixbuf_expander_open"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gdk::Pixbuf> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 202665 "property_pixbuf_expander_closed"
	public explicit_return_type "Glib::PropertyProxy< Glib::RefPtr<Gdk::Pixbuf> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 202793 "property_pixbuf_expander_closed"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gdk::Pixbuf> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 202921 "property_stock_id"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 203049 "property_stock_id"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 203177 "property_stock_size"
	public explicit_return_type "Glib::PropertyProxy<guint>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 203305 "property_stock_size"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<guint>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 203433 "property_stock_detail"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 203561 "property_stock_detail"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 203689 "_property_renderable"
	cpp_virtual public explicit_return_type "Glib::PropertyProxy_Base"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 291369 "CellRendererState"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/cellrendererstate.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* @addtogroup gtkmmEnums Enums and Flags 
*
 * @ingroup gtkmmEnums
 * @par Bitwise operators:
 * <tt>%CellRendererState operator|(CellRendererState, CellRendererState)</tt><br>
 * <tt>%CellRendererState operator&(CellRendererState, CellRendererState)</tt><br>
 * <tt>%CellRendererState operator^(CellRendererState, CellRendererState)</tt><br>
 * <tt>%CellRendererState operator~(CellRendererState)</tt><br>
 * <tt>%CellRendererState& operator|=(CellRendererState&, CellRendererState)</tt><br>
 * <tt>%CellRendererState& operator&=(CellRendererState&, CellRendererState)</tt><br>
 * <tt>%CellRendererState& operator^=(CellRendererState&, CellRendererState)</tt><br>
 "
      attribute 176297 "CELL_RENDERER_SELECTED"
	public explicit_type ""
	init_value " 1 << 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 176425 "CELL_RENDERER_PRELIT"
	public explicit_type ""
	init_value " 1 << 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 176553 "CELL_RENDERER_INSENSITIVE"
	public explicit_type ""
	init_value " 1 << 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 176681 "CELL_RENDERER_SORTED"
	public explicit_type ""
	init_value " 1 << 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 176809 "CELL_RENDERER_FOCUSED"
	public explicit_type ""
	init_value " 1 << 4
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 150185 "CellRendererText"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/cellrenderertext.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
*
 * @ingroup TreeView
 "
      classrelation 237225 // <generalisation>
	relation 237225 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 237225 // <generalisation>
	  b parent class_ref 290473 // CellRenderer
      end

      class 150313 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 150185 // CellRendererText
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 237353 // <realization>
	  relation 237353 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 237353 // <realization>
	    b parent class_ref 150185 // CellRendererText
	end
      end

      class 292393 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "CellRendererText_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 292521 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkCellRendererText"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 292649 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkCellRendererTextClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 203817 "~CellRendererText"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 237481 // cellrenderertext_class_ (<directional composition>)
	relation 237481 *-->
	  a role_name "cellrenderertext_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 237481 // cellrenderertext_class_ (<directional composition>)
	  b parent class_ref 292393 // CppClassType
      end

      operation 203945 "CellRendererText"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 150185 // CellRendererText
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 204073 "operator ="
	private return_type class_ref 150185 // CellRendererText
	nparams 1
	  param in name "" type class_ref 150185 // CellRendererText
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 204201 "CellRendererText"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 204329 "CellRendererText"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkCellRendererText"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 204457 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 204585 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 204713 "gobj"
	cpp_inline public explicit_return_type "GtkCellRendererText"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkCellRendererText*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 204841 "gobj"
	const cpp_inline public explicit_return_type "GtkCellRendererText"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkCellRendererText*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 204969 "on_edited"
	cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param in name "path" explicit_type "Glib::ustring"
	  param in name "new_text" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 205097 "CellRendererText"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 205225 "set_fixed_height_from_font"
	public explicit_return_type "void"
	nparams 1
	  param in name "number_of_rows" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the height of a renderer to explicitly be determined by the \"font\" and
   * \"y_pad\" property set on it.  Further changes in these properties do not
   * affect the height, so they must be accompanied by a subsequent call to this
   * function.  Using this function is unflexible, and should really only be used
   * if calculating the size of a cell is too slow (ie, a massive number of cells
   * displayed).  If @a number_of_rows  is -1, then the fixed height is unset, and
   * the height is determined by the properties again.
   * @param number_of_rows Number of rows of text each cell renderer is allocated, or -1.
   "
      end

      operation 205353 "signal_edited"
	public explicit_return_type "Glib::SignalProxy2< void,const Glib::ustring&,const Glib::ustring& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 205481 "property_text"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 205609 "property_text"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 205737 "property_markup"
	public explicit_return_type "Glib::PropertyProxy_WriteOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 205865 "property_markup"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 205993 "property_attributes"
	public explicit_return_type "Glib::PropertyProxy<Pango::AttrList>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 206121 "property_attributes"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Pango::AttrList>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 206249 "property_background"
	public explicit_return_type "Glib::PropertyProxy_WriteOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 206377 "property_background"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 206505 "property_foreground"
	public explicit_return_type "Glib::PropertyProxy_WriteOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 206633 "property_foreground"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 206761 "property_background_gdk"
	public explicit_return_type "Glib::PropertyProxy<Gdk::Color>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 206889 "property_background_gdk"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Gdk::Color>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 207017 "property_foreground_gdk"
	public explicit_return_type "Glib::PropertyProxy<Gdk::Color>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 207145 "property_foreground_gdk"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Gdk::Color>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 207273 "property_font"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 207401 "property_font"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 207529 "property_font_desc"
	public explicit_return_type "Glib::PropertyProxy<Pango::FontDescription>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 207657 "property_font_desc"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Pango::FontDescription>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 207785 "property_family"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 207913 "property_family"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 825001 "property_style"
	public explicit_return_type "Glib::PropertyProxy<Pango::Style>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 825129 "property_style"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Pango::Style>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 825257 "property_variant"
	public explicit_return_type "Glib::PropertyProxy<Pango::Variant>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 825385 "property_variant"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Pango::Variant>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 825513 "property_weight"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 825641 "property_weight"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 825769 "property_stretch"
	public explicit_return_type "Glib::PropertyProxy<Pango::Stretch>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 825897 "property_stretch"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Pango::Stretch>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 826025 "property_size"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 826153 "property_size"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 826281 "property_size_points"
	public explicit_return_type "Glib::PropertyProxy<double>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 826409 "property_size_points"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<double>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 826537 "property_scale"
	public explicit_return_type "Glib::PropertyProxy<double>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 826665 "property_scale"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<double>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 826793 "property_editable"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 826921 "property_editable"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 827049 "property_strikethrough"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 827177 "property_strikethrough"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 827305 "property_underline"
	public explicit_return_type "Glib::PropertyProxy<Pango::Underline>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 827433 "property_underline"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Pango::Underline>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 827561 "property_rise"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 827689 "property_rise"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 827817 "property_background_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 827945 "property_background_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 828073 "property_foreground_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 828201 "property_foreground_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 828329 "property_family_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 828457 "property_family_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 828585 "property_style_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 828713 "property_style_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 828841 "property_variant_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 828969 "property_variant_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 829097 "property_weight_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 829225 "property_weight_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 829353 "property_stretch_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 829481 "property_stretch_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 829609 "property_size_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 829737 "property_size_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 829865 "property_scale_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 829993 "property_scale_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 830121 "property_editable_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 830249 "property_editable_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 830377 "property_strikethrough_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 830505 "property_strikethrough_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 830633 "property_underline_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 830761 "property_underline_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 830889 "property_rise_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 831017 "property_rise_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 831145 "property_single_paragraph_mode"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 831273 "property_single_paragraph_mode"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 831401 "_property_renderable"
	cpp_virtual public explicit_return_type "Glib::PropertyProxy_Base"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 831529 "edited"
	protected explicit_return_type "void"
	nparams 2
	  param in name "path" explicit_type "Glib::ustring"
	  param in name "new_text" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "override
 Emits the \"edited\" signal.  In GTK+, you're supposed to emit the signal directly."
      end
    end

    class 292777 "CellRendererToggle"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/cellrenderertoggle.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
*
 * @ingroup TreeView
 "
      classrelation 237609 // <generalisation>
	relation 237609 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 237609 // <generalisation>
	  b parent class_ref 290473 // CellRenderer
      end

      class 292905 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 292777 // CellRendererToggle
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 237737 // <realization>
	  relation 237737 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 237737 // <realization>
	    b parent class_ref 292777 // CellRendererToggle
	end
      end

      class 293033 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "CellRendererToggle_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 293161 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkCellRendererToggle"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 293289 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkCellRendererToggleClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 831657 "~CellRendererToggle"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 237865 // cellrenderertoggle_class_ (<directional composition>)
	relation 237865 *-->
	  a role_name "cellrenderertoggle_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 237865 // cellrenderertoggle_class_ (<directional composition>)
	  b parent class_ref 293033 // CppClassType
      end

      operation 831785 "CellRendererToggle"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 292777 // CellRendererToggle
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 831913 "operator ="
	private return_type class_ref 292777 // CellRendererToggle
	nparams 1
	  param in name "" type class_ref 292777 // CellRendererToggle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 832041 "CellRendererToggle"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 832169 "CellRendererToggle"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkCellRendererToggle"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 832297 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 832425 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 832553 "gobj"
	cpp_inline public explicit_return_type "GtkCellRendererToggle"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkCellRendererToggle*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 832681 "gobj"
	const cpp_inline public explicit_return_type "GtkCellRendererToggle"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkCellRendererToggle*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 832809 "on_toggled"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "path" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 832937 "CellRendererToggle"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 833065 "get_radio"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns wether we're rendering radio toggles rather than checkboxes.
   * @return <tt>true</tt> if we're rendering radio toggles rather than checkboxes.
   "
      end

      operation 833193 "set_radio"
	public explicit_return_type "void"
	nparams 1
	  param in name "radio" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* If @a radio  is <tt>true</tt>, the cell renderer renders a radio toggle
   * (i.e.\\ a toggle in a group of mutually-exclusive toggles).
   * If <tt>false</tt>, it renders a check toggle (a standalone boolean option).
   * This can be set globally for the cell renderer, or changed just
   * before rendering each cell in the model (for Gtk::TreeView, you set
   * up a per-row setting using Gtk::TreeViewColumn to associate model
   * columns with cell renderer properties).
   * @param radio <tt>true</tt> to make the toggle look like a radio button.
   "
      end

      operation 833321 "get_active"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether the cell renderer is active. See
   * set_active().
   * @return <tt>true</tt> if the cell renderer is active.
   "
      end

      operation 833449 "set_active"
	public explicit_return_type "void"
	nparams 1
	  param in name "setting" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Activates or deactivates a cell renderer.
   * @param setting The value to set.
   "
      end

      operation 833577 "signal_toggled"
	public explicit_return_type "Glib::SignalProxy1< void,const Glib::ustring& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 833705 "property_activatable"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 833833 "property_activatable"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 833961 "property_active"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 834089 "property_active"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 217257 "property_radio"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 834217 "property_radio"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 834345 "_property_renderable"
	cpp_virtual public explicit_return_type "Glib::PropertyProxy_Base"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 293417 "CheckButton"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/checkbutton.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* Create widgets with a discrete toggle button.
 *
 * A Gtk::CheckButton places a discrete Gtk::ToggleButton next to a widget,
 * (usually a Gtk::Label).  See Gtk::ToggleButton widgets for more
 * information about toggle/check buttons.  The important signal,
 * signal_toggled() is also inherited from Gtk::ToggleButton.
 *
 * @ingroup Widgets
 "
      classrelation 237993 // <generalisation>
	relation 237993 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 237993 // <generalisation>
	  b parent class_ref 293545 // ToggleButton
      end

      class 293673 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 293417 // CheckButton
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 238121 // <realization>
	  relation 238121 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 238121 // <realization>
	    b parent class_ref 293417 // CheckButton
	end
      end

      class 293801 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "CheckButton_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 293929 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkCheckButton"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 294057 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkCheckButtonClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 834473 "~CheckButton"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 238249 // checkbutton_class_ (<directional composition>)
	relation 238249 *-->
	  a role_name "checkbutton_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 238249 // checkbutton_class_ (<directional composition>)
	  b parent class_ref 293801 // CppClassType
      end

      operation 834601 "CheckButton"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 293417 // CheckButton
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 834729 "operator ="
	private return_type class_ref 293417 // CheckButton
	nparams 1
	  param in name "" type class_ref 293417 // CheckButton
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 834857 "CheckButton"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 834985 "CheckButton"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkCheckButton"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 835113 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 835241 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 835369 "gobj"
	cpp_inline public explicit_return_type "GtkCheckButton"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkCheckButton*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 835497 "gobj"
	const cpp_inline public explicit_return_type "GtkCheckButton"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkCheckButton*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 835625 "CheckButton"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::
* Create an empty check button.
   * With an empty button, you can Gtk::Button::add() a widget such as a
   * Gtk::Pixmap or Gtk::Box.
   *
   * If you just wish to add a Gtk::Label, you may want to use the
   * Gtk::CheckButton(const Glib::ustring &label) constructor directly
   * instead.
   "
      end

      operation 835753 "CheckButton"
	public explicit_return_type ""
	nparams 2
	  param in name "label" explicit_type "Glib::ustring"
	  param in name "mnemonic" explicit_type "bool"
	    defaultvalue " false"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${throw}{
${body}}
"
	
	
	
	
	comment "* Create a check button with a label.
   * You won't be able to add a widget to this button since it already
   * contains a Gtk::Label
   "
      end

      operation 835881 "draw_indicator_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "area" explicit_type "GdkRectangle"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Emited on button redraw to update indicator.
   * Triggered when the button is redrawn (e.g.after being toggled)
   * Overload this signal if you want to implement your own check button
   * look. Otherwise, you most likely don't care about it.
   * The GdkRectangle specifies the area of the widget which will get
   * redrawn.
   "
      end
    end

    class 294185 "CheckMenuItem"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/checkmenuitem.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* A menu item that maintains the state of a boolean value in addition to a Gtk::MenuItem's usual role in activating application code.
 * A check box indicating the state of the boolean value is displayed at the left side of the Gtk::MenuItem.
 * Activating the Gtk::MenuItem toggles the value.
 * @ingroup Widgets
 * @ingroup Menus
 "
      classrelation 238377 // <generalisation>
	relation 238377 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 238377 // <generalisation>
	  b parent class_ref 131369 // MenuItem
      end

      class 152745 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 294185 // CheckMenuItem
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 238505 // <realization>
	  relation 238505 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 238505 // <realization>
	    b parent class_ref 294185 // CheckMenuItem
	end
      end

      class 153001 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "CheckMenuItem_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 153129 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkCheckMenuItem"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 153257 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkCheckMenuItemClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 836009 "~CheckMenuItem"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 145961 // checkmenuitem_class_ (<directional composition>)
	relation 145961 *-->
	  a role_name "checkmenuitem_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 145961 // checkmenuitem_class_ (<directional composition>)
	  b parent class_ref 153001 // CppClassType
      end

      operation 836137 "CheckMenuItem"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 294185 // CheckMenuItem
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 836265 "operator ="
	private return_type class_ref 294185 // CheckMenuItem
	nparams 1
	  param in name "" type class_ref 294185 // CheckMenuItem
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 836393 "CheckMenuItem"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 836521 "CheckMenuItem"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkCheckMenuItem"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 836649 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 836777 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 836905 "gobj"
	cpp_inline public explicit_return_type "GtkCheckMenuItem"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkCheckMenuItem*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 837033 "gobj"
	const cpp_inline public explicit_return_type "GtkCheckMenuItem"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkCheckMenuItem*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 837161 "on_toggled"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 837289 "CheckMenuItem"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 837417 "CheckMenuItem"
	public explicit_return_type ""
	nparams 2
	  param in name "label" explicit_type "Glib::ustring"
	  param in name "mnemonic" explicit_type "bool"
	    defaultvalue " false"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 837545 "set_active"
	public explicit_return_type "void"
	nparams 1
	  param in name "state" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 837673 "get_active"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether the check menu item is active. See
   * set_active().
   * @return <tt>true</tt> if the menu item is checked.
   "
      end

      operation 837801 "toggled"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 837929 "set_inconsistent"
	public explicit_return_type "void"
	nparams 1
	  param in name "setting" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* If the user has selected a range of elements (such as some text or
   * spreadsheet cells) that are affected by a boolean setting, and the
   * current values in that range are inconsistent, you may want to
   * display the check in an \"in between\" state. This function turns on
   * \"in between\" display.  Normally you would turn off the inconsistent
   * state again if the user explicitly selects a setting. This has to be
   * done manually, set_inconsistent() only affects
   * visual appearance, it doesn't affect the semantics of the widget.
   * @param setting <tt>true</tt> to display an \"inconsistent\" third state check.
   "
      end

      operation 838057 "get_inconsistent"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the value set by set_inconsistent().
   * @return <tt>true</tt> if inconsistent.
   "
      end

      operation 838185 "set_draw_as_radio"
	public explicit_return_type "void"
	nparams 1
	  param in name "draw_as_radio" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets whether @a check_menu_item  is drawn like a Gtk::RadioMenuItem
   * 
   * Since: 2.4
   * @param draw_as_radio Whether @a check_menu_item  is drawn like a Gtk::RadioMenuItem.
   "
      end

      operation 838313 "get_draw_as_radio"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether @a check_menu_item  looks like a Gtk::RadioMenuItem
   * @return Whether @a check_menu_item  looks like a Gtk::RadioMenuItem
   * 
   * Since: 2.4.
   "
      end

      operation 838441 "signal_toggled"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Triggered when the item changes state
   * (Note : changing the item's state with set_active() will also trigger
   * this signal)
   "
      end

      operation 838569 "property_active"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 838697 "property_active"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 838825 "property_inconsistent"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 838953 "property_inconsistent"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 839081 "property_draw_as_radio"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 839209 "property_draw_as_radio"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 839337 "draw_indicator_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "area" explicit_type "GdkRectangle"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Triggered when the item is redrawn (e.g.after being toggled)
   * Overload this signal if you want to implement your own check item
   * look. Otherwise, you most likely don't care about it.
   * The GdkRectangle specifies the area of the widget which will get
   * redrawn.
   "
      end
    end

    class 286121 "Child"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/child.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This may not have any data or virtual functions. See below."
      operation 793769 "operator ="
	private return_type class_ref 286121 // Child
	nparams 1
	  param in name "" type class_ref 286121 // Child
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 793897 "Child"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 286121 // Child
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment "Not implemented."
      end

      operation 794025 "gobj"
	cpp_inline public explicit_return_type "_GtkBoxChild"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return this; };
"
	
	
	
	
	comment "Not implemented.
/ Provides access to the underlying C GObject."
      end

      operation 794153 "gobj"
	const cpp_inline public explicit_return_type "_GtkBoxChild"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return this; };
"
	
	
	
	
	comment "/ Provides access to the underlying C GObject."
      end

      operation 794281 "get_widget"
	const public return_type class_ref 130089 // Widget
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 794409 "get_padding"
	const cpp_inline public explicit_return_type "guint16"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return (gobj()->padding); };
"
	
	
	
	
      end

      operation 794537 "get_expand"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return (gobj()->expand); };
"
	
	
	
	
      end

      operation 794665 "get_fill"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return (gobj()->fill); };
"
	
	
	
	
      end

      operation 794793 "get_pack"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return (gobj()->pack); };
"
	
	
	
	
      end

      operation 794921 "set_options"
	public explicit_return_type "void"
	nparams 2
	  param in name "options" type class_ref 285993 // PackOptions
	  param in name "padding" explicit_type "guint"
	    defaultvalue " 0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 795049 "set_options"
	public explicit_return_type "void"
	nparams 3
	  param in name "expand" explicit_type "bool"
	  param in name "fill" explicit_type "bool"
	  param in name "padding" explicit_type "guint"
	    defaultvalue " 0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 795177 "set_pack"
	public explicit_return_type "void"
	nparams 1
	  param in name "pack" type class_ref 286377 // PackType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 795305 "parent"
	cpp_inline protected explicit_return_type "GtkBox"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return (GtkBox*) (gobj()->widget->parent); };
"
	
	
	
	
      end

      operation 795433 "redraw"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      extra_member 128169 "friend"
	
	cpp "
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  friend class Dummy_;" ""
	java ""
	php ""
	python ""
	idl ""
      end
    end

    class 153385 "Clipboard"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/clipboard.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk"
      class 153513 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 153385 // Clipboard
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 146217 // <realization>
	  relation 146217 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 146217 // <realization>
	    b parent class_ref 153385 // Clipboard
	end
      end

      class 153769 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Clipboard_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 153897 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkClipboard"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 294313 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkClipboardClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 238633 // clipboard_class_ (<directional composition>)
	relation 238633 *-->
	  a role_name "clipboard_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 238633 // clipboard_class_ (<directional composition>)
	  b parent class_ref 153769 // CppClassType
      end

      operation 839465 "Clipboard"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 153385 // Clipboard
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 839593 "operator ="
	private return_type class_ref 153385 // Clipboard
	nparams 1
	  param in name "" type class_ref 153385 // Clipboard
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 839721 "Clipboard"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 839849 "Clipboard"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkClipboard"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 839977 "~Clipboard"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 840105 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 840233 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 840361 "gobj"
	cpp_inline public explicit_return_type "GtkClipboard"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkClipboard*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 840489 "gobj"
	const cpp_inline public explicit_return_type "GtkClipboard"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkClipboard*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 840617 "gobj_copy"
	public explicit_return_type "GtkClipboard"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs."
      end

      operation 840745 "get"
	class_operation public explicit_return_type "Glib::RefPtr<Clipboard>"
	nparams 1
	  param in name "selection" explicit_type "GdkAtom"
	    defaultvalue " GDK_SELECTION_CLIPBOARD"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the clipboard object for the given selection.
   * See gtk_clipboard_get_for_display() for complete details.
   * @param selection A Gdk::Atom which identifies the clipboard
   * to use.
   * @return The appropriate clipboard object. If no
   * clipboard already exists, a new one will
   * be created. Once a clipboard object has
   * been created, it is persistent for all time and
   * cannot be freed.
   "
      end

      operation 840873 "get_for_display"
	class_operation public explicit_return_type "Glib::RefPtr<Clipboard>"
	nparams 2
	  param in name "display" explicit_type "Glib::RefPtr<Gdk::Display>"
	  param in name "selection" explicit_type "GdkAtom"
	    defaultvalue " GDK_SELECTION_CLIPBOARD"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the clipboard object for the given selection.
   * Cut/copy/paste menu items and keyboard shortcuts should use
   * the default clipboard, returned by passing Gdk::SELECTION_CLIPBOARD for @a selection .
   * (Gdk::NONE is supported as a synonym for GDK_SELECTION_CLIPBOARD
   * for backwards compatibility reasons.)
   * The currently-selected object or text should be provided on the clipboard
   * identified by Gdk::SELECTION_PRIMARY. Cut/copy/paste menu items
   * conceptually copy the contents of the Gdk::SELECTION_PRIMARY clipboard
   * to the default clipboard, i.e. they copy the selection to what the
   * user sees as the clipboard.
   * 
   * (Passing Gdk::NONE is the same as using <tt>gdk_atom_intern
   * (\"CLIPBOARD\", <tt>false</tt>)</tt>. See 
   * http://www.freedesktop.org/standards/clipboards-spec/clipboards.txt
   * for a detailed discussion of the \"CLIPBOARD\" vs. \"PRIMARY\"
   * selections under the X window system. On Win32 the
   * Gdk::SELECTION_PRIMARY clipboard is essentially ignored.)
   * 
   * It's possible to have arbitrary named clipboards; if you do invent
   * new clipboards, you should prefix the selection name with an
   * underscore (because the ICCCM requires that nonstandard atoms are
   * underscore-prefixed), and namespace it as well. For example,
   * if your application called \"Foo\" has a special-purpose
   * clipboard, you might call it \"_FOO_SPECIAL_CLIPBOARD\".
   * @param display The display for which the clipboard is to be retrieved or created.
   * @param selection A Gdk::Atom which identifies the clipboard
   * to use.
   * @return The appropriate clipboard object. If no
   * clipboard already exists, a new one will
   * be created. Once a clipboard object has
   * been created, it is persistent for all time and
   * cannot be freed.
   * 
   * Since: 2.2.
   "
      end

      operation 841001 "get_display"
	public explicit_return_type "Glib::RefPtr<Gdk::Display>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the Gdk::Display associated with @a clipboard 
   * @return The Gdk::Display associated with @a clipboard 
   * 
   * Since: 2.2.
   "
      end

      operation 841129 "get_display"
	const public explicit_return_type "Glib::RefPtr<const Gdk::Display>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the Gdk::Display associated with @a clipboard 
   * @return The Gdk::Display associated with @a clipboard 
   * 
   * Since: 2.2.
   "
      end

      class 294441 "SlotGet"
	visibility package stereotype "typedef" explicit_base_type "sigc::slot<void, SelectionData&, guint>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 294569 "SlotClear"
	visibility package stereotype "typedef" explicit_base_type "sigc::slot<void>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 841257 "set"
	public explicit_return_type "bool"
	nparams 3
	  param in name "targets" explicit_type "ArrayHandle_TargetEntry"
	  param in name "slot_get" type class_ref 294441 // SlotGet
	  param in name "slot_clear" type class_ref 294569 // SlotClear
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Virtually sets the contents of the specified clipboard by providing
  * a list of supported formats for the clipboard data and a function
  * to call to get the actual data when it is requested.
  *
  * @param targets Information about the available forms for the clipboard data.
  * @param slot_get method to call to get the actual clipboard data.
  * @param slot_clear When the clipboard contents are set again, this method will
  *              be called, and slot_get will not be subsequently called.
  *
  * @return true if setting the clipboard data succeeded. If setting
  *               the clipboard data failed then the provided callback methods
  *               will be ignored.
  "
      end

      operation 841385 "get_owner"
	public explicit_return_type "Glib::RefPtr<Glib::Object>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* If the clipboard contents callbacks were set with 
   * gtk_clipboard_set_with_owner(), and the gtk_clipboard_set_with_data() or 
   * gtk_clipboard_clear() has not subsequently called, returns the owner set 
   * by gtk_clipboard_set_with_owner().
   * @return The owner of the clipboard, if any; otherwise <tt>0</tt>.
   "
      end

      operation 841513 "get_owner"
	const public explicit_return_type "Glib::RefPtr<const Glib::Object>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* If the clipboard contents callbacks were set with 
   * gtk_clipboard_set_with_owner(), and the gtk_clipboard_set_with_data() or 
   * gtk_clipboard_clear() has not subsequently called, returns the owner set 
   * by gtk_clipboard_set_with_owner().
   * @return The owner of the clipboard, if any; otherwise <tt>0</tt>.
   "
      end

      operation 841641 "clear"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "*
   * Clears the contents of the clipboard. Generally this should only
   * be called between the time you call set()
   * and when the slot_clear you supplied is called. Otherwise, the
   * clipboard may be owned by someone else.
   
* Clears the contents of the clipboard. Generally this should only
   * be called between the time you call gtk_clipboard_set_with_owner()
   * or gtk_clipboard_set_with_data(),
   * and when the @a clear_func  you supplied is called. Otherwise, the
   * clipboard may be owned by someone else.
   "
      end

      operation 841769 "set_text"
	public explicit_return_type "void"
	nparams 1
	  param in name "text" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "*
   * Sets the contents of the clipboard to the given UTF-8 string. GTK+ will
   * make a copy of the text and take responsibility for responding
   * for requests for the text, and for converting the text into
   * the requested format.
   *
   * @param text  A UTF-8 string.
   *
   "
      end

      class 294697 "SlotReceived"
	visibility package stereotype "typedef" explicit_base_type "sigc::slot<void, const SelectionData&>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 841897 "request_contents"
	public explicit_return_type "void"
	nparams 2
	  param in name "target" explicit_type "Glib::ustring"
	  param in name "slot" type class_ref 294697 // SlotReceived
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Requests the contents of clipboard as the given target.
   * When the results of the result are later received the supplied callback
   * will be called.
   *
   * @param target The form into which the clipboard
   *             owner should convert the selection.
   * @param slot  A function to call when the results are received
   *             (or the retrieval fails). If the retrieval fails
   *             the length field of selection_data will be
   *             negative.
   *"
      end

      class 294825 "SlotTextReceived"
	visibility package stereotype "typedef" explicit_base_type "sigc::slot<void, const Glib::ustring&>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 842025 "request_text"
	public explicit_return_type "void"
	nparams 1
	  param in name "slot" type class_ref 294825 // SlotTextReceived
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Requests the contents of the clipboard as text. When the text is
   * later received, it will be converted to UTF-8 if necessary, and
   * slot will be called.
   *
   * The text parameter to slot will contain the resulting text if
   * the request succeeded, or will be empty if it failed. This could happen for
   * various reasons, in particular if the clipboard was empty or if the
   * contents of the clipboard could not be converted into text form.
   *
   * @param slot:  a function to call when the text is received,
   *             or the retrieval fails. (It will always be called
   *             one way or the other.)
   *"
      end

      class 294953 "SlotTargetsReceived"
	visibility package stereotype "typedef" explicit_base_type "sigc::slot<void, const Glib::StringArrayHandle&>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 842153 "request_targets"
	public explicit_return_type "void"
	nparams 1
	  param in name "slot" type class_ref 294953 // SlotTargetsReceived
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Requests the contents of the clipboard as list of supported targets.
   * When the list is later received, callback will be called.
   *
   * The targets parameter to slot will contain the resulting targets if
   * the request succeeded.
   *
   * @param slot a function to call when the targets are received,
   *             or the retrieval fails. (It will always be called
   *             one way or the other.) Remember that Glib::StringArrayHandle
   *             is an intermediate type, so you should convert it to a
   *             standard C++ container.
   *
   * Since: 2.4
   *"
      end

      operation 842281 "wait_for_contents"
	const public return_type class_ref 280489 // SelectionData
	nparams 1
	  param in name "target" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "*
   * Requests the contents of the clipboard using the given target.
   * This function waits for the data to be received using the main
   * loop, so events, timeouts, etc, may be dispatched during the wait.
   *
   * @param target The form into which the clipboard owner should convert the selection.
   *
   * @return A SelectionData object, which will be invalid if retrieving the given target failed. 
   *"
      end

      operation 842409 "wait_for_text"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Requests the contents of the clipboard as text and converts
   * the result to UTF-8 if necessary. This function waits for
   * the data to be received using the main loop, so events,
   * timeouts, etc, may be dispatched during the wait.
   * @return A UTF-8 string, which is empty if retrieving
   * the selection data failed. (This could happen
   * for various reasons, in particular if the
   * clipboard was empty or if the contents of the
   * clipboard could not be converted into text form.).
   "
      end

      operation 842537 "wait_is_text_available"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Test to see if there is text available to be pasted
   * This is done by requesting the TARGETS atom and checking
   * if it contains any of the names: STRING, TEXT, COMPOUND_TEXT,
   * UTF8_STRING. This function waits for the data to be received
   * using the main loop, so events, timeouts, etc, may be dispatched
   * during the wait.
   * 
   * This function is a little faster than calling
   * gtk_clipboard_wait_for_text() since it doesn't need to retrieve
   * the actual text.
   * @return <tt>true</tt> is there is text available, <tt>false</tt> otherwise.
   "
      end

      operation 842665 "wait_for_targets"
	const public explicit_return_type "Glib::StringArrayHandle"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns a list of targets that are present on the clipboard.
   * This function waits for the data to be received using the main
   * loop, so events, timeouts, etc, may be dispatched during the wait.
   *
   * @result targets: The targets.
   *
   * Since: 2.4
   "
      end
    end

    class 295081 "ColorButton"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/colorbutton.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* A button to launch a color selection dialog.
 *
 * The GtkColorButton is a button which displays the currently selected color an allows to
 * open a color selection dialog to change the color. It is suitable widget for selecting a
 * color in a preference dialog.
 *
 * @ingroup Widgets
 "
      classrelation 238761 // <generalisation>
	relation 238761 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 238761 // <generalisation>
	  b parent class_ref 141353 // Button
      end

      class 295209 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 295081 // ColorButton
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 238889 // <realization>
	  relation 238889 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 238889 // <realization>
	    b parent class_ref 295081 // ColorButton
	end
      end

      class 295337 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "ColorButton_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 295465 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkColorButton"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 295593 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkColorButtonClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 842793 "~ColorButton"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 239017 // colorbutton_class_ (<directional composition>)
	relation 239017 *-->
	  a role_name "colorbutton_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 239017 // colorbutton_class_ (<directional composition>)
	  b parent class_ref 295337 // CppClassType
      end

      operation 842921 "ColorButton"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 295081 // ColorButton
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 843049 "operator ="
	private return_type class_ref 295081 // ColorButton
	nparams 1
	  param in name "" type class_ref 295081 // ColorButton
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 843177 "ColorButton"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 843305 "ColorButton"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkColorButton"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 843433 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 843561 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 843689 "gobj"
	cpp_inline public explicit_return_type "GtkColorButton"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkColorButton*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 843817 "gobj"
	const cpp_inline public explicit_return_type "GtkColorButton"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkColorButton*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 843945 "on_color_set"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 844073 "ColorButton"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "* Creates a new color button.
   * 
   * This creates a widget in the form of a small button containing a swatch representing
   * the current selected color. When the button is clicked, a color-selection dialog will
   * open, allowing the user to select a color. The swatch will be updated to reflect the
   * new color when the user finishes.
   *
   * Since: 2.4
   "
      end

      operation 844201 "ColorButton"
	public explicit_return_type ""
	nparams 1
	  param in name "color" explicit_type "Gdk::Color"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment "* Creates a new color button with a predefined color.
   * 
   * Same as Gtk::ColorButton::ColorButton(). Additionally takes a Gdk::Color and
   * initializes the button with this color. Equivalent to calling set_color(@a color)
   * after the default constructor.
   *
   * @param color A Gdk::Color to set the current color with.
   *
   * Since: 2.4
   "
      end

      operation 844329 "set_color"
	public explicit_return_type "void"
	nparams 1
	  param in name "color" explicit_type "Gdk::Color"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the current color to be @a color .
   * 
   * Since: 2.4
   * @param color A Gdk::Color to set the current color with.
   "
      end

      operation 844457 "set_alpha"
	public explicit_return_type "void"
	nparams 1
	  param in name "alpha" explicit_type "guint16"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the current opacity to be @a alpha . 
   * 
   * Since: 2.4
   * @param alpha An integer between 0 and 65535.
   "
      end

      operation 844585 "get_color"
	const public explicit_return_type "Gdk::Color"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns a copy of the the current color.
   * 
   * Changes to the return value will have no effect on the Gtk::ColorButton.
   *
   * @return A Gdk::Color representing the current internal color of the Gtk::ColorButton.
   *
   * Since: 2.4
   "
      end

      operation 227881 "get_alpha"
	const public explicit_return_type "guint16"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the current alpha value.
   * @return An integer between 0 and 65535.
   * 
   * Since: 2.4.
   "
      end

      operation 228009 "set_use_alpha"
	public explicit_return_type "void"
	nparams 1
	  param in name "use_alpha" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets whether or not the color button should use the alpha channel.
   * 
   * Since: 2.4
   * @param use_alpha <tt>true</tt> if color button should use alpha channel, <tt>false</tt> if not.
   "
      end

      operation 228137 "get_use_alpha"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Does the color selection dialog use the alpha channel?
   * @return <tt>true</tt> if the color sample uses alpha channel, <tt>false</tt> if not.
   * 
   * Since: 2.4.
   "
      end

      operation 228265 "set_title"
	public explicit_return_type "void"
	nparams 1
	  param in name "title" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the title for the color selection dialog.
   * 
   * Since: 2.4
   * @param title String containing new window title.
   "
      end

      operation 228393 "get_title"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the title of the color selection dialog.
   * @return An internal string, do not free the return value
   * 
   * Since: 2.4.
   "
      end

      operation 228521 "property_use_alpha"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 228649 "property_use_alpha"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 228777 "property_title"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 228905 "property_title"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 229033 "property_color"
	public explicit_return_type "Glib::PropertyProxy<Gdk::Color>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 229161 "property_color"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Gdk::Color>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 229289 "property_alpha"
	public explicit_return_type "Glib::PropertyProxy<guint16>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 229417 "property_alpha"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<guint16>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 229545 "signal_color_set"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 295721 "ColorSelection"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/colorselection.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* A widget used to select a color.
 *
 * This widget is used to select a color. It
 * consists of a color wheel and number of sliders and entry boxes for color
 * parameters such as hue, saturation, value, red, green, blue, and opacity.
 *
 * It is found on the standard color selection dialog box
 * Gtk::ColorSelectionDialog. 
 *
 * @ingroup Widgets
 "
      classrelation 239145 // <generalisation>
	relation 239145 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 239145 // <generalisation>
	  b parent class_ref 287913 // VBox
      end

      class 295849 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 295721 // ColorSelection
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 239273 // <realization>
	  relation 239273 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 239273 // <realization>
	    b parent class_ref 295721 // ColorSelection
	end
      end

      class 295977 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "ColorSelection_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 296105 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkColorSelection"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 296233 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkColorSelectionClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 229673 "~ColorSelection"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 239401 // colorselection_class_ (<directional composition>)
	relation 239401 *-->
	  a role_name "colorselection_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 239401 // colorselection_class_ (<directional composition>)
	  b parent class_ref 295977 // CppClassType
      end

      operation 229801 "ColorSelection"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 295721 // ColorSelection
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 229929 "operator ="
	private return_type class_ref 295721 // ColorSelection
	nparams 1
	  param in name "" type class_ref 295721 // ColorSelection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 230057 "ColorSelection"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 844713 "ColorSelection"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkColorSelection"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 844841 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 844969 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 845097 "gobj"
	cpp_inline public explicit_return_type "GtkColorSelection"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkColorSelection*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 845225 "gobj"
	const cpp_inline public explicit_return_type "GtkColorSelection"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkColorSelection*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 845353 "on_color_changed"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 845481 "ColorSelection"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 845609 "get_has_opacity_control"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Determines whether the colorsel has an opacity control.
   * @return <tt>true</tt> if the @a colorsel  has an opacity control.  <tt>false</tt> if it does't.
   "
      end

      operation 845737 "set_has_opacity_control"
	public explicit_return_type "void"
	nparams 1
	  param in name "has_opacity" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the @a colorsel  to use or not use opacity.
   * @param has_opacity <tt>true</tt> if @a colorsel  can set the opacity, <tt>false</tt> otherwise.
   "
      end

      operation 845865 "get_has_palette"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Determines whether the color selector has a color palette.
   * @return <tt>true</tt> if the selector has a palette.  <tt>false</tt> if it hasn't.
   "
      end

      operation 845993 "set_has_palette"
	public explicit_return_type "void"
	nparams 1
	  param in name "has_palette" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Shows and hides the palette based upon the value of @a has_palette .
   * @param has_palette <tt>true</tt> if palette is to be visible, <tt>false</tt> otherwise.
   "
      end

      operation 846121 "set_current_color"
	public explicit_return_type "void"
	nparams 1
	  param in name "color" explicit_type "Gdk::Color"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the current color to be @a color .  The first time this is called, it will
   * also set the original color to be @a color  too.
   * @param color A Gdk::Color to set the current color with.
   "
      end

      operation 846249 "set_current_alpha"
	public explicit_return_type "void"
	nparams 1
	  param in name "alpha" explicit_type "guint16"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the current opacity to be @a alpha .  The first time this is called, it will
   * also set the original opacity to be @a alpha  too.
   * @param alpha An integer between 0 and 65535.
   "
      end

      operation 846377 "get_current_color"
	const public explicit_return_type "Gdk::Color"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 846505 "get_current_alpha"
	const public explicit_return_type "guint16"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the current alpha value.
   * @return An integer between 0 and 65535.
   "
      end

      operation 846633 "set_previous_color"
	public explicit_return_type "void"
	nparams 1
	  param in name "color" explicit_type "Gdk::Color"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the 'previous' color to be @a color .  This function should be called with
   * some hesitations, as it might seem confusing to have that color change.
   * Calling set_current_color() will also set this color the first
   * time it is called.
   * @param color A Gdk::Color to set the previous color with.
   "
      end

      operation 846761 "set_previous_alpha"
	public explicit_return_type "void"
	nparams 1
	  param in name "alpha" explicit_type "guint16"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the 'previous' alpha to be @a alpha .  This function should be called with
   * some hesitations, as it might seem confusing to have that alpha change.
   * @param alpha An integer between 0 and 65535.
   "
      end

      operation 846889 "get_previous_color"
	const public explicit_return_type "Gdk::Color"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 847017 "get_previous_alpha"
	const public explicit_return_type "guint16"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the previous alpha value.
   * @return An integer between 0 and 65535.
   "
      end

      operation 847145 "is_adjusting"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the current state of the @a colorsel .
   * @return <tt>true</tt> if the user is currently dragging a color around, and <tt>false</tt>
   * if the selection has stopped.
   "
      end

      operation 847273 "palette_from_string"
	class_operation public explicit_return_type "Gdk::ArrayHandle_Color"
	nparams 1
	  param in name "str" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 847401 "palette_to_string"
	class_operation public explicit_return_type "Glib::ustring"
	nparams 1
	  param in name "colors" explicit_type "Gdk::ArrayHandle_Color"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      class 296361 "SlotChangePaletteHook"
	visibility package stereotype "typedef" explicit_base_type "sigc::slot<void, const Glib::RefPtr<Gdk::Screen>&,
                            const Gdk::ArrayHandle_Color&>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 847529 "set_change_palette_hook"
	class_operation public return_type class_ref 296361 // SlotChangePaletteHook
	nparams 1
	  param in name "slot" type class_ref 296361 // SlotChangePaletteHook
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 847657 "signal_color_changed"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 847785 "property_has_palette"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 847913 "property_has_palette"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 848041 "property_has_opacity_control"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 848169 "property_has_opacity_control"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 848297 "property_current_color"
	public explicit_return_type "Glib::PropertyProxy<Gdk::Color>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 848425 "property_current_color"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Gdk::Color>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 848553 "property_current_alpha"
	public explicit_return_type "Glib::PropertyProxy<guint>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 848681 "property_current_alpha"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<guint>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end
    end

    class 296489 "ColorSelectionDialog"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/colorselectiondialog.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* This dialog allows the user to select a color.
 * @ingroup Dialogs
 "
      classrelation 148009 // <generalisation>
	relation 148009 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 148009 // <generalisation>
	  b parent class_ref 296617 // Dialog
      end

      class 296745 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 296489 // ColorSelectionDialog
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 239529 // <realization>
	  relation 239529 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 239529 // <realization>
	    b parent class_ref 296489 // ColorSelectionDialog
	end
      end

      class 296873 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "ColorSelectionDialog_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 297001 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkColorSelectionDialog"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 297129 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkColorSelectionDialogClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 848809 "~ColorSelectionDialog"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 239657 // colorselectiondialog_class_ (<directional composition>)
	relation 239657 *-->
	  a role_name "colorselectiondialog_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 239657 // colorselectiondialog_class_ (<directional composition>)
	  b parent class_ref 296873 // CppClassType
      end

      operation 848937 "ColorSelectionDialog"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 296489 // ColorSelectionDialog
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 849065 "operator ="
	private return_type class_ref 296489 // ColorSelectionDialog
	nparams 1
	  param in name "" type class_ref 296489 // ColorSelectionDialog
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 849193 "ColorSelectionDialog"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 849321 "ColorSelectionDialog"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkColorSelectionDialog"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 849449 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 849577 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 849705 "gobj"
	cpp_inline public explicit_return_type "GtkColorSelectionDialog"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkColorSelectionDialog*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 849833 "gobj"
	const cpp_inline public explicit_return_type "GtkColorSelectionDialog"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkColorSelectionDialog*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 849961 "ColorSelectionDialog"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 850089 "ColorSelectionDialog"
	public explicit_return_type ""
	nparams 1
	  param in name "title" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 850217 "get_colorsel"
	public return_type class_ref 295721 // ColorSelection
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 850345 "get_colorsel"
	const public return_type class_ref 295721 // ColorSelection
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 850473 "get_ok_button"
	public return_type class_ref 141353 // Button
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 850601 "get_ok_button"
	const public return_type class_ref 141353 // Button
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 850729 "get_cancel_button"
	public return_type class_ref 141353 // Button
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 850857 "get_cancel_button"
	const public return_type class_ref 141353 // Button
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 850985 "get_help_button"
	public return_type class_ref 141353 // Button
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 851113 "get_help_button"
	const public return_type class_ref 141353 // Button
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 299817 "Combo"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/combo.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* A text entry field with a dropdown list.
 * 
 * A combo is a compound widget which crosses a text entry area and a pull
 * down list.  It may allow text entry or it may just allow list
 * values depending on the settings.
 *
 * Access members allow altering of the widget components.
 *
 * @deprecated Use the ComboBox widget instead.
 * @ingroup Widgets
 "
      classrelation 241449 // <generalisation>
	relation 241449 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 241449 // <generalisation>
	  b parent class_ref 140585 // HBox
      end

      class 299945 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 299817 // Combo
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 241577 // <realization>
	  relation 241577 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 241577 // <realization>
	    b parent class_ref 299817 // Combo
	end
      end

      class 300073 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Combo_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 300201 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkCombo"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 300329 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkComboClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 861737 "~Combo"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 241705 // combo_class_ (<directional composition>)
	relation 241705 *-->
	  a role_name "combo_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 241705 // combo_class_ (<directional composition>)
	  b parent class_ref 300073 // CppClassType
      end

      operation 861865 "Combo"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 299817 // Combo
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 861993 "operator ="
	private return_type class_ref 299817 // Combo
	nparams 1
	  param in name "" type class_ref 299817 // Combo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 862121 "Combo"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 862249 "Combo"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkCombo"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 862377 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 862505 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 862633 "gobj"
	cpp_inline public explicit_return_type "GtkCombo"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkCombo*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 862761 "gobj"
	const cpp_inline public explicit_return_type "GtkCombo"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkCombo*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 862889 "Combo"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 863017 "set_value_in_list"
	public explicit_return_type "void"
	nparams 2
	  param in name "value" explicit_type "bool"
	    defaultvalue " true"
	  param in name "empty" explicit_type "bool"
	    defaultvalue " false"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Allow direct text entry
   * Whether the text in the entry must be or not be in the list.
   *
   * @param value Set to true if the value must be in list.
   * @param empty Set to true if the text area is allowed to be empty.
   "
      end

      operation 863145 "set_use_arrows"
	public explicit_return_type "void"
	nparams 1
	  param in name "arrows_on" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Set arrows keys to change value
   * Up and down will scroll through the list items.
   * Useful when there is a small list of value that the
   * list must have.
   *
   * @param arrows_on true indicates the arrow keys scroll.
   "
      end

      operation 863273 "set_use_arrows_always"
	public explicit_return_type "void"
	nparams 1
	  param in name "arrows_always" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Set arrows keys to change if value not in list
   * Up and down will scroll through the list items but only
   * change the current value if the text does not match a list item..
   * Useful when there is a small list of value that the
   * list must have.
   *
   * @param arrows_always true indicates the value will change.
   "
      end

      operation 863401 "set_case_sensitive"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets list case sensitive
   * Determines if the list items and text comparisons for
   * set_use_arrows_always() should be case sensitive.
   "
      end

      operation 863529 "set_item_string"
	public explicit_return_type "void"
	nparams 2
	  param inout name "item" explicit_type "Gtk::Item"
	  param in name "item_value" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Set the current entry Glib::ustring
   * Call this function on an item if it isn't a label or you
   * want it to have a different value to be displayed in the entry
   "
      end

      operation 863657 "remove_item_string"
	public explicit_return_type "void"
	nparams 1
	  param inout name "item" explicit_type "Gtk::Item"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 863785 "set_popdown_strings"
	public explicit_return_type "void"
	nparams 1
	  param in name "strings" explicit_type "Glib::ListHandle<Glib::ustring>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/ Insert a list of items."
      end

      operation 863913 "get_popdown_strings"
	const public explicit_return_type "Glib::ListHandle<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 864041 "disable_activate"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 864169 "get_entry"
	public return_type class_ref 300457 // Entry
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 864297 "get_entry"
	const public return_type class_ref 300457 // Entry
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 864425 "get_list"
	public return_type class_ref 298921 // ComboDropDown
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 864553 "get_list"
	const public return_type class_ref 298921 // ComboDropDown
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 864681 "property_enable_arrow_keys"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 864809 "property_enable_arrow_keys"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 864937 "property_enable_arrows_always"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 865065 "property_enable_arrows_always"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 865193 "property_case_sensitive"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 865321 "property_case_sensitive"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 865449 "property_allow_empty"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 865577 "property_allow_empty"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 865705 "property_value_in_list"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 865833 "property_value_in_list"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end
    end

    class 301225 "ComboBox"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/combobox.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* 
 * See also ComboBoxText, which is specialised for a single text column.
 * @ingroup Widgets
 "
      classrelation 242473 // <generalisation>
	relation 242473 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 242473 // <generalisation>
	  b parent class_ref 281385 // Bin
      end

      classrelation 242601 // <generalisation>
	relation 242601 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 242601 // <generalisation>
	  b parent class_ref 289833 // CellLayout
      end

      class 301353 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 301225 // ComboBox
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 151337 // <realization>
	  relation 151337 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 151337 // <realization>
	    b parent class_ref 301225 // ComboBox
	end
      end

      class 301481 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "ComboBox_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 301609 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkComboBox"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 301737 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkComboBoxClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 873513 "~ComboBox"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 151721 // combobox_class_ (<directional composition>)
	relation 151721 *-->
	  a role_name "combobox_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 151721 // combobox_class_ (<directional composition>)
	  b parent class_ref 301481 // CppClassType
      end

      operation 873641 "ComboBox"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 301225 // ComboBox
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 873769 "operator ="
	private return_type class_ref 301225 // ComboBox
	nparams 1
	  param in name "" type class_ref 301225 // ComboBox
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 247977 "ComboBox"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 248105 "ComboBox"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkComboBox"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 248233 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 248361 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 248489 "gobj"
	cpp_inline public explicit_return_type "GtkComboBox"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkComboBox*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 248617 "gobj"
	const cpp_inline public explicit_return_type "GtkComboBox"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkComboBox*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 248745 "on_changed"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 248873 "ComboBox"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 249001 "ComboBox"
	public explicit_return_type ""
	nparams 1
	  param in name "model" explicit_type "Glib::RefPtr<TreeModel>"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 249129 "set_wrap_width"
	public explicit_return_type "void"
	nparams 1
	  param in name "width" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "See ComboBoxText for an equivalent of gtk_combo_box_new_text().
 grids 
* Sets the wrap width of @a combo_box  to be @a width . The wrap width is basically
   * the preferred number of columns when you want to the popup to be layed out
   * in a table.
   * 
   * Since: 2.4
   * @param width Preferred number of columns.
   "
      end

      operation 249257 "set_row_span_column"
	public explicit_return_type "void"
	nparams 1
	  param in name "row_span" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the column with row span information for @a combo_box  to be @a row_span .
   * The row span column contains integers which indicate how many rows
   * an item should span.
   * 
   * Since: 2.4
   * @param row_span A column in the model passed during construction.
   "
      end

      operation 249385 "set_column_span_column"
	public explicit_return_type "void"
	nparams 1
	  param in name "column_span" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the column with column span information for @a combo_box  to be
   *  @a column_span . The column span column contains integers which indicate
   * how many columns an item should span.
   * 
   * Since: 2.4
   * @param column_span A column in the model passed during construction.
   "
      end

      operation 249513 "get_active_row_number"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " get/set active item 
* Returns the index of the currently active item, or -1 if there's no
   * active item.
   * @return An integer which is the index of the currently active item, or
   * -1 if there's no active item.
   * 
   * Since: 2.4.
   "
      end

      operation 249641 "get_active"
	public return_type class_ref 301865 // iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 249769 "get_active"
	const public return_type class_ref 301993 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 249897 "set_active"
	public explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the active item of @a combo_box  to be the item at @a index .
   * 
   * Since: 2.4
   * @param index An index in the model passed during construction, or -1 to have
   * no active item.
   "
      end

      operation 250025 "set_active"
	public explicit_return_type "void"
	nparams 1
	  param in name "iter" type class_ref 301865 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the current active item to be the one referenced by @a iter . 
   *  @a iter  must correspond to a path of depth one.
   * 
   * Since: 2.4
   * @param iter The Gtk::TreeIter.
   "
      end

      operation 250153 "unset_active"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 250281 "get_model"
	public explicit_return_type "Glib::RefPtr<TreeModel>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the Gtk::TreeModel which is acting as data source for @a combo_box .
   * @return A Gtk::TreeModel which was passed during construction.
   * 
   * Since: 2.4.
   "
      end

      operation 250409 "get_model"
	const public explicit_return_type "Glib::RefPtr<const TreeModel>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the Gtk::TreeModel which is acting as data source for @a combo_box .
   * @return A Gtk::TreeModel which was passed during construction.
   * 
   * Since: 2.4.
   "
      end

      operation 250537 "set_model"
	public explicit_return_type "void"
	nparams 1
	  param in name "model" explicit_type "Glib::RefPtr<TreeModel>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the model used by @a combo_box  to be @a model . Will unset a
   * previously set model (if applicable).
   * 
   * Since: 2.4
   * @param model A Gtk::TreeModel.
   "
      end

      operation 250665 "popup"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Pops up the menu or dropdown list of @a combo_box . 
   * 
   * This function is mostly intended for use by accessibility technologies;
   * applications should have little use for it.
   * 
   * Since: 2.4
   "
      end

      operation 250793 "popdown"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Hides the menu or dropdown list of @a combo_box .
   * 
   * This function is mostly intended for use by accessibility technologies;
   * applications should have little use for it.
   * 
   * Since: 2.4
   "
      end

      operation 250921 "property_model"
	public explicit_return_type "Glib::PropertyProxy< Glib::RefPtr<TreeModel> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "These are in ComboBoxText.
* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 251049 "property_model"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly< Glib::RefPtr<TreeModel> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 251177 "property_wrap_width"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 251305 "property_wrap_width"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 251433 "property_row_span_column"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 251561 "property_row_span_column"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 873897 "property_column_span_column"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 874025 "property_column_span_column"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 874153 "property_active"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 874281 "property_active"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 874409 "signal_changed"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 302249 "ComboBoxEntry"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/comboboxentry.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* A ComboBox which has an Entry widget as child and a list of strings as popup.
 * You can get the Entry by using get_child().
 * To add and remove strings from the list, just modify the model using its data manipulation API.
 *
 * @ingroup Widgets
 "
      classrelation 151849 // <generalisation>
	relation 151849 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 151849 // <generalisation>
	  b parent class_ref 301225 // ComboBox
      end

      class 302377 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 302249 // ComboBoxEntry
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 151977 // <realization>
	  relation 151977 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 151977 // <realization>
	    b parent class_ref 302249 // ComboBoxEntry
	end
      end

      class 302505 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "ComboBoxEntry_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 302633 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkComboBoxEntry"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 302761 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkComboBoxEntryClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 874537 "~ComboBoxEntry"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 242729 // comboboxentry_class_ (<directional composition>)
	relation 242729 *-->
	  a role_name "comboboxentry_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 242729 // comboboxentry_class_ (<directional composition>)
	  b parent class_ref 302505 // CppClassType
      end

      operation 874665 "ComboBoxEntry"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 302249 // ComboBoxEntry
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 874793 "operator ="
	private return_type class_ref 302249 // ComboBoxEntry
	nparams 1
	  param in name "" type class_ref 302249 // ComboBoxEntry
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 874921 "ComboBoxEntry"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 875049 "ComboBoxEntry"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkComboBoxEntry"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 875177 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 875305 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 875433 "gobj"
	cpp_inline public explicit_return_type "GtkComboBoxEntry"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkComboBoxEntry*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 875561 "gobj"
	const cpp_inline public explicit_return_type "GtkComboBoxEntry"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkComboBoxEntry*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 875689 "ComboBoxEntry"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 875817 "ComboBoxEntry"
	public explicit_return_type ""
	nparams 2
	  param in name "model" explicit_type "Glib::RefPtr<TreeModel>"
	  param in name "text_column" explicit_type "TreeModelColumnBase"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${throw}{
${body}}
"
	
	
	
	
	comment "See ComboBoxEntryText for an equivalent of gtk_combo_box_entry_new_text()."
      end

      operation 875945 "ComboBoxEntry"
	public explicit_return_type ""
	nparams 2
	  param in name "model" explicit_type "Glib::RefPtr<TreeModel>"
	  param in name "text_column" explicit_type "int"
	    defaultvalue " 0"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 876073 "set_text_column"
	const public explicit_return_type "void"
	nparams 1
	  param in name "text_column" explicit_type "TreeModelColumnBase"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the model column which @a entry_box  should use to get strings from
   * to be @a text_column .
   * 
   * Since: 2.4.
   * @param text_column A column in @a model  to get the strings from.
   "
      end

      operation 876201 "set_text_column"
	const public explicit_return_type "void"
	nparams 1
	  param in name "text_column" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the model column which @a entry_box  should use to get strings from
   * to be @a text_column .
   * 
   * Since: 2.4.
   * @param text_column A column in @a model  to get the strings from.
   "
      end

      operation 876329 "get_text_column"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the column which @a entry_box  is using to get the strings from.
   * @return A column in the data source model of @a entry_box .
   * 
   * Since: 2.4.
   "
      end
    end

    class 302889 "ComboBoxEntryText"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/comboboxentrytext.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This is a C++ convenience class that is equivalent to the gtk_combo_box_entry_new_text() C convenience function.
This is copy/paste/search/replaced from ComboBoxText, but the only alternative I see is to use multiple inheritance.
murrayc.
* This is a specialisation of the ComboBoxEntry which has one column of text (a simple list),
 * and appropriate methods for setting and getting the text.
 *
 * @ingroup Widgets
 "
      classrelation 242857 // <generalisation>
	relation 242857 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 242857 // <generalisation>
	  b parent class_ref 302249 // ComboBoxEntry
      end

      operation 876457 "ComboBoxEntryText"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 302889 // ComboBoxEntryText
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 876585 "operator ="
	private return_type class_ref 302889 // ComboBoxEntryText
	nparams 1
	  param in name "" type class_ref 302889 // ComboBoxEntryText
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 876713 "ComboBoxEntryText"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 876841 "ComboBoxEntryText"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkComboBoxEntry"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 876969 "ComboBoxEntryText"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 877097 "append_text"
	public explicit_return_type "void"
	nparams 1
	  param in name "text" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 877225 "insert_text"
	public explicit_return_type "void"
	nparams 2
	  param in name "position" explicit_type "int"
	  param in name "text" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 877353 "prepend_text"
	public explicit_return_type "void"
	nparams 1
	  param in name "text" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 877481 "get_active_text"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      class 303017 "TextModelColumns"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 242985 // <generalisation>
	  relation 242985 ---|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 242985 // <generalisation>
	    b parent class_ref 303145 // typedef12
	end

	operation 877609 "TextModelColumns"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} { add(m_column); };
"
	  
	  
	  
	  
	end

	attribute 178729 "m_column"
	  public explicit_type "Gtk::TreeModelColumn<Glib::ustring>"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 303145 "typedef12"
	visibility package stereotype "typedef" explicit_base_type "Gtk::TreeModel::ColumnRecord"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 243113 // m_text_columns (<directional composition>)
	relation 243113 *-->
	  a role_name "m_text_columns" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 243113 // m_text_columns (<directional composition>)
	  b parent class_ref 303017 // TextModelColumns
      end
    end

    class 303273 "ComboBoxText"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/comboboxtext.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This is a C++ convenience class that is equivalent to the gtk_combo_box_new_text() C convenience function.
* This is a specialisation of the ComboBox which has one column of text (a simple list),
 * and appropriate methods for setting and getting the text.
 *
 * @ingroup Widgets
 "
      classrelation 243241 // <generalisation>
	relation 243241 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 243241 // <generalisation>
	  b parent class_ref 301225 // ComboBox
      end

      operation 877737 "ComboBoxText"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 303273 // ComboBoxText
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 877865 "operator ="
	private return_type class_ref 303273 // ComboBoxText
	nparams 1
	  param in name "" type class_ref 303273 // ComboBoxText
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 877993 "ComboBoxText"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 878121 "ComboBoxText"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkComboBox"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 878249 "ComboBoxText"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 878377 "append_text"
	public explicit_return_type "void"
	nparams 1
	  param in name "text" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 878505 "insert_text"
	public explicit_return_type "void"
	nparams 2
	  param in name "position" explicit_type "int"
	  param in name "text" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 878633 "prepend_text"
	public explicit_return_type "void"
	nparams 1
	  param in name "text" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 878761 "get_active_text"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      class 303401 "TextModelColumns"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 243369 // <generalisation>
	  relation 243369 ---|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 243369 // <generalisation>
	    b parent class_ref 303529 // typedef13
	end

	operation 878889 "TextModelColumns"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} { add(m_column); };
"
	  
	  
	  
	  
	end

	attribute 178857 "m_column"
	  public explicit_type "Gtk::TreeModelColumn<Glib::ustring>"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 303529 "typedef13"
	visibility package stereotype "typedef" explicit_base_type "Gtk::TreeModel::ColumnRecord"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 243497 // m_text_columns (<directional composition>)
	relation 243497 *-->
	  a role_name "m_text_columns" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 243497 // m_text_columns (<directional composition>)
	  b parent class_ref 303401 // TextModelColumns
      end
    end

    class 298921 "ComboDropDown"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/combo.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* The dropdown list of a Combo.
 * 
 * A combo is a compound widget which crosses a text entry area and a pull
 * down list. The dropdown list is implemented with the deprecated GtkList
 * widget on the gtk+ side. ComboDropDown is a thin wrapper around GtkList
 * containing just the functionality necessary for a Combo's list. To add
 * and remove items use the STL-style interface that is accessible through
 * ComboDropDown::children().
 *
 * @deprecated Use the ComboBox widget instead.
 * @ingroup Widgets
 "
      class 299177 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 298921 // ComboDropDown
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 240809 // <realization>
	  relation 240809 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 240809 // <realization>
	    b parent class_ref 298921 // ComboDropDown
	end
      end

      class 299305 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "ComboDropDown_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 299433 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkList"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 299561 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkListClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 859177 "~ComboDropDown"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 240937 // combodropdown_class_ (<directional composition>)
	relation 240937 *-->
	  a role_name "combodropdown_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 240937 // combodropdown_class_ (<directional composition>)
	  b parent class_ref 299305 // CppClassType
      end

      operation 859305 "ComboDropDown"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 298921 // ComboDropDown
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 859433 "operator ="
	private return_type class_ref 298921 // ComboDropDown
	nparams 1
	  param in name "" type class_ref 298921 // ComboDropDown
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 859561 "ComboDropDown"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 859689 "ComboDropDown"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkList"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 859817 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 859945 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 860073 "gobj"
	cpp_inline public explicit_return_type "GtkList"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkList*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 860201 "gobj"
	const cpp_inline public explicit_return_type "GtkList"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkList*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 860329 "on_select_child"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "item" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 860457 "on_selection_changed"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 860585 "on_unselect_child"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "item" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      class 299689 "ComboDropDownList"
	visibility package stereotype "typedef" base_type class_ref 298537 // ComboDropDownList
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 241065 // <realization>
	  relation 241065 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 241065 // <realization>
	    b parent class_ref 298537 // ComboDropDownList
	end
      end

      operation 860713 "ComboDropDown"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 241193 // <dependency>
	relation 241193 -_->
	  stereotype "friend"
	  a default
	    cpp default "${type}"
	    classrelation_ref 241193 // <dependency>
	  b parent class_ref 299817 // Combo
      end

      operation 860841 "scroll_horizontal"
	public explicit_return_type "void"
	nparams 2
	  param in name "scroll_type" type class_ref 282665 // ScrollType
	  param in name "position" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 860969 "scroll_vertical"
	public explicit_return_type "void"
	nparams 2
	  param in name "scroll_type" type class_ref 282665 // ScrollType
	  param in name "position" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 861097 "children"
	public return_type class_ref 299689 // ComboDropDownList
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 861225 "children"
	const public return_type class_ref 299689 // ComboDropDownList
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 861353 "signal_select_child"
	public explicit_return_type "Glib::SignalProxy1< void,Widget& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 861481 "signal_selection_changed"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 861609 "signal_unselect_child"
	public explicit_return_type "Glib::SignalProxy1< void,Widget& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      classrelation 241321 // children_proxy_ (<directional composition>)
	relation 241321 *-->
	  a role_name "children_proxy_" protected
	    cpp mutable default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 241321 // children_proxy_ (<directional composition>)
	  b parent class_ref 299689 // ComboDropDownList
      end
    end

    class 297769 "ComboDropDownItem"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/combo.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* An item in a ComboDropDownList.
 * 
 * Items in a ComboDropDownList inherit Item. Two signals are added.
 *
 * @deprecated Use the ComboBox widget instead. 
 * @ingroup Widgets
 "
      class 298025 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 297769 // ComboDropDownItem
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 240297 // <realization>
	  relation 240297 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 240297 // <realization>
	    b parent class_ref 297769 // ComboDropDownItem
	end
      end

      class 298153 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "ComboDropDownItem_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 298281 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkListItem"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 298409 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkListItemClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 855081 "~ComboDropDownItem"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 240425 // combodropdownitem_class_ (<directional composition>)
	relation 240425 *-->
	  a role_name "combodropdownitem_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 240425 // combodropdownitem_class_ (<directional composition>)
	  b parent class_ref 298153 // CppClassType
      end

      operation 855209 "ComboDropDownItem"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 297769 // ComboDropDownItem
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 855337 "operator ="
	private return_type class_ref 297769 // ComboDropDownItem
	nparams 1
	  param in name "" type class_ref 297769 // ComboDropDownItem
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 855465 "ComboDropDownItem"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 855593 "ComboDropDownItem"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkListItem"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 855721 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 855849 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 855977 "gobj"
	cpp_inline public explicit_return_type "GtkListItem"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkListItem*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 856105 "gobj"
	const cpp_inline public explicit_return_type "GtkListItem"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkListItem*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 856233 "on_scroll_horizontal"
	cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param in name "scroll_type" type class_ref 282665 // ScrollType
	  param in name "position" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 856361 "on_scroll_vertical"
	cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param in name "scroll_type" type class_ref 282665 // ScrollType
	  param in name "position" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 856489 "ComboDropDownItem"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 856617 "signal_scroll_horizontal"
	public explicit_return_type "Glib::SignalProxy2< void,ScrollType,float >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 856745 "signal_scroll_vertical"
	public explicit_return_type "Glib::SignalProxy2< void,ScrollType,float >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 298537 "ComboDropDownList"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/combo.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 856873 "ComboDropDownList"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 857001 "ComboDropDownList"
	public explicit_return_type ""
	nparams 1
	  param inout name "gparent" explicit_type "GtkList"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 857129 "ComboDropDownList"
	public explicit_return_type ""
	nparams 1
	  param in name "src" type class_ref 298537 // ComboDropDownList
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 857257 "~ComboDropDownList"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	
	
      end

      operation 857385 "operator ="
	public return_type class_ref 298537 // ComboDropDownList
	nparams 1
	  param in name "src" type class_ref 298537 // ComboDropDownList
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      class 298793 "type_base"
	visibility package stereotype "typedef" explicit_base_type "Glib::HelperList< ComboDropDownItem, const Element,  Glib::List_Cpp_Iterator<GtkListItem,ComboDropDownItem> >"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 857513 "gparent"
	public explicit_return_type "GtkList"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 857641 "gparent"
	const public explicit_return_type "GtkList"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 857769 "glist"
	const cpp_virtual public explicit_return_type "GList"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 857897 "erase"
	cpp_virtual public explicit_return_type "void"
	nparams 2
	  param in name "start" explicit_type "iterator"
	  param in name "stop" explicit_type "iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " front of list"
      end

      operation 858025 "erase"
	cpp_virtual public explicit_return_type "iterator"
	nparams 1
	  param in name "" explicit_type "iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 858153 "remove"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "" explicit_type "const_reference"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Implented as custom or by LIST_CONTAINER_REMOVE"
      end

      operation 858281 "operator []"
	const public explicit_return_type "reference"
	nparams 1
	  param in name "l" explicit_type "size_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Implented as custom or by LIST_CONTAINER_REMOVE
/ This is order n. (use at own risk)"
      end

      operation 858409 "insert"
	public explicit_return_type "iterator"
	nparams 2
	  param in name "position" explicit_type "iterator"
	  param inout name "e" explicit_type "element_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 858537 "insert"
	stereotype "template"
	cpp_inline public explicit_return_type "void"
	nparams 3
	  param in name "position" explicit_type "iterator"
	  param in name "first" explicit_type "InputIterator"
	  param in name "last" explicit_type "InputIterator"
	cpp_decl "    ${comment}template<class InputIterator>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract} {
    for(;first != last; ++first)
      position = insert(position, *first);
  };
"
	
	
	
	
	comment "custom-implemented."
      end

      operation 858665 "push_front"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "element_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} { insert(begin(), e); };
"
	
	
	
	
      end

      operation 858793 "push_back"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "element_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} { insert(end(), e); };
"
	
	
	
	
      end

      operation 858921 "find"
	public explicit_return_type "iterator"
	nparams 1
	  param in name "c" explicit_type "const_reference"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 859049 "find"
	public explicit_return_type "iterator"
	nparams 1
	  param inout name "" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 280745 "Container"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/container.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Abstract container class
 *
 * This is the abstract container from which all gtk+ widgets which hold
 * other items derive from.  It mainly houses virtual functions
 * used for inserting and removing children.  Containers in gtk+
 * may hold one item or many items depending on the implementation.
 *
 * This interface is used for all single item holding containers.
 * Multi-item containers provide their own unique interface as their
 * items are generally more complex.  The methods of the derived
 * classes should be prefered over these.
 *
 * @ingroup Widgets
 "
      classrelation 234793 // <generalisation>
	relation 234793 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 234793 // <generalisation>
	  b parent class_ref 130089 // Widget
      end

      class 285225 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 280745 // Container
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 234921 // <realization>
	  relation 234921 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 234921 // <realization>
	    b parent class_ref 280745 // Container
	end
      end

      class 285353 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Container_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 285481 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkContainer"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 285609 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkContainerClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 786601 "~Container"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 235049 // container_class_ (<directional composition>)
	relation 235049 *-->
	  a role_name "container_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 235049 // container_class_ (<directional composition>)
	  b parent class_ref 285353 // CppClassType
      end

      operation 786729 "Container"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 280745 // Container
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 786857 "operator ="
	private return_type class_ref 280745 // Container
	nparams 1
	  param in name "" type class_ref 280745 // Container
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 786985 "Container"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 787113 "Container"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkContainer"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 787241 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 787369 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 787497 "gobj"
	cpp_inline public explicit_return_type "GtkContainer"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkContainer*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 787625 "gobj"
	const cpp_inline public explicit_return_type "GtkContainer"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkContainer*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 787753 "on_add"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "widget" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 787881 "on_remove"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "widget" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 788009 "on_check_resize"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 788137 "on_set_focus_child"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "widget" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 788265 "set_border_width"
	public explicit_return_type "void"
	nparams 1
	  param in name "border_width" explicit_type "guint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " Application-level methods 
* Sets the border width of the container.
   * 
   * The border width of a container is the amount of space to leave
   * around the outside of the container. The only exception to this is
   * Gtk::Window; because toplevel windows can't leave space outside,
   * they leave the space inside. The border is added on all sides of
   * the container. To add space to only one side, one approach is to
   * create a Gtk::Alignment widget, call Gtk::Widget::set_usize() to give
   * it a size, and place it on the side of the container as a spacer.
   * @param border_width Amount of blank space to leave <em>outside</em> the container.
   * Valid values are in the range 0-65535 pixels.
   "
      end

      operation 788393 "get_border_width"
	const public explicit_return_type "guint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the border width of the container. See
   * set_border_width().
   * @return The current border width.
   "
      end

      operation 788521 "add"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param inout name "widget" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "This is virtual so that we can override it in Gtk::ScrolledWindow:"
      end

      operation 788649 "remove"
	public explicit_return_type "void"
	nparams 1
	  param inout name "widget" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Removes @a widget  from @a container . @a widget  must be inside @a container .
   * Note that @a container  will own a reference to @a widget , and that this
   * may be the last reference held; so removing a widget from its
   * container can destroy that widget. If you want to use @a widget 
   * again, you need to add a reference to it while it's not inside
   * a container, using Glib::object_ref(). If you don't want to use @a widget 
   * again it's usually more efficient to simply destroy it directly
   * using Gtk::Widget::destroy() since this will remove it from the
   * container and help break any circular reference count cycles.
   * @param widget A current child of @a container .
   "
      end

      operation 788777 "set_resize_mode"
	public explicit_return_type "void"
	nparams 1
	  param in name "resize_mode" type class_ref 285737 // ResizeMode
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the resize mode for the container.
   * 
   * The resize mode of a container determines whether a resize request 
   * will be passed to the container's parent, queued for later execution
   * or executed immediately.
   * @param resize_mode The new resize mode.
   "
      end

      operation 788905 "get_resize_mode"
	const public return_type class_ref 285737 // ResizeMode
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the resize mode for the container. See
   * set_resize_mode().
   * @return The current resize mode.
   "
      end

      operation 789033 "check_resize"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/ Request that contained widgets check their size"
      end

      class 285865 "ForeachSlot"
	visibility package stereotype "typedef" explicit_base_type "sigc::slot<void, Widget&>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 789161 "foreach"
	public explicit_return_type "void"
	nparams 1
	  param in name "slot" type class_ref 285865 // ForeachSlot
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Operate on contained items
   * This is largely an internal used mainly for things like
   * creating duplicates of internal lists and other such
   * operations.  The result is lossy as it only gets the
   * the main child and not its external pieces.
   *
   * For example notebook pages contain a page, a label, and
   * a menu item.  But this only operates on the pages.
   "
      end

      operation 789289 "get_children"
	public explicit_return_type "Glib::ListHandle<Widget*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/ (internal) Operate on contained items (see foreach())
_WRAP_METHOD(void foreach_(GtkCallback callback,gpointer data),gtk_container_foreach)
/ (internal) Operate on contained items (see foreach())
_WRAP_METHOD(void foreach_full_(GtkCallback callback,GtkCallbackMarshal marshal, gpointer data,GtkDestroyNotify notify),gtk_container_foreach_full)
* Returns the the container's non-internal children. See
   * forall() for details on what constitutes an \"internal\" child.
   * @return A newly-allocated list of the container's non-internal children.
   "
      end

      operation 789417 "get_children"
	const public explicit_return_type "Glib::ListHandle<const Widget*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the the container's non-internal children. See
   * forall() for details on what constitutes an \"internal\" child.
   * @return A newly-allocated list of the container's non-internal children.
   "
      end

      operation 789545 "propagate_expose"
	public explicit_return_type "void"
	nparams 2
	  param inout name "child" type class_ref 130089 // Widget
	  param inout name "event" explicit_type "GdkEventExpose"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* When a container receives an expose event, it must send synthetic
   * expose events to all children that don't have their own Gdk::Windows.
   * This function provides a convenient way of doing this. A container,
   * when it receives an expose event, calls propagate_expose() 
   * once for each child, passing in the event the container received.
   * 
   * propagate_expose() takes care of deciding whether
   * an expose event needs to be sent to the child, intersecting
   * the event's area with the child area, and sending the event.
   * 
   * In most cases, a container can simply either simply inherit the
   * ::expose implementation from Gtk::Container, or, do some drawing 
   * and then chain to the ::expose implementation from Gtk::Container.
   * @param child A child of @a container .
   * @param event A expose event sent to container.
   "
      end

      operation 789673 "set_focus_chain"
	public explicit_return_type "void"
	nparams 1
	  param in name "focusable_widgets" explicit_type "Glib::ListHandle<Widget*>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets a focus chain, overriding the one computed automatically by GTK+.
   * 
   * In principle each widget in the chain should be a descendant of the 
   * container, but this is not enforced by this method, since it's allowed 
   * to set the focus chain before you pack the widgets, or have a widget 
   * in the chain that isn't always packed. The necessary checks are done 
   * when the focus chain is actually traversed.
   * @param focusable_widgets The new focus chain.
   "
      end

      operation 789801 "has_focus_chain"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " gtk_container_get_focus_chain() has been split up into two
 functions in order to make implicit container conversion possible."
      end

      operation 789929 "get_focus_chain"
	public explicit_return_type "Glib::ListHandle<Widget*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 790057 "get_focus_chain"
	const public explicit_return_type "Glib::ListHandle<const Widget*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 790185 "unset_focus_chain"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Removes a focus chain explicitly set with set_focus_chain().
   "
      end

      operation 790313 "set_reallocate_redraws"
	public explicit_return_type "void"
	nparams 1
	  param in name "needs_redraws" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " Widget-level methods 
* Sets the @a reallocate_redraws  flag of the container to the given value.
   * 
   * Containers requesting reallocation redraws get automatically
   * redrawn if any of their children changed allocation.
   * @param needs_redraws The new value for the container's @a reallocate_redraws  flag.
   "
      end

      operation 790441 "set_focus_child"
	public explicit_return_type "void"
	nparams 1
	  param inout name "widget" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/ Sets the focus on a child"
      end

      operation 790569 "set_focus_vadjustment"
	public explicit_return_type "void"
	nparams 1
	  param inout name "adjustment" type class_ref 132521 // Adjustment
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Hooks up an adjustment to focus handling in a container, so when a child of the 
   * container is focused, the adjustment is scrolled to show that widget. This function
   * sets the vertical alignment. See Gtk::ScrolledWindow::get_vadjustment() for a typical
   * way of obtaining the adjustment and set_focus_hadjustment() for setting
   * the horizontal adjustment.
   * 
   * The adjustments have to be in pixel units and in the same coordinate system as the 
   * allocation for immediate children of the container.
   * @param adjustment An adjustment which should be adjusted when the focus is moved among the
   * descendents of @a container .
   "
      end

      operation 790697 "get_focus_vadjustment"
	public return_type class_ref 132521 // Adjustment
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the vertical focus adjustment for the container. See
   * set_focus_vadjustment().
   * @return The vertical focus adjustment, or <tt>0</tt> if
   * none has been set.
   "
      end

      operation 790825 "get_focus_vadjustment"
	const public return_type class_ref 132521 // Adjustment
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the vertical focus adjustment for the container. See
   * set_focus_vadjustment().
   * @return The vertical focus adjustment, or <tt>0</tt> if
   * none has been set.
   "
      end

      operation 790953 "set_focus_hadjustment"
	public explicit_return_type "void"
	nparams 1
	  param inout name "adjustment" type class_ref 132521 // Adjustment
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Hooks up an adjustment to focus handling in a container, so when a child of the 
   * container is focused, the adjustment is scrolled to show that widget. This function
   * sets the horizontal alignment. See Gtk::ScrolledWindow::get_hadjustment() for a typical
   * way of obtaining the adjustment and set_focus_vadjustment() for setting
   * the vertical adjustment.
   * 
   * The adjustments have to be in pixel units and in the same coordinate system as the 
   * allocation for immediate children of the container.
   * @param adjustment An adjustment which should be adjusted when the focus is moved among the
   * descendents of @a container .
   "
      end

      operation 791081 "get_focus_hadjustment"
	public return_type class_ref 132521 // Adjustment
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the horizontal focus adjustment for the container. See
   * set_focus_hadjustment().
   * @return The horizontal focus adjustment, or <tt>0</tt> if
   * none has been set.
   "
      end

      operation 791209 "get_focus_hadjustment"
	const public return_type class_ref 132521 // Adjustment
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the horizontal focus adjustment for the container. See
   * set_focus_hadjustment().
   * @return The horizontal focus adjustment, or <tt>0</tt> if
   * none has been set.
   "
      end

      operation 791337 "resize_children"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 791465 "child_type"
	const public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the type of the children supported by the container.
   * 
   * Note that this may return G::TYPE_NONE to indicate that no more
   * children can be added, e.g. for a Gtk::Paned which already has two 
   * children.
   * @return A G::Type.
   "
      end

      operation 791593 "signal_add"
	public explicit_return_type "Glib::SignalProxy1< void,Widget* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " Ignore functions such as gtk_container_class_install_child_property(),  which I think are for themes, like the GtkWidget style properties."
      end

      operation 791721 "signal_remove"
	public explicit_return_type "Glib::SignalProxy1< void,Widget* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 791849 "signal_check_resize"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 791977 "signal_set_focus_child"
	public explicit_return_type "Glib::SignalProxy1< void,Widget* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 792105 "show_all_children"
	public explicit_return_type "void"
	nparams 1
	  param in name "recursive" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 792233 "Container"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 792361 "child_type_vfunc"
	const cpp_virtual protected explicit_return_type "GtkType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 792489 "forall_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 3
	  param in name "include_internals" explicit_type "gboolean"
	  param in name "callback" explicit_type "GtkCallback"
	  param in name "callback_data" explicit_type "gpointer"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 792617 "composite_name_vfunc"
	cpp_virtual protected explicit_return_type "char"
	nparams 1
	  param inout name "child" explicit_type "GtkWidget"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO: What is this?"
      end

      operation 792745 "set_child_property_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 4
	  param inout name "child" explicit_type "GtkWidget"
	  param in name "property_id" explicit_type "guint"
	  param in name "value" explicit_type "GValue"
	  param inout name "pspec" explicit_type "GParamSpec"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}, ${t1} ${p1}, const ${t2} * ${p2}, ${t3} * ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}, const ${t2} * ${p2}, ${t3} * ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 792873 "get_child_property_vfunc"
	const cpp_virtual protected explicit_return_type "void"
	nparams 4
	  param inout name "child" explicit_type "GtkWidget"
	  param in name "property_id" explicit_type "guint"
	  param inout name "value" explicit_type "GValue"
	  param inout name "pspec" explicit_type "GParamSpec"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}, ${t1} ${p1}, ${t2} * ${p2}, ${t3} * ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}, ${t2} * ${p2}, ${t3} * ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 793001 "property_border_width"
	protected explicit_return_type "Glib::PropertyProxy<guint>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 793129 "property_border_width"
	const protected explicit_return_type "Glib::PropertyProxy_ReadOnly<guint>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 793257 "property_resize_mode"
	protected explicit_return_type "Glib::PropertyProxy<ResizeMode>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 793385 "property_resize_mode"
	const protected explicit_return_type "Glib::PropertyProxy_ReadOnly<ResizeMode>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 793513 "property_child"
	protected explicit_return_type "Glib::PropertyProxy_WriteOnly<Widget*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 793641 "property_child"
	const protected explicit_return_type "Glib::PropertyProxy_ReadOnly<Widget*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end
    end

    class 313001 "CornerType"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 "
      attribute 143401 "CORNER_TOP_LEFT"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 143529 "CORNER_BOTTOM_LEFT"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 189353 "CORNER_TOP_RIGHT"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 189481 "CORNER_BOTTOM_RIGHT"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 303657 "Curve"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/curve.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* Allows direct editing of a curve.
 *
 * @ingroup Widgets
 "
      classrelation 243625 // <generalisation>
	relation 243625 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 243625 // <generalisation>
	  b parent class_ref 303785 // DrawingArea
      end

      class 303913 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 303657 // Curve
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 243753 // <realization>
	  relation 243753 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 243753 // <realization>
	    b parent class_ref 303657 // Curve
	end
      end

      class 304041 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Curve_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 304169 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkCurve"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 304297 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkCurveClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 879017 "~Curve"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 243881 // curve_class_ (<directional composition>)
	relation 243881 *-->
	  a role_name "curve_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 243881 // curve_class_ (<directional composition>)
	  b parent class_ref 304041 // CppClassType
      end

      operation 879145 "Curve"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 303657 // Curve
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 879273 "operator ="
	private return_type class_ref 303657 // Curve
	nparams 1
	  param in name "" type class_ref 303657 // Curve
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 879401 "Curve"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 879529 "Curve"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkCurve"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 879657 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 879785 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 879913 "gobj"
	cpp_inline public explicit_return_type "GtkCurve"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkCurve*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 880041 "gobj"
	const cpp_inline public explicit_return_type "GtkCurve"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkCurve*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 880169 "on_curve_type_changed"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 880297 "Curve"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 880425 "reset"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 880553 "set_gamma"
	public explicit_return_type "void"
	nparams 1
	  param in name "gamma" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 880681 "set_range"
	public explicit_return_type "void"
	nparams 4
	  param in name "min_x" explicit_type "float"
	  param in name "max_x" explicit_type "float"
	  param in name "min_y" explicit_type "float"
	  param in name "max_y" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 880809 "get_vector"
	const public explicit_return_type "void"
	nparams 2
	  param in name "veclen" explicit_type "int"
	  param inout name "data" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 880937 "get_vector"
	const public explicit_return_type "Glib::ArrayHandle<float>"
	nparams 1
	  param in name "veclen" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 881065 "set_vector"
	public explicit_return_type "void"
	nparams 1
	  param in name "array" explicit_type "Glib::ArrayHandle<float>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 881193 "set_curve_type"
	public explicit_return_type "void"
	nparams 1
	  param in name "type" type class_ref 304425 // CurveType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 881321 "signal_curve_type_changed"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 881449 "property_curve_type"
	public explicit_return_type "Glib::PropertyProxy<CurveType>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 881577 "property_curve_type"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<CurveType>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 881705 "property_min_x"
	public explicit_return_type "Glib::PropertyProxy<float>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 881833 "property_min_x"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<float>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 881961 "property_max_x"
	public explicit_return_type "Glib::PropertyProxy<float>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 882089 "property_max_x"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<float>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 882217 "property_min_y"
	public explicit_return_type "Glib::PropertyProxy<float>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 882345 "property_min_y"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<float>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 882473 "property_max_y"
	public explicit_return_type "Glib::PropertyProxy<float>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 882601 "property_max_y"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<float>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end
    end

    class 304425 "CurveType"
      visibility package stereotype "enum"
      cpp_external cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 "
      attribute 179369 "CURVE_TYPE_LINEAR"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 136745 "CURVE_TYPE_SPLINE"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 136873 "CURVE_TYPE_FREE"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 309801 "DeleteType"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 "
      attribute 137001 "DELETE_CHARS"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 183849 "DELETE_WORDS"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 183977 "DELETE_DISPLAY_LINES"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 184105 "DELETE_DISPLAY_LINE_ENDS"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 184233 "DELETE_PARAGRAPH_ENDS"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 184361 "DELETE_PARAGRAPHS"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 184489 "DELETE_WHITESPACE"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 278185 "DestDefaults"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* @addtogroup gtkmmEnums Enums and Flags 
*
 * @ingroup gtkmmEnums
 * @par Bitwise operators:
 * <tt>%DestDefaults operator|(DestDefaults, DestDefaults)</tt><br>
 * <tt>%DestDefaults operator&(DestDefaults, DestDefaults)</tt><br>
 * <tt>%DestDefaults operator^(DestDefaults, DestDefaults)</tt><br>
 * <tt>%DestDefaults operator~(DestDefaults)</tt><br>
 * <tt>%DestDefaults& operator|=(DestDefaults&, DestDefaults)</tt><br>
 * <tt>%DestDefaults& operator&=(DestDefaults&, DestDefaults)</tt><br>
 * <tt>%DestDefaults& operator^=(DestDefaults&, DestDefaults)</tt><br>
 "
      attribute 209705 "DEST_DEFAULT_MOTION"
	public explicit_type ""
	init_value " 1 << 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 209833 "DEST_DEFAULT_HIGHLIGHT"
	public explicit_type ""
	init_value " 1 << 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 209961 "DEST_DEFAULT_DROP"
	public explicit_type ""
	init_value " 1 << 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 210089 "DEST_DEFAULT_ALL"
	public explicit_type ""
	init_value " 0x07
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 296617 "Dialog"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/dialog.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Create popup windows.
 *
 * Dialog boxes are a convenient way to prompt the user for a small amount
 * of input, eg. to display a message, ask a question, or anything else that
 * does not require extensive effort on the user's part. 
 *
 * gtkmm treats a dialog as a window split vertically. The top section is a
 * Gtk::VBox, and is where widgets such as a Gtk::Label or a Gtk::Entry should be
 * packed. The bottom area is known as the action_area. This is generally
 * used for packing buttons into the dialog which may perform functions such
 * as cancel, ok, or apply. The two areas are separated by a Gtk::HSeparator. 
 *
 * The dialog can be 'modal' (that is, one which freezes the rest of the
 * application from user input) - this can be specified in the Gtk::Dialog
 * constructor.
 *
 * When adding buttons using add_button(), clicking the button will emit
 * signal_response() with a \"response id\" you specified. You are encouraged
 * to use the Gtk::ResponseType enum. If a dialog receives a delete event,
 * the \"response\" signal will be emitted with a response id of
 * Gtk::RESPONSE_NONE.
 *
 * If you want to block waiting for a dialog to return before returning control
 * flow to your code, you can call run(). This function enters a
 * recursive main loop and waits for the user to respond to the dialog, returning
 * the response ID corresponding to the button the user clicked. 
 *
 * @ingroup Dialogs
 "
      classrelation 239785 // <generalisation>
	relation 239785 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 239785 // <generalisation>
	  b parent class_ref 281129 // Window
      end

      class 297257 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 296617 // Dialog
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 239913 // <realization>
	  relation 239913 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 239913 // <realization>
	    b parent class_ref 296617 // Dialog
	end
      end

      class 297385 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Dialog_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 297513 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkDialog"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 297641 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkDialogClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 851241 "~Dialog"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 240041 // dialog_class_ (<directional composition>)
	relation 240041 *-->
	  a role_name "dialog_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 240041 // dialog_class_ (<directional composition>)
	  b parent class_ref 297385 // CppClassType
      end

      operation 851369 "Dialog"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 296617 // Dialog
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 851497 "operator ="
	private return_type class_ref 296617 // Dialog
	nparams 1
	  param in name "" type class_ref 296617 // Dialog
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 851625 "Dialog"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 851753 "Dialog"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkDialog"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 851881 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 852009 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 852137 "gobj"
	cpp_inline public explicit_return_type "GtkDialog"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkDialog*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 852265 "gobj"
	const cpp_inline public explicit_return_type "GtkDialog"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkDialog*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 852393 "on_response"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "response_id" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 852521 "Dialog"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 852649 "Dialog"
	public explicit_return_type ""
	nparams 3
	  param in name "title" explicit_type "Glib::ustring"
	  param in name "modal" explicit_type "bool"
	    defaultvalue " false"
	  param in name "use_separator" explicit_type "bool"
	    defaultvalue " false"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 852777 "Dialog"
	public explicit_return_type ""
	nparams 4
	  param in name "title" explicit_type "Glib::ustring"
	  param inout name "parent" explicit_type "Gtk::Window"
	  param in name "modal" explicit_type "bool"
	    defaultvalue " false"
	  param in name "use_separator" explicit_type "bool"
	    defaultvalue " false"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 852905 "add_action_widget"
	public explicit_return_type "void"
	nparams 2
	  param inout name "child" type class_ref 130089 // Widget
	  param in name "response_id" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Adds an activatable widget to the action area of a Gtk::Dialog,
   * connecting a signal handler that will emit the \"response\" signal on
   * the dialog when the widget is activated.  The widget is appended to
   * the end of the dialog's action area.  If you want to add a
   * non-activatable widget, simply pack it into the
   * <tt>action_area</tt> field of the Gtk::Dialog struct.
   * @param child An activatable widget.
   * @param response_id Response ID for @a child .
   "
      end

      operation 853033 "add_button"
	public return_type class_ref 141353 // Button
	nparams 2
	  param in name "button_text" explicit_type "Glib::ustring"
	  param in name "response_id" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Adds a button with the given text (or a stock button, if @a button_text  is a
   * stock ID) and sets things up so that clicking the button will emit the
   * \"response\" signal with the given @a response_id . The button is appended to the
   * end of the dialog's action area. The button widget is returned, but usually
   * you don't need it.
   * @param button_text Text of button, or stock ID.
   * @param response_id Response ID for the button.
   * @return The button widget that was added.
   "
      end

      operation 853161 "add_button"
	public return_type class_ref 141353 // Button
	nparams 2
	  param in name "stock_id" explicit_type "Gtk::StockID"
	  param in name "response_id" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Adds a button with the given text (or a stock button, if @a button_text  is a
   * stock ID) and sets things up so that clicking the button will emit the
   * \"response\" signal with the given @a response_id . The button is appended to the
   * end of the dialog's action area. The button widget is returned, but usually
   * you don't need it.
   * @param button_text Text of button, or stock ID.
   * @param response_id Response ID for the button.
   * @return The button widget that was added.
   "
      end

      operation 853289 "set_response_sensitive"
	public explicit_return_type "void"
	nparams 2
	  param in name "response_id" explicit_type "int"
	  param in name "setting" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Calls <tt>gtk_widget_set_sensitive (widget, @a setting )</tt> 
   * for each widget in the dialog's action area with the given @a response_id .
   * A convenient way to sensitize/desensitize dialog buttons.
   * @param response_id A response ID.
   * @param setting <tt>true</tt> for sensitive.
   "
      end

      operation 853417 "set_default_response"
	public explicit_return_type "void"
	nparams 1
	  param in name "response_id" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the last widget in the dialog's action area with the given @a response_id 
   * as the default widget for the dialog. Pressing \"Enter\" normally activates
   * the default widget.
   * @param response_id A response ID.
   "
      end

      operation 853545 "set_has_separator"
	public explicit_return_type "void"
	nparams 1
	  param in name "setting" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets whether the dialog has a separator above the buttons.
   * <tt>true</tt> by default.
   * @param setting <tt>true</tt> to have a separator.
   "
      end

      operation 853673 "get_has_separator"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Accessor for whether the dialog has a separator.
   * @return <tt>true</tt> if the dialog has a separator.
   "
      end

      operation 853801 "response"
	public explicit_return_type "void"
	nparams 1
	  param in name "response_id" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Emits the \"response\" signal with the given response ID. Used to
   * indicate that the user has responded to the dialog in some way;
   * typically either you or run() will be monitoring the
   * \"response\" signal and take appropriate action.
   * @param response_id Response ID.
   "
      end

      operation 853929 "run"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Blocks in a recursive main loop until the @a dialog  emits the
   * response signal. It returns the response ID from the \"response\" signal emission.
   * Before entering the recursive main loop, run() calls
   * Gtk::Widget::show() on the dialog for you. Note that you still
   * need to show any children of the dialog yourself.
   * 
   * If the dialog receives \"delete_event\",  Gtk::Dialog::run() will return
   * Gtk::RESPONSE_DELETE_EVENT. Also, during Gtk::Dialog::run() the dialog will be
   * modal. You can force Gtk::Dialog::run() to return at any time by
   * calling Gtk::Dialog::response() to emit the \"response\"
   * signal.
   * 
   * After Gtk::Dialog::run() returns, you are responsible for hiding or
   * destroying the dialog if you wish to do so.
   * 
   * Typical usage of this function might be:
   * @code
   * <tt>int</tt> result = dialog.run();
   * switch (result)
   * {
   * case GTK_RESPONSE_ACCEPT:
   * do_application_specific_something (&lt;!-- --&gt;);
   * break;
   * default:
   * do_nothing_since_dialog_was_cancelled (&lt;!-- --&gt;);
   * break;
   * }
   * @endcode
   * @return Response ID.
   "
      end

      operation 854057 "get_vbox"
	public return_type class_ref 287913 // VBox
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 854185 "get_vbox"
	const public return_type class_ref 287913 // VBox
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 854313 "get_action_area"
	public return_type class_ref 144041 // HButtonBox
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 854441 "get_action_area"
	const public return_type class_ref 144041 // HButtonBox
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 854569 "property_has_separator"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 854697 "property_has_separator"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 854825 "signal_response"
	public explicit_return_type "Glib::SignalProxy1< void,int >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 854953 "construct_"
	protected explicit_return_type "void"
	nparams 2
	  param in name "modal" explicit_type "bool"
	  param in name "use_separator" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 280361 "DirectionType"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 "
      attribute 184617 "DIR_TAB_FORWARD"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 184745 "DIR_TAB_BACKWARD"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 184873 "DIR_UP"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 185001 "DIR_DOWN"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 185129 "DIR_LEFT"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 185257 "DIR_RIGHT"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 303785 "DrawingArea"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/drawingarea.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* A widget for custom user interface elements.
 *
 * @ingroup Widgets
 "
      classrelation 244009 // <generalisation>
	relation 244009 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 244009 // <generalisation>
	  b parent class_ref 130089 // Widget
      end

      class 304553 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 303785 // DrawingArea
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 244137 // <realization>
	  relation 244137 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 244137 // <realization>
	    b parent class_ref 303785 // DrawingArea
	end
      end

      class 304681 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "DrawingArea_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 304809 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkDrawingArea"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 304937 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkDrawingAreaClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 882729 "~DrawingArea"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 244265 // drawingarea_class_ (<directional composition>)
	relation 244265 *-->
	  a role_name "drawingarea_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 244265 // drawingarea_class_ (<directional composition>)
	  b parent class_ref 304681 // CppClassType
      end

      operation 882857 "DrawingArea"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 303785 // DrawingArea
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 882985 "operator ="
	private return_type class_ref 303785 // DrawingArea
	nparams 1
	  param in name "" type class_ref 303785 // DrawingArea
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 883113 "DrawingArea"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 883241 "DrawingArea"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkDrawingArea"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 883369 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 883497 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 883625 "gobj"
	cpp_inline public explicit_return_type "GtkDrawingArea"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkDrawingArea*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 883753 "gobj"
	const cpp_inline public explicit_return_type "GtkDrawingArea"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkDrawingArea*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 883881 "DrawingArea"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end
    end

    class 300585 "Editable"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/editable.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* Base class for text-editing widgets.
 *
 * The Gtk::Editable class is a base class for widgets for editing text,
 * such as Gtk::Entry. It cannot be instantiated by itself. The editable
 * class contains functions for generically manipulating an editable widget,
 * a large number of action signals used for key bindings, and several
 * signals that an application can connect to to modify the behavior of a
 * widget.
 *
 "
      class 306729 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 300585 // Editable
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 245545 // <realization>
	  relation 245545 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 245545 // <realization>
	    b parent class_ref 300585 // Editable
	end
      end

      class 306857 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Editable_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 306985 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkEditable"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 307113 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkEditableClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 245673 // editable_class_ (<directional composition>)
	relation 245673 *-->
	  a role_name "editable_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 245673 // editable_class_ (<directional composition>)
	  b parent class_ref 306857 // CppClassType
      end

      operation 903593 "Editable"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 300585 // Editable
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 903721 "operator ="
	private return_type class_ref 300585 // Editable
	nparams 1
	  param in name "" type class_ref 300585 // Editable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 903849 "Editable"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 903977 "Editable"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkEditable"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " you must derive from this class"
      end

      operation 904105 "~Editable"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 904233 "add_interface"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "gtype_implementer" explicit_type "GType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 904361 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 904489 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 904617 "gobj"
	cpp_inline public explicit_return_type "GtkEditable"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkEditable*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 904745 "gobj"
	const cpp_inline public explicit_return_type "GtkEditable"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkEditable*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject.  "
      end

      operation 904873 "cut_clipboard"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 905001 "copy_clipboard"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 905129 "paste_clipboard"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 905257 "delete_selection"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 905385 "set_editable"
	public explicit_return_type "void"
	nparams 1
	  param in name "is_editable" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 905513 "get_editable"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves whether @a editable  is editable. See
   * set_editable().
   * @return <tt>true</tt> if @a editable  is editable.
   "
      end

      operation 905641 "insert_text"
	public explicit_return_type "void"
	nparams 3
	  param in name "text" explicit_type "Glib::ustring"
	  param in name "length" explicit_type "int"
	  param inout name "position" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 905769 "delete_text"
	public explicit_return_type "void"
	nparams 2
	  param in name "start_pos" explicit_type "int"
	  param in name "end_pos" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 905897 "get_chars"
	const public explicit_return_type "Glib::ustring"
	nparams 2
	  param in name "start_pos" explicit_type "int"
	  param in name "end_pos" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 906025 "select_region"
	public explicit_return_type "void"
	nparams 2
	  param in name "start_pos" explicit_type "int"
	  param in name "end_pos" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 906153 "get_selection_bounds"
	const public explicit_return_type "bool"
	nparams 2
	  param inout name "start_pos" explicit_type "int"
	  param inout name "end_pos" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 906281 "set_position"
	public explicit_return_type "void"
	nparams 1
	  param in name "position" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 906409 "get_position"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 906537 "signal_insert_text"
	public explicit_return_type "Glib::SignalProxy2< void,const Glib::ustring&,int* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 906665 "signal_delete_text"
	public explicit_return_type "Glib::SignalProxy2< void,int,int >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 906793 "signal_changed"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 906921 "delete_text_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param in name "start_pos" explicit_type "int"
	  param in name "end_pos" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 907049 "get_chars_vfunc"
	const cpp_virtual protected explicit_return_type "Glib::ustring"
	nparams 2
	  param in name "start_pos" explicit_type "int"
	  param in name "end_pos" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 907177 "select_region_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param in name "start_pos" explicit_type "int"
	  param in name "end_pos" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 907305 "get_selection_bounds_vfunc"
	const cpp_virtual protected explicit_return_type "bool"
	nparams 2
	  param inout name "start_pos" explicit_type "int"
	  param inout name "end_pos" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 907433 "set_position_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "position" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 907561 "get_position_vfunc"
	const cpp_virtual protected explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 907689 "insert_text_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param in name "text" explicit_type "Glib::ustring"
	  param inout name "position" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):"
      end

      operation 907817 "on_insert_text"
	cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param in name "text" explicit_type "Glib::ustring"
	  param inout name "position" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Default Signal Handlers::"
      end

      operation 907945 "on_delete_text"
	cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param in name "start_pos" explicit_type "int"
	  param in name "end_pos" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 908073 "on_changed"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 300457 "Entry"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/entry.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* A single line text entry field.
 *
 * The Gtk::Entry widget is a single line text entry widget. A fairly large
 * set of key bindings are supported by default. If the entered text is
 * longer than the allocation of the widget, the widget will scroll so that
 * the cursor position is visible. 
 *
 * @ingroup Widgets
 "
      classrelation 241833 // <generalisation>
	relation 241833 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 241833 // <generalisation>
	  b parent class_ref 130089 // Widget
      end

      classrelation 241961 // <generalisation>
	relation 241961 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 241961 // <generalisation>
	  b parent class_ref 300585 // Editable
      end

      classrelation 242089 // <generalisation>
	relation 242089 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 242089 // <generalisation>
	  b parent class_ref 289065 // CellEditable
      end

      class 300713 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 300457 // Entry
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 242217 // <realization>
	  relation 242217 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 242217 // <realization>
	    b parent class_ref 300457 // Entry
	end
      end

      class 300841 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Entry_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 300969 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkEntry"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 301097 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkEntryClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 865961 "~Entry"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 242345 // entry_class_ (<directional composition>)
	relation 242345 *-->
	  a role_name "entry_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 242345 // entry_class_ (<directional composition>)
	  b parent class_ref 300841 // CppClassType
      end

      operation 866089 "Entry"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 300457 // Entry
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 866217 "operator ="
	private return_type class_ref 300457 // Entry
	nparams 1
	  param in name "" type class_ref 300457 // Entry
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 866345 "Entry"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 866473 "Entry"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkEntry"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 866601 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 866729 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 866857 "gobj"
	cpp_inline public explicit_return_type "GtkEntry"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkEntry*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 866985 "gobj"
	const cpp_inline public explicit_return_type "GtkEntry"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkEntry*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 867113 "on_populate_popup"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "menu" type class_ref 203689 // Menu
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 867241 "on_insert_at_cursor"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "str" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 867369 "on_activate"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 867497 "Entry"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 867625 "set_visibility"
	public explicit_return_type "void"
	nparams 1
	  param in name "visible" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 867753 "get_visibility"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves whether the text in @a entry  is visible. See
   * set_visibility().
   * @return <tt>true</tt> if the text is currently visible.
   "
      end

      operation 867881 "set_invisible_char"
	public explicit_return_type "void"
	nparams 1
	  param in name "ch" explicit_type "gunichar"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the character to use in place of the actual text when
   * set_visibility() has been called to set text visibility
   * to <tt>false</tt>. i.e. this is the character used in \"password mode\" to
   * show the user how many characters have been typed. The default
   * invisible char is an asterisk ('*').  If you set the invisible char
   * to 0, then the user will get no feedback at all; there will be
   * no text on the screen as they type.
   * @param ch A Unicode character.
   "
      end

      operation 868009 "get_invisible_char"
	const public explicit_return_type "gunichar"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the character displayed in place of the real characters
   * for entries with visisbility set to false. See set_invisible_char().
   * @return The current invisible char, or 0, if the entry does not
   * show invisible text at all.
   "
      end

      operation 868137 "set_has_frame"
	public explicit_return_type "void"
	nparams 1
	  param in name "setting" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets whether the entry has a beveled frame around it.
   * @param setting New value.
   "
      end

      operation 868265 "get_has_frame"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the value set by set_has_frame().
   * @return Whether the entry has a beveled frame.
   "
      end

      operation 868393 "set_max_length"
	public explicit_return_type "void"
	nparams 1
	  param in name "max" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the maximum allowed length of the contents of the widget. If
   * the current contents are longer than the given length, then they
   * will be truncated to fit.
   * @param max The maximum length of the entry, or 0 for no maximum.
   * (other than the maximum length of entries.) The value passed in will
   * be clamped to the range 0-65536.
   "
      end

      operation 868521 "get_max_length"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the maximum allowed length of the text in
   *  @a entry . See set_max_length().
   * @return The maximum allowed number of characters
   * in Gtk::Entry, or 0 if there is no maximum.
   "
      end

      operation 868649 "set_activates_default"
	public explicit_return_type "void"
	nparams 1
	  param in name "setting" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* If @a setting  is <tt>true</tt>, pressing Enter in the @a entry  will activate the default
   * widget for the window containing the entry. This usually means that
   * the dialog box containing the entry will be closed, since the default
   * widget is usually one of the dialog buttons.
   * 
   * (For experts: if @a setting  is <tt>true</tt>, the entry calls
   * Gtk::Window::activate_default() on the window containing the entry, in
   * the default handler for the \"activate\" signal.)
   * @param setting <tt>true</tt> to activate window's default widget on Enter keypress.
   "
      end

      operation 868777 "get_activates_default"
	const public explicit_return_type "gboolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the value set by set_activates_default().
   * @return <tt>true</tt> if the entry will activate the default widget.
   "
      end

      operation 868905 "set_width_chars"
	public explicit_return_type "void"
	nparams 1
	  param in name "n_chars" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Changes the size request of the entry to be about the right size
   * for @a n_chars  characters. Note that it changes the size
   * <em>request</em>, the size can still be affected by
   * how you pack the widget into containers. If @a n_chars  is -1, the
   * size reverts to the default entry size.
   * @param n_chars Width in chars.
   "
      end

      operation 869033 "get_width_chars"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the value set by set_width_chars().
   * @return Number of chars to request space for, or negative if unset.
   "
      end

      operation 869161 "set_text"
	public explicit_return_type "void"
	nparams 1
	  param in name "text" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 869289 "get_text"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the contents of the entry widget.
   * See also Gtk::Editable::get_chars().
   * @return A pointer to the contents of the widget as a
   * string.  This string points to internally allocated
   * storage in the widget and must not be freed, modified or
   * stored.
   "
      end

      operation 869417 "get_layout"
	public explicit_return_type "Glib::RefPtr<Pango::Layout>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the Pango::Layout used to display the entry.
   * The layout is useful to e.g. convert text positions to
   * pixel positions, in combination with get_layout_offsets().
   * The returned layout is owned by the entry so need not be
   * freed by the caller.
   * 
   * Keep in mind that the layout text may contain a preedit string, so
   * gtk_entry_layout_index_to_text_index() and
   * gtk_entry_text_index_to_layout_index() are needed to convert byte
   * indices in the layout to byte indices in the entry contents.
   * @return The Pango::Layout for this entry.
   "
      end

      operation 869545 "get_layout"
	const public explicit_return_type "Glib::RefPtr<const Pango::Layout>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the Pango::Layout used to display the entry.
   * The layout is useful to e.g. convert text positions to
   * pixel positions, in combination with get_layout_offsets().
   * The returned layout is owned by the entry so need not be
   * freed by the caller.
   * 
   * Keep in mind that the layout text may contain a preedit string, so
   * gtk_entry_layout_index_to_text_index() and
   * gtk_entry_text_index_to_layout_index() are needed to convert byte
   * indices in the layout to byte indices in the entry contents.
   * @return The Pango::Layout for this entry.
   "
      end

      operation 869673 "get_layout_offsets"
	public explicit_return_type "void"
	nparams 2
	  param inout name "x" explicit_type "int"
	  param inout name "y" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Obtains the position of the Pango::Layout used to render text
   * in the entry, in widget coordinates. Useful if you want to line
   * up the text in an entry with some other text, e.g. when using the
   * entry to implement editable cells in a sheet widget.
   * 
   * Also useful to convert mouse events into coordinates inside the
   * Pango::Layout, e.g. to take some action if some part of the entry text
   * is clicked.
   * 
   * Note that as the user scrolls around in the entry the offsets will
   * change; you'll need to connect to the \"notify::scroll_offset\"
   * signal to track this. Remember when using the Pango::Layout
   * functions you need to convert to and from pixels using
   * PANGO_PIXELS() or Pango::SCALE.
   * 
   * Keep in mind that the layout text may contain a preedit string, so
   * gtk_entry_layout_index_to_text_index() and
   * gtk_entry_text_index_to_layout_index() are needed to convert byte
   * indices in the layout to byte indices in the entry contents.
   * @param x Location to store X offset of layout, or <tt>0</tt>.
   * @param y Location to store Y offset of layout, or <tt>0</tt>.
   "
      end

      operation 869801 "set_alignment"
	public explicit_return_type "void"
	nparams 1
	  param in name "xalign" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the alignment for the contents of the entry. This controls
   * the horizontal positioning of the contents when the displayed
   * text is shorter than the width of the entry.
   * @param xalign The horizontal alignment, from 0 (left) to 1 (right).
   * Reversed for RTL layouts.
   "
      end

      operation 869929 "set_alignment"
	public explicit_return_type "void"
	nparams 1
	  param in name "xalign" type class_ref 134697 // AlignmentEnum
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the alignment for the contents of the entry. This controls
   * the horizontal positioning of the contents when the displayed
   * text is shorter than the width of the entry.
   * @param xalign The horizontal alignment, from 0 (left) to 1 (right).
   * Reversed for RTL layouts.
   "
      end

      operation 870057 "get_alignment"
	const public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the value set by set_alignment().
   * @return The alignment.
   "
      end

      operation 870185 "set_completion"
	public explicit_return_type "void"
	nparams 1
	  param in name "completion" explicit_type "Glib::RefPtr<EntryCompletion>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets @a completion  to be the auxiliary completion object to use with @a entry .
   * All further configuration of the completion mechanism is done on
   *  @a completion  using the Gtk::EntryCompletion API.
   * 
   * Since: 2.4
   * @param completion The Gtk::EntryCompletion.
   "
      end

      operation 870313 "get_completion"
	public explicit_return_type "Glib::RefPtr<EntryCompletion>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the auxiliary completion object currently in use by @a entry .
   * @return The auxiliary completion object currently in use by @a entry .
   * 
   * Since: 2.4.
   "
      end

      operation 870441 "get_completion"
	const public explicit_return_type "Glib::RefPtr<const EntryCompletion>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the auxiliary completion object currently in use by @a entry .
   * @return The auxiliary completion object currently in use by @a entry .
   * 
   * Since: 2.4.
   "
      end

      operation 870569 "get_text_length"
	const public explicit_return_type "guint16"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 870697 "signal_populate_popup"
	public explicit_return_type "Glib::SignalProxy1< void,Menu* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 870825 "signal_insert_at_cursor"
	public explicit_return_type "Glib::SignalProxy1< void,const Glib::ustring& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 870953 "signal_activate"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Key-binding signals:"
      end

      operation 871081 "property_cursor_position"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO: ignore this too? It's used in an example.
* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 871209 "property_selection_bound"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 871337 "property_editable"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 871465 "property_editable"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 871593 "property_max_length"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 871721 "property_max_length"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 871849 "property_visibility"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 871977 "property_visibility"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 872105 "property_has_frame"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 872233 "property_has_frame"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 872361 "property_invisible_char"
	public explicit_return_type "Glib::PropertyProxy<gunichar>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 872489 "property_invisible_char"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<gunichar>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 872617 "property_activates_default"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 872745 "property_activates_default"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 872873 "property_width_chars"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 873001 "property_width_chars"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 873129 "property_scroll_offset"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 873257 "property_text"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 873385 "property_text"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end
    end

    class 307241 "EntryCompletion"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/entrycompletion.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 307369 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 307241 // EntryCompletion
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 245929 // <realization>
	  relation 245929 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 245929 // <realization>
	    b parent class_ref 307241 // EntryCompletion
	end
      end

      class 307497 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "EntryCompletion_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 307625 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkEntryCompletion"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 307753 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkEntryCompletionClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 158633 // entrycompletion_class_ (<directional composition>)
	relation 158633 *-->
	  a role_name "entrycompletion_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 158633 // entrycompletion_class_ (<directional composition>)
	  b parent class_ref 307497 // CppClassType
      end

      operation 908201 "EntryCompletion"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 307241 // EntryCompletion
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 908329 "operator ="
	private return_type class_ref 307241 // EntryCompletion
	nparams 1
	  param in name "" type class_ref 307241 // EntryCompletion
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 908457 "EntryCompletion"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 908585 "EntryCompletion"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkEntryCompletion"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 908713 "~EntryCompletion"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 908841 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 908969 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 909097 "gobj"
	cpp_inline public explicit_return_type "GtkEntryCompletion"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkEntryCompletion*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 909225 "gobj"
	const cpp_inline public explicit_return_type "GtkEntryCompletion"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkEntryCompletion*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 909353 "gobj_copy"
	public explicit_return_type "GtkEntryCompletion"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs."
      end

      operation 909481 "EntryCompletion"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 909609 "create"
	class_operation public explicit_return_type "Glib::RefPtr<EntryCompletion>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 909737 "get_entry"
	public return_type class_ref 300457 // Entry
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Careful, this actually returns a GtkWidget*, so it might not always be a GtkEntry in future GTK+ versions.
* Gets the entry @a completion  has been attached to.
   * @return The entry @a completion  has been attached to.
   * 
   * Since: 2.4.
   "
      end

      operation 909865 "get_entry"
	const public return_type class_ref 300457 // Entry
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the entry @a completion  has been attached to.
   * @return The entry @a completion  has been attached to.
   * 
   * Since: 2.4.
   "
      end

      operation 909993 "set_model"
	public explicit_return_type "void"
	nparams 1
	  param in name "model" explicit_type "Glib::RefPtr<TreeModel>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the model for a Gtk::EntryCompletion. If @a completion  already has
   * a model set, it will remove it before setting the new model.
   * 
   * Since: 2.4
   * @param model The Gtk::TreeModel.
   "
      end

      operation 910121 "get_model"
	public explicit_return_type "Glib::RefPtr<TreeModel>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the model the Gtk::EntryCompletion is using as data source.
   * Returns <tt>0</tt> if the model is unset.
   * @return A Gtk::TreeModel, or <tt>0</tt> if none is currently being used.
   * 
   * Since: 2.4.
   "
      end

      operation 910249 "get_model"
	const public explicit_return_type "Glib::RefPtr<const TreeModel>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the model the Gtk::EntryCompletion is using as data source.
   * Returns <tt>0</tt> if the model is unset.
   * @return A Gtk::TreeModel, or <tt>0</tt> if none is currently being used.
   * 
   * Since: 2.4.
   "
      end

      class 307881 "SlotMatch"
	visibility package stereotype "typedef" explicit_base_type "sigc::slot<bool, const Glib::ustring&, const TreeModel::const_iterator&>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 910377 "set_match_func"
	public explicit_return_type "void"
	nparams 1
	  param in name "slot" type class_ref 307881 // SlotMatch
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 910505 "set_minimum_key_length"
	public explicit_return_type "void"
	nparams 1
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Requires the length of the search key for @a completion  to be at least
   *  @a length . This is useful for long lists, where completing using a small
   * key takes a lot of time and will come up with meaningless results anyway
   * (ie, a too large dataset).
   * 
   * Since: 2.4
   * @param length The minimum length of the key in order to start completing.
   "
      end

      operation 910633 "get_minimum_key_length"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the minimum key length as set for @a completion .
   * @return The currently used minimum key length.
   * 
   * Since: 2.4.
   "
      end

      operation 910761 "complete"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Requests a completion operation, or in other words a refiltering of the
   * current list with completions, using the current key. The completion list
   * view will be updated accordingly.
   * 
   * Since: 2.4
   "
      end

      operation 910889 "insert_action_text"
	public explicit_return_type "void"
	nparams 2
	  param in name "text" explicit_type "Glib::ustring"
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "We reordered the parameters, compared to the C version, so that we can have method overloads without the index.
 TODO: We would really like an insert() which before-inserts an iterator, like ListStore::insert(),
 but there is no EntryCompletion::insert_before() for us to use."
      end

      operation 911017 "prepend_action_text"
	public explicit_return_type "void"
	nparams 1
	  param in name "text" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 911145 "insert_action_markup"
	public explicit_return_type "void"
	nparams 2
	  param in name "markup" explicit_type "Glib::ustring"
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO: Add append_action_text() somehow? It would be slow if we count the children each time. murrayc."
      end

      operation 911273 "prepend_action_markup"
	public explicit_return_type "void"
	nparams 1
	  param in name "markup" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 911401 "delete_action"
	public explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "int"
	    defaultvalue " 0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO: Change default - it would be nicer to delete the last action instead of the first.
* Deletes the action at @a index  from @a completion 's action list.
   * 
   * Since: 2.4
   * @param index The index of the item to Delete.
   "
      end

      operation 911529 "set_text_column"
	public explicit_return_type "void"
	nparams 1
	  param in name "column" explicit_type "TreeModelColumnBase"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Convenience function for setting up the most used case of this code: a
   * completion list with just strings. This function will set up @a completion 
   * to have a list displaying all (and just) strings in the completion list,
   * and to get those strings from @a column  in the model of @a completion .
   * 
   * This functions creates and adds a GtkCellRendererText for the selected column.
   * 
   * Since: 2.4
   * @param column The column in the model of @a completion  to get strings from.
   "
      end

      operation 911657 "set_text_column"
	public explicit_return_type "void"
	nparams 1
	  param in name "column" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Convenience function for setting up the most used case of this code: a
   * completion list with just strings. This function will set up @a completion 
   * to have a list displaying all (and just) strings in the completion list,
   * and to get those strings from @a column  in the model of @a completion .
   * 
   * This functions creates and adds a GtkCellRendererText for the selected column.
   * 
   * Since: 2.4
   * @param column The column in the model of @a completion  to get strings from.
   "
      end

      operation 911785 "signal_action_activated"
	public explicit_return_type "Glib::SignalProxy1< void,int >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO: The C++ iterator needs to know about the model. We need some custom stuff here.
but I think I've done it elsewhere. murrayc:
_WRAP_SIGNAL(bool match_selected(const TreeModel::iterator& iter), match_selected)"
      end

      operation 911913 "signal_match_selected"
	public explicit_return_type "Glib::SignalProxy1< bool, const TreeModel::iterator& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "We completely hand-code this signal because we want to change how the parameters are wrapped,
because we need both the iter and the model to make the C++ iter.
*
   * @par Prototype:
   * <tt>bool %match_selected(const TreeModel::iterator& iter)</tt>
   "
      end

      operation 912041 "on_match_selected"
	cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param in name "iter" type class_ref 301865 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Default Signal Handler:"
      end

      operation 912169 "on_action_activated"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end
    end

    class 183593 "EventBox"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/eventbox.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* Event capturing box.
 *
 * This widget adds an X Window where one does not
 * normally appear, allowing you to capture events.
 * It will receive any event which is specified
 * with set_events().
 *
 * This widget is generally used to add Gtk::Tooltips, button presses,
 * and clipping to widgets derived from Gtk::Misc.
 *
 * @ingroup Widgets
 "
      classrelation 163497 // <generalisation>
	relation 163497 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 163497 // <generalisation>
	  b parent class_ref 281385 // Bin
      end

      class 183721 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 183593 // EventBox
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 246313 // <realization>
	  relation 246697 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 246313 // <realization>
	    b parent class_ref 183593 // EventBox
	end
      end

      class 183977 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "EventBox_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 184105 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkEventBox"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 184233 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkEventBoxClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 917033 "~EventBox"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 246441 // eventbox_class_ (<directional composition>)
	relation 246825 *-->
	  a role_name "eventbox_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 246441 // eventbox_class_ (<directional composition>)
	  b parent class_ref 183977 // CppClassType
      end

      operation 917161 "EventBox"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 183593 // EventBox
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 917289 "operator ="
	private return_type class_ref 183593 // EventBox
	nparams 1
	  param in name "" type class_ref 183593 // EventBox
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 917417 "EventBox"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 917545 "EventBox"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkEventBox"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 917673 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 917801 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 917929 "gobj"
	cpp_inline public explicit_return_type "GtkEventBox"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkEventBox*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 918057 "gobj"
	const cpp_inline public explicit_return_type "GtkEventBox"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkEventBox*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 918185 "EventBox"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 918313 "get_visible_window"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether the event box has a visible window.
   * See set_visible_window() for details.
   * @return <tt>true</tt> if the event box window is visible
   * 
   * Since: 2.4.
   "
      end

      operation 918441 "set_visible_window"
	public explicit_return_type "void"
	nparams 1
	  param in name "visible_window" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Set whether the event box uses a visible or invisible child
   * window. The default is to use visible windows.
   * 
   * In an invisible window event box, the window that that the
   * event box creates is a Gdk::INPUT_ONLY window, which 
   * means that it is invisible and only serves to receive
   * events.
   * 
   * A visible window event box creates a visible (Gdk::INPUT_OUTPUT)
   * window that acts as the parent window for all the widgets  
   * contained in the event box.
   * 
   * You should generally make your event box invisible if
   * you just want to trap events. Creating a visible window
   * may cause artifacts that are visible to the user, especially
   * if the user is using a theme with gradients or pixmaps.
   * 
   * The main reason to create a non input-only event box is if
   * you want to set the background to a different color or
   * draw on it.
   * 
   * &lt;note&gt;
   * There is one unexpected issue for an invisible event box that has its
   * window below the child. (See set_above_child().)
   * Since the input-only window is not an ancestor window of any windows
   * that descendent widgets of the event box create, events on these 
   * windows aren't propagated up by the windowing system, but only by GTK+.
   * The practical effect of this is if an event isn't in the event
   * mask for the descendant window (see Gtk::Widget::add_events()),  
   * it won't be received by the event box. 
   * 
   * This problem doesn't occur for visible event boxes, because in
   * that case, the event box window is actually the ancestor of the
   * descendant windows, not just at the same place on the screen.
   * &lt;/note&gt;
   * 
   * Since: 2.4
   * @param visible_window Boolean value.
   "
      end

      operation 918569 "get_above_child"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether the event box window is above or below the
   * windows of its child. See set_above_child() for
   * details.
   * @return <tt>true</tt> if the event box window is above the window
   * of its child.
   * 
   * Since: 2.4.
   "
      end

      operation 918697 "set_above_child"
	public explicit_return_type "void"
	nparams 1
	  param in name "above_child" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Set whether the event box window is positioned above the windows of its child,
   * as opposed to below it. If the window is above, all events inside the
   * event box will go to the event box. If the window is below, events
   * in windows of child widgets will first got to that widget, and then
   * to its parents.
   * 
   * The default is to keep the window below the child.
   * 
   * Since: 2.4
   * @param above_child <tt>true</tt> if the event box window is above the windows of its child.
   "
      end

      operation 918825 "property_visible_window"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 918953 "property_visible_window"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 919081 "property_above_child"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 919209 "property_above_child"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end
    end

    class 184361 "Expander"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/expander.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* A container which can hide its child.
 *
 * A Expander allows the user to hide or show its child by clicking on an
 * expander triangle similar to the triangles used in a Gtk::TreeView.
 *
 * @ingroup Widgets
 "
      classrelation 164137 // <generalisation>
	relation 246953 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 164137 // <generalisation>
	  b parent class_ref 281385 // Bin
      end

      class 184489 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 184361 // Expander
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 246569 // <realization>
	  relation 247081 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 246569 // <realization>
	    b parent class_ref 184361 // Expander
	end
      end

      class 184745 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Expander_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 184873 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkExpander"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 185001 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkExpanderClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 919337 "~Expander"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 246697 // expander_class_ (<directional composition>)
	relation 247209 *-->
	  a role_name "expander_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 246697 // expander_class_ (<directional composition>)
	  b parent class_ref 184745 // CppClassType
      end

      operation 919465 "Expander"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 184361 // Expander
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 919593 "operator ="
	private return_type class_ref 184361 // Expander
	nparams 1
	  param in name "" type class_ref 184361 // Expander
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 919721 "Expander"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 919849 "Expander"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkExpander"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 919977 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 920105 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 920233 "gobj"
	cpp_inline public explicit_return_type "GtkExpander"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkExpander*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 920361 "gobj"
	const cpp_inline public explicit_return_type "GtkExpander"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkExpander*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 920489 "Expander"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::
* Creates a new Expander.
   *
   * The Expander has an empty label.
   * 
   * Since: 2.4
   "
      end

      operation 920617 "Expander"
	public explicit_return_type ""
	nparams 2
	  param in name "label" explicit_type "Glib::ustring"
	  param in name "mnemonic" explicit_type "bool"
	    defaultvalue " false"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${throw}{
${body}}
"
	
	
	
	
	comment "* Creates a new Expander with a label.
   *
   * Creates a new expander using label as the text of the label. Settin @a mnemonic to true
   * will allow you to precede characters in the label with an underscore which will make them
   * underlined. If you need a literal underscore character in a label, use '__' (two underscores).
   * The first underlined character represents a keyboard accelerator called a mnemonic.
   * Pressing Alt and that key activates the button.
   * 
   * @param label The string for the label describing the Expander.
   * @param mnemonic Wether the label may contain underscores to set up accelerators.
   
   * Since: 2.4
   "
      end

      operation 920745 "set_expanded"
	public explicit_return_type "void"
	nparams 1
	  param in name "expanded" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the state of the expander. Set to <tt>true</tt>, if you want
   * the child widget to be revealed, and <tt>false</tt> if you want the
   * child widget to be hidden.
   * 
   * Since: 2.4
   * @param expanded Whether the child widget is revealed.
   "
      end

      operation 920873 "get_expanded"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Queries a Gtk::Expander and returns its current state. Returns <tt>true</tt>
   * if the child widget is revealed.
   * 
   * See set_expanded().
   * @return The current state of the expander.
   * 
   * Since: 2.4.
   "
      end

      operation 921001 "set_spacing"
	public explicit_return_type "void"
	nparams 1
	  param in name "spacing" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the spacing field of @a expander , which is the number of pixels to
   * place between expander and the child.
   * 
   * Since: 2.4
   * @param spacing Distance between the expander and child in pixels.
   "
      end

      operation 921129 "get_spacing"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the value set by set_spacing().
   * @return Spacing between the expander and child.
   * 
   * Since: 2.4.
   "
      end

      operation 921257 "set_label"
	public explicit_return_type "void"
	nparams 1
	  param in name "label" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the text of the label of the expander to @a label .
   * 
   * This will also clear any previously set labels.
   * 
   * Since: 2.4
   * @param label A string.
   "
      end

      operation 921385 "get_label"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Fetches the text from the label of the expander, as set by
   * set_label(). If the label text has not
   * been set the return value will be <tt>0</tt>. This will be the
   * case if you create an empty button with Gtk::Button::new() to
   * use as a container.
   * @return The text of the label widget. This string is owned
   * by the widget and must not be modified or freed.
   * 
   * Since: 2.4.
   "
      end

      operation 921513 "set_use_underline"
	public explicit_return_type "void"
	nparams 1
	  param in name "use_underline" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* If true, an underline in the text of the expander label indicates
   * the next character should be used for the mnemonic accelerator key.
   * 
   * Since: 2.4
   * @param use_underline <tt>true</tt> if underlines in the text indicate mnemonics.
   "
      end

      operation 921641 "get_use_underline"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether an embedded underline in the expander label indicates a
   * mnemonic. See set_use_underline().
   * @return <tt>true</tt> if an embedded underline in the expander label
   * indicates the mnemonic accelerator keys.
   * 
   * Since: 2.4.
   "
      end

      operation 921769 "set_use_markup"
	public explicit_return_type "void"
	nparams 1
	  param in name "use_markup" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets whether the text of the label contains markup in Pango's text markup
   * language. See Gtk::Label::set_markup().
   * 
   * Since: 2.4
   * @param use_markup <tt>true</tt> if the label's text should be parsed for markup.
   "
      end

      operation 921897 "get_use_markup"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether the label's text is interpreted as marked up with
   * the Pango text markup
   * language. See set_use_markup().
   * @return <tt>true</tt> if the label's text will be parsed for markup
   * 
   * Since: 2.4.
   "
      end

      operation 922025 "set_label_widget"
	public explicit_return_type "void"
	nparams 1
	  param inout name "label_widget" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Set the label widget for the expander. This is the widget
   * that will appear embedded alongside the expander arrow.
   * 
   * Since: 2.4
   * @param label_widget The new label widget.
   "
      end

      operation 922153 "get_label_widget"
	public return_type class_ref 130089 // Widget
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the label widget for the frame. See
   * set_label_widget().
   * @return The label widget, or <tt>0</tt> if there is none.
   * 
   * Since: 2.4.
   "
      end

      operation 922281 "get_label_widget"
	const public return_type class_ref 130089 // Widget
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the label widget for the frame. See
   * set_label_widget().
   * @return The label widget, or <tt>0</tt> if there is none.
   * 
   * Since: 2.4.
   "
      end

      operation 922409 "property_expanded"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "keybinding
* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 922537 "property_expanded"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 922665 "property_label"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 922793 "property_label"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 922921 "property_use_underline"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 923049 "property_use_underline"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 923177 "property_use_markup"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 923305 "property_use_markup"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 923433 "property_spacing"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 923561 "property_spacing"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 923689 "property_label_widget"
	public explicit_return_type "Glib::PropertyProxy<Widget*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 923817 "property_label_widget"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Widget*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end
    end

    class 310441 "ExpanderStyle"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 "
      attribute 185385 "EXPANDER_COLLAPSED"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 185513 "EXPANDER_SEMI_COLLAPSED"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 185641 "EXPANDER_SEMI_EXPANDED"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 185769 "EXPANDER_EXPANDED"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 185513 "FileChooser"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/filechooser.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * Gtk::FileChooser is an interface that can be implemented by file selection
 * widgets. In gtkmm, the main objects that implement this interface are
 * FileChooserWidget and FileChooserDialog. You do not need to write an
 * object that implements the FileChooser interface unless you are trying to
 * adapt an existing file selector to expose a standard programming interface.
 *
 * @par File Names and Encodings
 * When the user is finished selecting files in a FileChooser, your program
 * can get the selected names either as filenames or as URIs. For URIs, the
 * normal escaping rules are applied if the URI contains non-ASCII characters.
 * However, filenames are always returned in the character set specified by the
 * G_FILENAME_ENCODING environment variable. Please see the Glib documentation
 * for more details about this variable.
 *
 * @par Important
 * This means that while you can pass the result of FileChooser::get_filename()
 * to <tt>open(2)</tt> or <tt>fopen(3)</tt>, you may not be able to directly
 * set it as the text of a Gtk::Label widget unless you convert it first to
 * UTF-8, which all gtkmm widgets expect. You should use
 * Glib::filename_to_utf8() to convert filenames into strings that can be
 * passed to gtkmm widgets.
 *
 * @note
 * The gtkmm FileChooser API is broken in that methods return Glib::ustring
 * even though the returned string is not necessarily UTF-8 encoded.  Any
 * FileChooser method that takes or returns a filename (not a URI) should
 * have std::string as parameter or return type.  Fortunately this mistake
 * doesn't prevent you from handling filenames correctly in your application.
 * Just pretend that the API uses std::string and call Glib::filename_to_utf8()
 * or Glib::filename_from_utf8() as appropriate.
 *
 * See http://bugzilla.gnome.org/show_bug.cgi?id=142138 for more information.
 "
      class 185641 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 185513 // FileChooser
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 247081 // <realization>
	  relation 165033 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 247081 // <realization>
	    b parent class_ref 185513 // FileChooser
	end
      end

      class 185897 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "FileChooser_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 186025 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkFileChooser"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 186153 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkFileChooserClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 247209 // filechooser_class_ (<directional composition>)
	relation 247593 *-->
	  a role_name "filechooser_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 247209 // filechooser_class_ (<directional composition>)
	  b parent class_ref 185897 // CppClassType
      end

      operation 924073 "FileChooser"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 185513 // FileChooser
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 924201 "operator ="
	private return_type class_ref 185513 // FileChooser
	nparams 1
	  param in name "" type class_ref 185513 // FileChooser
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 924329 "FileChooser"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 924457 "FileChooser"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkFileChooser"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " you must derive from this class"
      end

      operation 924585 "~FileChooser"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 924713 "add_interface"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "gtype_implementer" explicit_type "GType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 924841 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 924969 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 925097 "gobj"
	cpp_inline public explicit_return_type "GtkFileChooser"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkFileChooser*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 925225 "gobj"
	const cpp_inline public explicit_return_type "GtkFileChooser"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkFileChooser*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject.  "
      end

      operation 925353 "set_action"
	public explicit_return_type "void"
	nparams 1
	  param in name "action" type class_ref 185129 // FileChooserAction
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the type of operation that that the chooser is performing; the
   * user interface is adapted to suit the selected action. For example,
   * an option to create a new folder might be shown if the action is
   * Gtk::FILE_CHOOSER_ACTION_SAVE but not if the action is
   * Gtk::FILE_CHOOSER_ACTION_OPEN.
   * 
   * Since: 2.4
   * @param action The action that the file selector is performing.
   "
      end

      operation 925481 "get_action"
	const public return_type class_ref 185129 // FileChooserAction
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the type of operation that the file chooser is performing; see
   * set_action().
   * @return The action that the file selector is performing
   * 
   * Since: 2.4.
   "
      end

      operation 925609 "set_local_only"
	public explicit_return_type "void"
	nparams 1
	  param in name "local_only" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets whether only local files can be selected in the
   * file selector. If @a local_only  is <tt>true</tt> (the default),
   * then the selected file are files are guaranteed to be
   * accessible through the operating systems native file
   * file system and therefore the application only
   * needs to worry about the filename functions in
   * Gtk::FileChooser, like get_filename(),
   * rather than the URI functions like
   * get_uri(),
   * 
   * Since: 2.4
   * @param local_only <tt>true</tt> if only local files can be selected.
   "
      end

      operation 925737 "get_local_only"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets whether only local files can be selected in the
   * file selector. See set_local_only()
   * @return <tt>true</tt> if only local files can be selected.
   * 
   * Since: 2.4.
   "
      end

      operation 925865 "set_select_multiple"
	public explicit_return_type "void"
	nparams 1
	  param in name "select_multiple" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets whether multiple files can be selected in the file selector.  This is
   * only relevant if the action is set to be GTK_FILE_CHOOSER_ACTION_OPEN or
   * GTK_FILE_CHOOSER_ACTION_SAVE.  It cannot be set with either of the folder
   * actions.
   * 
   * Since: 2.4
   * @param select_multiple <tt>true</tt> if multiple files can be selected.
   "
      end

      operation 925993 "get_select_multiple"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets whether multiple files can be selected in the file
   * selector. See set_select_multiple().
   * @return <tt>true</tt> if multiple files can be selected.
   * 
   * Since: 2.4.
   "
      end

      operation 926121 "set_current_name"
	public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the current name in the file selector, as if entered
   * by the user. Note that the name passed in here is a UTF-8
   * string rather than a filename. This function is meant for
   * such uses as a suggested name in a \"Save As...\" dialog.
   * 
   * If you want to preselect a particular existing file, you
   * should use set_filename() instead.
   * 
   * Since: 2.4
   * @param name The filename to use, as a UTF-8 string.
   "
      end

      operation 926249 "get_filename"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the filename for the currently selected file in
   * the file selector. If multiple files are selected,
   * one of the filenames will be returned at random.
   * 
   * If the file chooser is in folder mode, this function returns the selected
   * folder.
   * @return The currently selected filename, or an empty string
   * if no file is selected, or the selected file can't
   * be represented with a local filename.
   "
      end

      operation 926377 "set_filename"
	public explicit_return_type "bool"
	nparams 1
	  param in name "filename" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets @a filename  as the current filename for the the file chooser;
   * If the file name isn't in the current folder of @a chooser , then the
   * current folder of @a chooser  will be changed to the folder containing
   *  @a filename . This is equivalent to a sequence of
   * unselect_all() followed by select_filename().
   * 
   * Note that the file must exist, or nothing will be done except
   * for the directory change. To pre-enter a filename for the user, as in
   * a save-as dialog, use set_current_name()
   * @param filename The filename to set as current.
   * @return <tt>true</tt> if both the folder could be changed and the file was
   * selected successfully, <tt>false</tt> otherwise.
   * 
   * Since: 2.4.
   "
      end

      operation 926505 "select_filename"
	public explicit_return_type "bool"
	nparams 1
	  param in name "filename" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Selects a filename. If the file name isn't in the current
   * folder of @a chooser , then the current folder of @a chooser  will
   * be changed to the folder containing @a filename .
   * @param filename The filename to select.
   * @return <tt>true</tt> if both the folder could be changed and the file was
   * selected successfully, <tt>false</tt> otherwise.
   * 
   * Since: 2.4.
   "
      end

      operation 926633 "unselect_filename"
	public explicit_return_type "void"
	nparams 1
	  param in name "filename" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Unselects a currently selected filename. If the filename
   * is not in the current directory, does not exist, or
   * is otherwise not currently selected, does nothing.
   * 
   * Since: 2.4
   * @param filename The filename to unselect.
   "
      end

      operation 926761 "select_all"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Selects all the files in the current folder of a file chooser.
   * 
   * Since: 2.4
   "
      end

      operation 926889 "unselect_all"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Unselects all the files in the current folder of a file chooser.
   * 
   * Since: 2.4
   "
      end

      operation 927017 "get_filenames"
	const public explicit_return_type "Glib::SListHandle<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Lists all the selected files and subfolders in the current folder of
   *  @a chooser . The returned names are full absolute paths. If files in the current
   * folder cannot be represented as local filenames they will be ignored. (See
   * get_uris())
   * @return A G::SList containing the filenames of all selected
   * files and subfolders in the current folder. Free the returned list
   * with Glib::slist_free(), and the filenames with Glib::free().
   * 
   * Since: 2.4.
   "
      end

      operation 927145 "set_current_folder"
	public explicit_return_type "bool"
	nparams 1
	  param in name "filename" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the current folder for @a chooser  from a local filename.
   * The user will be shown the full contents of the current folder,
   * plus user interface elements for navigating to other folders.
   * @param filename The full path of the new current folder.
   * @return <tt>true</tt> if the folder could be changed successfully, <tt>false</tt>
   * otherwise.
   * 
   * Since: 2.4.
   "
      end

      operation 927273 "get_current_folder"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the current folder of @a chooser  as a local filename.
   * See set_current_folder().
   * @return The full path of the current folder, or <tt>0</tt>
   * if the current path cannot be represented as a local filename.
   * Free with Glib::free().
   * 
   * Since: 2.4.
   "
      end

      operation 927401 "get_uri"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " URI manipulation
 
* Gets the URI for the currently selected file in
   * the file selector. If multiple files are selected,
   * one of the filenames will be returned at random.
   * 
   * If the file chooser is in folder mode, this function returns the selected
   * folder.
   * @return The currently selected URI, or an empty string
   * if no file is selected.
   "
      end

      operation 927529 "set_uri"
	public explicit_return_type "bool"
	nparams 1
	  param in name "uri" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the file referred to by @a uri  as the current file for the the
   * file chooser; If the file name isn't in the current folder of @a chooser ,
   * then the current folder of @a chooser  will be changed to the folder containing
   *  @a uri . This is equivalent to a sequence of unselect_all()
   * followed by select_uri().
   * 
   * Note that the file must exist, or nothing will be done except
   * for the directory change. To pre-enter a filename for the user, as in
   * a save-as dialog, use set_current_name()
   * @param uri The URI to set as current.
   * @return <tt>true</tt> if both the folder could be changed and the URI was
   * selected successfully, <tt>false</tt> otherwise.
   * 
   * Since: 2.4.
   "
      end

      operation 927657 "select_uri"
	public explicit_return_type "bool"
	nparams 1
	  param in name "uri" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Selects the file to by @a uri . If the URI doesn't refer to a
   * file in the current folder of @a chooser , then the current folder of
   *  @a chooser  will be changed to the folder containing @a filename .
   * @param uri The URI to select.
   * @return <tt>true</tt> if both the folder could be changed and the URI was
   * selected successfully, <tt>false</tt> otherwise.
   * 
   * Since: 2.4.
   "
      end

      operation 927785 "unselect_uri"
	public explicit_return_type "void"
	nparams 1
	  param in name "uri" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Unselects the file referred to by @a uri . If the file
   * is not in the current directory, does not exist, or
   * is otherwise not currently selected, does nothing.
   * 
   * Since: 2.4
   * @param uri The URI to unselect.
   "
      end

      operation 927913 "get_uris"
	const public explicit_return_type "Glib::SListHandle<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Lists all the selected files and subfolders in the current folder of
   *  @a chooser . The returned names are full absolute URIs.
   * @return A G::SList containing the URIs of all selected
   * files and subfolders in the current folder. Free the returned list
   * with Glib::slist_free(), and the filenames with Glib::free().
   * 
   * Since: 2.4.
   "
      end

      operation 928041 "set_current_folder_uri"
	public explicit_return_type "bool"
	nparams 1
	  param in name "uri" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the current folder for @a chooser  from an URI.
   * The user will be shown the full contents of the current folder,
   * plus user interface elements for navigating to other folders.
   * @param uri The URI for the new current folder.
   * @return <tt>true</tt> if the folder could be changed successfully, <tt>false</tt>
   * otherwise.
   * 
   * Since: 2.4.
   "
      end

      operation 928169 "get_current_folder_uri"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the current folder of @a chooser  as an URI.
   * See set_current_folder_uri().
   * @return The URI for the current folder.
   "
      end

      operation 928297 "set_preview_widget"
	public explicit_return_type "void"
	nparams 1
	  param inout name "preview_widget" explicit_type "Gtk::Widget"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " Preview widget
 
* Sets an application-supplied widget to use to display a custom preview
   * of the currently selected file. To implement a preview, after setting the
   * preview widget, you connect to the ::selection-changed
   * signal, and call get_preview_filename() or
   * get_preview_uri() on each change. If you can
   * display a preview of the new file, update your widget and
   * set the preview active using set_preview_widget_active().
   * Otherwise, set the preview inactive.
   * 
   * When there is no application-supplied preview widget, or the
   * application-supplied preview widget is not active, the file chooser
   * may display an internally generated preview of the current file or
   * it may display no preview at all.
   * 
   * Since: 2.4
   * @param preview_widget Widget for displaying preview.
   "
      end

      operation 928425 "get_preview_widget"
	const public explicit_return_type "Gtk::Widget"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the current preview widget; see
   * set_preview_widget().
   * @return The current preview widget, or <tt>0</tt>
   * 
   * Since: 2.4.
   "
      end

      operation 928553 "get_preview_widget"
	public explicit_return_type "Gtk::Widget"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the current preview widget; see
   * set_preview_widget().
   * @return The current preview widget, or <tt>0</tt>
   * 
   * Since: 2.4.
   "
      end

      operation 928681 "set_preview_widget_active"
	public explicit_return_type "void"
	nparams 1
	  param in name "active" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets whether the preview widget set by
   * set_preview_widget_active() should be shown for the
   * current filename. When @a active  is set to false, the file chooser
   * may display an internally generated preview of the current file
   * or it may display no preview at all. See
   * set_preview_widget() for more details.
   * 
   * Since: 2.4
   * @param active Whether to display the user-specified preview widget.
   "
      end

      operation 928809 "get_preview_widget_active"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets whether the preview widget set by set_preview_widget()
   * should be shown for the current filename. See
   * set_preview_widget_active().
   * @return <tt>true</tt> if the preview widget is active for the current filename.
   * 
   * Since: 2.4.
   "
      end

      operation 928937 "set_use_preview_label"
	public explicit_return_type "void"
	nparams 1
	  param in name "use_label" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets whether the file chooser should display a stock label with the name of
   * the file that is being previewed; the default is <tt>true</tt>.  Applications that
   * want to draw the whole preview area themselves should set this to <tt>false</tt> and
   * display the name themselves in their preview widget.
   * 
   * See also: set_preview_widget()
   * 
   * Since: 2.4
   * @param use_label Whether to display a stock label with the name of the previewed file.
   "
      end

      operation 929065 "get_use_preview_label"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets whether a stock label should be drawn with the name of the previewed
   * file.  See set_use_preview_label().
   * @return <tt>true</tt> if the file chooser is set to display a label with the
   * name of the previewed file, <tt>false</tt> otherwise.
   "
      end

      operation 929193 "get_preview_filename"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the filename that should be previewed in a custom preview
   * widget. See set_preview_widget().
   * @return The filename to preview, or an empty string if no file
   * is selected, or if the selected file cannot be represented
   * as a local filename.
   "
      end

      operation 929321 "get_preview_uri"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the URI that should be previewed in a custom preview
   * widget. See set_preview_widget().
   * @return The URI for the file to preview, or an empty string if no file is
   * selected.
   "
      end

      operation 929449 "set_extra_widget"
	public explicit_return_type "void"
	nparams 1
	  param inout name "extra_widget" explicit_type "Gtk::Widget"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " Extra widget
 
* Sets an application-supplied widget to provide extra options to the user.
   * 
   * Since: 2.4
   * @param extra_widget Widget for extra options.
   "
      end

      operation 929577 "get_extra_widget"
	public explicit_return_type "Gtk::Widget"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the current preview widget; see
   * set_extra_widget().
   * @return The current extra widget, or <tt>0</tt>
   * 
   * Since: 2.4.
   "
      end

      operation 929705 "get_extra_widget"
	const public explicit_return_type "Gtk::Widget"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the current preview widget; see
   * set_extra_widget().
   * @return The current extra widget, or <tt>0</tt>
   * 
   * Since: 2.4.
   "
      end

      operation 929833 "add_filter"
	public explicit_return_type "void"
	nparams 1
	  param in name "filter" type class_ref 186281 // FileFilter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " List of user selectable filters
 
* Adds @a filter  to the list of filters that the user can select between.
   * When a filter is selected, only files that are passed by that
   * filter are displayed.
   * 
   * Since: 2.4
   * @param filter A Gtk::FileFilter.
   "
      end

      operation 929961 "remove_filter"
	public explicit_return_type "void"
	nparams 1
	  param in name "filter" type class_ref 186281 // FileFilter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Removes @a filter  from the list of filters that the user can select between.
   * 
   * Since: 2.4
   * @param filter A Gtk::FileFilter.
   "
      end

      operation 930089 "list_filters"
	public explicit_return_type "Glib::SListHandle< FileFilter* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Lists the current set of user-selectable filters; see
   * add_filter(), remove_filter().
   * @return A G::SList containing the current set of
   * user selectable filters. The contents of the list are
   * owned by GTK+, but you must free the list itself with
   * Glib::slist_free() when you are done with it.
   * 
   * Since: 2.4.
   "
      end

      operation 930217 "list_filters"
	const public explicit_return_type "Glib::SListHandle< const FileFilter* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Lists the current set of user-selectable filters; see
   * add_filter(), remove_filter().
   * @return A G::SList containing the current set of
   * user selectable filters. The contents of the list are
   * owned by GTK+, but you must free the list itself with
   * Glib::slist_free() when you are done with it.
   * 
   * Since: 2.4.
   "
      end

      operation 930345 "set_filter"
	public explicit_return_type "void"
	nparams 1
	  param in name "filter" type class_ref 186281 // FileFilter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " Current filter
 
* Sets the current filter; only the files that pass the
   * filter will be displayed. If the user-selectable list of filters
   * is non-empty, then the filter should be one of the filters
   * in that list. Setting the current filter when the list of
   * filters is empty is useful if you want to restrict the displayed
   * set of files without letting the user change it.
   * 
   * Since: 2.4
   * @param filter A Gtk::FileFilter.
   "
      end

      operation 930473 "get_filter"
	public return_type class_ref 186281 // FileFilter
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the current filter; see set_filter().
   * @return The current filter, or <tt>0</tt>
   * 
   * Since: 2.4.
   "
      end

      operation 930601 "get_filter"
	const public return_type class_ref 186281 // FileFilter
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the current filter; see set_filter().
   * @return The current filter, or <tt>0</tt>
   * 
   * Since: 2.4.
   "
      end

      operation 930729 "add_shortcut_folder"
	public explicit_return_type "bool"
	nparams 1
	  param in name "folder" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " Per-application shortcut folders 
* Adds a folder to be displayed with the shortcut folders in a file chooser.
   * Note that shortcut folders do not get saved, as they are provided by the
   * application.  For example, you can use this to add a
   * \"/usr/share/mydrawprogram/Clipart\" folder to the volume list.
   * @param folder Filename of the folder to add.
   * @return <tt>true</tt> if the folder could be added successfully, <tt>false</tt>
   * otherwise.  In the latter case, the @a error  will be set as appropriate.
   * 
   * Since: 2.4.
   "
      end

      operation 930857 "remove_shortcut_folder"
	public explicit_return_type "bool"
	nparams 1
	  param in name "folder" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Removes a folder from a file chooser's list of shortcut folders.
   * @param folder Filename of the folder to remove.
   * @return <tt>true</tt> if the operation succeeds, <tt>false</tt> otherwise.  
   * In the latter case, the @a error  will be set as appropriate.
   * 
   * See also: add_shortcut_folder()
   * 
   * Since: 2.4.
   "
      end

      operation 930985 "list_shortcut_folders"
	const public explicit_return_type "Glib::SListHandle<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Queries the list of shortcut folders in the file chooser, as set by
   * gtk_file_chooser_set_shortcut_folders().
   * @return A list of folder filenames, or <tt>0</tt> if there are no shortcut
   * folders.  Free the returned list with Glib::slist_free(), and the filenames with
   * Glib::free().
   * 
   * Since: 2.4.
   "
      end

      operation 931113 "add_shortcut_folder_uri"
	public explicit_return_type "bool"
	nparams 1
	  param in name "uri" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Adds a folder URI to be displayed with the shortcut folders in a file
   * chooser.  Note that shortcut folders do not get saved, as they are provided
   * by the application.  For example, you can use this to add a
   * \"file:///usr/share/mydrawprogram/Clipart\" folder to the volume list.
   * @param uri URI of the folder to add.
   * @return <tt>true</tt> if the folder could be added successfully, <tt>false</tt>
   * otherwise.  In the latter case, the @a error  will be set as appropriate.
   * 
   * Since: 2.4.
   "
      end

      operation 931241 "remove_shortcut_folder_uri"
	public explicit_return_type "bool"
	nparams 1
	  param in name "uri" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Removes a folder URI from a file chooser's list of shortcut folders.
   * @param uri URI of the folder to remove.
   * @return <tt>true</tt> if the operation succeeds, <tt>false</tt> otherwise.  
   * In the latter case, the @a error  will be set as appropriate.
   * 
   * See also: add_shortcut_folder_uri()
   * 
   * Since: 2.4.
   "
      end

      operation 931369 "list_shortcut_folder_uris"
	const public explicit_return_type "Glib::SListHandle<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Queries the list of shortcut folders in the file chooser, as set by
   * gtk_file_chooser_set_shortcut_folder_uris().
   * @return A list of folder URIs, or <tt>0</tt> if there are no shortcut
   * folders.  Free the returned list with Glib::slist_free(), and the URIs with
   * Glib::free().
   * 
   * Since: 2.4.
   "
      end

      operation 931497 "signal_current_folder_changed"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 931625 "signal_selection_changed"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 931753 "signal_update_preview"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 931881 "signal_file_activated"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 932009 "property_action"
	public explicit_return_type "Glib::PropertyProxy<FileChooserAction>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 932137 "property_action"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<FileChooserAction>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 311593 "property_filter"
	public explicit_return_type "Glib::PropertyProxy<FileFilter*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO: _WRAP_PROPERTY(\"file-system\", FileSystem) //FileSystem is not really public API.
* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 932265 "property_filter"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<FileFilter*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 311849 "property_folder_mode"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 311977 "property_folder_mode"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 312105 "property_local_only"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 312233 "property_local_only"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 312361 "property_preview_widget"
	public explicit_return_type "Glib::PropertyProxy<Widget*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 312489 "property_preview_widget"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Widget*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 312617 "property_preview_widget_active"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 312745 "property_preview_widget_active"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 312873 "property_use_preview_label"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 313001 "property_use_preview_label"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 932393 "property_extra_widget"
	public explicit_return_type "Glib::PropertyProxy<Widget*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 932521 "property_extra_widget"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Widget*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 932649 "property_select_multiple"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 932777 "property_select_multiple"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 932905 "property_show_hidden"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 933033 "property_show_hidden"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end
    end

    class 185129 "FileChooserAction"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* @addtogroup gtkmmEnums Enums and Flags 
*
 * @ingroup gtkmmEnums
 "
      attribute 196137 "FILE_CHOOSER_ACTION_OPEN"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 196265 "FILE_CHOOSER_ACTION_SAVE"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 196393 "FILE_CHOOSER_ACTION_SELECT_FOLDER"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 196521 "FILE_CHOOSER_ACTION_CREATE_FOLDER"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 186409 "FileChooserDialog"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/filechooserdialog.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* Convenient file chooser window.
 *
 * @ingroup Dialogs
 "
      classrelation 247849 // <generalisation>
	relation 165545 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 247849 // <generalisation>
	  b parent class_ref 296617 // Dialog
      end

      classrelation 165673 // <generalisation>
	relation 248233 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 165673 // <generalisation>
	  b parent class_ref 185513 // FileChooser
      end

      class 186537 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 186409 // FileChooserDialog
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 165801 // <realization>
	  relation 248361 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 165801 // <realization>
	    b parent class_ref 186409 // FileChooserDialog
	end
      end

      class 186793 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "FileChooserDialog_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 186921 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkFileChooserDialog"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 187049 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkFileChooserDialogClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 934569 "~FileChooserDialog"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 166185 // filechooserdialog_class_ (<directional composition>)
	relation 248489 *-->
	  a role_name "filechooserdialog_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 166185 // filechooserdialog_class_ (<directional composition>)
	  b parent class_ref 186793 // CppClassType
      end

      operation 934697 "FileChooserDialog"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 186409 // FileChooserDialog
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 934825 "operator ="
	private return_type class_ref 186409 // FileChooserDialog
	nparams 1
	  param in name "" type class_ref 186409 // FileChooserDialog
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 934953 "FileChooserDialog"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 935081 "FileChooserDialog"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkFileChooserDialog"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 935209 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 314665 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 314793 "gobj"
	cpp_inline public explicit_return_type "GtkFileChooserDialog"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkFileChooserDialog*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 314921 "gobj"
	const cpp_inline public explicit_return_type "GtkFileChooserDialog"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkFileChooserDialog*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 315049 "FileChooserDialog"
	public explicit_return_type ""
	nparams 3
	  param inout name "parent" explicit_type "Gtk::Window"
	  param in name "title" explicit_type "Glib::ustring"
	  param in name "action" type class_ref 185129 // FileChooserAction
	    defaultvalue " FILE_CHOOSER_ACTION_OPEN"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 935337 "FileChooserDialog"
	public explicit_return_type ""
	nparams 2
	  param in name "title" explicit_type "Glib::ustring"
	  param in name "action" type class_ref 185129 // FileChooserAction
	    defaultvalue " FILE_CHOOSER_ACTION_OPEN"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${throw}{
${body}}
"
	
	
	
	
      end
    end

    class 187177 "FileChooserWidget"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/filechooserwidget.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* File chooser widget that can be embedded in other widgets.
 *
 * FileChooserWidget is a widget suitable for selecting files. It is the main
 * building block of a Gtk::FileChooserDialog. Most applications will only need to use
 * the latter; you can use FileChooserWidget as part of a larger window if you have
 * special needs.
 *
 * @ingroup Widgets
 "
      classrelation 247977 // <generalisation>
	relation 248617 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 247977 // <generalisation>
	  b parent class_ref 287913 // VBox
      end

      classrelation 248105 // <generalisation>
	relation 248745 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 248105 // <generalisation>
	  b parent class_ref 185513 // FileChooser
      end

      class 187305 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 187177 // FileChooserWidget
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 166569 // <realization>
	  relation 248873 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 166569 // <realization>
	    b parent class_ref 187177 // FileChooserWidget
	end
      end

      class 187561 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "FileChooserWidget_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 187689 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkFileChooserWidget"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 187817 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkFileChooserWidgetClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 935465 "~FileChooserWidget"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 248233 // filechooserwidget_class_ (<directional composition>)
	relation 249001 *-->
	  a role_name "filechooserwidget_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 248233 // filechooserwidget_class_ (<directional composition>)
	  b parent class_ref 187561 // CppClassType
      end

      operation 935593 "FileChooserWidget"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 187177 // FileChooserWidget
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 935721 "operator ="
	private return_type class_ref 187177 // FileChooserWidget
	nparams 1
	  param in name "" type class_ref 187177 // FileChooserWidget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 935849 "FileChooserWidget"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 935977 "FileChooserWidget"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkFileChooserWidget"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 936105 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 936233 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 936361 "gobj"
	cpp_inline public explicit_return_type "GtkFileChooserWidget"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkFileChooserWidget*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 936489 "gobj"
	const cpp_inline public explicit_return_type "GtkFileChooserWidget"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkFileChooserWidget*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 936617 "FileChooserWidget"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 936745 "FileChooserWidget"
	public explicit_return_type ""
	nparams 1
	  param in name "action" type class_ref 185129 // FileChooserAction
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment "* Creates a file chooser widget that can be embedded in other widgets.
   *
   * Creates a new FileChooserWidget. This is a file chooser widget that can be embedded in
   * custom windows, and it is the same widget that is used by Gtk::FileChooserDialog.
   *
   * @param action Open or save mode for the widget
   * 
   * Since: 2.4
   "
      end
    end

    class 186281 "FileFilter"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/filefilter.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 188329 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 186281 // FileFilter
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 247465 // <realization>
	  relation 247849 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 247465 // <realization>
	    b parent class_ref 186281 // FileFilter
	end
      end

      class 188585 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "FileFilter_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 188713 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkFileFilter"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 188841 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkFileFilterClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 933161 "~FileFilter"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 247593 // filefilter_class_ (<directional composition>)
	relation 247977 *-->
	  a role_name "filefilter_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 247593 // filefilter_class_ (<directional composition>)
	  b parent class_ref 188585 // CppClassType
      end

      operation 933289 "FileFilter"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 186281 // FileFilter
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 933417 "operator ="
	private return_type class_ref 186281 // FileFilter
	nparams 1
	  param in name "" type class_ref 186281 // FileFilter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 933545 "FileFilter"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 933673 "FileFilter"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkFileFilter"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 933801 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 933929 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 934057 "gobj"
	cpp_inline public explicit_return_type "GtkFileFilter"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkFileFilter*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 317865 "gobj"
	const cpp_inline public explicit_return_type "GtkFileFilter"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkFileFilter*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 317993 "FileFilter"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 318121 "set_name"
	public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the human-readable name of the filter; this is the string
   * that will be displayed in the file selector user interface if
   * there is a selectable list of filters.
   * 
   * Since: 2.4
   * @param name The human-readable-name for the filter, or <tt>0</tt>
   * to remove any existing name.
   "
      end

      operation 318249 "get_name"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the human-readable name for the filter. See gtk_file_filter_set_name().
   * @return The human-readable name of the filter.
   * 
   * Since: 2.4.
   "
      end

      operation 318377 "add_mime_type"
	public explicit_return_type "void"
	nparams 1
	  param in name "mime_type" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Adds a rule allowing a given mime type to @a filter .
   * 
   * Since: 2.4
   * @param mime_type Name of a MIME type.
   "
      end

      operation 934185 "add_pattern"
	public explicit_return_type "void"
	nparams 1
	  param in name "pattern" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Adds a rule allowing a shell style glob to a filter.
   * 
   * Since: 2.4
   * @param pattern A shell style glob.
   "
      end

      class 188969 "Info"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 247721 // contains (<directional composition>)
	  relation 248105 *-->
	    a role_name "contains" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 247721 // contains (<directional composition>)
	    b parent class_ref 187945 // FileFilterFlags
	end

	attribute 196649 "filename"
	  public explicit_type "Glib::ustring"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 196777 "uri"
	  public explicit_type "Glib::ustring"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 196905 "display_name"
	  public explicit_type "Glib::ustring"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 197033 "mime_type"
	  public explicit_type "Glib::ustring"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 189097 "SlotCustom"
	visibility package stereotype "typedef" explicit_base_type "sigc::slot<bool, const Info&>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 934313 "add_custom"
	public explicit_return_type "void"
	nparams 2
	  param in name "needed" type class_ref 187945 // FileFilterFlags
	  param in name "slot" type class_ref 189097 // SlotCustom
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 934441 "get_needed"
	const public return_type class_ref 187945 // FileFilterFlags
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the fields that need to be filled in for the structure
   * passed to gtk_file_filter_filter()
   * 
   * This function will not typically be used by applications; it
   * is intended principally for use in the implementation of
   * Gtk::FileChooser.
   * @return Bitfield of flags indicating needed fields when
   * calling gtk_file_filter_filter()
   * 
   * Since: 2.4.
   "
      end
    end

    class 187945 "FileFilterFlags"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* @addtogroup gtkmmEnums Enums and Flags 
*
 * @ingroup gtkmmEnums
 * @par Bitwise operators:
 * <tt>%FileFilterFlags operator|(FileFilterFlags, FileFilterFlags)</tt><br>
 * <tt>%FileFilterFlags operator&(FileFilterFlags, FileFilterFlags)</tt><br>
 * <tt>%FileFilterFlags operator^(FileFilterFlags, FileFilterFlags)</tt><br>
 * <tt>%FileFilterFlags operator~(FileFilterFlags)</tt><br>
 * <tt>%FileFilterFlags& operator|=(FileFilterFlags&, FileFilterFlags)</tt><br>
 * <tt>%FileFilterFlags& operator&=(FileFilterFlags&, FileFilterFlags)</tt><br>
 * <tt>%FileFilterFlags& operator^=(FileFilterFlags&, FileFilterFlags)</tt><br>
 "
      attribute 197161 "FILE_FILTER_FILENAME"
	public explicit_type ""
	init_value " 1 << 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 197289 "FILE_FILTER_URI"
	public explicit_type ""
	init_value " 1 << 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 197417 "FILE_FILTER_DISPLAY_NAME"
	public explicit_type ""
	init_value " 1 << 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 197545 "FILE_FILTER_MIME_TYPE"
	public explicit_type ""
	init_value " 1 << 3
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 189225 "FileSelection"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/fileselection.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* Prompt the user for a file or directory name.
 *
 * Gtk::FileSelection should be used to retrieve file or directory names from
 * the user. It will create a new dialog window containing a directory list,
 * and a file list corresponding to the current working directory. The
 * filesystem can be navigated using the directory list or the drop-down
 * history menu. Alternatively, the TAB key can be used to navigate using
 * filename completion - common in text based editors such as emacs and jed.
 *
 * @deprecated Use the FileChooserDialog instead.
 * @ingroup Dialogs
 "
      classrelation 248489 // <generalisation>
	relation 249257 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 248489 // <generalisation>
	  b parent class_ref 296617 // Dialog
      end

      class 189353 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 189225 // FileSelection
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 248617 // <realization>
	  relation 168105 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 248617 // <realization>
	    b parent class_ref 189225 // FileSelection
	end
      end

      class 189609 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "FileSelection_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 189737 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkFileSelection"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 189865 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkFileSelectionClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 318889 "~FileSelection"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 248745 // fileselection_class_ (<directional composition>)
	relation 168489 *-->
	  a role_name "fileselection_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 248745 // fileselection_class_ (<directional composition>)
	  b parent class_ref 189609 // CppClassType
      end

      operation 319017 "FileSelection"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 189225 // FileSelection
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 319145 "operator ="
	private return_type class_ref 189225 // FileSelection
	nparams 1
	  param in name "" type class_ref 189225 // FileSelection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 937001 "FileSelection"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 937129 "FileSelection"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkFileSelection"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 937257 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 937385 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 319785 "gobj"
	cpp_inline public explicit_return_type "GtkFileSelection"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkFileSelection*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 937513 "gobj"
	const cpp_inline public explicit_return_type "GtkFileSelection"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkFileSelection*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 320041 "FileSelection"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 937641 "FileSelection"
	public explicit_return_type ""
	nparams 1
	  param in name "title" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 937769 "set_filename"
	public explicit_return_type "void"
	nparams 1
	  param in name "filename" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets a default path for the file requestor. If @a filename  includes a
   * directory path, then the requestor will open with that path as its
   * current working directory.
   * 
   * This has the consequence that in order to open the requestor with a 
   * working directory and an empty filename, @a filename  must have a trailing
   * directory separator.
   * 
   * The encoding of @a filename  is the on-disk encoding, which
   * may not be UTF-8. See Glib::filename_from_utf8().
   * @param filename A string to set as the default file name.
   "
      end

      operation 937897 "get_filename"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* This function returns the selected filename in the on-disk encoding
   * (see Glib::filename_from_utf8()), which may or may not be the same as that
   * used by GTK+ (UTF-8). To convert to UTF-8, call Glib::filename_to_utf8().
   * The returned string points to a statically allocated buffer and
   * should be copied if you plan to keep it around.
   * 
   * If no file is selected then the selected directory path is returned.
   * @return Currently-selected filename in the on-disk encoding.
   "
      end

      operation 938025 "complete"
	public explicit_return_type "void"
	nparams 1
	  param in name "pattern" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 938153 "show_fileop_buttons"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 320809 "hide_fileop_buttons"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 320937 "get_selections"
	const public explicit_return_type "Glib::ArrayHandle<std::string>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the list of file selections the user has made in the dialog box.
   * This function is intended for use when the user can select multiple files
   * in the file list. The first file in the list is equivalent to what
   * get_filename() would return.
   * 
   * The filenames are in the encoding of Glib::filename_from_utf8(), which may or 
   * may not be the same as that used by GTK+ (UTF-8). To convert to UTF-8, call
   * Glib::filename_to_utf8() on each string.
   * @return A newly-allocated <tt>0</tt>-terminated array of strings. Use
   * Glib::strfreev() to free it.
   "
      end

      operation 938281 "set_select_multiple"
	public explicit_return_type "void"
	nparams 1
	  param in name "select_multiple" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets whether the user is allowed to select multiple files in the file list.
   * Use get_selections() to get the list of selected files.
   * @param select_multiple Whether or not the user is allowed to select multiple
   * files in the file list.
   "
      end

      operation 938409 "get_select_multiple"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Determines whether or not the user is allowed to select multiple files in
   * the file list. See set_select_multiple().
   * @return <tt>true</tt> if the user is allowed to select multiple files in the
   * file list.
   "
      end

      operation 938537 "get_dir_list"
	public return_type class_ref 189993 // TreeView
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment ": Accessors"
      end

      operation 938665 "get_dir_list"
	const public return_type class_ref 189993 // TreeView
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 938793 "get_file_list"
	public return_type class_ref 189993 // TreeView
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 938921 "get_file_list"
	const public return_type class_ref 189993 // TreeView
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 321833 "get_history_pulldown"
	public return_type class_ref 190121 // OptionMenu
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 321961 "get_history_pulldown"
	const public return_type class_ref 190121 // OptionMenu
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 322089 "get_selection_entry"
	public return_type class_ref 300457 // Entry
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 939049 "get_selection_entry"
	const public return_type class_ref 300457 // Entry
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 939177 "get_selection_text"
	public return_type class_ref 129321 // Label
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 939305 "get_selection_text"
	const public return_type class_ref 129321 // Label
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 939433 "get_main_vbox"
	public return_type class_ref 287913 // VBox
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 939561 "get_main_vbox"
	const public return_type class_ref 287913 // VBox
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 939689 "get_ok_button"
	public return_type class_ref 141353 // Button
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 939817 "get_ok_button"
	const public return_type class_ref 141353 // Button
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 939945 "get_cancel_button"
	public return_type class_ref 141353 // Button
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 323241 "get_cancel_button"
	const public return_type class_ref 141353 // Button
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 323369 "get_help_button"
	public return_type class_ref 141353 // Button
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 940073 "get_help_button"
	const public return_type class_ref 141353 // Button
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 940201 "get_button_area"
	public return_type class_ref 144041 // HButtonBox
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 940329 "get_button_area"
	const public return_type class_ref 144041 // HButtonBox
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 940457 "get_action_area"
	public return_type class_ref 140585 // HBox
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 940585 "get_action_area"
	const public return_type class_ref 140585 // HBox
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 940713 "property_show_fileops"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 940841 "property_show_fileops"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 940969 "property_filename"
	public explicit_return_type "Glib::PropertyProxy<std::string>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 941097 "property_filename"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<std::string>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 941225 "property_select_multiple"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 941353 "property_select_multiple"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end
    end

    class 190249 "Fixed"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/fixed.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* A container which allows you to position widgets at fixed coordinates.
 *
 * The Gtk::Fixed widget is a container which can place child widgets at fixed positions and with fixed sizes, given in pixels. It performs no automatic layout management.
 * For most applications, you should not use this container, because it will result in truncated text, overlapping widgets, and other display bugs:
 * - Themes may change widget sizes.
 * - Fonts other than the one you used to write the app will of course change the size of widgets containing text; keep in mind that users may use a larger font because of difficulty reading the default, or they may be using Windows or the framebuffer port of GTK+, where different fonts are available.
 * - Translation of text into other languages changes its size. Also, display of non-English text will use a different font in many cases.
 * In addition, the fixed widget can't properly be mirrored in right-to-left languages such as Hebrew and Arabic. i.e. normally GTK+ will flip the interface to put labels to the right of the thing they label, but it can't do that with Gtk::Fixed. So your application will not be usable in right-to-left languages.
 * Finally, fixed positioning makes it kind of annoying to add/remove GUI elements, since you have to reposition all the other elements. This is a long-term maintenance problem for your application.
 * If you know none of these things are an issue for your application, and prefer the simplicity of Gtk::Fixed, by all means use the widget. But you should be aware of the tradeoffs.
 *
 * @ingroup Widgets
 * @ingroup Containers
 "
      classrelation 248873 // <generalisation>
	relation 168617 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 248873 // <generalisation>
	  b parent class_ref 280745 // Container
      end

      class 190377 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 190249 // Fixed
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 168745 // <realization>
	  relation 168745 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 168745 // <realization>
	    b parent class_ref 190249 // Fixed
	end
      end

      class 190633 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Fixed_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 190761 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkFixed"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 190889 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkFixedClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 941481 "~Fixed"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 169129 // fixed_class_ (<directional composition>)
	relation 169129 *-->
	  a role_name "fixed_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 169129 // fixed_class_ (<directional composition>)
	  b parent class_ref 190633 // CppClassType
      end

      operation 941609 "Fixed"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 190249 // Fixed
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 941737 "operator ="
	private return_type class_ref 190249 // Fixed
	nparams 1
	  param in name "" type class_ref 190249 // Fixed
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 941865 "Fixed"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 941993 "Fixed"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkFixed"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 942121 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 942249 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 942377 "gobj"
	cpp_inline public explicit_return_type "GtkFixed"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkFixed*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 942505 "gobj"
	const cpp_inline public explicit_return_type "GtkFixed"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkFixed*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 942633 "Fixed"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 942761 "put"
	public explicit_return_type "void"
	nparams 3
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 942889 "move"
	public explicit_return_type "void"
	nparams 3
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 943017 "set_has_window"
	public explicit_return_type "void"
	nparams 1
	  param in name "has_window" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets whether a Gtk::Fixed widget is created with a separate
   * Gdk::Window for widget->window or not. (By default, it will be
   * created with no separate Gdk::Window). This function must be called
   * while the Gtk::Fixed is not realized, for instance, immediately after the
   * window is created.
   * @param has_window <tt>true</tt> if a separate window should be created.
   "
      end

      operation 943145 "get_has_window"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets whether the Gtk::Fixed has its own Gdk::Window.
   * See gdk_fixed_set_has_window().
   * @return <tt>true</tt> if @a fixed  has its own window.
   "
      end
    end

    class 191017 "FontButton"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/fontbutton.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* A button to launch a font selection dialog.
 * 
 * The Gtk::FontButton is a button which displays the currently selected font and
 * allows to open a font selection dialog to change the font. It is suitable widget
 * for selecting a font in a preference dialog.
 * @ingroup Widgets
 "
      classrelation 169257 // <generalisation>
	relation 169257 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 169257 // <generalisation>
	  b parent class_ref 141353 // Button
      end

      class 191145 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 191017 // FontButton
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 169385 // <realization>
	  relation 169385 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 169385 // <realization>
	    b parent class_ref 191017 // FontButton
	end
      end

      class 191401 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "FontButton_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 191529 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkFontButton"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 191657 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkFontButtonClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 943273 "~FontButton"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 169769 // fontbutton_class_ (<directional composition>)
	relation 169769 *-->
	  a role_name "fontbutton_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 169769 // fontbutton_class_ (<directional composition>)
	  b parent class_ref 191401 // CppClassType
      end

      operation 943401 "FontButton"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 191017 // FontButton
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 943529 "operator ="
	private return_type class_ref 191017 // FontButton
	nparams 1
	  param in name "" type class_ref 191017 // FontButton
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 943657 "FontButton"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 943785 "FontButton"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkFontButton"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 943913 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 944041 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 944169 "gobj"
	cpp_inline public explicit_return_type "GtkFontButton"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkFontButton*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 944297 "gobj"
	const cpp_inline public explicit_return_type "GtkFontButton"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkFontButton*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 944425 "on_font_set"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 944553 "FontButton"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 944681 "FontButton"
	public explicit_return_type ""
	nparams 1
	  param in name "fontname" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 944809 "get_title"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the title of the font selection dialog.
   * @return An internal copy of the title string which must not be freed.
   * 
   * Since: 2.4.
   "
      end

      operation 944937 "set_title"
	public explicit_return_type "void"
	nparams 1
	  param in name "title" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the title for the font selection dialog.  
   * 
   * Since: 2.4
   * @param title A string containing the font selection dialog title.
   "
      end

      operation 945065 "get_use_font"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether the selected font is used in the label.
   * @return Whether the selected font is used in the label.
   * 
   * Since: 2.4.
   "
      end

      operation 945193 "set_use_font"
	public explicit_return_type "void"
	nparams 1
	  param in name "use_font" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* If @a use_font  is <tt>true</tt>, the font name will be written using the selected font.  
   * 
   * Since: 2.4
   * @param use_font If <tt>true</tt>, font name will be written using font chosen.
   "
      end

      operation 945321 "get_use_size"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether the selected size is used in the label.
   * @return Whether the selected size is used in the label.
   * 
   * Since: 2.4.
   "
      end

      operation 945449 "set_use_size"
	public explicit_return_type "void"
	nparams 1
	  param in name "use_size" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* If @a use_size  is <tt>true</tt>, the font name will be written using the selected size.
   * 
   * Since: 2.4
   * @param use_size If <tt>true</tt>, font name will be written using the selected size.
   "
      end

      operation 945577 "get_font_name"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the name of the currently selected font.
   * @return An internal copy of the font name which must not be freed.
   * 
   * Since: 2.4.
   "
      end

      operation 945705 "set_font_name"
	public explicit_return_type "bool"
	nparams 1
	  param in name "fontname" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets or updates the currently-displayed font in font picker dialog.
   * @param fontname Name of font to display in font selection dialog.
   * @return Return value of Gtk::FontSelectionDialog::set_font_name() if the
   * font selection dialog exists, otherwise <tt>false</tt>.
   * 
   * Since: 2.4.
   "
      end

      operation 945833 "get_show_style"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether the name of the font style will be shown in the label.
   * @return Whether the font style will be shown in the label.
   * 
   * Since: 2.4.
   "
      end

      operation 945961 "set_show_style"
	public explicit_return_type "void"
	nparams 1
	  param in name "show_style" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* If @a show_style  is <tt>true</tt>, the font style will be displayed along with name of the selected font.
   * 
   * Since: 2.4
   * @param show_style <tt>true</tt> if font style should be displayed in label.
   "
      end

      operation 946089 "get_show_size"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether the font size will be shown in the label.
   * @return Whether the font size will be shown in the label.
   * 
   * Since: 2.4.
   "
      end

      operation 946217 "set_show_size"
	public explicit_return_type "void"
	nparams 1
	  param in name "show_size" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* If @a show_size  is <tt>true</tt>, the font size will be displayed along with the name of the selected font.
   * 
   * Since: 2.4
   * @param show_size <tt>true</tt> if font size should be displayed in dialog.
   "
      end

      operation 946345 "property_title"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 946473 "property_title"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 946601 "property_font_name"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 946729 "property_font_name"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 946857 "property_use_font"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 946985 "property_use_font"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 947113 "property_use_size"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 947241 "property_use_size"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 947369 "property_show_style"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 947497 "property_show_style"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 947625 "property_show_size"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 947753 "property_show_size"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 947881 "signal_font_set"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 191785 "FontSelection"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/fontselection.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* A widget for selecting fonts.
 *
 * The Gtk::FontSelection widget lists the available fonts, styles and
 * sizes, allowing the user to select a font. It is used in the
 * Gtk::FontSelectionDialog widget to provide a dialog box for selecting
 * fonts. 
 * 
 * @ingroup Widgets
 "
      classrelation 169897 // <generalisation>
	relation 249385 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 169897 // <generalisation>
	  b parent class_ref 287913 // VBox
      end

      class 191913 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 191785 // FontSelection
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 170025 // <realization>
	  relation 170025 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 170025 // <realization>
	    b parent class_ref 191785 // FontSelection
	end
      end

      class 192169 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "FontSelection_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 192297 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkFontSelection"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 192425 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkFontSelectionClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 948009 "~FontSelection"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 170409 // fontselection_class_ (<directional composition>)
	relation 249513 *-->
	  a role_name "fontselection_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 170409 // fontselection_class_ (<directional composition>)
	  b parent class_ref 192169 // CppClassType
      end

      operation 948137 "FontSelection"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 191785 // FontSelection
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 948265 "operator ="
	private return_type class_ref 191785 // FontSelection
	nparams 1
	  param in name "" type class_ref 191785 // FontSelection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 948393 "FontSelection"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 948521 "FontSelection"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkFontSelection"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 948649 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 948777 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 948905 "gobj"
	cpp_inline public explicit_return_type "GtkFontSelection"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkFontSelection*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 949033 "gobj"
	const cpp_inline public explicit_return_type "GtkFontSelection"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkFontSelection*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 949161 "FontSelection"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 949289 "get_font_name"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 949417 "set_font_name"
	public explicit_return_type "bool"
	nparams 1
	  param in name "fontname" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 949545 "get_preview_text"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 949673 "set_preview_text"
	public explicit_return_type "void"
	nparams 1
	  param in name "fontname" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 949801 "get_font_entry"
	public return_type class_ref 300457 // Entry
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " Font page"
      end

      operation 333353 "get_font_entry"
	const public return_type class_ref 300457 // Entry
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 949929 "get_font_style_entry"
	public return_type class_ref 300457 // Entry
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 950057 "get_font_style_entry"
	const public return_type class_ref 300457 // Entry
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 333737 "get_size_entry"
	public return_type class_ref 300457 // Entry
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 950185 "get_size_entry"
	const public return_type class_ref 300457 // Entry
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 950313 "get_pixels_button"
	public return_type class_ref 192553 // RadioButton
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 950441 "get_pixels_button"
	const public return_type class_ref 192553 // RadioButton
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 950569 "get_points_button"
	public return_type class_ref 192553 // RadioButton
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 950697 "get_points_button"
	const public return_type class_ref 192553 // RadioButton
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 950825 "get_filter_button"
	public return_type class_ref 141353 // Button
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 950953 "get_filter_button"
	const public return_type class_ref 141353 // Button
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 951081 "get_preview_entry"
	public return_type class_ref 300457 // Entry
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 951209 "get_preview_entry"
	const public return_type class_ref 300457 // Entry
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 951337 "property_font_name"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 951465 "property_font_name"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 951593 "property_preview_text"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 951721 "property_preview_text"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end
    end

    class 192681 "FontSelectionDialog"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/fontselectiondialog.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* A dialog box for selecting fonts.
 *
 * The Gtk::FontSelectionDialog widget is a dialog box for selecting a font. 
 *
 * @ingroup Dialogs
 "
      classrelation 170537 // <generalisation>
	relation 249641 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 170537 // <generalisation>
	  b parent class_ref 296617 // Dialog
      end

      class 192809 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 192681 // FontSelectionDialog
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 170665 // <realization>
	  relation 249769 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 170665 // <realization>
	    b parent class_ref 192681 // FontSelectionDialog
	end
      end

      class 193065 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "FontSelectionDialog_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 193193 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkFontSelectionDialog"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 193321 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkFontSelectionDialogClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 951849 "~FontSelectionDialog"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 171049 // fontselectiondialog_class_ (<directional composition>)
	relation 249897 *-->
	  a role_name "fontselectiondialog_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 171049 // fontselectiondialog_class_ (<directional composition>)
	  b parent class_ref 193065 // CppClassType
      end

      operation 951977 "FontSelectionDialog"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 192681 // FontSelectionDialog
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 952105 "operator ="
	private return_type class_ref 192681 // FontSelectionDialog
	nparams 1
	  param in name "" type class_ref 192681 // FontSelectionDialog
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 952233 "FontSelectionDialog"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 952361 "FontSelectionDialog"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkFontSelectionDialog"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 952489 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 952617 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 952745 "gobj"
	cpp_inline public explicit_return_type "GtkFontSelectionDialog"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkFontSelectionDialog*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 952873 "gobj"
	const cpp_inline public explicit_return_type "GtkFontSelectionDialog"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkFontSelectionDialog*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 953001 "FontSelectionDialog"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 953129 "FontSelectionDialog"
	public explicit_return_type ""
	nparams 1
	  param in name "title" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 953257 "set_font_name"
	public explicit_return_type "bool"
	nparams 1
	  param in name "fontname" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 953385 "get_font_name"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 953513 "get_preview_text"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 953641 "set_preview_text"
	public explicit_return_type "void"
	nparams 1
	  param in name "fontname" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 953769 "get_font_selection"
	public return_type class_ref 191785 // FontSelection
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 953897 "get_font_selection"
	const public return_type class_ref 191785 // FontSelection
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 954025 "get_ok_button"
	public return_type class_ref 141353 // Button
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 954153 "get_ok_button"
	const public return_type class_ref 141353 // Button
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 954281 "get_apply_button"
	public return_type class_ref 141353 // Button
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 954409 "get_apply_button"
	const public return_type class_ref 141353 // Button
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 954537 "get_cancel_button"
	public return_type class_ref 141353 // Button
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 954665 "get_cancel_button"
	const public return_type class_ref 141353 // Button
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 284585 "Frame"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/frame.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* A Gtk::Bin with a decorative frame and optional label.
 *
 * The Frame widget surrounds its single child with a decorative frame and
 * an optional label.  If present, the label is drawn in a gap in the top
 * side of the frame. The position of the label can be controlled with
 * set_label_align().
 *
 * @ingroup Widgets
 * @ingroup Containers
 "
      classrelation 171177 // <generalisation>
	relation 234537 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 171177 // <generalisation>
	  b parent class_ref 281385 // Bin
      end

      class 193449 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 284585 // Frame
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 234537 // <realization>
	  relation 171305 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 234537 // <realization>
	    b parent class_ref 284585 // Frame
	end
      end

      class 193705 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Frame_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 193833 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkFrame"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 193961 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkFrameClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 783017 "~Frame"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 234665 // frame_class_ (<directional composition>)
	relation 234665 *-->
	  a role_name "frame_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 234665 // frame_class_ (<directional composition>)
	  b parent class_ref 193705 // CppClassType
      end

      operation 783145 "Frame"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 284585 // Frame
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 783273 "operator ="
	private return_type class_ref 284585 // Frame
	nparams 1
	  param in name "" type class_ref 284585 // Frame
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 783401 "Frame"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 783529 "Frame"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkFrame"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 783657 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 783785 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 783913 "gobj"
	cpp_inline public explicit_return_type "GtkFrame"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkFrame*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 784041 "gobj"
	const cpp_inline public explicit_return_type "GtkFrame"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkFrame*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 784169 "Frame"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 784297 "Frame"
	public explicit_return_type ""
	nparams 1
	  param in name "label" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 784425 "set_label"
	public explicit_return_type "void"
	nparams 1
	  param in name "label" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO: Add a bool use_markup arg to set_label() as a convenience - it would have to use set_label_widget().
* Set the label to appear in the top edge of the frame.
   * Label alignment defaults to the upper left corner of the frame.
   "
      end

      operation 784553 "unset_label"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 784681 "get_label"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* If the frame's label widget is a Gtk::Label, return the
   * text in the label widget. (The frame will have a Gtk::Label
   * for the label widget if a non-<tt>0</tt> argument was passed
   * to new().)
   * @return The text in the label, or <tt>0</tt> if there
   * was no label widget or the lable widget was not
   * a Gtk::Label. This string is owned by GTK+ and
   * must not be modified or freed.
   "
      end

      operation 784809 "set_label_widget"
	public explicit_return_type "void"
	nparams 1
	  param inout name "label_widget" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Set the label widget for the frame. This is the widget that
   * will appear embedded in the top edge of the frame as a
   * title.
   * @param label_widget The new label widget.
   "
      end

      operation 784937 "get_label_widget"
	public return_type class_ref 130089 // Widget
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the label widget for the frame. See
   * set_label_widget().
   * @return The label widget, or <tt>0</tt> if there is none.
   "
      end

      operation 785065 "get_label_widget"
	const public return_type class_ref 130089 // Widget
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the label widget for the frame. See
   * set_label_widget().
   * @return The label widget, or <tt>0</tt> if there is none.
   "
      end

      operation 785193 "set_label_align"
	public explicit_return_type "void"
	nparams 2
	  param in name "xalign" explicit_type "float"
	    defaultvalue " 0.0"
	  param in name "yalign" explicit_type "float"
	    defaultvalue " 0.5"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Set the alignment of the Frame's label.
   * @param xalign The position of the label along the top edge of the widget.
   * A value of 0.0 represents left alignment; 1.0 represents right alignment.
   * The default value for a newly created Frame is 0.0.
   * @param yalign The y alignment of the label. Currently ignored.
   "
      end

      operation 785321 "set_label_align"
	public explicit_return_type "void"
	nparams 2
	  param in name "xalign" type class_ref 134697 // AlignmentEnum
	  param in name "yalign" type class_ref 134697 // AlignmentEnum
	    defaultvalue " Gtk::ALIGN_CENTER"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 785449 "get_label_align"
	const public explicit_return_type "void"
	nparams 2
	  param inout name "xalign" explicit_type "float"
	  param inout name "yalign" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the X and Y alignment of the frame's label. See
   * set_label_align().
   * @param xalign Location to store X alignment of frame's label, or <tt>0</tt>.
   * @param yalign Location to store X alignment of frame's label, or <tt>0</tt>.
   "
      end

      operation 341033 "set_shadow_type"
	public explicit_return_type "void"
	nparams 1
	  param in name "type" type class_ref 284329 // ShadowType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets shadow type of the frame.
   "
      end

      operation 785577 "get_shadow_type"
	const public return_type class_ref 284329 // ShadowType
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the shadow type of the frame. See
   * set_shadow_type().
   * @return The current shadow type of the frame.
   "
      end

      operation 785705 "property_label"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 785833 "property_label"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 341545 "property_label_xalign"
	public explicit_return_type "Glib::PropertyProxy<double>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 785961 "property_label_xalign"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<double>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 786089 "property_label_yalign"
	public explicit_return_type "Glib::PropertyProxy<double>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 341929 "property_label_yalign"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<double>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 342057 "property_shadow_type"
	public explicit_return_type "Glib::PropertyProxy<ShadowType>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 342185 "property_shadow_type"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<ShadowType>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 786217 "property_label_widget"
	public explicit_return_type "Glib::PropertyProxy<Widget*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 786345 "property_label_widget"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Widget*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 786473 "compute_child_allocation_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "allocation" explicit_type "Allocation"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 305065 "GammaCurve"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/curve.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* A subclass of Gtk::Curve for editing gamma curves.
 *
 * @ingroup Widgets
 "
      classrelation 244393 // <generalisation>
	relation 244393 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 244393 // <generalisation>
	  b parent class_ref 287913 // VBox
      end

      class 305193 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 305065 // GammaCurve
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 244521 // <realization>
	  relation 244521 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 244521 // <realization>
	    b parent class_ref 305065 // GammaCurve
	end
      end

      class 305321 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "GammaCurve_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 305449 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkGammaCurve"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 305577 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkGammaCurveClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 884009 "~GammaCurve"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 244649 // gammacurve_class_ (<directional composition>)
	relation 244649 *-->
	  a role_name "gammacurve_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 244649 // gammacurve_class_ (<directional composition>)
	  b parent class_ref 305321 // CppClassType
      end

      operation 884137 "GammaCurve"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 305065 // GammaCurve
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 884265 "operator ="
	private return_type class_ref 305065 // GammaCurve
	nparams 1
	  param in name "" type class_ref 305065 // GammaCurve
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 884393 "GammaCurve"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 884521 "GammaCurve"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkGammaCurve"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 884649 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 884777 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 884905 "gobj"
	cpp_inline public explicit_return_type "GtkGammaCurve"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkGammaCurve*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 885033 "gobj"
	const cpp_inline public explicit_return_type "GtkGammaCurve"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkGammaCurve*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 885161 "GammaCurve"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end
    end

    class 194217 "HandleBox"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/handlebox.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* A widget for detachable window portions.
 *
 * The Gtk::HandleBox widget allows a portion of a window to be \"torn off\".
 * It displays its child and a handle that the user can drag to tear off a separate window (the float window) containing the child widget. A thin ghost is drawn in the original location of the handlebox. By dragging the separate window back to its original location, it can be reattached.
 * When reattaching, the ghost and float window must be aligned along one of the edges, the snap edge. This can be specified by the application programmer explicitely, or GTK+ will pick a reasonable default based on the handle position.
 * To make detaching and reattaching the handlebox as minimally confusing as possible to the user, it is important to set the snap edge so that the snap edge does not move when the handlebox is deattached.
 * For instance, if the handlebox is packed at the bottom of a VBox, then when the handlebox is detached, the bottom edge of the handlebox's allocation will remain fixed as the height of the handlebox shrinks, so the snap edge should be set to GTK_POS_BOTTOM.
 *
 * @ingroup Widgets
 * @ingroup Containers
 "
      classrelation 249001 // <generalisation>
	relation 250025 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 249001 // <generalisation>
	  b parent class_ref 281385 // Bin
      end

      class 194345 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 194217 // HandleBox
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 249129 // <realization>
	  relation 171945 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 249129 // <realization>
	    b parent class_ref 194217 // HandleBox
	end
      end

      class 194601 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "HandleBox_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 194729 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkHandleBox"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 194857 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkHandleBoxClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 954793 "~HandleBox"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 249257 // handlebox_class_ (<directional composition>)
	relation 172329 *-->
	  a role_name "handlebox_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 249257 // handlebox_class_ (<directional composition>)
	  b parent class_ref 194601 // CppClassType
      end

      operation 954921 "HandleBox"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 194217 // HandleBox
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 955049 "operator ="
	private return_type class_ref 194217 // HandleBox
	nparams 1
	  param in name "" type class_ref 194217 // HandleBox
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 955177 "HandleBox"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 955305 "HandleBox"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkHandleBox"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 955433 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 955561 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 955689 "gobj"
	cpp_inline public explicit_return_type "GtkHandleBox"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkHandleBox*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 955817 "gobj"
	const cpp_inline public explicit_return_type "GtkHandleBox"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkHandleBox*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 955945 "on_child_attached"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "child" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 956073 "on_child_detached"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "child" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 956201 "HandleBox"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 956329 "set_shadow_type"
	public explicit_return_type "void"
	nparams 1
	  param in name "type" type class_ref 284329 // ShadowType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 956457 "get_shadow_type"
	const public return_type class_ref 284329 // ShadowType
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the type of shadow drawn around the handle box. See
   * set_shadow_type().
   * @return The type of shadow currently drawn around the handle box.
   "
      end

      operation 956585 "set_handle_position"
	public explicit_return_type "void"
	nparams 1
	  param in name "position" type class_ref 314793 // PositionType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 956713 "get_handle_position"
	const public return_type class_ref 314793 // PositionType
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the handle position of the handle box. See
   * set_handle_position().
   * @return The current handle position.
   "
      end

      operation 956841 "set_snap_edge"
	public explicit_return_type "void"
	nparams 1
	  param in name "edge" type class_ref 314793 // PositionType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 956969 "get_snap_edge"
	const public return_type class_ref 314793 // PositionType
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the edge used for determining reattachment of the handle box. See
   * set_snap_edge().
   * @return The edge used for determining reattachment, or (GtkPositionType)-1 if this
   * is determined (as per default) from the handle position.
   "
      end

      operation 957097 "signal_child_attached"
	public explicit_return_type "Glib::SignalProxy1< void,Widget* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 345129 "signal_child_detached"
	public explicit_return_type "Glib::SignalProxy1< void,Widget* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 957225 "get_bin_window"
	public explicit_return_type "Glib::RefPtr<Gdk::Window>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 957353 "get_bin_window"
	const public explicit_return_type "Glib::RefPtr<const Gdk::Window>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 957481 "get_float_window"
	public explicit_return_type "Glib::RefPtr<Gdk::Window>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 957609 "get_float_window"
	const public explicit_return_type "Glib::RefPtr<const Gdk::Window>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 957737 "is_child_detached"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 957865 "is_float_window_mapped"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 957993 "is_in_drag"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 958121 "shrinks_on_detach"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 958249 "property_shadow_type"
	public explicit_return_type "Glib::PropertyProxy<ShadowType>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "_WRAP_PROPERTY(\"shadow\", ShadowType); //deprecated.
* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 958377 "property_shadow_type"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<ShadowType>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 958505 "property_handle_position"
	public explicit_return_type "Glib::PropertyProxy<PositionType>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 958633 "property_handle_position"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<PositionType>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 958761 "property_snap_edge"
	public explicit_return_type "Glib::PropertyProxy<PositionType>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 958889 "property_snap_edge"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<PositionType>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end
    end

    class 140585 "HBox"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/box.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Horizontal Box for laying widgets in a horizontal row.
 *
 * You should create these objects, but it is more confortable to pass
 * around pointers of Gtk::Box. All the methods that do anything are in
 * class Gtk::Box and this allows you to later change the direction of the
 * box, when there's no dependencies to HBox and VBox classes.
 *
 * Use the Gtk::Box packing interface to determine the arrangement, spacing,
 * width, and alignment of Gtk::HBox children.
 *
 * All children are allocated the same height.
 *
 * @ingroup Widgets
 * @ingroup Containers
 "
      classrelation 235305 // <generalisation>
	relation 235305 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 235305 // <generalisation>
	  b parent class_ref 287145 // Box
      end

      class 140713 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 140585 // HBox
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 235433 // <realization>
	  relation 235433 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 235433 // <realization>
	    b parent class_ref 140585 // HBox
	end
      end

      class 140969 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "HBox_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 141097 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkHBox"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 141225 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkHBoxClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 802857 "~HBox"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 137257 // hbox_class_ (<directional composition>)
	relation 137257 *-->
	  a role_name "hbox_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 137257 // hbox_class_ (<directional composition>)
	  b parent class_ref 140969 // CppClassType
      end

      operation 802985 "HBox"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 140585 // HBox
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 803113 "operator ="
	private return_type class_ref 140585 // HBox
	nparams 1
	  param in name "" type class_ref 140585 // HBox
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 803241 "HBox"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 803369 "HBox"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkHBox"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 803497 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 803625 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 803753 "gobj"
	cpp_inline public explicit_return_type "GtkHBox"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkHBox*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 803881 "gobj"
	const cpp_inline public explicit_return_type "GtkHBox"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkHBox*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 804009 "HBox"
	public explicit_return_type ""
	nparams 2
	  param in name "homogeneous" explicit_type "bool"
	    defaultvalue " false"
	  param in name "spacing" explicit_type "int"
	    defaultvalue " 0"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::
* Creates a new horizontal box.
   * @param homogeneous Whether each widget in the HBox should have the same
   * width.  If set, a PACK_SHRINK argument to pack_start() or pack_end() is
   * ignored.
   * @param spacing Determines the space in pixels between child widgets.
   "
      end
    end

    class 144041 "HButtonBox"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/buttonbox.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* A container for arranging buttons horizontally.
 *
 * A button box should be used to provide a consistent layout of buttons
 * throughout your application. There is one default layout and a default spacing
 * value that are persistant across all Gtk::HButtonBox widgets. 
 *
 * The layout/spacing can then be altered by the programmer, or if desired,
 * by the user to alter the 'feel' of a program to a small degree. 
 *
 * @ingroup Widgets
 * @ingroup Containers
 "
      classrelation 236201 // <generalisation>
	relation 236201 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 236201 // <generalisation>
	  b parent class_ref 142377 // ButtonBox
      end

      class 144169 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 144041 // HButtonBox
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 139433 // <realization>
	  relation 139433 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 139433 // <realization>
	    b parent class_ref 144041 // HButtonBox
	end
      end

      class 144425 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "HButtonBox_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 144553 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkHButtonBox"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 144681 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkHButtonBoxClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 814761 "~HButtonBox"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 236329 // hbuttonbox_class_ (<directional composition>)
	relation 236329 *-->
	  a role_name "hbuttonbox_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 236329 // hbuttonbox_class_ (<directional composition>)
	  b parent class_ref 144425 // CppClassType
      end

      operation 814889 "HButtonBox"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 144041 // HButtonBox
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 815017 "operator ="
	private return_type class_ref 144041 // HButtonBox
	nparams 1
	  param in name "" type class_ref 144041 // HButtonBox
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 815145 "HButtonBox"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 815273 "HButtonBox"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkHButtonBox"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 815401 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 815529 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 815657 "gobj"
	cpp_inline public explicit_return_type "GtkHButtonBox"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkHButtonBox*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 815785 "gobj"
	const cpp_inline public explicit_return_type "GtkHButtonBox"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkHButtonBox*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 815913 "HButtonBox"
	public explicit_return_type ""
	nparams 2
	  param in name "layout" type class_ref 143145 // ButtonBoxStyle
	    defaultvalue " BUTTONBOX_DEFAULT_STYLE"
	  param in name "spacing" explicit_type "int"
	    defaultvalue " BUTTONBOX_DEFAULT"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end
    end

    class 215849 "HPaned"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/paned.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * The Gtk::HPaned widget is a container widget with two children arranged
 * horizontally. The division between the two panes is adjustable by the
 * user by dragging a handle. See Gtk::Paned for details. 
 *
 * @ingroup Widgets
 "
      classrelation 188329 // <generalisation>
	relation 188329 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 188329 // <generalisation>
	  b parent class_ref 215081 // Paned
      end

      class 215977 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 215849 // HPaned
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 188457 // <realization>
	  relation 188457 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 188457 // <realization>
	    b parent class_ref 215849 // HPaned
	end
      end

      class 216233 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "HPaned_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 216361 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkHPaned"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 216489 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkHPanedClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 430761 "~HPaned"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 188841 // hpaned_class_ (<directional composition>)
	relation 188841 *-->
	  a role_name "hpaned_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 188841 // hpaned_class_ (<directional composition>)
	  b parent class_ref 216233 // CppClassType
      end

      operation 430889 "HPaned"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 215849 // HPaned
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 431017 "operator ="
	private return_type class_ref 215849 // HPaned
	nparams 1
	  param in name "" type class_ref 215849 // HPaned
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 431145 "HPaned"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 431273 "HPaned"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkHPaned"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 431401 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 431529 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 431657 "gobj"
	cpp_inline public explicit_return_type "GtkHPaned"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkHPaned*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 431785 "gobj"
	const cpp_inline public explicit_return_type "GtkHPaned"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkHPaned*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 431913 "HPaned"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end
    end

    class 226985 "HRuler"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/ruler.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Horizontal Ruler
 *
 * @ingroup Widgets
 "
      classrelation 196905 // <generalisation>
	relation 196905 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 196905 // <generalisation>
	  b parent class_ref 225449 // Ruler
      end

      class 227113 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 226985 // HRuler
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 197033 // <realization>
	  relation 197033 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 197033 // <realization>
	    b parent class_ref 226985 // HRuler
	end
      end

      class 227369 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "HRuler_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 227497 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkHRuler"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 227625 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkHRulerClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 464937 "~HRuler"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 197417 // hruler_class_ (<directional composition>)
	relation 197417 *-->
	  a role_name "hruler_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 197417 // hruler_class_ (<directional composition>)
	  b parent class_ref 227369 // CppClassType
      end

      operation 465065 "HRuler"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 226985 // HRuler
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 465193 "operator ="
	private return_type class_ref 226985 // HRuler
	nparams 1
	  param in name "" type class_ref 226985 // HRuler
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 465321 "HRuler"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 465449 "HRuler"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkHRuler"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 465577 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 465705 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 465833 "gobj"
	cpp_inline public explicit_return_type "GtkHRuler"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkHRuler*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 465961 "gobj"
	const cpp_inline public explicit_return_type "GtkHRuler"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkHRuler*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 466089 "HRuler"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end
    end

    class 229289 "HScale"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/scale.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* A horizontal slider for selecting values.
 *
 * The Gtk::HScale widget is used to allow the user to select a value using a
 * horizontal slider. See the Gtk::Scale documentation for more information
 * on how to use a Gtk::HScale.
 * 
 * @ingroup Widgets
 "
      classrelation 198825 // <generalisation>
	relation 198825 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 198825 // <generalisation>
	  b parent class_ref 227753 // Scale
      end

      class 229417 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 229289 // HScale
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 198953 // <realization>
	  relation 198953 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 198953 // <realization>
	    b parent class_ref 229289 // HScale
	end
      end

      class 229673 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "HScale_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 229801 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkHScale"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 229929 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkHScaleClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 471465 "~HScale"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 199337 // hscale_class_ (<directional composition>)
	relation 199337 *-->
	  a role_name "hscale_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 199337 // hscale_class_ (<directional composition>)
	  b parent class_ref 229673 // CppClassType
      end

      operation 471593 "HScale"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 229289 // HScale
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 471721 "operator ="
	private return_type class_ref 229289 // HScale
	nparams 1
	  param in name "" type class_ref 229289 // HScale
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 471849 "HScale"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 471977 "HScale"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkHScale"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 472105 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 472233 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 472361 "gobj"
	cpp_inline public explicit_return_type "GtkHScale"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkHScale*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 472489 "gobj"
	const cpp_inline public explicit_return_type "GtkHScale"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkHScale*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 472617 "HScale"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 472745 "HScale"
	public explicit_return_type ""
	nparams 3
	  param in name "min" explicit_type "double"
	  param in name "max" explicit_type "double"
	  param in name "step" explicit_type "double"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throw}{
${body}}
"
	
	
	
	
	comment "*
  * Construct a HScale with the given minimum and maximum. The step size is the
  * distance the slider moves when the arrow keys are used to adjust the scale
  * value.
  "
      end

      operation 472873 "HScale"
	public explicit_return_type ""
	nparams 1
	  param inout name "adjustment" type class_ref 132521 // Adjustment
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end
    end

    class 282409 "HScrollbar"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/scrollbar.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* A horizontal scrollbar.
 *
 * The Gtk::HScrollbar widget is a widget arranged horizontally creating a
 * scrollbar. See Gtk::Scrollbar for details on scrollbars.
 *
 * A Gtk::Adjustment may may be passed to the constructor  to handle the
 * adjustment of the scrollbar. If not specified, one will be created for
 * you. See Gtk::Adjustment for details.
 *
 * @ingroup Widgets
 "
      classrelation 200745 // <generalisation>
	relation 200745 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 200745 // <generalisation>
	  b parent class_ref 230057 // Scrollbar
      end

      class 231465 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 282409 // HScrollbar
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 200873 // <realization>
	  relation 200873 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 200873 // <realization>
	    b parent class_ref 282409 // HScrollbar
	end
      end

      class 231721 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "HScrollbar_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 231849 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkHScrollbar"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 231977 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkHScrollbarClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 475561 "~HScrollbar"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 201257 // hscrollbar_class_ (<directional composition>)
	relation 201257 *-->
	  a role_name "hscrollbar_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 201257 // hscrollbar_class_ (<directional composition>)
	  b parent class_ref 231721 // CppClassType
      end

      operation 475689 "HScrollbar"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 282409 // HScrollbar
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 475817 "operator ="
	private return_type class_ref 282409 // HScrollbar
	nparams 1
	  param in name "" type class_ref 282409 // HScrollbar
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 475945 "HScrollbar"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 476073 "HScrollbar"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkHScrollbar"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 476201 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 476329 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 476457 "gobj"
	cpp_inline public explicit_return_type "GtkHScrollbar"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkHScrollbar*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 476585 "gobj"
	const cpp_inline public explicit_return_type "GtkHScrollbar"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkHScrollbar*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 476713 "HScrollbar"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 476841 "HScrollbar"
	public explicit_return_type ""
	nparams 1
	  param inout name "gtkadjustment" type class_ref 132521 // Adjustment
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end
    end

    class 234921 "HSeparator"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/separator.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Horizontal line widget.
 * Filler widget used to separate widgets with a visible line.
 * This widget has no window and receives no configuration events.
 * It should be considered a leaf widget.
 * @ingroup Widgets
 "
      classrelation 203689 // <generalisation>
	relation 203689 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 203689 // <generalisation>
	  b parent class_ref 233385 // Separator
      end

      class 235049 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 234921 // HSeparator
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 203817 // <realization>
	  relation 203817 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 203817 // <realization>
	    b parent class_ref 234921 // HSeparator
	end
      end

      class 235305 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "HSeparator_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 235433 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkHSeparator"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 235561 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkHSeparatorClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 488745 "~HSeparator"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 204201 // hseparator_class_ (<directional composition>)
	relation 204201 *-->
	  a role_name "hseparator_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 204201 // hseparator_class_ (<directional composition>)
	  b parent class_ref 235305 // CppClassType
      end

      operation 488873 "HSeparator"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 234921 // HSeparator
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 489001 "operator ="
	private return_type class_ref 234921 // HSeparator
	nparams 1
	  param in name "" type class_ref 234921 // HSeparator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 489129 "HSeparator"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 489257 "HSeparator"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkHSeparator"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 489385 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 489513 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 489641 "gobj"
	cpp_inline public explicit_return_type "GtkHSeparator"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkHSeparator*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 489769 "gobj"
	const cpp_inline public explicit_return_type "GtkHSeparator"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkHSeparator*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 489897 "HSeparator"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end
    end

    class 194985 "IconFactory"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/iconfactory.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk"
      class 195113 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 194985 // IconFactory
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 249513 // <realization>
	  relation 172585 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 249513 // <realization>
	    b parent class_ref 194985 // IconFactory
	end
      end

      class 195369 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "IconFactory_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 195497 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkIconFactory"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 195625 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkIconFactoryClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 172969 // iconfactory_class_ (<directional composition>)
	relation 172969 *-->
	  a role_name "iconfactory_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 172969 // iconfactory_class_ (<directional composition>)
	  b parent class_ref 195369 // CppClassType
      end

      operation 959017 "IconFactory"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 194985 // IconFactory
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 959145 "operator ="
	private return_type class_ref 194985 // IconFactory
	nparams 1
	  param in name "" type class_ref 194985 // IconFactory
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 959273 "IconFactory"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 959401 "IconFactory"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkIconFactory"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 959529 "~IconFactory"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 959657 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 959785 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 959913 "gobj"
	cpp_inline public explicit_return_type "GtkIconFactory"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkIconFactory*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 960041 "gobj"
	const cpp_inline public explicit_return_type "GtkIconFactory"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkIconFactory*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 960169 "gobj_copy"
	public explicit_return_type "GtkIconFactory"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs."
      end

      operation 960297 "IconFactory"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 960425 "create"
	class_operation public explicit_return_type "Glib::RefPtr<IconFactory>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 960553 "add"
	public explicit_return_type "void"
	nparams 2
	  param in name "stock_id" explicit_type "Gtk::StockID"
	  param in name "icon_set" type class_ref 195753 // IconSet
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Adds the given @a icon_set  to the icon factory, under the name
   *  @a stock_id .  @a stock_id  should be namespaced for your application,
   * e.g. \"myapp-whatever-icon\".  Normally applications create a
   * Gtk::IconFactory, then add it to the list of default factories with
   * add_default(). Then they pass the @a stock_id  to
   * widgets such as Gtk::Image to display the icon. Themes can provide
   * an icon with the same name (such as \"myapp-whatever-icon\") to
   * override your application's default icons. If an icon already
   * existed in @a factory  for @a stock_id , it is unreferenced and replaced
   * with the new @a icon_set .
   * @param stock_id Icon name.
   * @param icon_set Icon set.
   "
      end

      operation 960681 "add_default"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Adds an icon factory to the list of icon factories searched by
   * Gtk::Style::lookup_icon_set(). This means that, for example,
   * Gtk::Image::new_from_stock() will be able to find icons in @a factory .
   * There will normally be an icon factory added for each library or
   * application that comes with icons. The default icon factories
   * can be overridden by themes.
   "
      end

      operation 960809 "remove_default"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Removes an icon factory from the list of default icon
   * factories. Not normally used; you might use it for a library that
   * can be unloaded or shut down.
   "
      end
    end

    class 195881 "IconInfo"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/iconinfo.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 196009 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 195881 // IconInfo
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 249769 // <realization>
	  relation 173097 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 249769 // <realization>
	    b parent class_ref 195881 // IconInfo
	end
      end

      class 196137 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkIconInfo"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 960937 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 961065 "IconInfo"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 961193 "IconInfo"
	public explicit_return_type ""
	nparams 2
	  param inout name "gobject" explicit_type "GtkIconInfo"
	  param in name "make_a_copy" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 961321 "IconInfo"
	public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 195881 // IconInfo
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 961449 "operator ="
	public return_type class_ref 195881 // IconInfo
	nparams 1
	  param in name "other" type class_ref 195881 // IconInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 961577 "~IconInfo"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 961705 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 195881 // IconInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 961833 "gobj"
	cpp_inline public explicit_return_type "GtkIconInfo"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return gobject_; };
"
	
	
	
	
	comment "/Provides access to the underlying C instance."
      end

      operation 961961 "gobj"
	const cpp_inline public explicit_return_type "GtkIconInfo"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return gobject_; };
"
	
	
	
	
	comment "/Provides access to the underlying C instance."
      end

      operation 962089 "gobj_copy"
	const public explicit_return_type "GtkIconInfo"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Provides access to the underlying C instance. The caller is responsible for freeing it. Use when directly setting fields in structs."
      end

      attribute 197801 "gobject_"
	protected explicit_type "GtkIconInfo"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 350249 "get_base_size"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the base size for the icon. The base size
   * is a size for the icon that was specified by
   * the icon theme creator. This may be different
   * than the actual size of image; an example of
   * this is small emblem icons that can be attached
   * to a larger icon. These icons will be given
   * the same base size as the larger icons to which
   * they are attached.
   * @return The base size, or 0, if no base
   * size is known for the icon.
   * 
   * Since: 2.4.
   "
      end

      operation 350377 "get_filename"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the filename for the icon. If the
   * Gtk::ICON_LOOKUP_USE_BUILTIN flag was passed
   * to Gtk::IconTheme::lookup_icon(), there may be
   * no filename if a builtin icon is returned; in this
   * case, you should use gtk_icon_info_get_builtin_pixbuf().
   * @return The filename for the icon, or <tt>0</tt>
   * if gtk_icon_info_get_builtin_pixbuf() should
   * be used instead.
   "
      end

      operation 350505 "get_builtin_pixbuf"
	public explicit_return_type "Glib::RefPtr<Gdk::Pixbuf>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the built-in image for this icon, if any. To allow
   * GTK+ to use built in icon images, you must pass the
   * Gtk::ICON_LOOKUP_USE_BUILTIN to
   * Gtk::IconTheme::lookup_icon().
   * @return The built-in image pixbuf, or <tt>0</tt>.
   * The returned image must not be modified.
   "
      end

      operation 350633 "get_builtin_pixbuf"
	const public explicit_return_type "Glib::RefPtr<const Gdk::Pixbuf>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the built-in image for this icon, if any. To allow
   * GTK+ to use built in icon images, you must pass the
   * Gtk::ICON_LOOKUP_USE_BUILTIN to
   * Gtk::IconTheme::lookup_icon().
   * @return The built-in image pixbuf, or <tt>0</tt>.
   * The returned image must not be modified.
   "
      end

      operation 350761 "load_icon"
	const public explicit_return_type "Glib::RefPtr<Gdk::Pixbuf>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Renders an icon previously looked up in an icon theme using
   * Gtk::IconTheme::lookup_icon(); the size will be based on the size
   * pssed to Gtk::IconTheme::lookup_icon(). Note that the resulting
   * pixbuf may not be exactly this size; an icon theme may have icons
   * that differ slightly from their nominal sizes, and in addition GTK+
   * will avoid scaling icons that it considers sufficiently close to the
   * requested size. (This maintains sharpness.)
   * @return The rendered icon; this may be a newly created icon
   * or a new reference to an internal icon, so you must not modify
   * the icon. Use Glib::object_unref() to release your reference to the
   * icon.
   * 
   * Since: 2.4.
   "
      end

      operation 350889 "set_raw_coordinates"
	public explicit_return_type "void"
	nparams 1
	  param in name "raw_coordinates" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets whether the coordinates returned by gtk_icon_info_get_embedded_rect()
   * and gtk_icon_info_get_attach_points() should be returned in their
   * original form as specified in the icon theme, instead of scaled
   * appropriately for the pixbuf returned by gtk_icon_info_load_icon().
   * 
   * Raw coordinates are somewhat strange; they are specified to be with
   * respect to the unscaled pixmap for PNG and XPM icons, but for SVG
   * icons, they are in a 1000x1000 coordinate space that is scaled
   * to the final size of the icon.  You can determine if the icon is an SVG
   * icon by using gtk_icon_info_get_filename(), and seeing if it is non-<tt>0</tt>
   * and ends in '.svg'.
   * 
   * This function is provided primarily to allow compatibility wrappers
   * for older API's, and is not expected to be useful for applications.
   * 
   * Since: 2.4
   * @param raw_coordinates Whether the coordinates of embedded rectangles
   * and attached points should be returned in their original
   * (unscaled) form.
   "
      end

      operation 351017 "get_embedded_rect"
	const public explicit_return_type "bool"
	nparams 1
	  param inout name "rectangle" explicit_type "Gdk::Rectangle"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the coordinates of a rectangle within the icon
   * that can be used for display of information such
   * as a preview of the contents of a text file.
   * See gtk_icon_info_set_raw_coordinates() for further
   * information about the coordinate system.
   * @param rectangle Gdk::Rectangle in which to store embedded
   * rectangle coordinates; coordinates are only stored
   * when this function returns <tt>true</tt>.
   * @return <tt>true</tt> if the icon has an embedded rectangle
   * 
   * Since: 2.4.
   "
      end

      operation 351145 "get_attach_points"
	const public explicit_return_type "bool"
	nparams 1
	  param inout name "points" explicit_type "Glib::ArrayHandle<Gdk::Point>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 351273 "get_display_name"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the display name for an icon. A display name is a
   * string to be used in place of the icon name in a user
   * visible context like a list of icons.
   * @return The display name for the icon or <tt>0</tt>, if
   * the icon doesn't have a specified display name. This value
   * is owned @a icon_info  and must not be modified or free.
   * 
   * Since: 2.4.
   "
      end
    end

    class 197673 "IconLookupFlags"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* @addtogroup gtkmmEnums Enums and Flags 
*
 * @ingroup gtkmmEnums
 * @par Bitwise operators:
 * <tt>%IconLookupFlags operator|(IconLookupFlags, IconLookupFlags)</tt><br>
 * <tt>%IconLookupFlags operator&(IconLookupFlags, IconLookupFlags)</tt><br>
 * <tt>%IconLookupFlags operator^(IconLookupFlags, IconLookupFlags)</tt><br>
 * <tt>%IconLookupFlags operator~(IconLookupFlags)</tt><br>
 * <tt>%IconLookupFlags& operator|=(IconLookupFlags&, IconLookupFlags)</tt><br>
 * <tt>%IconLookupFlags& operator&=(IconLookupFlags&, IconLookupFlags)</tt><br>
 * <tt>%IconLookupFlags& operator^=(IconLookupFlags&, IconLookupFlags)</tt><br>
 "
      attribute 198057 "ICON_LOOKUP_NO_SVG"
	public explicit_type ""
	init_value " 1 << 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 198185 "ICON_LOOKUP_FORCE_SVG"
	public explicit_type ""
	init_value " 1 << 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 198313 "ICON_LOOKUP_USE_BUILTIN"
	public explicit_type ""
	init_value " 1 << 2
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 195753 "IconSet"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/iconset.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 196521 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 195753 // IconSet
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 249641 // <realization>
	  relation 173353 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 249641 // <realization>
	    b parent class_ref 195753 // IconSet
	end
      end

      class 196649 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkIconSet"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 351401 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 351529 "IconSet"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 351657 "IconSet"
	public explicit_return_type ""
	nparams 2
	  param inout name "gobject" explicit_type "GtkIconSet"
	  param in name "make_a_copy" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 351785 "IconSet"
	public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 195753 // IconSet
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 351913 "operator ="
	public return_type class_ref 195753 // IconSet
	nparams 1
	  param in name "other" type class_ref 195753 // IconSet
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 352041 "~IconSet"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 352169 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 195753 // IconSet
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 352297 "gobj"
	cpp_inline public explicit_return_type "GtkIconSet"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return gobject_; };
"
	
	
	
	
	comment "/Provides access to the underlying C instance."
      end

      operation 352425 "gobj"
	const cpp_inline public explicit_return_type "GtkIconSet"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return gobject_; };
"
	
	
	
	
	comment "/Provides access to the underlying C instance."
      end

      operation 352553 "gobj_copy"
	const public explicit_return_type "GtkIconSet"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Provides access to the underlying C instance. The caller is responsible for freeing it. Use when directly setting fields in structs."
      end

      attribute 197673 "gobject_"
	protected explicit_type "GtkIconSet"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 352681 "IconSet"
	public explicit_return_type ""
	nparams 1
	  param in name "pixbuf" explicit_type "Glib::RefPtr<Gdk::Pixbuf>"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 352809 "copy"
	const public return_type class_ref 195753 // IconSet
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Copies @a icon_set  by value.
   * @return A new Gtk::IconSet identical to the first.
   "
      end

      operation 352937 "render_icon"
	public explicit_return_type "Glib::RefPtr<Gdk::Pixbuf>"
	nparams 6
	  param in name "style" explicit_type "Glib::RefPtr<Style>"
	  param in name "direction" type class_ref 280233 // TextDirection
	  param in name "state" explicit_type "Gtk::StateType"
	  param in name "size" type class_ref 131241 // IconSize
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} & ${p4}, const ${t5} & ${p5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} & ${p4}, const ${t5} & ${p5}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Note that we use Gtk::StateType here instead of StateType, because there is an Atk::StateType too, and doxygen gets confused.
* Renders an icon using Gtk::Style::render_icon(). In most cases,
   * Gtk::Widget::render_icon() is better, since it automatically provides
   * most of the arguments from the current widget settings.  This
   * function never returns <tt>0</tt>; if the icon can't be rendered
   * (perhaps because an image file fails to load), a default \"missing
   * image\" icon will be returned instead.
   * @param style A Gtk::Style associated with @a widget , or <tt>0</tt>.
   * @param direction Text direction.
   * @param state Widget state.
   * @param size Icon size.
   * @param widget Widget that will display the icon, or <tt>0</tt>.
   * The only use that is typically made of this
   * is to determine the appropriate Gdk::Screen.
   * @param detail Detail to pass to the theme engine, or <tt>0</tt>.
   * Note that passing a detail of anything but <tt>0</tt>
   * will disable caching.
   * @return A Gdk::Pixbuf to be displayed.
   "
      end

      operation 353065 "add_source"
	public explicit_return_type "void"
	nparams 1
	  param in name "source" type class_ref 196777 // IconSource
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Icon sets have a list of Gtk::IconSource, which they use as base
   * icons for rendering icons in different states and sizes. Icons are
   * scaled, made to look insensitive, etc. in
   * gtk_icon_set_render_icon(), but Gtk::IconSet needs base images to
   * work with. The base images and when to use them are described by
   * a Gtk::IconSource.
   * 
   * This function copies @a source , so you can reuse the same source immediately
   * without affecting the icon set.
   * 
   * An example of when you'd use this function: a web browser's \"Back
   * to Previous Page\" icon might point in a different direction in
   * Hebrew and in English; it might look different when insensitive;
   * and it might change size depending on toolbar mode (small/large
   * icons). So a single icon set would contain all those variants of
   * the icon, and you might add a separate source for each one.
   * 
   * You should nearly always add a \"default\" icon source with all
   * fields wildcarded, which will be used as a fallback if no more
   * specific source matches. Gtk::IconSet always prefers more specific
   * icon sources to more generic icon sources. The order in which you
   * add the sources to the icon set does not matter.
   * 
   * gtk_icon_set_new_from_pixbuf() creates a new icon set with a
   * default icon source based on the given pixbuf.
   * @param source A Gtk::IconSource.
   "
      end

      operation 353193 "get_sizes"
	const public explicit_return_type "Glib::ArrayHandle<IconSize>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 353321 "lookup_default"
	class_operation public return_type class_ref 195753 // IconSet
	nparams 1
	  param in name "stock_id" explicit_type "Gtk::StockID"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 131241 "IconSize"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/iconsize.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " We use a class to implement the GtkIconSize enum, because you can register
 * new \"enum\" values.  The strict type rules of C++ don't allow using an enum
 * like that.  Gtk::BuiltinIconSize is the actual GtkIconSize wrapper enum.
 
*
 * Represents registered icon sizes.
 * You can also use a Gtk::BuiltinIconSize instead of an IconSize.
 "
      attribute 172201 "size_"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 772137 "IconSize"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : size_ (0)    {};
"
	
	
	
	
      end

      operation 772265 "IconSize"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "size" type class_ref 281001 // BuiltinIconSize
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${)}${volatile}${throw} : size_ (size) {};
"
	
	
	
	
      end

      operation 772393 "IconSize"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "size" explicit_type "int"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} ${p0}${)}${volatile}${throw} : size_ (size) {};
"
	
	
	
	
	comment " Behave like an ordinary enum."
      end

      operation 772521 "operator int"
	const cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${name}${(}${)}${const}${volatile}${throw}${abstract} { return size_; };
"
	
	
	
	
      end

      operation 772649 "lookup"
	class_operation public explicit_return_type "bool"
	nparams 3
	  param in name "size" type class_ref 131241 // IconSize
	  param inout name "width" explicit_type "int"
	  param inout name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} & ${p1}, ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} & ${p1}, ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " These static methods are implement in iconfactory.ccg."
      end

      operation 772777 "register_new"
	class_operation public return_type class_ref 131241 // IconSize
	nparams 3
	  param in name "name" explicit_type "Glib::ustring"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 772905 "register_alias"
	class_operation public explicit_return_type "void"
	nparams 2
	  param in name "alias" explicit_type "Glib::ustring"
	  param in name "target" type class_ref 131241 // IconSize
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 773033 "from_name"
	class_operation public return_type class_ref 131241 // IconSize
	nparams 1
	  param in name "name" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 773161 "get_name"
	class_operation public explicit_return_type "Glib::ustring"
	nparams 1
	  param in name "size" type class_ref 131241 // IconSize
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 196777 "IconSource"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/iconsource.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 197161 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 196777 // IconSource
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 173609 // <realization>
	  relation 173609 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 173609 // <realization>
	    b parent class_ref 196777 // IconSource
	end
      end

      class 197289 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkIconSource"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 353449 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 353577 "IconSource"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 353705 "IconSource"
	public explicit_return_type ""
	nparams 2
	  param inout name "gobject" explicit_type "GtkIconSource"
	  param in name "make_a_copy" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 353833 "IconSource"
	public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 196777 // IconSource
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 353961 "operator ="
	public return_type class_ref 196777 // IconSource
	nparams 1
	  param in name "other" type class_ref 196777 // IconSource
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 354089 "~IconSource"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 354217 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 196777 // IconSource
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 354345 "gobj"
	cpp_inline public explicit_return_type "GtkIconSource"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return gobject_; };
"
	
	
	
	
	comment "/Provides access to the underlying C instance."
      end

      operation 354473 "gobj"
	const cpp_inline public explicit_return_type "GtkIconSource"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return gobject_; };
"
	
	
	
	
	comment "/Provides access to the underlying C instance."
      end

      operation 354601 "gobj_copy"
	const public explicit_return_type "GtkIconSource"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Provides access to the underlying C instance. The caller is responsible for freeing it. Use when directly setting fields in structs."
      end

      attribute 197929 "gobject_"
	protected explicit_type "GtkIconSource"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 354729 "set_filename"
	public explicit_return_type "void"
	nparams 1
	  param in name "filename" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the name of an image file to use as a base image when creating
   * icon variants for Gtk::IconSet. The filename must be absolute.
   * @param filename Image file to use.
   "
      end

      operation 354857 "set_pixbuf"
	public explicit_return_type "void"
	nparams 1
	  param in name "pixbuf" explicit_type "Glib::RefPtr<Gdk::Pixbuf>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets a pixbuf to use as a base image when creating icon variants
   * for Gtk::IconSet.
   * @param pixbuf Pixbuf to use as a source.
   "
      end

      operation 354985 "get_filename"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the source filename, or <tt>0</tt> if none is set. The
   * filename is not a copy, and should not be modified or expected to
   * persist beyond the lifetime of the icon source.
   * @return Image filename. This string must not be modified
   * or freed.
   "
      end

      operation 355113 "get_pixbuf"
	public explicit_return_type "Glib::RefPtr<Gdk::Pixbuf>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the source pixbuf, or <tt>0</tt> if none is set.
   * In addition, if a filename source is in use, this
   * function in some cases will return the pixbuf from
   * loaded from the filename. This is, for example, true
   * for the GtkIconSource passed to the GtkStyle::render_icon()
   * virtual function. The reference count on the pixbuf is
   * not incremented.
   * @return Source pixbuf.
   "
      end

      operation 355241 "get_pixbuf"
	const public explicit_return_type "Glib::RefPtr<const Gdk::Pixbuf>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the source pixbuf, or <tt>0</tt> if none is set.
   * In addition, if a filename source is in use, this
   * function in some cases will return the pixbuf from
   * loaded from the filename. This is, for example, true
   * for the GtkIconSource passed to the GtkStyle::render_icon()
   * virtual function. The reference count on the pixbuf is
   * not incremented.
   * @return Source pixbuf.
   "
      end

      operation 355369 "set_direction_wildcarded"
	public explicit_return_type "void"
	nparams 1
	  param in name "setting" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* If the text direction is wildcarded, this source can be used
   * as the base image for an icon in any Gtk::TextDirection.
   * If the text direction is not wildcarded, then the
   * text direction the icon source applies to should be set
   * with gtk_icon_source_set_direction(), and the icon source
   * will only be used with that text direction.
   * 
   * Gtk::IconSet prefers non-wildcarded sources (exact matches) over
   * wildcarded sources, and will use an exact match when possible.
   * @param setting <tt>true</tt> to wildcard the text direction.
   "
      end

      operation 355497 "set_state_wildcarded"
	public explicit_return_type "void"
	nparams 1
	  param in name "setting" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* If the widget state is wildcarded, this source can be used as the
   * base image for an icon in any Gtk::StateType.  If the widget state
   * is not wildcarded, then the state the source applies to should be
   * set with gtk_icon_source_set_state() and the icon source will
   * only be used with that specific state.
   * 
   * Gtk::IconSet prefers non-wildcarded sources (exact matches) over
   * wildcarded sources, and will use an exact match when possible.
   * 
   * Gtk::IconSet will normally transform wildcarded source images to
   * produce an appropriate icon for a given state, for example
   * lightening an image on prelight, but will not modify source images
   * that match exactly.
   * @param setting <tt>true</tt> to wildcard the widget state.
   "
      end

      operation 355625 "set_size_wildcarded"
	public explicit_return_type "void"
	nparams 1
	  param in name "setting" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* If the icon size is wildcarded, this source can be used as the base
   * image for an icon of any size.  If the size is not wildcarded, then
   * the size the source applies to should be set with
   * gtk_icon_source_set_size() and the icon source will only be used
   * with that specific size.
   * 
   * Gtk::IconSet prefers non-wildcarded sources (exact matches) over
   * wildcarded sources, and will use an exact match when possible.
   * 
   * Gtk::IconSet will normally scale wildcarded source images to produce
   * an appropriate icon at a given size, but will not change the size
   * of source images that match exactly.
   * @param setting <tt>true</tt> to wildcard the widget state.
   "
      end

      operation 355753 "get_size_wildcarded"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the value set by gtk_icon_source_set_size_wildcarded().
   * @return <tt>true</tt> if this icon source is a base for any icon size variant.
   "
      end

      operation 355881 "get_state_wildcarded"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the value set by gtk_icon_source_set_state_wildcarded().
   * @return <tt>true</tt> if this icon source is a base for any widget state variant.
   "
      end

      operation 356009 "get_direction_wildcarded"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the value set by gtk_icon_source_set_direction_wildcarded().
   * @return <tt>true</tt> if this icon source is a base for any text direction variant.
   "
      end

      operation 356137 "set_direction"
	public explicit_return_type "void"
	nparams 1
	  param in name "direction" type class_ref 280233 // TextDirection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the text direction this icon source is intended to be used
   * with.
   * 
   * Setting the text direction on an icon source makes no difference
   * if the text direction is wildcarded. Therefore, you should usually
   * call gtk_icon_source_set_direction_wildcarded() to un-wildcard it
   * in addition to calling this function.
   * @param direction Text direction this source applies to.
   "
      end

      operation 356265 "set_state"
	public explicit_return_type "void"
	nparams 1
	  param in name "state" explicit_type "Gtk::StateType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the widget state this icon source is intended to be used
   * with.
   * 
   * Setting the widget state on an icon source makes no difference
   * if the state is wildcarded. Therefore, you should usually
   * call gtk_icon_source_set_state_wildcarded() to un-wildcard it
   * in addition to calling this function.
   * @param state Widget state this source applies to.
   "
      end

      operation 356393 "set_size"
	public explicit_return_type "void"
	nparams 1
	  param in name "size" type class_ref 131241 // IconSize
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the icon size this icon source is intended to be used
   * with.
   * 
   * Setting the icon size on an icon source makes no difference
   * if the size is wildcarded. Therefore, you should usually
   * call gtk_icon_source_set_size_wildcarded() to un-wildcard it
   * in addition to calling this function.
   * @param size Icon size this source applies to.
   "
      end

      operation 356521 "get_direction"
	const public return_type class_ref 280233 // TextDirection
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Obtains the text direction this icon source applies to. The return
   * value is only useful/meaningful if the text direction is <em>not</em> 
   * wildcarded.
   * @return Text direction this source matches.
   "
      end

      operation 356649 "get_state"
	const public explicit_return_type "Gtk::StateType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Obtains the widget state this icon source applies to. The return
   * value is only useful/meaningful if the widget state is <em>not</em>
   * wildcarded.
   * @return Widget state this source matches.
   "
      end

      operation 356777 "get_size"
	const public return_type class_ref 131241 // IconSize
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Obtains the icon size this source applies to. The return value
   * is only useful/meaningful if the icon size is <em>not</em> wildcarded.
   * @return Icon size this source matches.
   "
      end

      operation 356905 "set_icon_name"
	public explicit_return_type "void"
	nparams 1
	  param in name "icon_name" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the name of an icon to look up in the current icon theme
   * to use as a base image when creating icon variants for Gtk::IconSet.
   * @param icon_name Name of icon to use.
   "
      end

      operation 357033 "get_icon_name"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the source icon name, or <tt>0</tt> if none is set. The
   * icon_name is not a copy, and should not be modified or expected to
   * persist beyond the lifetime of the icon source.
   * @return Icon name. This string must not be modified or freed.
   "
      end
    end

    class 197929 "IconTheme"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/icontheme.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 198057 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 197929 // IconTheme
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 173993 // <realization>
	  relation 173993 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 173993 // <realization>
	    b parent class_ref 197929 // IconTheme
	end
      end

      class 198313 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "IconTheme_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 198441 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkIconTheme"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 198569 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkIconThemeClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 174377 // icontheme_class_ (<directional composition>)
	relation 174377 *-->
	  a role_name "icontheme_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 174377 // icontheme_class_ (<directional composition>)
	  b parent class_ref 198313 // CppClassType
      end

      operation 357161 "IconTheme"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 197929 // IconTheme
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 357289 "operator ="
	private return_type class_ref 197929 // IconTheme
	nparams 1
	  param in name "" type class_ref 197929 // IconTheme
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 357417 "IconTheme"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 357545 "IconTheme"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkIconTheme"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 357673 "~IconTheme"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 357801 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 357929 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 358057 "gobj"
	cpp_inline public explicit_return_type "GtkIconTheme"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkIconTheme*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 358185 "gobj"
	const cpp_inline public explicit_return_type "GtkIconTheme"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkIconTheme*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 358313 "gobj_copy"
	public explicit_return_type "GtkIconTheme"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs."
      end

      operation 358441 "IconTheme"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 358569 "create"
	class_operation public explicit_return_type "Glib::RefPtr<IconTheme>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 358697 "get_default"
	class_operation public explicit_return_type "Glib::RefPtr<IconTheme>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the icon theme for the default screen. See
   * get_for_screen().
   * @return A unique Gtk::IconTheme associated with
   * the default screen. This icon theme is associated with
   * the screen and can be used as long as the screen
   * is open.
   * 
   * Since: 2.4.
   "
      end

      operation 358825 "get_for_screen"
	class_operation public explicit_return_type "Glib::RefPtr<IconTheme>"
	nparams 1
	  param in name "screen" explicit_type "Glib::RefPtr<Gdk::Screen>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the icon theme object associated with @a screen ; if this
   * function has not previously been called for the given
   * screen, a new icon theme object will be created and
   * associated with the screen. Icon theme objects are
   * fairly expensive to create, so using this function
   * is usually a better choice than calling than new()
   * and setting the screen yourself; by using this function
   * a single icon theme object will be shared between users.
   * @param screen A Gdk::Screen.
   * @return A unique Gtk::IconTheme associated with
   * the given screen. This icon theme is associated with
   * the screen and can be used as long as the screen
   * is open.
   * 
   * Since: 2.4.
   "
      end

      operation 358953 "set_screen"
	public explicit_return_type "void"
	nparams 1
	  param in name "screen" explicit_type "Glib::RefPtr<Gdk::Screen>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the screen for an icon theme; the screen is used
   * to track the user's currently configured icon theme,
   * which might be different for different screens.
   * 
   * Since: 2.4
   * @param screen A Gdk::Screen.
   "
      end

      operation 359081 "set_search_path"
	public explicit_return_type "void"
	nparams 1
	  param in name "path" explicit_type "Glib::ArrayHandle<Glib::ustring>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 359209 "get_search_path"
	const public explicit_return_type "Glib::ArrayHandle<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 359337 "append_search_path"
	public explicit_return_type "void"
	nparams 1
	  param in name "path" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Appends a directory to the search path. See set_search_path(). 
   * 
   * Since: 2.4
   * @param path Directory name to append to the icon path.
   "
      end

      operation 359465 "prepend_search_path"
	public explicit_return_type "void"
	nparams 1
	  param in name "path" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Prepends a directory to the search path. See set_search_path().
   * 
   * Since: 2.4
   * @param path Directory name to prepend to the icon path.
   "
      end

      operation 359593 "set_custom_theme"
	public explicit_return_type "void"
	nparams 1
	  param in name "theme_name" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the name of the icon theme that the Gtk::IconTheme object uses
   * overriding system configuration. This function cannot be called
   * on the icon theme objects returned from get_default()
   * and get_default().
   * 
   * Since: 2.4
   * @param theme_name Name of icon theme to use instead of configured theme.
   "
      end

      operation 359721 "has_icon"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "icon_name" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Checks whether an icon theme includes an icon
   * for a particular name.
   * @param icon_name The name of an icon.
   * @return <tt>true</tt> if @a icon_theme  includes an
   * icon for @a icon_name .
   * 
   * Since: 2.4.
   "
      end

      operation 359849 "lookup_icon"
	const public return_type class_ref 195881 // IconInfo
	nparams 3
	  param in name "icon_name" explicit_type "Glib::ustring"
	  param in name "size" explicit_type "int"
	  param in name "flags" type class_ref 197673 // IconLookupFlags
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Looks up a named icon and returns a structure containing
   * information such as the filename of the icon. The icon
   * can then be rendered into a pixbuf using
   * gtk_icon_info_load_icon(). (load_icon()
   * combines these two steps if all you need is the pixbuf.)
   * @param icon_name The name of the icon to lookup.
   * @param size Desired icon size.
   * @param flags Flags modifying the behavior of the icon lookup.
   * @return A Gtk::IconInfo structure containing information
   * about the icon, or <tt>0</tt> if the icon wasn't found. Free with
   * gtk_icon_info_free()
   * 
   * Since: 2.4.
   "
      end

      operation 359977 "load_icon"
	const public explicit_return_type "Glib::RefPtr<Gdk::Pixbuf>"
	nparams 3
	  param in name "icon_name" explicit_type "Glib::ustring"
	  param in name "size" explicit_type "int"
	  param in name "flags" type class_ref 197673 // IconLookupFlags
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Looks up an icon in an icon theme, scales it to the given size
   * and renders it into a pixbuf. This is a convenience function;
   * if more details about the icon are needed, use
   * lookup_icon() followed by gtk_icon_info_load_icon().
   * @param icon_name The name of the icon to lookup.
   * @param size The desired icon size. The resulting icon may not be exactly this size; see gtk_icon_info_load_icon().
   * @param flags Flags modifying the behavior of the icon lookup.
   * @return The rendered icon; this may be a newly created icon
   * or a new reference to an internal icon, so you must not modify
   * the icon. Use Glib::object_unref() to release your reference to the
   * icon. <tt>0</tt> if the icon isn't found.
   * 
   * Since: 2.4.
   "
      end

      operation 360105 "list_icons"
	const public explicit_return_type "Glib::ListHandle<Glib::ustring>"
	nparams 1
	  param in name "context" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Lists the icons in the current icon theme. Only a subset
   * of the icons can be listed by providing a context string.
   * The set of values for the context string is system dependent,
   * but will typically include such values as 'apps' and
   * 'mimetypes'.
   * @param context A string identifying a particular type of icon,
   * or <tt>0</tt> to list all icons.
   * @return A G::List list holding the names of all the
   * icons in the theme. You must first free each element
   * in the list with Glib::free(), then free the list itself
   * with Glib::list_free().
   * 
   * Since: 2.4.
   "
      end

      operation 360233 "get_example_icon_name"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the name of an icon that is representative of the
   * current theme (for instance, to use when presenting
   * a list of themes to the user.)
   * @return The name of an example icon or <tt>0</tt>.
   * Free with Glib::free().
   * 
   * Since: 2.4.
   "
      end

      operation 360361 "rescan_if_needed"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Checks to see if the icon theme has changed; if it has, any
   * currently cached information is discarded and will be reloaded
   * next time @a icon_theme  is accessed.
   * @return <tt>true</tt> if the icon theme has changed and needed
   * to be reloaded.
   * 
   * Since: 2.4.
   "
      end

      operation 360489 "add_builtin_icon"
	class_operation public explicit_return_type "void"
	nparams 3
	  param in name "icon_name" explicit_type "Glib::ustring"
	  param in name "size" explicit_type "int"
	  param in name "pixbuf" explicit_type "Glib::RefPtr<Gdk::Pixbuf>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Registers a built-in icon for icon theme lookups. The idea
   * of built-in icons is to allow an application or library
   * that uses themed icons to function requiring files to
   * be present in the file system. For instance, the default
   * images for all of GTK+'s stock icons are registered
   * as built-icons.
   * 
   * In general, if you use add_builtin_icon()
   * you should also install the icon in the icon theme, so
   * that the icon is generally available.
   * 
   * This function will generally be used with pixbufs loaded
   * via gdk_pixbuf_new_from_inline().
   * 
   * Since: 2.4
   * @param icon_name The name of the icon to register.
   * @param size The size at which to register the icon (different
   * images can be registered for the same icon name
   * at different sizes.).
   * @param pixbuf Gdk::Pixbuf that contains the image to use
   * for @a icon_name .
   "
      end

      operation 360617 "signal_changed"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 360745 "on_changed"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end
    end

    class 197801 "IconThemeError"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 "
      attribute 198441 "ICON_THEME_NOT_FOUND"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 198569 "ICON_THEME_FAILED"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 199721 "ImageMenuItem"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/imagemenuitem.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* A menu item with an icon.
 * 
 * A GtkImageMenuItem is a menu item which has an icon next to the text label. Note that the
 * user can disable display of menu icons, so make sure to still fill in the text label.
 *
 * @ingroup Menus
 * @ingroup Widgets                                                                                                                                                S
 "
      classrelation 175273 // <generalisation>
	relation 175273 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 175273 // <generalisation>
	  b parent class_ref 131369 // MenuItem
      end

      class 199849 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 199721 // ImageMenuItem
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 175401 // <realization>
	  relation 175401 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 175401 // <realization>
	    b parent class_ref 199721 // ImageMenuItem
	end
      end

      class 200105 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "ImageMenuItem_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 200233 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkImageMenuItem"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 200361 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkImageMenuItemClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 367785 "~ImageMenuItem"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 175785 // imagemenuitem_class_ (<directional composition>)
	relation 175785 *-->
	  a role_name "imagemenuitem_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 175785 // imagemenuitem_class_ (<directional composition>)
	  b parent class_ref 200105 // CppClassType
      end

      operation 367913 "ImageMenuItem"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 199721 // ImageMenuItem
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 368041 "operator ="
	private return_type class_ref 199721 // ImageMenuItem
	nparams 1
	  param in name "" type class_ref 199721 // ImageMenuItem
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 368169 "ImageMenuItem"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 368297 "ImageMenuItem"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkImageMenuItem"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 368425 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 368553 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 368681 "gobj"
	cpp_inline public explicit_return_type "GtkImageMenuItem"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkImageMenuItem*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 368809 "gobj"
	const cpp_inline public explicit_return_type "GtkImageMenuItem"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkImageMenuItem*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 368937 "ImageMenuItem"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 369065 "ImageMenuItem"
	public explicit_return_type ""
	nparams 3
	  param inout name "image" type class_ref 130089 // Widget
	  param in name "label" explicit_type "Glib::ustring"
	  param in name "mnemonic" explicit_type "bool"
	    defaultvalue " false"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 369193 "ImageMenuItem"
	public explicit_return_type ""
	nparams 2
	  param in name "label" explicit_type "Glib::ustring"
	  param in name "mnemonic" explicit_type "bool"
	    defaultvalue " false"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 369321 "ImageMenuItem"
	public explicit_return_type ""
	nparams 1
	  param in name "id" type class_ref 130985 // StockID
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 369449 "set_image"
	public explicit_return_type "void"
	nparams 1
	  param inout name "image" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the image of @a image_menu_item  to the given widget.
   * @param image A widget to set as the image for the menu item.
   "
      end

      operation 369577 "get_image"
	public return_type class_ref 130089 // Widget
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the widget that is currently set as the image of @a image_menu_item .
   * See set_image().
   * @return The widget set as image of @a image_menu_item .
   "
      end

      operation 369705 "get_image"
	const public return_type class_ref 130089 // Widget
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the widget that is currently set as the image of @a image_menu_item .
   * See set_image().
   * @return The widget set as image of @a image_menu_item .
   "
      end
    end

    class 198697 "ImageType"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* @addtogroup gtkmmEnums Enums and Flags 
*
 * @ingroup gtkmmEnums
 "
      attribute 198697 "IMAGE_EMPTY"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 198825 "IMAGE_PIXMAP"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 198953 "IMAGE_IMAGE"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 199081 "IMAGE_PIXBUF"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 199209 "IMAGE_STOCK"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 199337 "IMAGE_ICON_SET"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 199465 "IMAGE_ANIMATION"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 200489 "InputDialog"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/inputdialog.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Don't list this in the documentation's Dialogs group because it isn't really useful
 - see the GTK+ docs."
      classrelation 175913 // <generalisation>
	relation 175913 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 175913 // <generalisation>
	  b parent class_ref 296617 // Dialog
      end

      class 200617 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 200489 // InputDialog
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 176041 // <realization>
	  relation 176041 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 176041 // <realization>
	    b parent class_ref 200489 // InputDialog
	end
      end

      class 200873 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "InputDialog_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 201001 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkInputDialog"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 201129 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkInputDialogClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 369833 "~InputDialog"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 176425 // inputdialog_class_ (<directional composition>)
	relation 176425 *-->
	  a role_name "inputdialog_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 176425 // inputdialog_class_ (<directional composition>)
	  b parent class_ref 200873 // CppClassType
      end

      operation 369961 "InputDialog"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 200489 // InputDialog
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 370089 "operator ="
	private return_type class_ref 200489 // InputDialog
	nparams 1
	  param in name "" type class_ref 200489 // InputDialog
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 370217 "InputDialog"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 370345 "InputDialog"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkInputDialog"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 370473 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 370601 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 370729 "gobj"
	cpp_inline public explicit_return_type "GtkInputDialog"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkInputDialog*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 370857 "gobj"
	const cpp_inline public explicit_return_type "GtkInputDialog"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkInputDialog*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 370985 "on_enable_device"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "device" explicit_type "Glib::RefPtr<Gdk::Device>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 371113 "on_disable_device"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "device" explicit_type "Glib::RefPtr<Gdk::Device>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 371241 "InputDialog"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 371369 "get_axis_list"
	public return_type class_ref 201257 // Table
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 371497 "get_axis_list"
	const public return_type class_ref 201257 // Table
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 371625 "get_axis_box"
	public return_type class_ref 201385 // ScrolledWindow
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 371753 "get_axis_box"
	const public return_type class_ref 201385 // ScrolledWindow
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 371881 "get_mode_optionmenu"
	public return_type class_ref 190121 // OptionMenu
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 372009 "get_mode_optionmenu"
	const public return_type class_ref 190121 // OptionMenu
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 372137 "get_close_button"
	public return_type class_ref 141353 // Button
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 372265 "get_close_button"
	const public return_type class_ref 141353 // Button
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 372393 "get_save_button"
	public return_type class_ref 141353 // Button
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 372521 "get_save_button"
	const public return_type class_ref 141353 // Button
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 372649 "get_current_device"
	public explicit_return_type "Glib::RefPtr<Gdk::Device>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "GtkWidget *axis_items[GDK_AXIS_LAST];"
      end

      operation 372777 "get_current_device"
	const public explicit_return_type "Glib::RefPtr<const Gdk::Device>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 372905 "get_keys_list"
	public return_type class_ref 201257 // Table
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 373033 "get_keys_list"
	const public return_type class_ref 201257 // Table
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 373161 "get_keys_box"
	public return_type class_ref 201385 // ScrolledWindow
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 373289 "get_keys_box"
	const public return_type class_ref 201385 // ScrolledWindow
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 373417 "signal_enable_device"
	public explicit_return_type "Glib::SignalProxy1< void,const Glib::RefPtr<Gdk::Device>& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 373545 "signal_disable_device"
	public explicit_return_type "Glib::SignalProxy1< void,const Glib::RefPtr<Gdk::Device>& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 201513 "Invisible"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/invisible.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* This widget is used internally in GTK+, and is probably not useful for application developers.
 * It is used for reliable pointer grabs and selection handling in the code for drag-and-drop.
 * @ingroup Widgets
 "
      classrelation 176553 // <generalisation>
	relation 176553 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 176553 // <generalisation>
	  b parent class_ref 130089 // Widget
      end

      class 201641 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 201513 // Invisible
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 176681 // <realization>
	  relation 176681 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 176681 // <realization>
	    b parent class_ref 201513 // Invisible
	end
      end

      class 201897 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Invisible_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 202025 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkInvisible"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 202153 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkInvisibleClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 373673 "~Invisible"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 177065 // invisible_class_ (<directional composition>)
	relation 177065 *-->
	  a role_name "invisible_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 177065 // invisible_class_ (<directional composition>)
	  b parent class_ref 201897 // CppClassType
      end

      operation 373801 "Invisible"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 201513 // Invisible
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 373929 "operator ="
	private return_type class_ref 201513 // Invisible
	nparams 1
	  param in name "" type class_ref 201513 // Invisible
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 374057 "Invisible"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 374185 "Invisible"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkInvisible"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 374313 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 374441 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 374569 "gobj"
	cpp_inline public explicit_return_type "GtkInvisible"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkInvisible*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 374697 "gobj"
	const cpp_inline public explicit_return_type "GtkInvisible"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkInvisible*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 374825 "Invisible"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 374953 "Invisible"
	public explicit_return_type ""
	nparams 1
	  param in name "screen" explicit_type "Glib::RefPtr<Gdk::Screen>"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 375081 "get_screen"
	public explicit_return_type "Glib::RefPtr<Gdk::Screen>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the Gdk::Screen object associated with @a invisible 
   * @return The associated Gdk::Screen.
   * 
   * Since: 2.2.
   "
      end

      operation 375209 "get_screen"
	const public explicit_return_type "Glib::RefPtr<const Gdk::Screen>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the Gdk::Screen object associated with @a invisible 
   * @return The associated Gdk::Screen.
   * 
   * Since: 2.2.
   "
      end

      operation 375337 "set_screen"
	public explicit_return_type "void"
	nparams 1
	  param in name "screen" explicit_type "Glib::RefPtr<Gdk::Screen>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the Gdk::Screen where the Gtk::Invisible object will be displayed.
   * 
   * Since: 2.2
   * @param screen A Gdk::Screen.
   "
      end
    end

    class 202281 "Item"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/item.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* This class should be considered as a virtual base class.
 * Only the signals and methods it provides are of any interest.
 * You don't want to instantiate any objects of that class.
 *
 * @ingroup Widgets
 "
      classrelation 177193 // <generalisation>
	relation 177193 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 177193 // <generalisation>
	  b parent class_ref 281385 // Bin
      end

      class 202409 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 202281 // Item
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 177321 // <realization>
	  relation 177321 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 177321 // <realization>
	    b parent class_ref 202281 // Item
	end
      end

      class 202665 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Item_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 202793 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkItem"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 202921 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkItemClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 375465 "~Item"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 177705 // item_class_ (<directional composition>)
	relation 177705 *-->
	  a role_name "item_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 177705 // item_class_ (<directional composition>)
	  b parent class_ref 202665 // CppClassType
      end

      operation 375593 "Item"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 202281 // Item
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 375721 "operator ="
	private return_type class_ref 202281 // Item
	nparams 1
	  param in name "" type class_ref 202281 // Item
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 375849 "Item"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 375977 "Item"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkItem"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 376105 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 376233 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 376361 "gobj"
	cpp_inline public explicit_return_type "GtkItem"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkItem*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 376489 "gobj"
	const cpp_inline public explicit_return_type "GtkItem"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkItem*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 376617 "on_select"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 376745 "on_deselect"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 376873 "on_toggle"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 377001 "select"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 377129 "signal_select"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 377257 "deselect"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 377385 "signal_deselect"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 377513 "toggle"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 377641 "signal_toggle"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 377769 "Item"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end
    end

    class 203817 "Justification"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 "
      attribute 187177 "JUSTIFY_LEFT"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 187305 "JUSTIFY_RIGHT"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 187433 "JUSTIFY_CENTER"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 187561 "JUSTIFY_FILL"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 131113 "Image"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/image.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* A widget displaying an image.
 *
 * The Gtk::Image widget displays an image. Various kinds of object can be
 * displayed as an image; most typically, you would load a Gdk::Pixbuf (\"pixel
 * buffer\") from a file, and then display that. 
 *
 * Gtk::Image is a subclass of Gtk::Misc, which implies that you can align it
 * (center, left, right) and add padding to it, using Gtk::Misc methods.
 *
 * Gtk::Image is a \"no window\" widget (has no Gdk::Window of its own), so by
 * default does not receive events. If you want to receive events on the
 * image, such as button clicks, place the image inside a Gtk::EventBox, then
 * connect to the event signals on the event box. 
 *
 * @ingroup Widgets
 "
      classrelation 174633 // <generalisation>
	relation 174633 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 174633 // <generalisation>
	  b parent class_ref 183465 // Misc
      end

      class 199081 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 131113 // Image
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 174761 // <realization>
	  relation 174761 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 174761 // <realization>
	    b parent class_ref 131113 // Image
	end
      end

      class 199337 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Image_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 199465 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkImage"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 199593 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkImageClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 361001 "~Image"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 175145 // image_class_ (<directional composition>)
	relation 175145 *-->
	  a role_name "image_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 175145 // image_class_ (<directional composition>)
	  b parent class_ref 199337 // CppClassType
      end

      operation 361129 "Image"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 131113 // Image
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 361257 "operator ="
	private return_type class_ref 131113 // Image
	nparams 1
	  param in name "" type class_ref 131113 // Image
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 361385 "Image"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 361513 "Image"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkImage"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 361641 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 361769 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 361897 "gobj"
	cpp_inline public explicit_return_type "GtkImage"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkImage*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 362025 "gobj"
	const cpp_inline public explicit_return_type "GtkImage"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkImage*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 362153 "Image"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 362281 "Image"
	public explicit_return_type ""
	nparams 2
	  param in name "pixmap" explicit_type "Glib::RefPtr<Gdk::Pixmap>"
	  param in name "mask" explicit_type "Glib::RefPtr<Gdk::Bitmap>"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 362409 "Image"
	public explicit_return_type ""
	nparams 2
	  param in name "image" explicit_type "Glib::RefPtr<Gdk::Image>"
	  param in name "mask" explicit_type "Glib::RefPtr<Gdk::Bitmap>"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 362537 "Image"
	public explicit_return_type ""
	nparams 1
	  param in name "file" explicit_type "string"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 362665 "Image"
	public explicit_return_type ""
	nparams 1
	  param in name "pixbuf" explicit_type "Glib::RefPtr<Gdk::Pixbuf>"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 362793 "Image"
	public explicit_return_type ""
	nparams 2
	  param in name "stock_id" explicit_type "Gtk::StockID"
	  param in name "size" type class_ref 131241 // IconSize
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 362921 "Image"
	public explicit_return_type ""
	nparams 2
	  param inout name "icon_set" type class_ref 195753 // IconSet
	  param in name "size" type class_ref 131241 // IconSize
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 363049 "Image"
	public explicit_return_type ""
	nparams 1
	  param in name "animation" explicit_type "Glib::RefPtr<Gdk::PixbufAnimation>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 363177 "set"
	public explicit_return_type "void"
	nparams 2
	  param in name "pixmap" explicit_type "Glib::RefPtr<Gdk::Pixmap>"
	  param in name "mask" explicit_type "Glib::RefPtr<Gdk::Bitmap>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* See new_from_pixmap() for details.
   * @param pixmap A Gdk::Pixmap or <tt>0</tt>.
   * @param mask A Gdk::Bitmap or <tt>0</tt>.
   "
      end

      operation 363305 "set"
	public explicit_return_type "void"
	nparams 2
	  param in name "gdk_image" explicit_type "Glib::RefPtr<Gdk::Image>"
	  param in name "mask" explicit_type "Glib::RefPtr<Gdk::Bitmap>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* See new_from_image() for details.
   * @param gdk_image A Gdk::Image or <tt>0</tt>.
   * @param mask A Gdk::Bitmap or <tt>0</tt>.
   "
      end

      operation 363433 "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "filename" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* See new_from_file() for details.
   * @param filename A filename or <tt>0</tt>.
   "
      end

      operation 363561 "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "pixbuf" explicit_type "Glib::RefPtr<Gdk::Pixbuf>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* See new_from_pixbuf() for details.
   * @param pixbuf A Gdk::Pixbuf or <tt>0</tt>.
   "
      end

      operation 363689 "set"
	public explicit_return_type "void"
	nparams 2
	  param in name "stock_id" explicit_type "Gtk::StockID"
	  param in name "size" type class_ref 131241 // IconSize
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* See new_from_stock() for details.
   * @param stock_id A stock icon name.
   * @param size A stock icon size.
   "
      end

      operation 363817 "set"
	public explicit_return_type "void"
	nparams 2
	  param inout name "icon_set" type class_ref 195753 // IconSet
	  param in name "size" type class_ref 131241 // IconSize
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* See new_from_icon_set() for details.
   * @param icon_set A Gtk::IconSet.
   * @param size A stock icon size.
   "
      end

      operation 363945 "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "animation" explicit_type "Glib::RefPtr<Gdk::PixbufAnimation>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Causes the Gtk::Image to display the given animation (or display
   * nothing, if you set the animation to <tt>0</tt>).
   * @param animation The Gdk::PixbufAnimation.
   "
      end

      operation 364073 "clear"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 364201 "get_storage_type"
	const public return_type class_ref 198697 // ImageType
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the type of representation being used by the Gtk::Image
   * to store image data. If the Gtk::Image has no image data,
   * the return value will be Gtk::IMAGE_EMPTY.
   * @return Image representation being used.
   "
      end

      operation 364329 "get_pixmap"
	const public explicit_return_type "void"
	nparams 2
	  param inout name "pixmap" explicit_type "Glib::RefPtr<Gdk::Pixmap>"
	  param inout name "mask" explicit_type "Glib::RefPtr<Gdk::Bitmap>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 364457 "get_image"
	const public explicit_return_type "void"
	nparams 2
	  param inout name "gdk_image" explicit_type "Glib::RefPtr<Gdk::Image>"
	  param inout name "mask" explicit_type "Glib::RefPtr<Gdk::Bitmap>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 364585 "get_pixbuf"
	public explicit_return_type "Glib::RefPtr<Gdk::Pixbuf>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the Gdk::Pixbuf being displayed by the Gtk::Image.
   * The storage type of the image must be Gtk::IMAGE_EMPTY or
   * Gtk::IMAGE_PIXBUF (see get_storage_type()).
   * The caller of this function does not own a reference to the
   * returned pixbuf.
   * @return The displayed pixbuf, or <tt>0</tt> if the image is empty.
   "
      end

      operation 364713 "get_pixbuf"
	const public explicit_return_type "Glib::RefPtr<const Gdk::Pixbuf>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the Gdk::Pixbuf being displayed by the Gtk::Image.
   * The storage type of the image must be Gtk::IMAGE_EMPTY or
   * Gtk::IMAGE_PIXBUF (see get_storage_type()).
   * The caller of this function does not own a reference to the
   * returned pixbuf.
   * @return The displayed pixbuf, or <tt>0</tt> if the image is empty.
   "
      end

      operation 364841 "get_stock"
	const public explicit_return_type "void"
	nparams 2
	  param inout name "stock_id" explicit_type "Gtk::StockID"
	  param inout name "size" type class_ref 131241 // IconSize
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 364969 "get_icon_set"
	const public explicit_return_type "void"
	nparams 2
	  param inout name "icon_set" type class_ref 195753 // IconSet
	  param inout name "size" type class_ref 131241 // IconSize
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 365097 "get_animation"
	public explicit_return_type "Glib::RefPtr<Gdk::PixbufAnimation>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the Gdk::PixbufAnimation being displayed by the Gtk::Image.
   * The storage type of the image must be Gtk::IMAGE_EMPTY or
   * Gtk::IMAGE_ANIMATION (see get_storage_type()).
   * The caller of this function does not own a reference to the
   * returned animation.
   * @return The displayed animation, or <tt>0</tt> if the image is empty.
   "
      end

      operation 365225 "get_animation"
	const public explicit_return_type "Glib::RefPtr<const Gdk::PixbufAnimation>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the Gdk::PixbufAnimation being displayed by the Gtk::Image.
   * The storage type of the image must be Gtk::IMAGE_EMPTY or
   * Gtk::IMAGE_ANIMATION (see get_storage_type()).
   * The caller of this function does not own a reference to the
   * returned animation.
   * @return The displayed animation, or <tt>0</tt> if the image is empty.
   "
      end

      operation 365353 "property_pixbuf"
	public explicit_return_type "Glib::PropertyProxy< Glib::RefPtr<Gdk::Pixbuf> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 365481 "property_pixbuf"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gdk::Pixbuf> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 365609 "property_pixmap"
	public explicit_return_type "Glib::PropertyProxy< Glib::RefPtr<Gdk::Pixmap> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 365737 "property_pixmap"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gdk::Pixmap> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 365865 "property_image"
	public explicit_return_type "Glib::PropertyProxy< Glib::RefPtr<Gdk::Image> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 365993 "property_image"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gdk::Image> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 366121 "property_mask"
	public explicit_return_type "Glib::PropertyProxy< Glib::RefPtr<Gdk::Pixmap> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 366249 "property_mask"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gdk::Pixmap> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 366377 "property_file"
	public explicit_return_type "Glib::PropertyProxy_WriteOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 366505 "property_file"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 366633 "property_stock"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 366761 "property_stock"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 366889 "property_icon_set"
	public explicit_return_type "Glib::PropertyProxy<Gtk::IconSet>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 367017 "property_icon_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Gtk::IconSet>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 367145 "property_icon_size"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 367273 "property_icon_size"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 367401 "property_pixbuf_animation"
	public explicit_return_type "Glib::PropertyProxy< Glib::RefPtr<Gdk::PixbufAnimation> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 367529 "property_pixbuf_animation"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gdk::PixbufAnimation> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 367657 "property_storage_type"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<ImageType>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end
    end

    class 129321 "Label"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/label.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* A widget that displays a small to medium amount of text.
 *
 * A simple setable widget for holding a Glib::ustring.
 * @ingroup Widgets
 "
      classrelation 177833 // <generalisation>
	relation 177833 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 177833 // <generalisation>
	  b parent class_ref 183465 // Misc
      end

      class 203049 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 129321 // Label
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 177961 // <realization>
	  relation 177961 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 177961 // <realization>
	    b parent class_ref 129321 // Label
	end
      end

      class 203305 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Label_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 203433 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkLabel"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 203561 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkLabelClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 377897 "~Label"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 178345 // label_class_ (<directional composition>)
	relation 178345 *-->
	  a role_name "label_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 178345 // label_class_ (<directional composition>)
	  b parent class_ref 203305 // CppClassType
      end

      operation 378025 "Label"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 129321 // Label
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 378153 "operator ="
	private return_type class_ref 129321 // Label
	nparams 1
	  param in name "" type class_ref 129321 // Label
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 378281 "Label"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 378409 "Label"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkLabel"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 378537 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 378665 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 378793 "gobj"
	cpp_inline public explicit_return_type "GtkLabel"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkLabel*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 378921 "gobj"
	const cpp_inline public explicit_return_type "GtkLabel"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkLabel*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 379049 "on_populate_popup"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "menu" type class_ref 203689 // Menu
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 379177 "Label"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 379305 "Label"
	public explicit_return_type ""
	nparams 2
	  param in name "label" explicit_type "Glib::ustring"
	  param in name "mnemonic" explicit_type "bool"
	    defaultvalue " false"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 379433 "Label"
	public explicit_return_type ""
	nparams 4
	  param in name "label" explicit_type "Glib::ustring"
	  param in name "xalign" explicit_type "float"
	  param in name "yalign" explicit_type "float"
	  param in name "mnemonic" explicit_type "bool"
	    defaultvalue " false"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throw}{
${body}}
"
	
	
	
	
	comment "* This constructor is a shortcut for often used code
   * when you want to create a label with alignment different
   * than default one.
   * @code
   * Gtk::Label label(text, x, y, mnemonic);
   * @endcode
   * is equivalent to:
   * @code
   * Gtk::Label label(text, mnemonic);
   * label.set_alignment(x, y);
   * @endcode
   "
      end

      operation 379561 "Label"
	public explicit_return_type ""
	nparams 4
	  param in name "label" explicit_type "Glib::ustring"
	  param in name "xalign" type class_ref 134697 // AlignmentEnum
	  param in name "yalign" type class_ref 134697 // AlignmentEnum
	    defaultvalue " ALIGN_CENTER"
	  param in name "mnemonic" explicit_type "bool"
	    defaultvalue " false"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throw}{
${body}}
"
	
	
	
	
	comment "* This constructor is a shortcut for often used code
   * when you want to create a label with alignment different
   * than default one.
   * @code
   * Gtk::Label label(text, x, y, mnemonic);
   * @endcode
   * is equivalent to:
   * @code
   * Gtk::Label label(text, mnemonic);
   * label.set_alignment(x, y);
   * @endcode
   "
      end

      operation 379689 "set_text"
	public explicit_return_type "void"
	nparams 1
	  param in name "str" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/ Doesn't use markup.
* Sets the text within the Gtk::Label widget.  It overwrites any text that
   * was there before.  
   * 
   * This will also clear any previously set mnemonic accelerators.
   * @param str The text you want to set.
   "
      end

      operation 379817 "get_text"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Fetches the text from a label widget, as displayed on the
   * screen. This does not include any embedded underlines
   * indicating mnemonics or Pango markup. (See get_label())
   * @return The text in the label widget.
   "
      end

      operation 379945 "set_attributes"
	public explicit_return_type "void"
	nparams 1
	  param inout name "attrs" explicit_type "Pango::AttrList"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets a Pango::AttrList; the attributes in the list are applied to the
   * label text. The attributes set with this function will be ignored
   * if the \"use_underline\" property or the \"use_markup\" property
   * is <tt>true</tt>.
   * @param attrs A Pango::AttrList.
   "
      end

      operation 380073 "get_attributes"
	const public explicit_return_type "Pango::AttrList"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the attribute list that was set on the label using
   * set_attributes(), if any. This function does
   * not reflect attributes that come from the labels markup
   * (see set_markup()). If you want to get the
   * effective attributes for the label, use
   * pango_layout_get_attribute (gtk_label_get_layout (label)).
   * @return The attribute list, or <tt>0</tt> if none was set.
   "
      end

      operation 380201 "set_label"
	public explicit_return_type "void"
	nparams 1
	  param in name "str" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the text of the label. The label is interpreted as
   * including embedded underlines and/or Pango markup depending
   * on the values of label->use_underline and label->use_markup.
   * @param str The new text to set for the label.
   "
      end

      operation 380329 "get_label"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Fetches the text from a label widget including any embedded
   * underlines indicating mnemonics and Pango markup. (See
   * get_text()).
   * @return The text of the label widget..
   "
      end

      operation 380457 "set_markup"
	public explicit_return_type "void"
	nparams 1
	  param in name "str" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Parses @a str  which is marked up with the Pango text markup language,
   * setting the label's text and attribute list based on the parse results.
   * @param str A markup string (see Pango markup format).
   "
      end

      operation 380585 "set_use_markup"
	public explicit_return_type "void"
	nparams 1
	  param in name "setting" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets whether the text of the label contains markup in Pango's text markup
   * language. See set_markup().
   * @param setting <tt>true</tt> if the label's text should be parsed for markup.
   "
      end

      operation 380713 "get_use_markup"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether the label's text is interpreted as marked up with
   * the Pango text markup
   * language. See set_use_markup().
   * @return <tt>true</tt> if the label's text will be parsed for markup.
   "
      end

      operation 380841 "set_use_underline"
	public explicit_return_type "void"
	nparams 1
	  param in name "setting" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* If true, an underline in the text indicates the next character should be
   * used for the mnemonic accelerator key.
   * @param setting <tt>true</tt> if underlines in the text indicate mnemonics.
   "
      end

      operation 380969 "get_use_underline"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether an embedded underline in the label indicates a
   * mnemonic. See set_use_underline().
   * @return <tt>true</tt> whether an embedded underline in the label indicates
   * the mnemonic accelerator keys.
   "
      end

      operation 381097 "set_markup_with_mnemonic"
	public explicit_return_type "void"
	nparams 1
	  param in name "str" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Parses @a str  which is marked up with the Pango text markup language,
   * setting the label's text and attribute list based on the parse results.
   * If characters in @a str  are preceded by an underscore, they are underlined
   * indicating that they represent a keyboard accelerator called a mnemonic.
   * 
   * The mnemonic key can be used to activate another widget, chosen automatically,
   * or explicitly using set_mnemonic_widget().
   * @param str A markup string (see Pango markup format).
   "
      end

      operation 381225 "get_mnemonic_keyval"
	const public explicit_return_type "guint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* If the label has been set so that it has an mnemonic key this function
   * returns the keyval used for the mnemonic accelerator. If there is no
   * mnemonic set up it returns #GDK_VoidSymbol.
   * @return GDK keyval usable for accelerators, or #GDK_VoidSymbol.
   "
      end

      operation 381353 "set_mnemonic_widget"
	public explicit_return_type "void"
	nparams 1
	  param inout name "widget" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* If the label has been set so that it has an mnemonic key (using
   * i.e.\\  set_markup_with_mnemonic(),
   * set_text_with_mnemonic(), new_with_mnemonic()
   * or the \"use_underline\" property) the label can be associated with a
   * widget that is the target of the mnemonic. When the label is inside
   * a widget (like a Gtk::Button or a Gtk::Notebook tab) it is
   * automatically associated with the correct widget, but sometimes
   * (i.e. when the target is a Gtk::Entry next to the label) you need to
   * set it explicitly using this function.
   * 
   * The target widget will be accelerated by emitting \"mnemonic_activate\" on it.
   * The default handler for this signal will activate the widget if there are no
   * mnemonic collisions and toggle focus between the colliding widgets otherwise.
   * @param widget The target Gtk::Widget.
   "
      end

      operation 381481 "get_mnemonic_widget"
	public return_type class_ref 130089 // Widget
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the target of the mnemonic (keyboard shortcut) of this
   * label. See set_mnemonic_widget().
   * @return The target of the label's mnemonic, or <tt>0</tt> if none
   * has been set and the default algorithm will be used.
   "
      end

      operation 381609 "get_mnemonic_widget"
	const public return_type class_ref 130089 // Widget
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the target of the mnemonic (keyboard shortcut) of this
   * label. See set_mnemonic_widget().
   * @return The target of the label's mnemonic, or <tt>0</tt> if none
   * has been set and the default algorithm will be used.
   "
      end

      operation 381737 "set_text_with_mnemonic"
	public explicit_return_type "void"
	nparams 1
	  param in name "str" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the label's text from the string @a str .
   * If characters in @a str  are preceded by an underscore, they are underlined
   * indicating that they represent a keyboard accelerator called a mnemonic.
   * The mnemonic key can be used to activate another widget, chosen automatically,
   * or explicitly using set_mnemonic_widget().
   * @param str A string.
   "
      end

      operation 381865 "set_justify"
	public explicit_return_type "void"
	nparams 1
	  param in name "jtype" type class_ref 203817 // Justification
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the alignment of the lines in the text of the label relative to
   * each other.  Gtk::JUSTIFY_LEFT is the default value when the
   * widget is first created with new(). If you instead want
   * to set the alignment of the label as a whole, use
   * Gtk::Misc::set_alignment() instead. set_justify() has no
   * effect on labels containing only a single line.
   * @param jtype A Gtk::Justification.
   "
      end

      operation 381993 "get_justify"
	const public return_type class_ref 203817 // Justification
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the justification of the label. See set_justify().
   * @return Gtk::Justification.
   "
      end

      operation 382121 "set_pattern"
	public explicit_return_type "void"
	nparams 1
	  param in name "pattern" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 382249 "set_line_wrap"
	public explicit_return_type "void"
	nparams 1
	  param in name "wrap" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Toggles line wrapping within the Gtk::Label widget.  <tt>true</tt> makes it break
   * lines if text exceeds the widget's size.  <tt>false</tt> lets the text get cut off
   * by the edge of the widget if it exceeds the widget size.
   * @param wrap The setting.
   "
      end

      operation 382377 "get_line_wrap"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether lines in the label are automatically wrapped. See set_line_wrap().
   * @return <tt>true</tt> if the lines of the label are automatically wrapped.
   "
      end

      operation 382505 "set_selectable"
	public explicit_return_type "void"
	nparams 1
	  param in name "setting" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Selectable labels allow the user to select text from the label, for
   * copy-and-paste.
   * @param setting <tt>true</tt> to allow selecting text in the label.
   "
      end

      operation 382633 "get_selectable"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the value set by set_selectable().
   * @return <tt>true</tt> if the user can copy text from the label.
   "
      end

      operation 382761 "select_region"
	public explicit_return_type "void"
	nparams 2
	  param in name "start_offset" explicit_type "int"
	  param in name "end_offset" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Selects a range of characters in the label, if the label is selectable.
   * See set_selectable(). If the label is not selectable,
   * this function has no effect. If @a start_offset  or
   *  @a end_offset  are -1, then the end of the label will be substituted.
   * @param start_offset Start offset (in characters not bytes).
   * @param end_offset End offset (in characters not bytes).
   "
      end

      operation 382889 "select_region"
	public explicit_return_type "void"
	nparams 1
	  param in name "start_offset" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Selects a range of characters in the label, from @a start_offset to the end,
   * if the label is selectable.
   * See gtk_label_set_selectable(). If the label is not selectable,
   * this function has no effect.
   *
   * @param start_offset Start offset (in characters not bytes)
   "
      end

      operation 383017 "get_selection_bounds"
	const public explicit_return_type "bool"
	nparams 2
	  param inout name "start" explicit_type "int"
	  param inout name "end" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the selected range of characters in the label, returning <tt>true</tt>
   * if there's a selection.
   * @param start Return location for start of selection, as a character offset.
   * @param end Return location for end of selection, as a character offset.
   * @return <tt>true</tt> if selection is non-empty.
   "
      end

      operation 383145 "get_layout"
	public explicit_return_type "Glib::RefPtr<Pango::Layout>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the Pango::Layout used to display the label.
   * The layout is useful to e.g. convert text positions to
   * pixel positions, in combination with get_layout_offsets().
   * @return The Pango::Layout for this label.
   "
      end

      operation 383273 "get_layout"
	const public explicit_return_type "Glib::RefPtr<const Pango::Layout>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the Pango::Layout used to display the label.
   * The layout is useful to e.g. convert text positions to
   * pixel positions, in combination with get_layout_offsets().
   * @return The Pango::Layout for this label.
   "
      end

      operation 383401 "get_layout_offsets"
	const public explicit_return_type "void"
	nparams 2
	  param inout name "x" explicit_type "int"
	  param inout name "y" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Obtains the coordinates where the label will draw the Pango::Layout
   * representing the text in the label; useful to convert mouse events
   * into coordinates inside the Pango::Layout, e.g.\\ to take some action
   * if some part of the label is clicked. Of course you will need to
   * create a Gtk::EventBox to receive the events, and pack the label
   * inside it, since labels are a Gtk::NO_WINDOW widget. Remember
   * when using the Pango::Layout functions you need to convert to
   * and from pixels using PANGO_PIXELS() or Pango::SCALE.
   * @param x Location to store X offset of layout, or <tt>0</tt>.
   * @param y Location to store Y offset of layout, or <tt>0</tt>.
   "
      end

      operation 383529 "signal_populate_popup"
	public explicit_return_type "Glib::SignalProxy1< void,Menu* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 383657 "property_label"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Keybinding signals:
* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 383785 "property_label"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 383913 "property_attributes"
	public explicit_return_type "Glib::PropertyProxy<Pango::AttrList>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 384041 "property_attributes"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Pango::AttrList>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 384169 "property_use_markup"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 384297 "property_use_markup"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 384425 "property_use_underline"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 384553 "property_use_underline"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 384681 "property_justify"
	public explicit_return_type "Glib::PropertyProxy<Justification>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 384809 "property_justify"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Justification>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 384937 "property_pattern"
	public explicit_return_type "Glib::PropertyProxy_WriteOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 385065 "property_pattern"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 385193 "property_wrap"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 385321 "property_wrap"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 385449 "property_selectable"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 385577 "property_selectable"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 385705 "property_mnemonic_keyval"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<guint>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 385833 "property_mnemonic_widget"
	public explicit_return_type "Glib::PropertyProxy<Widget*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 385961 "property_mnemonic_widget"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Widget*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 386089 "property_cursor_position"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 386217 "property_selection_bound"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end
    end

    class 318249 "Layout"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/layout.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* Infinite scrollable area containing child widgets and/or custom drawing.
 *
 * Gtk::Layout is similar to Gtk::DrawingArea in that it's a \"blank slate\"
 * and doesn't do anything but paint a blank background by default. It's
 * different in that it supports scrolling natively (You can add it directly
 * to a Gtk::ScrolledWindow), and it can contain child widgets, since it's a
 * Gtk::Container.  However if you're just going to draw, a Gtk::DrawingArea
 * is a better choice since it has lower overhead.
 *
 * When handling expose_event signals, you must draw to the bin_window
 * Gdk::Window - see get_bin_window() - rather than the normal Gdk::Window -
 * see get_window() - as you would for a drawing area.
 *
 * @ingroup Widgets
 * @ingroup Containers
 "
      classrelation 178473 // <generalisation>
	relation 178473 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 178473 // <generalisation>
	  b parent class_ref 280745 // Container
      end

      class 318377 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 318249 // Layout
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 178601 // <realization>
	  relation 178601 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 178601 // <realization>
	    b parent class_ref 318249 // Layout
	end
      end

      class 204073 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Layout_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 204201 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkLayout"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 204329 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkLayoutClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 386345 "~Layout"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 178985 // layout_class_ (<directional composition>)
	relation 178985 *-->
	  a role_name "layout_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 178985 // layout_class_ (<directional composition>)
	  b parent class_ref 204073 // CppClassType
      end

      operation 386473 "Layout"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 318249 // Layout
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 386601 "operator ="
	private return_type class_ref 318249 // Layout
	nparams 1
	  param in name "" type class_ref 318249 // Layout
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 386729 "Layout"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 386857 "Layout"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkLayout"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 386985 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 387113 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 387241 "gobj"
	cpp_inline public explicit_return_type "GtkLayout"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkLayout*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 387369 "gobj"
	const cpp_inline public explicit_return_type "GtkLayout"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkLayout*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 387497 "on_set_scroll_adjustments"
	cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param inout name "hadj" type class_ref 132521 // Adjustment
	  param inout name "vadj" type class_ref 132521 // Adjustment
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 387625 "Layout"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 387753 "Layout"
	public explicit_return_type ""
	nparams 2
	  param inout name "hadjustment" type class_ref 132521 // Adjustment
	  param inout name "vadjustment" type class_ref 132521 // Adjustment
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 387881 "put"
	public explicit_return_type "void"
	nparams 3
	  param inout name "child_widget" type class_ref 130089 // Widget
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Adds @a child_widget  to @a layout , at position ( @a x , @a y ).
   *  @a layout  becomes the new parent container of @a child_widget .
   * @param child_widget Child widget.
   * @param x X position of child widget.
   * @param y Y position of child widget.
   "
      end

      operation 388009 "move"
	public explicit_return_type "void"
	nparams 3
	  param inout name "child_widget" type class_ref 130089 // Widget
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves a current child of @a layout  to a new position.
   * @param child_widget A current child of @a layout .
   * @param x X position to move to.
   * @param y Y position to move to.
   "
      end

      operation 388137 "set_size"
	public explicit_return_type "void"
	nparams 2
	  param in name "width" explicit_type "guint"
	  param in name "height" explicit_type "guint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the size of the scrollable area of the layout.
   * @param width Width of entire scrollable area.
   * @param height Height of entire scrollable area.
   "
      end

      operation 388265 "get_size"
	const public explicit_return_type "void"
	nparams 2
	  param inout name "width" explicit_type "guint"
	  param inout name "height" explicit_type "guint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the size that has been set on the layout, and that determines
   * the total extents of the layout's scrollbar area. See
   * set_size().
   * @param width Location to store the width set on @a layout , or <tt>0</tt>.
   * @param height Location to store the height set on @a layout , or <tt>0</tt>.
   "
      end

      operation 388393 "set_hadjustment"
	public explicit_return_type "void"
	nparams 1
	  param inout name "adjustment" type class_ref 132521 // Adjustment
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the horizontal scroll adjustment for the layout.
   * 
   * See Gtk::ScrolledWindow, Gtk::Scrollbar, Gtk::Adjustment for details.
   * @param adjustment New scroll adjustment.
   "
      end

      operation 388521 "set_hadjustment"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/ Creates the Adjustment."
      end

      operation 388649 "get_hadjustment"
	public return_type class_ref 132521 // Adjustment
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* This function should only be called after the layout has been
   * placed in a Gtk::ScrolledWindow or otherwise configured for
   * scrolling. It returns the Gtk::Adjustment used for communication
   * between the horizontal scrollbar and @a layout .
   * 
   * See Gtk::ScrolledWindow, Gtk::Scrollbar, Gtk::Adjustment for details.
   * @return Horizontal scroll adjustment.
   "
      end

      operation 388777 "get_hadjustment"
	const public return_type class_ref 132521 // Adjustment
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* This function should only be called after the layout has been
   * placed in a Gtk::ScrolledWindow or otherwise configured for
   * scrolling. It returns the Gtk::Adjustment used for communication
   * between the horizontal scrollbar and @a layout .
   * 
   * See Gtk::ScrolledWindow, Gtk::Scrollbar, Gtk::Adjustment for details.
   * @return Horizontal scroll adjustment.
   "
      end

      operation 388905 "set_vadjustment"
	public explicit_return_type "void"
	nparams 1
	  param inout name "adjustment" type class_ref 132521 // Adjustment
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the vertical scroll adjustment for the layout.
   * 
   * See Gtk::ScrolledWindow, Gtk::Scrollbar, Gtk::Adjustment for details.
   * @param adjustment New scroll adjustment.
   "
      end

      operation 389033 "set_vadjustment"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/ Creates the Adjustment."
      end

      operation 389161 "get_vadjustment"
	public return_type class_ref 132521 // Adjustment
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* This function should only be called after the layout has been
   * placed in a Gtk::ScrolledWindow or otherwise configured for
   * scrolling. It returns the Gtk::Adjustment used for communication
   * between the vertical scrollbar and @a layout .
   * 
   * See Gtk::ScrolledWindow, Gtk::Scrollbar, Gtk::Adjustment for details.
   * @return Vertical scroll adjustment.
   "
      end

      operation 389289 "get_vadjustment"
	const public return_type class_ref 132521 // Adjustment
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* This function should only be called after the layout has been
   * placed in a Gtk::ScrolledWindow or otherwise configured for
   * scrolling. It returns the Gtk::Adjustment used for communication
   * between the vertical scrollbar and @a layout .
   * 
   * See Gtk::ScrolledWindow, Gtk::Scrollbar, Gtk::Adjustment for details.
   * @return Vertical scroll adjustment.
   "
      end

      operation 389417 "get_bin_window"
	public explicit_return_type "Glib::RefPtr<Gdk::Window>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 389545 "get_bin_window"
	const public explicit_return_type "Glib::RefPtr<const Gdk::Window>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 389673 "signal_set_scroll_adjustments"
	public explicit_return_type "Glib::SignalProxy2< void,Adjustment*,Adjustment* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " See Gtk::Widget::set_scroll_adjustments()"
      end

      operation 389801 "property_hadjustment"
	public explicit_return_type "Glib::PropertyProxy<Adjustment*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 389929 "property_hadjustment"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Adjustment*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 390057 "property_vadjustment"
	public explicit_return_type "Glib::PropertyProxy<Adjustment*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 390185 "property_vadjustment"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Adjustment*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 390313 "property_width"
	public explicit_return_type "Glib::PropertyProxy<guint>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 390441 "property_width"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<guint>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 390569 "property_height"
	public explicit_return_type "Glib::PropertyProxy<guint>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 390697 "property_height"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<guint>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end
    end

    class 204457 "ListStore"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/liststore.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* Thist is a list model for use with a Gtk::TreeView widget.
 * @ingroup TreeView
 * It implements the Gtk::TreeModel interface, and also implements the
 * Gtk::TreeSortable interface so you can sort the list using the view.
 * Finally, it also implements the tree drag and drop interfaces.
 "
      classrelation 179241 // <generalisation>
	relation 179241 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 179241 // <generalisation>
	  b parent class_ref 302121 // TreeModel
      end

      classrelation 179369 // <generalisation>
	relation 179369 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 179369 // <generalisation>
	  b parent class_ref 204585 // TreeSortable
      end

      classrelation 179497 // <generalisation>
	relation 179497 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 179497 // <generalisation>
	  b parent class_ref 204713 // TreeDragSource
      end

      classrelation 179625 // <generalisation>
	relation 179625 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 179625 // <generalisation>
	  b parent class_ref 204841 // TreeDragDest
      end

      class 204969 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 204457 // ListStore
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 179753 // <realization>
	  relation 179753 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 179753 // <realization>
	    b parent class_ref 204457 // ListStore
	end
      end

      class 205225 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "ListStore_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 205353 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkListStore"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 205481 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkListStoreClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 180137 // liststore_class_ (<directional composition>)
	relation 180137 *-->
	  a role_name "liststore_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 180137 // liststore_class_ (<directional composition>)
	  b parent class_ref 205225 // CppClassType
      end

      operation 390825 "ListStore"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 204457 // ListStore
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 390953 "operator ="
	private return_type class_ref 204457 // ListStore
	nparams 1
	  param in name "" type class_ref 204457 // ListStore
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 391081 "ListStore"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 391209 "ListStore"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkListStore"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 391337 "~ListStore"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 391465 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 391593 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 391721 "gobj"
	cpp_inline public explicit_return_type "GtkListStore"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkListStore*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 391849 "gobj"
	const cpp_inline public explicit_return_type "GtkListStore"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkListStore*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 391977 "gobj_copy"
	public explicit_return_type "GtkListStore"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs."
      end

      operation 392105 "ListStore"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "* When using this constructor, you must use set_column_types() immediately afterwards.
   * This can be useful when deriving from this class, with a fixed TreeModelColumnRecord
   * that is a member of the class.
   * There is no create() method that corresponds to this constructor, because this
   * constructor should only be used by derived classes.
   "
      end

      operation 392233 "ListStore"
	protected explicit_return_type ""
	nparams 1
	  param in name "columns" explicit_type "TreeModelColumnRecord"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 392361 "create"
	class_operation public explicit_return_type "Glib::RefPtr<ListStore>"
	nparams 1
	  param in name "columns" explicit_type "TreeModelColumnRecord"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Instantiate a new ListStore.
   * @param columns The column types for this tree model.
   * @result The new ListStore.
   "
      end

      operation 392489 "set_column_types"
	public explicit_return_type "void"
	nparams 1
	  param in name "columns" explicit_type "TreeModelColumnRecord"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 392617 "erase"
	public explicit_return_type "iterator"
	nparams 1
	  param in name "iter" explicit_type "iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Removes the given row from the list store.
   * @param iter The iterator to the row to be removed.
   * @result An iterator to the next row, or end() if there is none.
   "
      end

      operation 392745 "insert"
	public explicit_return_type "iterator"
	nparams 1
	  param in name "iter" explicit_type "iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO: Make this documentation similar to documentation for Standard C++ insert methods.
* Creates a new row before the position.
   * If iter is end() then a new row will be appended to the list.
   * The row will be empty - to fill in values, you need to dereference the returned iterator and use Row::operator[] or Row::set_value().
   * See also prepend() and append().
   *
   * @param iter An iterator to the row before which the new row will be inserted.
   * @result An iterator to the new row. 
   "
      end

      operation 392873 "insert_after"
	public explicit_return_type "iterator"
	nparams 1
	  param in name "iter" explicit_type "iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO: Docs. This one is apparently faster.
* Creates a new row after the position.
   * If iter is end() then a new row will be prepended to the list.
   * The row will be empty - to fill in values, you need to dereference the returned iterator and use Row::operator[] or Row::set_value().
   * See also insert(), prepend() and append().
   *
   * @param iter An iterator to the row after which the new row will be inserted.
   * @result An iterator to the new row.
   "
      end

      operation 393001 "prepend"
	public explicit_return_type "iterator"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Creates a new row at the start.
   * The row will be empty - to fill in values, you need to dereference the returned iterator and use Row::operator[] or Row::set_value().
   * See also insert() and append().
   *
   * @result An iterator to the new row.
   "
      end

      operation 393129 "append"
	public explicit_return_type "iterator"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Creates a new row at the end.
   * The row will be empty - to fill in values, you need to dereference the returned iterator and use Row::operator[] or Row::set_value().
   * See also insert() and prepend().
   *
   * @result An iterator to the new row.
   "
      end

      operation 393257 "iter_swap"
	public explicit_return_type "void"
	nparams 2
	  param in name "a" explicit_type "iterator"
	  param in name "b" explicit_type "iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Swaps @a a  and @a b  in @a store . Note that this function only works with
   * unsorted stores.
   * 
   * Since: 2.2
   * @param a A Gtk::TreeIter.
   * @param b Another Gtk::TreeIter.
   "
      end

      operation 393385 "move"
	public explicit_return_type "void"
	nparams 2
	  param in name "source" explicit_type "iterator"
	  param in name "destination" explicit_type "iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves @a source to the position at @a destination.
   * Note that this function only works with unsorted stores.
   * @param source The row that should be moved.
   * @param destination The position to move to.
   "
      end

      operation 393513 "reorder"
	public explicit_return_type "void"
	nparams 1
	  param in name "new_order" explicit_type "Glib::ArrayHandle<int>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Reorders the list store to follow the order indicated by @a new_order.
   * Note that this function only works with unsorted stores.
   "
      end

      operation 393641 "clear"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Removes all rows from the list store.
   "
      end

      operation 393769 "iter_is_valid"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "iter" explicit_type "iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* WARNING: This function is slow. Only use it for debugging and/or testing
   * purposes.
   * 
   * Checks if the given iter is a valid iter for this Gtk::ListStore.
   * @param iter A Gtk::TreeIter.
   * @return <tt>true</tt> if the iter is valid, <tt>false</tt> if the iter is invalid.
   * 
   * Since: 2.2.
   "
      end

      operation 393897 "set_value_impl"
	cpp_virtual protected explicit_return_type "void"
	nparams 3
	  param in name "row" explicit_type "iterator"
	  param in name "column" explicit_type "int"
	  param in name "value" explicit_type "Glib::ValueBase"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 206121 "KeySnooperSig"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/keysnoopersig.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "gtk+ calls this, which then calls our slot.
/ KeySnooper Signal Class (internal)"
      class 206249 "SlotType"
	visibility package stereotype "typedef" explicit_base_type "sigc::slot<int, Widget*, GdkEventKey*>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 394537 "connect"
	public explicit_return_type "sigc::connection"
	nparams 1
	  param in name "slot" type class_ref 206249 // SlotType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 394665 "gtk_callback"
	class_operation protected explicit_return_type "int"
	nparams 3
	  param inout name "widget" explicit_type "GtkWidget"
	  param inout name "event" explicit_type "GdkEventKey"
	  param in name "data" explicit_type "gpointer"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 206377 "Main"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/main.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "**********************************************************************
* Main application class
 * Every application must have one of these objects.
 * It may not be global and must be the first Gtk object created.
 * It is a singleton so declaring more than one will simply access the first
 * created.
 *
 * Normal use of this class is in the main() function to give argc and argv
 * to the gtk initialization. Widgets can use Gtk::Main::quit()
 * to exit from the application.
 *
 * The internals of the widget have been disguised as signals
 * so that the user can easily connect using the same methods
 * used throughout the widget interface.
 *
 * Minimal gtkmm application is something like this:
 * @code
 * int main(int argc, char *argv[]) {
 *     Gtk::Main kit(argc, argv);
 *     ... create some widgets ...
 *     kit.run();
 * }
 * @endcode
 "
      operation 394793 "Main"
	public explicit_return_type ""
	nparams 3
	  param inout name "argc" explicit_type "int"
	  param inout name "argv" explicit_type "char"
	  param in name "set_locale" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}, ${t1} * * * ${p1}, ${t2} ${p2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}, ${t1} * * * ${p1}, ${t2} ${p2}${)}${throw}{
${body}}
"
	
	
	
	
	comment "* Scans the argument vector, and strips off all parameters known to GTK+.
   * Your application may then handle the remaining arguments.
   *
   * Note:  The argument strings themself won't be modified, although the
   * pointers to them might change.  This makes it possible to create your
   * own argv of string literals, which have the type 'const char[]' in
   * standard C++.  (You might need to use const_cast<>, though.)
   "
      end

      operation 394921 "Main"
	public explicit_return_type ""
	nparams 3
	  param inout name "argc" explicit_type "int"
	  param inout name "argv" explicit_type "char"
	  param in name "set_locale" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}, ${t1} * * & ${p1}, ${t2} ${p2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}, ${t1} * * & ${p1}, ${t2} ${p2}${)}${throw}{
${body}}
"
	
	
	
	
	comment "/ See Main(int* argc, char*** argv, bool set_locale)."
      end

      operation 395049 "~Main"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 395177 "instance"
	class_operation public explicit_return_type "Gtk::Main"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/ Access to the one global instance of Gtk::Main."
      end

      operation 395305 "run"
	class_operation public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Start the event loop.
   * This begins the event loop which handles events.  No
   * events propagate until this has been called.  It may be
   * called recursively to popup dialogs
   "
      end

      operation 395433 "run"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "window" type class_ref 281129 // Window
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns from the main loop when the window is closed.
   * When using this override, you should not use Gtk::Main::quit() to close
   * the application, but just call hide() on your Window class.
   *
   * @param window The window to show. This method will return when the window is hidden.
   "
      end

      operation 395561 "quit"
	class_operation public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Makes the innermost invocation of the main loop return when it regains control.
   "
      end

      operation 395689 "level"
	class_operation public explicit_return_type "guint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 395817 "iteration"
	class_operation public explicit_return_type "bool"
	nparams 1
	  param in name "blocking" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Runs a single iteration of the main loop.
   * If no events are waiting to be processed GTK+ will block until the next event is noticed.
   * If you don't want to block then pass false for @a blocking or check if any events are pending with
   * pending() first.
   *
   * @param blocking Whether the caller must wait until the next event is noticed, or return immediately if there are no events.
   * @result true if quit() has been called for the innermost main loop.
   "
      end

      operation 395945 "events_pending"
	class_operation public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Checks if any events are pending. This can be used to update the GUI and invoke timeouts etc. while doing some time intensive computation.
   *
   * Example: Updating the GUI during a long computation.
   * @code
   * // computation going on
   * while( Gtk::Main::events_pending() )
   *   Gtk::Main::iteration();
   *
   * // computation continued
   * @endcode
   *
   * @result true if any events are pending, false otherwise.
   "
      end

      operation 396073 "signal_run"
	class_operation public return_type class_ref 205609 // RunSig
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Run signal
   * @return void
   "
      end

      operation 396201 "signal_quit"
	class_operation public return_type class_ref 205865 // QuitSig
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Quit signal
   * You can connect signal handlers to invoke actions when Gtk::Main::quit()
   * has been called.  Note that main loops can be nested by calling
   * Gtk::Main::run() recursively, therefore receiving this signal doesn't
   * necessarily mean the application is about to be terminated.  If you want
   * to receive a signal only when the last main loop quits, call connect()
   * with <tt>main_level&nbsp;=&nbsp;1</tt>.
   * @code
   * bool thisclass::mymethod() { return false; }
   * Gtk::Main::signal_quit().connect(sigc::mem_fun(this, &thisclass::mymethod));
   * @endcode
   * @return bool - @c false means callback is removed, @c true means
   * it'll be called again the next the main loop quits.
   "
      end

      operation 396329 "signal_key_snooper"
	class_operation public return_type class_ref 206121 // KeySnooperSig
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* KeySnooper signal
   * Allows you to channel keypresses to a signal handler
   * without registering with the widget.
   *
   * @return KeySnooperSig A Signal to which you can connect a sigc::slot< int, Widget *, GdkEventKey * >
   *
   * It is the responsibility of the snooper to pass the keypress
   * to the widget, however, care must be taken that the keypress is
   * not passed twice.
   "
      end

      operation 396457 "init_gtkmm_internals"
	class_operation public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " Initialize table of wrap_new functions.
 Doesn't need an instance of Gtk::Main."
      end

      operation 396585 "Main"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 396713 "init"
	protected explicit_return_type "void"
	nparams 3
	  param inout name "argc" explicit_type "int"
	  param inout name "argv" explicit_type "char"
	  param in name "set_locale" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}, ${t1} * * * ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * * * ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 396841 "run_impl"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 396969 "quit_impl"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 397097 "level_impl"
	cpp_virtual protected explicit_return_type "guint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 397225 "iteration_impl"
	cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param in name "blocking" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 397353 "events_pending_impl"
	cpp_virtual protected explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 397481 "on_window_hide"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " Signal handlers:"
      end

      classrelation 180393 // signal_run_ (<directional composition>)
	relation 180393 *-->
	  a role_name "signal_run_" class_relation protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 180393 // signal_run_ (<directional composition>)
	  b parent class_ref 205609 // RunSig
      end

      classrelation 180521 // signal_quit_ (<directional composition>)
	relation 180521 *-->
	  a role_name "signal_quit_" class_relation protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 180521 // signal_quit_ (<directional composition>)
	  b parent class_ref 205865 // QuitSig
      end

      classrelation 180649 // signal_key_snooper_ (<directional composition>)
	relation 180649 *-->
	  a role_name "signal_key_snooper_" class_relation protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 180649 // signal_key_snooper_ (<directional composition>)
	  b parent class_ref 206121 // KeySnooperSig
      end

      classrelation 180777 // instance_ (<unidirectional association>)
	relation 180777 --->
	  a role_name "instance_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 180777 // instance_ (<unidirectional association>)
	  b parent class_ref 206377 // Main
      end
    end

    class 203689 "Menu"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/menu.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* @defgroup Menus Menu classes
 
* A drop-down menu consisting of Gtk::MenuItem objects which can be navigated and activated by the user to perform application functions.
 * Menus are normally placed inside a Gtk::MenuBar or another MenuItem as a sub menu.
 * A Menu can also be popped up, for instance as a right-click context menu, by calling the popup() method.
 * See also Gtk::OptionMenu.
 * @ingroup Widgets
 * @ingroup Menus
 "
      classrelation 180905 // <generalisation>
	relation 180905 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 180905 // <generalisation>
	  b parent class_ref 206633 // MenuShell
      end

      class 206761 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 203689 // Menu
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 181033 // <realization>
	  relation 181033 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 181033 // <realization>
	    b parent class_ref 203689 // Menu
	end
      end

      class 207017 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Menu_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 207145 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkMenu"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 207273 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkMenuClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 397609 "~Menu"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 181417 // menu_class_ (<directional composition>)
	relation 181417 *-->
	  a role_name "menu_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 181417 // menu_class_ (<directional composition>)
	  b parent class_ref 207017 // CppClassType
      end

      operation 397737 "Menu"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 203689 // Menu
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 397865 "operator ="
	private return_type class_ref 203689 // Menu
	nparams 1
	  param in name "" type class_ref 203689 // Menu
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 397993 "Menu"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 398121 "Menu"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkMenu"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 398249 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 398377 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 398505 "gobj"
	cpp_inline public explicit_return_type "GtkMenu"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkMenu*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 398633 "gobj"
	const cpp_inline public explicit_return_type "GtkMenu"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkMenu*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 398761 "Menu"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::
deprecated."
      end

      class 207401 "SlotPositionCalc"
	visibility package stereotype "typedef" explicit_base_type "sigc::slot<void, int&, int&, bool&>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 398889 "popup"
	public explicit_return_type "void"
	nparams 5
	  param inout name "parent_menu_shell" type class_ref 206633 // MenuShell
	  param inout name "parent_menu_item" type class_ref 131369 // MenuItem
	  param in name "slot" type class_ref 207401 // SlotPositionCalc
	  param in name "button" explicit_type "guint"
	  param in name "activate_time" explicit_type "guint32"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 399017 "popup"
	public explicit_return_type "void"
	nparams 3
	  param in name "position_calc_slot" type class_ref 207401 // SlotPositionCalc
	  param in name "button" explicit_type "guint"
	  param in name "activate_time" explicit_type "guint32"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Displays a menu and makes it available for selection.  Applications can use
   * this function to display context-sensitive menus.
   *
   * The @a button  parameter should be the mouse button pressed to initiate
   * the menu popup. If the menu popup was initiated by something other than
   * a mouse button press, such as a mouse button release or a keypress,
   *  @a button  should be 0.
   *
   * The @a activate_time  parameter should be the time stamp of the event that
   * initiated the popup. If such an event is not available, use
   * gtk_get_current_event_time() instead.
   * @param func A position_calc_slot supplied function used to position the menu, or <tt>0</tt>.
   * @param button The mouse button which was pressed to initiate the event.
   * @param activate_time The time at which the activation event occurred.
   "
      end

      operation 399145 "popup"
	public explicit_return_type "void"
	nparams 2
	  param in name "button" explicit_type "guint"
	  param in name "activate_time" explicit_type "guint32"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Displays a menu and makes it available for selection.
   * Applications can use this function to display context-sensitive menus, at the current pointer position.
   * @param button The button which was pressed to initiate the event.
   * @param activate_time The time at which the activation event occurred.
   "
      end

      operation 399273 "reposition"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 399401 "popdown"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 399529 "get_active"
	public return_type class_ref 131369 // MenuItem
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 399657 "get_active"
	const public return_type class_ref 131369 // MenuItem
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 399785 "set_active"
	public explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "guint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 399913 "set_accel_group"
	public explicit_return_type "void"
	nparams 1
	  param in name "accel_group" explicit_type "Glib::RefPtr<AccelGroup>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 400041 "unset_accel_group"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 400169 "get_accel_group"
	public explicit_return_type "Glib::RefPtr<AccelGroup>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 400297 "get_accel_group"
	const public explicit_return_type "Glib::RefPtr<const AccelGroup>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 400425 "set_accel_path"
	public explicit_return_type "void"
	nparams 1
	  param in name "accel_path" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets an accelerator path for this menu from which accelerator paths
   * for its immediate children, its menu items, can be constructed.
   * The main purpose of this function is to spare the programmer the
   * inconvenience of having to call Gtk::MenuItem::set_accel_path() on
   * each menu item that should support runtime user changable accelerators.
   * Instead, by just calling set_accel_path() on their parent,
   * each menu item of this menu, that contains a label describing its purpose,
   * automatically gets an accel path assigned. For example, a menu containing
   * menu items \"New\" and \"Exit\", will, after 
   * <tt>gtk_menu_set_accel_path (menu, \"&lt;Gnumeric-Sheet&gt;/File\");</tt>
   * has been called, assign its items the accel paths:
   * <tt>\"&lt;Gnumeric-Sheet&gt;/File/New\"</tt> and <tt>\"&lt;Gnumeric-Sheet&gt;/File/Exit\"</tt>.
   * Assigning accel paths to menu items then enables the user to change
   * their accelerators at runtime. More details about accelerator paths
   * and their default setups can be found at gtk_accel_map_add_entry().
   * @param accel_path A valid accelerator path.
   "
      end

      operation 400553 "detach"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 400681 "get_attach_widget"
	public return_type class_ref 130089 // Widget
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 400809 "get_attach_widget"
	const public return_type class_ref 130089 // Widget
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 400937 "set_tearoff_state"
	public explicit_return_type "void"
	nparams 1
	  param in name "torn_off" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 401065 "get_tearoff_state"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether the menu is torn off. See
   * set_tearoff_state().
   * @return <tt>true</tt> if the menu is currently torn off.
   "
      end

      operation 401193 "set_title"
	public explicit_return_type "void"
	nparams 1
	  param in name "title" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the title string for the menu.  The title is displayed when the menu
   * is shown as a tearoff menu.
   * @param title A string containing the title for the menu.
   "
      end

      operation 401321 "unset_title"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 401449 "get_title"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the title of the menu. See set_title().
   * @return The title of the menu, or <tt>0</tt> if the menu has no
   * title set on it. This string is owned by the widget and should
   * not be modified or freed.
   "
      end

      operation 401577 "set_screen"
	public explicit_return_type "void"
	nparams 1
	  param in name "screen" explicit_type "Glib::RefPtr<Gdk::Screen>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the Gdk::Screen on which the menu will be displayed.
   * 
   * Since: 2.2
   * @param screen A Gdk::Screen, or <tt>0</tt> if the screen should be
   * determined by the widget the menu is attached to.
   "
      end

      operation 401705 "attach"
	public explicit_return_type "void"
	nparams 5
	  param inout name "child" explicit_type "Gtk::Widget"
	  param in name "left_attach" explicit_type "guint"
	  param in name "right_attach" explicit_type "guint"
	  param in name "top_attach" explicit_type "guint"
	  param in name "bottom_attach" explicit_type "guint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Adds a new Gtk::MenuItem to a (table) menu. The number of 'cells' that
   * an item will occupy is specified by @a left_attach , @a right_attach ,
   *  @a top_attach  and @a bottom_attach . These each represent the leftmost,
   * rightmost, uppermost and lower column and row numbers of the table.
   * (Columns and rows are indexed from zero).
   * 
   * Note that this function is not related to detach().
   * 
   * Since: 2.4
   * @param child A Gtk::MenuItem.
   * @param left_attach The column number to attach the left side of the item to.
   * @param right_attach The column number to attach the right side of the item to.
   * @param top_attach The row number to attach the top of the item to.
   * @param bottom_attach The row number to attach the bottom of the item to.
   "
      end

      operation 401833 "set_monitor"
	public explicit_return_type "void"
	nparams 1
	  param in name "monitor_num" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Informs GTK+ on which monitor a menu should be popped up. 
   * See gdk_screen_get_monitor_geometry().
   * 
   * This function should be called from a Gtk::MenuPositionFunc if the
   * menu should not appear on the same monitor as the pointer. This 
   * information can't be reliably inferred from the coordinates returned
   * by a Gtk::MenuPositionFunc, since, for very long menus, these coordinates 
   * may extend beyond the monitor boundaries or even the screen boundaries. 
   * 
   * Since: 2.4
   * @param monitor_num The number of the monitor on which the menu should
   * be popped up.
   "
      end

      operation 401961 "reorder_child"
	public explicit_return_type "void"
	nparams 2
	  param in name "child" type class_ref 131369 // MenuItem
	  param in name "position" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 402089 "property_tearoff_title"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 402217 "property_tearoff_title"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      class 207529 "GtkMenuDetachFunc"
	visibility package stereotype "typedef" explicit_base_type "void"
	cpp_decl "${comment}typedef ${type}(* ${name})   (GtkWidget *attach_widget, GtkMenu   *menu);
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 402345 "attach_to_widget"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detacher" type class_ref 207529 // GtkMenuDetachFunc
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 207657 "MenuBar"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/menubar.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* A standard menu bar which usually holds Gtk::Menu submenu items.
 * The useful methods are in the base class - Gtk::MenuShell.
 * @ingroup Widgets
 * @ingroup Menus
 "
      classrelation 181545 // <generalisation>
	relation 181545 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 181545 // <generalisation>
	  b parent class_ref 206633 // MenuShell
      end

      class 207785 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 207657 // MenuBar
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 181673 // <realization>
	  relation 181673 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 181673 // <realization>
	    b parent class_ref 207657 // MenuBar
	end
      end

      class 208041 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "MenuBar_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 208169 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkMenuBar"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 208297 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkMenuBarClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 402473 "~MenuBar"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 182057 // menubar_class_ (<directional composition>)
	relation 182057 *-->
	  a role_name "menubar_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 182057 // menubar_class_ (<directional composition>)
	  b parent class_ref 208041 // CppClassType
      end

      operation 402601 "MenuBar"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 207657 // MenuBar
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 402729 "operator ="
	private return_type class_ref 207657 // MenuBar
	nparams 1
	  param in name "" type class_ref 207657 // MenuBar
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 402857 "MenuBar"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 402985 "MenuBar"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkMenuBar"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 403113 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 403241 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 403369 "gobj"
	cpp_inline public explicit_return_type "GtkMenuBar"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkMenuBar*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 403497 "gobj"
	const cpp_inline public explicit_return_type "GtkMenuBar"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkMenuBar*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 403625 "MenuBar"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 403753 "init_accels_handler_"
	private explicit_return_type "void"
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " append, prepend and insert are defined in menushell"
      end
    end

    class 311593 "MenuDirectionType"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 "
      attribute 187689 "MENU_DIR_PARENT"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 187817 "MENU_DIR_CHILD"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 187945 "MENU_DIR_NEXT"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 188073 "MENU_DIR_PREV"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 131369 "MenuItem"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/menuitem.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Child item for menus.
 * Handle highlighting, alignment, events and submenus.
 * As it derives from Gtk::Bin it can hold any valid child widget, altough only a few are really useful.
 * @ingroup Widgets
 * @ingroup Menus
 "
      classrelation 182185 // <generalisation>
	relation 182185 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 182185 // <generalisation>
	  b parent class_ref 202281 // Item
      end

      class 208425 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 131369 // MenuItem
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 182313 // <realization>
	  relation 182313 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 182313 // <realization>
	    b parent class_ref 131369 // MenuItem
	end
      end

      class 208681 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "MenuItem_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 208809 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkMenuItem"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 208937 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkMenuItemClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 403881 "~MenuItem"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 182697 // menuitem_class_ (<directional composition>)
	relation 182697 *-->
	  a role_name "menuitem_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 182697 // menuitem_class_ (<directional composition>)
	  b parent class_ref 208681 // CppClassType
      end

      operation 404009 "MenuItem"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 131369 // MenuItem
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 404137 "operator ="
	private return_type class_ref 131369 // MenuItem
	nparams 1
	  param in name "" type class_ref 131369 // MenuItem
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 404265 "MenuItem"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 404393 "MenuItem"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkMenuItem"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 404521 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 404649 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 404777 "gobj"
	cpp_inline public explicit_return_type "GtkMenuItem"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkMenuItem*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 404905 "gobj"
	const cpp_inline public explicit_return_type "GtkMenuItem"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkMenuItem*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 405033 "on_activate"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 405161 "on_activate_item"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 405289 "on_toggle_size_request"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "requisition" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 405417 "on_toggle_size_allocate"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "allocation" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 405545 "MenuItem"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "/ Create an empty menu item"
      end

      operation 405673 "MenuItem"
	public explicit_return_type ""
	nparams 1
	  param inout name "widget" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment "/ Create a menu item with widget"
      end

      operation 405801 "MenuItem"
	public explicit_return_type ""
	nparams 2
	  param in name "label" explicit_type "Glib::ustring"
	  param in name "mnemonic" explicit_type "bool"
	    defaultvalue " false"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${throw}{
${body}}
"
	
	
	
	
	comment "/ Create a menu item with label"
      end

      operation 405929 "set_submenu"
	public explicit_return_type "void"
	nparams 1
	  param inout name "submenu" type class_ref 203689 // Menu
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 406057 "get_submenu"
	public return_type class_ref 203689 // Menu
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the submenu underneath this menu item, if any. See
   * set_submenu().
   * @return Submenu for this menu item, or <tt>0</tt> if none.
   "
      end

      operation 406185 "get_submenu"
	const public return_type class_ref 203689 // Menu
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the submenu underneath this menu item, if any. See
   * set_submenu().
   * @return Submenu for this menu item, or <tt>0</tt> if none.
   "
      end

      operation 406313 "has_submenu"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 406441 "remove_submenu"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 406569 "select"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 406697 "deselect"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 406825 "activate"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 406953 "toggle_size_request"
	public explicit_return_type "void"
	nparams 1
	  param inout name "requisition" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 407081 "toggle_size_allocate"
	public explicit_return_type "void"
	nparams 1
	  param in name "allocation" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 407209 "set_right_justified"
	public explicit_return_type "void"
	nparams 1
	  param in name "right_justified" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets whether the menu item appears justified at the right
   * side of a menu bar. This was traditionally done for \"Help\" menu
   * items, but is now considered a bad idea. (If the widget
   * layout is reversed for a right-to-left language like Hebrew
   * or Arabic, right-justified-menu-items appear at the left.)
   * @param right_justified If <tt>true</tt> the menu item will appear at the 
   * far right if added to a menu bar.
   "
      end

      operation 407337 "get_right_justified"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets whether the menu item appears justified at the right
   * side of the menu bar.
   * @return <tt>true</tt> if the menu item will appear at the
   * far right if added to a menu bar.
   "
      end

      operation 407465 "set_accel_path"
	public explicit_return_type "void"
	nparams 1
	  param in name "accel_path" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Set the accelerator path on @a menu_item , through which runtime changes of the
   * menu item's accelerator caused by the user can be identified and saved to
   * persistant storage (see gtk_accel_map_save() on this).
   * To setup a default accelerator for this menu item, call
   * gtk_accel_map_add_entry() with the same @a accel_path .
   * See also gtk_accel_map_add_entry() on the specifics of accelerator paths,
   * and set_accel_path() for a more convenient variant of this function.
   * 
   * This function is basically a convenience wrapper that handles calling
   * Gtk::Widget::set_accel_path() with the appropriate accelerator group for
   * the menu item.
   * 
   * Note that you do need to set an accelerator on the parent menu with
   * set_accel_group() for this to work.
   * @param accel_path Accelerator path, corresponding to this menu item's
   * functionality.
   "
      end

      operation 407593 "unset_accel_path"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 407721 "signal_activate"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 407849 "signal_activate_item"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 407977 "signal_toggle_size_request"
	public explicit_return_type "Glib::SignalProxy1< void,int* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 408105 "signal_toggle_size_allocate"
	public explicit_return_type "Glib::SignalProxy1< void,int >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 408233 "accelerate"
	public explicit_return_type "void"
	nparams 1
	  param inout name "window" type class_ref 281129 // Window
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 408361 "add_accel_label"
	protected explicit_return_type "void"
	nparams 2
	  param in name "label" explicit_type "Glib::ustring"
	  param in name "mnemonic" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 408489 "set_accel_key"
	protected explicit_return_type "void"
	nparams 1
	  param in name "accel_key" type class_ref 129065 // AccelKey
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      classrelation 182953 // accel_key_ (<directional composition>)
	relation 182953 *-->
	  a role_name "accel_key_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 182953 // accel_key_ (<directional composition>)
	  b parent class_ref 129065 // AccelKey
      end
    end

    class 209065 "MenuList"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/menulist.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "********************************************************************
***** List properties
********************************************************************"
      operation 408617 "MenuList"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 408745 "MenuList"
	public explicit_return_type ""
	nparams 1
	  param inout name "gparent" explicit_type "GtkMenuShell"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 408873 "MenuList"
	public explicit_return_type ""
	nparams 1
	  param in name "src" type class_ref 209065 // MenuList
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 409001 "~MenuList"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	
	
      end

      operation 409129 "operator ="
	public return_type class_ref 209065 // MenuList
	nparams 1
	  param in name "src" type class_ref 209065 // MenuList
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      class 209321 "type_base"
	visibility package stereotype "typedef" explicit_base_type "Glib::HelperList< MenuItem, const Element,  Glib::List_Cpp_Iterator<GtkMenuItem,MenuItem> >"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 409257 "gparent"
	public explicit_return_type "GtkMenuShell"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 409385 "gparent"
	const public explicit_return_type "GtkMenuShell"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 409513 "glist"
	const cpp_virtual public explicit_return_type "GList"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 409641 "erase"
	cpp_virtual public explicit_return_type "void"
	nparams 2
	  param in name "start" explicit_type "iterator"
	  param in name "stop" explicit_type "iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " front of list"
      end

      operation 409769 "erase"
	cpp_virtual public explicit_return_type "iterator"
	nparams 1
	  param in name "" explicit_type "iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 409897 "remove"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "" explicit_type "const_reference"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Implented as custom or by LIST_CONTAINER_REMOVE"
      end

      operation 410025 "operator []"
	const public explicit_return_type "reference"
	nparams 1
	  param in name "l" explicit_type "size_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Implented as custom or by LIST_CONTAINER_REMOVE
/ This is order n. (use at own risk)"
      end

      operation 410153 "insert"
	public explicit_return_type "iterator"
	nparams 2
	  param in name "position" explicit_type "iterator"
	  param inout name "e" explicit_type "element_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 410281 "insert"
	stereotype "template"
	cpp_inline public explicit_return_type "void"
	nparams 3
	  param in name "position" explicit_type "iterator"
	  param in name "first" explicit_type "InputIterator"
	  param in name "last" explicit_type "InputIterator"
	cpp_decl "    ${comment}template<class InputIterator>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract} {
    for(;first != last; ++first)
      position = insert(position, *first);
  };
"
	
	
	
	
	comment "custom-implemented."
      end

      operation 410409 "push_front"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "element_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} { insert(begin(), e); };
"
	
	
	
	
      end

      operation 410537 "push_back"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "element_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} { insert(end(), e); };
"
	
	
	
	
      end

      operation 410665 "remove"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param inout name "widget" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 206633 "MenuShell"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/menushell.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "custom
 namespace Menu_Helpers
* The abstract base class for Gtk::Menu and Gtk::MenuBar.
 * It is a container of Gtk::MenuItem objects arranged in a list which can be navigated, selected, and activated by the user to perform application functions.
 * It can have a submenu associated with it, allowing for nested hierarchical menus.
 * You can use append(), prepend() and insert() to add Gtk::MenuItem widgets,
 * but you will probably find it more convenient to use the STL-style items() interface with the Gtk::Menu_Helpers::MenuElem() class.
 * @ingroup Widgets
 * @ingroup Containers
 * @ingroup Menus
 "
      classrelation 183209 // <generalisation>
	relation 183209 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 183209 // <generalisation>
	  b parent class_ref 280745 // Container
      end

      class 209449 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 206633 // MenuShell
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 183337 // <realization>
	  relation 183337 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 183337 // <realization>
	    b parent class_ref 206633 // MenuShell
	end
      end

      class 209705 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "MenuShell_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 209833 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkMenuShell"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 209961 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkMenuShellClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 410793 "~MenuShell"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 183721 // menushell_class_ (<directional composition>)
	relation 183721 *-->
	  a role_name "menushell_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 183721 // menushell_class_ (<directional composition>)
	  b parent class_ref 209705 // CppClassType
      end

      operation 410921 "MenuShell"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 206633 // MenuShell
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 411049 "operator ="
	private return_type class_ref 206633 // MenuShell
	nparams 1
	  param in name "" type class_ref 206633 // MenuShell
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 411177 "MenuShell"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 411305 "MenuShell"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkMenuShell"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 411433 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 411561 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 411689 "gobj"
	cpp_inline public explicit_return_type "GtkMenuShell"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkMenuShell*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 411817 "gobj"
	const cpp_inline public explicit_return_type "GtkMenuShell"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkMenuShell*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 411945 "on_deactivate"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 412073 "on_selection_done"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      class 210089 "MenuList"
	visibility package stereotype "typedef" base_type class_ref 209065 // MenuList
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 183849 // <realization>
	  relation 183849 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 183849 // <realization>
	    b parent class_ref 209065 // MenuList
	end
      end

      classrelation 183977 // <dependency>
	relation 183977 -_->
	  stereotype "friend"
	  a default
	    cpp default "${type}"
	    classrelation_ref 183977 // <dependency>
	  b parent class_ref 209065 // MenuList
      end

      operation 412201 "append"
	public explicit_return_type "void"
	nparams 1
	  param inout name "menu_item" type class_ref 131369 // MenuItem
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 412329 "prepend"
	public explicit_return_type "void"
	nparams 1
	  param inout name "menu_item" type class_ref 131369 // MenuItem
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 412457 "insert"
	public explicit_return_type "void"
	nparams 2
	  param inout name "menu_item" type class_ref 131369 // MenuItem
	  param in name "position" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 412585 "select_item"
	public explicit_return_type "void"
	nparams 1
	  param inout name "menu_item" type class_ref 131369 // MenuItem
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 412713 "deselect"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 412841 "activate_item"
	public explicit_return_type "void"
	nparams 2
	  param inout name "menu_item" type class_ref 131369 // MenuItem
	  param in name "force_deactivate" explicit_type "bool"
	    defaultvalue " false"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO: Is force_deactivate = false a good default?"
      end

      operation 412969 "select_first"
	public explicit_return_type "void"
	nparams 1
	  param in name "search_sensitive" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Select the first visible or selectable child of the menu shell;
   * don't select tearoff items unless the only item is a tearoff
   * item.
   * 
   * Since: 2.2
   * @param search_sensitive If <tt>true</tt>, search for the first selectable
   * menu item, otherwise select nothing if
   * the first item isn't sensitive. This
   * should be <tt>false</tt> if the menu is being
   * popped up initially.
   "
      end

      operation 413097 "deactivate"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 413225 "cancel"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Cancels the selection within the menu shell.  
   * 
   * Since: 2.4
   "
      end

      operation 413353 "signal_deactivate"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 413481 "signal_selection_done"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 413609 "items"
	public return_type class_ref 210089 // MenuList
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Keybinding signals:"
      end

      operation 413737 "items"
	const public return_type class_ref 210089 // MenuList
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 413865 "accelerate"
	public explicit_return_type "void"
	nparams 1
	  param inout name "window" type class_ref 281129 // Window
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "*
   * Initializes menu accelerators.
   * This method initializes the menu accelerators. Therefore an
   * AccelGroup object is needed which is stored in each Window object
   * in the Gtkmm library implementation.
   *
   * When using MenuBar and OptionMenu objects this method is called
   * automatically when the menus are realized. Because most likely the
   * MenuBar and OptionMenu is attached to a window at this time and
   * the window object can be found automatically.
   *
   * Important note when using popup menus: 
   * If you are using accelerated menu entries inside a popup
   * menu you have to call the accelerate() method manually. This is
   * because the popup menu is not connected to any window and the
   * accelerators should be initialized even before the popup menu is
   * shown. The right place to call the accelerate() method is right
   * after the popup menu has been build.
   *
   * @param window Window where the menu is shown. Inside this window
   *   the AccelGroup object is stored that will be used to initialize
   *   the accelerators.
   "
      end

      operation 413993 "accelerate"
	public explicit_return_type "void"
	nparams 1
	  param inout name "parent" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "*
   * Initializes menu accelerators.
   * Does the same as the accelerate(Window& window) method. But you can
   * use any parent widget where the menu is used. This method then gets
   * the toplevel window using Widget::get_toplevel() and uses this
   * window for registering the menu accelerators.
   *
   * @param parent Parent widget used as starting point for searching
   *   the toplevel window.
   "
      end

      operation 414121 "MenuShell"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 184105 // items_proxy_ (<directional composition>)
	relation 184105 *-->
	  a role_name "items_proxy_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 184105 // items_proxy_ (<directional composition>)
	  b parent class_ref 210089 // MenuList
      end

      attribute 199721 "accel_window_"
	private explicit_type "Gtk::Window"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 210985 "MessageDialog"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/messagedialog.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Convenient message window.
 *
 * Gtk::MessageDialog presents a dialog with an image representing the type
 * of message (Error, Question, etc.) alongside some message text. It's
 * simply a convenience widget; you could construct the equivalent of
 * Gtk::MessageDialog from Gtk::Dialog without too much effort, but
 * Gtk::MessageDialog saves typing. 
 *
 * @ingroup Dialogs
 "
      classrelation 184489 // <generalisation>
	relation 184489 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 184489 // <generalisation>
	  b parent class_ref 296617 // Dialog
      end

      class 211113 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 210985 // MessageDialog
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 184617 // <realization>
	  relation 184617 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 184617 // <realization>
	    b parent class_ref 210985 // MessageDialog
	end
      end

      class 211369 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "MessageDialog_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 211497 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkMessageDialog"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 211625 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkMessageDialogClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 414505 "~MessageDialog"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 185001 // messagedialog_class_ (<directional composition>)
	relation 185001 *-->
	  a role_name "messagedialog_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 185001 // messagedialog_class_ (<directional composition>)
	  b parent class_ref 211369 // CppClassType
      end

      operation 414633 "MessageDialog"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 210985 // MessageDialog
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 414761 "operator ="
	private return_type class_ref 210985 // MessageDialog
	nparams 1
	  param in name "" type class_ref 210985 // MessageDialog
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 414889 "MessageDialog"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 415017 "MessageDialog"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkMessageDialog"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 415145 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 415273 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 415401 "gobj"
	cpp_inline public explicit_return_type "GtkMessageDialog"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkMessageDialog*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 415529 "gobj"
	const cpp_inline public explicit_return_type "GtkMessageDialog"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkMessageDialog*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 415657 "MessageDialog"
	public explicit_return_type ""
	nparams 5
	  param in name "message" explicit_type "Glib::ustring"
	  param in name "use_markup" explicit_type "bool"
	    defaultvalue " false"
	  param in name "type" type class_ref 210217 // MessageType
	    defaultvalue " MESSAGE_INFO"
	  param in name "buttons" type class_ref 210601 // ButtonsType
	    defaultvalue " BUTTONS_OK"
	  param in name "modal" explicit_type "bool"
	    defaultvalue " false"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 415785 "MessageDialog"
	public explicit_return_type ""
	nparams 6
	  param inout name "parent" explicit_type "Gtk::Window"
	  param in name "message" explicit_type "Glib::ustring"
	  param in name "use_markup" explicit_type "bool"
	    defaultvalue " false"
	  param in name "type" type class_ref 210217 // MessageType
	    defaultvalue " MESSAGE_INFO"
	  param in name "buttons" type class_ref 210601 // ButtonsType
	    defaultvalue " BUTTONS_OK"
	  param in name "modal" explicit_type "bool"
	    defaultvalue " false"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 415913 "set_markup"
	public explicit_return_type "void"
	nparams 1
	  param in name "str" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the text of the message dialog to be @a str , which is marked
   * up with the Pango text markup
   * language.
   * 
   * Since: 2.4
   * @param str Markup string (see Pango markup format).
   "
      end

      operation 416041 "set_message"
	protected explicit_return_type "void"
	nparams 2
	  param in name "message" explicit_type "Glib::ustring"
	  param in name "use_markup" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 210217 "MessageType"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* @addtogroup gtkmmEnums Enums and Flags 
*
 * @ingroup gtkmmEnums
 "
      attribute 199849 "MESSAGE_INFO"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 199977 "MESSAGE_WARNING"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 200105 "MESSAGE_QUESTION"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 200233 "MESSAGE_ERROR"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 311977 "MetricType"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 "
      attribute 188201 "PIXELS"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 188329 "INCHES"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 188457 "CENTIMETERS"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 183465 "Misc"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/misc.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* A base class for widgets with alignments and padding.
 *
 * This is an abstract for a set of utility widgets
 * that lack a physical window.  They do have
 * alignment and padding within their defined space.
 *
 * Without a window, widgets of this type cannot capture events.
 * To capture events place in Gtk::EventBox.
 *
 "
      classrelation 185129 // <generalisation>
	relation 185129 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 185129 // <generalisation>
	  b parent class_ref 130089 // Widget
      end

      class 211753 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 183465 // Misc
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 185257 // <realization>
	  relation 185257 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 185257 // <realization>
	    b parent class_ref 183465 // Misc
	end
      end

      class 212009 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Misc_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 212137 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkMisc"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 212265 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkMiscClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 416169 "~Misc"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 185641 // misc_class_ (<directional composition>)
	relation 185641 *-->
	  a role_name "misc_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 185641 // misc_class_ (<directional composition>)
	  b parent class_ref 212009 // CppClassType
      end

      operation 416297 "Misc"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 183465 // Misc
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 416425 "operator ="
	private return_type class_ref 183465 // Misc
	nparams 1
	  param in name "" type class_ref 183465 // Misc
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 416553 "Misc"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 416681 "Misc"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkMisc"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 416809 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 416937 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 417065 "gobj"
	cpp_inline public explicit_return_type "GtkMisc"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkMisc*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 417193 "gobj"
	const cpp_inline public explicit_return_type "GtkMisc"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkMisc*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 417321 "Misc"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 417449 "set_alignment"
	public explicit_return_type "void"
	nparams 2
	  param in name "xalign" explicit_type "float"
	    defaultvalue " 0.0"
	  param in name "yalign" explicit_type "float"
	    defaultvalue " 0.5"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 417577 "set_alignment"
	public explicit_return_type "void"
	nparams 2
	  param in name "xalign" type class_ref 134697 // AlignmentEnum
	    defaultvalue " Gtk::ALIGN_LEFT"
	  param in name "yalign" type class_ref 134697 // AlignmentEnum
	    defaultvalue " Gtk::ALIGN_CENTER"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 417705 "get_alignment"
	const public explicit_return_type "void"
	nparams 2
	  param inout name "xalign" explicit_type "float"
	  param inout name "yalign" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the X and Y alignment of the widget within its allocation. See
   * set_alignment().
   * @param xalign Location to store X alignment of @a misc , or <tt>0</tt>.
   * @param yalign Location to store Y alignment of @a misc , or <tt>0</tt>.
   "
      end

      operation 417833 "set_padding"
	public explicit_return_type "void"
	nparams 2
	  param in name "xpad" explicit_type "int"
	  param in name "ypad" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 417961 "get_padding"
	const public explicit_return_type "void"
	nparams 2
	  param inout name "xpad" explicit_type "int"
	  param inout name "ypad" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the padding in the X and Y directions of the widget. See set_padding().
   * @param xpad Location to store padding in the X direction, or <tt>0</tt>.
   * @param ypad Location to store padding in the Y direction, or <tt>0</tt>.
   "
      end

      operation 418089 "property_xalign"
	public explicit_return_type "Glib::PropertyProxy<float>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 418217 "property_xalign"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<float>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 418345 "property_yalign"
	public explicit_return_type "Glib::PropertyProxy<float>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 418473 "property_yalign"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<float>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 418601 "property_xpad"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 418729 "property_xpad"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 418857 "property_ypad"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 418985 "property_ypad"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end
    end

    class 312361 "MovementStep"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 "
      attribute 188585 "MOVEMENT_LOGICAL_POSITIONS"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 188713 "MOVEMENT_VISUAL_POSITIONS"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 188841 "MOVEMENT_WORDS"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 188969 "MOVEMENT_DISPLAY_LINES"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 189097 "MOVEMENT_DISPLAY_LINE_ENDS"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 189225 "MOVEMENT_PARAGRAPHS"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 142633 "MOVEMENT_PARAGRAPH_ENDS"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 142761 "MOVEMENT_PAGES"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 142889 "MOVEMENT_BUFFER_ENDS"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 143017 "MOVEMENT_HORIZONTAL_PAGES"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 212393 "NotebookTab"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* @addtogroup gtkmmEnums Enums and Flags 
*
 * @ingroup gtkmmEnums
 "
      attribute 201129 "NOTEBOOK_TAB_FIRST"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 201257 "NOTEBOOK_TAB_LAST"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 326953 "Notebook"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/notebook.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 132649 "Object"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/object.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 213801 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 132649 // Object
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 186537 // <realization>
	  relation 186537 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 186537 // <realization>
	    b parent class_ref 132649 // Object
	end
      end

      class 214057 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Object_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 214185 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkObject"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 214313 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkObjectClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 422313 "~Object"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 186921 // object_class_ (<directional composition>)
	relation 186921 *-->
	  a role_name "object_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 186921 // object_class_ (<directional composition>)
	  b parent class_ref 214057 // CppClassType
      end

      operation 422441 "Object"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 132649 // Object
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 422569 "operator ="
	private return_type class_ref 132649 // Object
	nparams 1
	  param in name "" type class_ref 132649 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 422697 "Object"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 422825 "Object"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkObject"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 422953 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 423081 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 423209 "gobj"
	cpp_inline public explicit_return_type "GtkObject"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkObject*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 423337 "gobj"
	const cpp_inline public explicit_return_type "GtkObject"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkObject*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 423465 "set_manage"
	cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::
void shutdown(); //We probably don't need this.
void finalize(); //We probably don't need this.
void set_user_data(gpointer data);
gpointer get_user_data();"
      end

      operation 423593 "property_user_data"
	public explicit_return_type "Glib::PropertyProxy<void*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 423721 "property_user_data"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<void*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 423849 "is_managed_"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 423977 "destroy_"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 424105 "_init_unmanage"
	protected explicit_return_type "void"
	nparams 1
	  param in name "is_toplevel" explicit_type "bool"
	    defaultvalue " false"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " If you need it, give me an example. murrayc. -- Me too. daniel.
_WRAP_SIGNAL(void destroy(), \"destroy\")"
      end

      operation 424233 "destroy_notify_"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 424361 "disconnect_cpp_wrapper"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "override."
      end

      operation 424489 "_destroy_c_instance"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 424617 "callback_destroy_"
	class_operation protected explicit_return_type "void"
	nparams 2
	  param inout name "gobject" explicit_type "GObject"
	  param inout name "data" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      attribute 172329 "referenced_"
	protected explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " = not managed."
      end

      attribute 172457 "gobject_disposed_"
	protected explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 190121 "OptionMenu"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/optionmenu.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* A widget used to choose from a list of valid choices.
 *
 * A Gtk::OptionMenu is a widget that allows the user to choose from a list
 * of valid choices. The Gtk::OptionMenu displays the selected choice. When
 * activated the GtkOptionMenu displays a popup Gtk::Menu which allows the
 * user to make a new choice. 
 *
 * @deprecated Use the ComboBox widget instead.
 * @ingroup Widgets
 "
      classrelation 187049 // <generalisation>
	relation 187049 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 187049 // <generalisation>
	  b parent class_ref 141353 // Button
      end

      class 214441 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 190121 // OptionMenu
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 187177 // <realization>
	  relation 187177 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 187177 // <realization>
	    b parent class_ref 190121 // OptionMenu
	end
      end

      class 214697 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "OptionMenu_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 214825 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkOptionMenu"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 214953 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkOptionMenuClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 424745 "~OptionMenu"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 187561 // optionmenu_class_ (<directional composition>)
	relation 187561 *-->
	  a role_name "optionmenu_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 187561 // optionmenu_class_ (<directional composition>)
	  b parent class_ref 214697 // CppClassType
      end

      operation 424873 "OptionMenu"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 190121 // OptionMenu
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 425001 "operator ="
	private return_type class_ref 190121 // OptionMenu
	nparams 1
	  param in name "" type class_ref 190121 // OptionMenu
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 425129 "OptionMenu"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 425257 "OptionMenu"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkOptionMenu"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 425385 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 425513 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 425641 "gobj"
	cpp_inline public explicit_return_type "GtkOptionMenu"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkOptionMenu*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 425769 "gobj"
	const cpp_inline public explicit_return_type "GtkOptionMenu"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkOptionMenu*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 425897 "on_changed"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 426025 "OptionMenu"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 426153 "set_menu"
	public explicit_return_type "void"
	nparams 1
	  param inout name "menu" type class_ref 203689 // Menu
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 426281 "get_menu"
	public return_type class_ref 203689 // Menu
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 426409 "get_menu"
	const public return_type class_ref 203689 // Menu
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 426537 "remove_menu"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 426665 "get_history"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the index of the currently selected menu item. The menu
   * items are numbered from top to bottom, starting with 0.
   * @return Index of the selected menu item, or -1 if there are no menu items
   * Deprecated: Use Gtk::ComboBox instead.
   "
      end

      operation 426793 "set_history"
	public explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "guint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 426921 "signal_changed"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 427049 "init_accels_handler_"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 281513 "Orientation"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 "
      attribute 143145 "ORIENTATION_HORIZONTAL"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 143273 "ORIENTATION_VERTICAL"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 285993 "PackOptions"
      visibility package stereotype "enum"
      cpp_external cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* Packing options for adding child widgets to a Box with pack_start() and pack_end(). 
 * @ingroup gtkmmEnums
 "
      attribute 128553 "PACK_SHRINK"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 128681 "PACK_EXPAND_PADDING"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 128809 "PACK_EXPAND_WIDGET"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 286377 "PackType"
      visibility package stereotype "enum"
      cpp_external cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 "
      attribute 174377 "PACK_START"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 174505 "PACK_END"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 215081 "Paned"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/paned.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* This is the base class for widgets with two panes, arranged either
 * horizontally (Gtk::HPaned) or vertically (Gtk::VPaned).
 *
 * Child widgets are added to the panes of the widget with pack1() and pack2().
 * The division beween the two children is set by default from the size
 * requests of the children, but it can be adjusted by the user.
 *
 * A paned widget draws a separator between the two child widgets and a small
 * handle that the user can drag to adjust the division. It does not draw any
 * relief around the children or around the separator. Often, it is useful to
 * put each child inside a Gtk::Frame with the shadow type set to Gtk::SHADOW_IN
 * so that the gutter appears as a ridge.
 *
 * Each child has two options that can be set - resize and shrink. If resize is
 * true, then when the GtkPaned is resized, that child will expand or shrink
 * along with the paned widget. If shrink is true, then when that child can be
 * made smaller than it's requisition. Setting shrink to false allows the
 * application to set a minimum size. If resize is false for both children,
 * then this is treated as if resize is true for both children.
 *
 * The application can set the position of the slider as if it were set by the
 * user, by calling set_position().
 *
 * @ingroup Widgets
 * @ingroup Containers
 "
      classrelation 187689 // <generalisation>
	relation 187689 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 187689 // <generalisation>
	  b parent class_ref 280745 // Container
      end

      class 215209 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 215081 // Paned
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 187817 // <realization>
	  relation 187817 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 187817 // <realization>
	    b parent class_ref 215081 // Paned
	end
      end

      class 215465 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Paned_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 215593 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkPaned"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 215721 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkPanedClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 427177 "~Paned"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 188201 // paned_class_ (<directional composition>)
	relation 188201 *-->
	  a role_name "paned_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 188201 // paned_class_ (<directional composition>)
	  b parent class_ref 215465 // CppClassType
      end

      operation 427305 "Paned"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 215081 // Paned
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 427433 "operator ="
	private return_type class_ref 215081 // Paned
	nparams 1
	  param in name "" type class_ref 215081 // Paned
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 427561 "Paned"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 427689 "Paned"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkPaned"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 427817 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 427945 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 428073 "gobj"
	cpp_inline public explicit_return_type "GtkPaned"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkPaned*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 428201 "gobj"
	const cpp_inline public explicit_return_type "GtkPaned"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkPaned*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 428329 "Paned"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 428457 "add1"
	public explicit_return_type "void"
	nparams 1
	  param inout name "child" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 428585 "add2"
	public explicit_return_type "void"
	nparams 1
	  param inout name "child" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 428713 "pack1"
	public explicit_return_type "void"
	nparams 3
	  param inout name "child" type class_ref 130089 // Widget
	  param in name "resize" explicit_type "bool"
	  param in name "shrink" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 428841 "pack1"
	public explicit_return_type "void"
	nparams 2
	  param inout name "child" type class_ref 130089 // Widget
	  param in name "options" type class_ref 308905 // AttachOptions
	    defaultvalue " Gtk::EXPAND"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 428969 "pack2"
	public explicit_return_type "void"
	nparams 3
	  param inout name "child" type class_ref 130089 // Widget
	  param in name "resize" explicit_type "bool"
	  param in name "shrink" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 429097 "pack2"
	public explicit_return_type "void"
	nparams 2
	  param inout name "child" type class_ref 130089 // Widget
	  param in name "options" type class_ref 308905 // AttachOptions
	    defaultvalue " Gtk::EXPAND"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 429225 "get_position"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Obtains the position of the divider between the two panes.
   * @return Position of the divider.
   "
      end

      operation 429353 "set_position"
	public explicit_return_type "void"
	nparams 1
	  param in name "position" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the position of the divider between the two panes.
   * @param position Pixel position of divider, a negative value means that the position
   * is unset.
   "
      end

      operation 429481 "get_child1"
	public return_type class_ref 130089 // Widget
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Obtains the first child of the paned widget.
   * @return First child, or <tt>0</tt> if it is not set.
   * 
   * Since: 2.4.
   "
      end

      operation 429609 "get_child1"
	const public return_type class_ref 130089 // Widget
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Obtains the first child of the paned widget.
   * @return First child, or <tt>0</tt> if it is not set.
   * 
   * Since: 2.4.
   "
      end

      operation 429737 "get_child2"
	public return_type class_ref 130089 // Widget
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Obtains the second child of the paned widget.
   * @return Second child, or <tt>0</tt> if it is not set.
   * 
   * Since: 2.4.
   "
      end

      operation 429865 "get_child2"
	const public return_type class_ref 130089 // Widget
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Obtains the second child of the paned widget.
   * @return Second child, or <tt>0</tt> if it is not set.
   * 
   * Since: 2.4.
   "
      end

      operation 429993 "property_position"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Keybinding signals:
* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 430121 "property_position"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 430249 "property_position_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 430377 "property_position_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 430505 "property_min_position"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 430633 "property_max_position"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end
    end

    class 213289 "Page"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/page.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Page is the output class"
      classrelation 186281 // <generalisation>
	relation 186281 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 186281 // <generalisation>
	  b parent class_ref 212777 // PageIterator
      end

      operation 420521 "Page"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 420649 "operator ="
	private return_type class_ref 213289 // Page
	nparams 1
	  param in name "" type class_ref 213289 // Page
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 420777 "get_page_num"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 420905 "get_child"
	const public return_type class_ref 130089 // Widget
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 421033 "get_tab_label"
	const public return_type class_ref 130089 // Widget
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 421161 "set_tab_label"
	public explicit_return_type "void"
	nparams 1
	  param inout name "tab_label" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 421289 "set_tab_label_text"
	public explicit_return_type "void"
	nparams 1
	  param in name "tab_text" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 421417 "get_tab_label_text"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 421545 "get_menu_label"
	const public return_type class_ref 130089 // Widget
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 421673 "set_menu_label"
	public explicit_return_type "void"
	nparams 1
	  param inout name "menu_label" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 421801 "set_menu_label_text"
	public explicit_return_type "void"
	nparams 1
	  param in name "menu_text" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 421929 "get_menu_label_text"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 422057 "query_tab_label_packing"
	public explicit_return_type "void"
	nparams 3
	  param inout name "expand" explicit_type "bool"
	  param inout name "fill" explicit_type "bool"
	  param inout name "pack_type" type class_ref 286377 // PackType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 422185 "set_tab_label_packing"
	public explicit_return_type "void"
	nparams 3
	  param in name "expand" explicit_type "bool"
	  param in name "fill" explicit_type "bool"
	  param in name "pack_type" type class_ref 286377 // PackType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 212777 "PageIterator"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/pageiterator.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Since the data stored in GtkNotebook's GList is inaccessible
 * the iterator \"PageIterator\" has to hold a pointer to the Notebook
 * that owns the list. \"Page\" (the value_type of \"PageList\")
 * inherits \"PageIterator\" privately and uses Notebook-API-functions
 * to retrieve and manipulate data.
 *
 * Note that PageIterator uses g_list_* functions just to step through
 * the children and test for iterator equality instead of simply using
 * the child index number. This is done because even if you use a
 * child index number, you would still have to use g_list_length() to
 * retrieve the number of elements.  And using an element index results
 * in iterators not staying valid on insertion/removal. This would only
 * lead to fragile and unexpected behaviour.
 * (Thanks for this explanation, Daniel!)
 "
      class 212905 "iterator_category"
	visibility package stereotype "typedef" explicit_base_type "std::bidirectional_iterator_tag"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 213033 "size_type"
	visibility package stereotype "typedef" explicit_base_type "size_t"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 213161 "difference_type"
	visibility package stereotype "typedef" explicit_base_type "ptrdiff_t"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 213417 "value_type"
	visibility package stereotype "typedef" base_type class_ref 213289 // Page
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 185897 // <realization>
	  relation 185897 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 185897 // <realization>
	    b parent class_ref 213289 // Page
	end
      end

      class 213545 "pointer"
	visibility package stereotype "typedef" base_type class_ref 213289 // Page
	cpp_decl "${comment}typedef  const ${type}*  ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 186025 // <realization>
	  relation 186025 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 186025 // <realization>
	    b parent class_ref 213289 // Page
	end
      end

      class 213673 "reference"
	visibility package stereotype "typedef" base_type class_ref 213289 // Page
	cpp_decl "${comment}typedef  const ${type}&  ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 186153 // <realization>
	  relation 186153 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 186153 // <realization>
	    b parent class_ref 213289 // Page
	end
      end

      operation 419241 "PageIterator"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param inout name "parent" explicit_type "Gtk::Notebook"
	  param inout name "node" explicit_type "GList"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${volatile}${throw} : node_(node), parent_(parent) {};
"
	
	
	
	
      end

      operation 419369 "PageIterator"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : node_(0),    parent_(0)      {};
"
	
	
	
	
      end

      operation 419497 "equal"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 212777 // PageIterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 419625 "operator bool"
	const public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 419753 "operator ++"
	public return_type class_ref 212777 // PageIterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 419881 "operator ++"
	public return_type class_ref 212777 // PageIterator
	nparams 1
	  param in name "" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 420009 "operator --"
	public return_type class_ref 212777 // PageIterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 420137 "operator --"
	public return_type class_ref 212777 // PageIterator
	nparams 1
	  param in name "" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 420265 "operator *"
	const cpp_inline public return_type class_ref 213673 // reference
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 420393 "operator ->"
	const cpp_inline public return_type class_ref 213545 // pointer
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      attribute 201385 "node_"
	protected explicit_type "GList"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 201513 "parent_"
	protected explicit_type "Gtk::Notebook"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 128297 "friend"
	
	cpp "
  friend class Gtk::Notebook_Helpers::Page;" ""
	java ""
	php ""
	python ""
	idl ""
      end
    end

    class 313641 "PathPriorityType"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 "
      attribute 189609 "PATH_PRIO_LOWEST"
	public explicit_type ""
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 189737 "PATH_PRIO_GTK"
	public explicit_type ""
	init_value " 4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 189865 "PATH_PRIO_APPLICATION"
	public explicit_type ""
	init_value " 8"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 189993 "PATH_PRIO_THEME"
	public explicit_type ""
	init_value " 10"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 190121 "PATH_PRIO_RC"
	public explicit_type ""
	init_value " 12"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 190249 "PATH_PRIO_HIGHEST"
	public explicit_type ""
	init_value " 15
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 314025 "PathType"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 "
      attribute 190377 "PATH_WIDGET"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 190505 "PATH_WIDGET_CLASS"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 190633 "PATH_CLASS"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 217385 "Plug"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/plug.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk"
      classrelation 189609 // <generalisation>
	relation 189609 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 189609 // <generalisation>
	  b parent class_ref 281129 // Window
      end

      class 217513 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 217385 // Plug
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 189737 // <realization>
	  relation 189737 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 189737 // <realization>
	    b parent class_ref 217385 // Plug
	end
      end

      class 217769 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Plug_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 217897 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkPlug"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 218025 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkPlugClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 433321 "~Plug"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 190121 // plug_class_ (<directional composition>)
	relation 190121 *-->
	  a role_name "plug_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 190121 // plug_class_ (<directional composition>)
	  b parent class_ref 217769 // CppClassType
      end

      operation 433449 "Plug"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 217385 // Plug
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 433577 "operator ="
	private return_type class_ref 217385 // Plug
	nparams 1
	  param in name "" type class_ref 217385 // Plug
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 433705 "Plug"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 433833 "Plug"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkPlug"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 433961 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 434089 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 434217 "gobj"
	cpp_inline public explicit_return_type "GtkPlug"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkPlug*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 434345 "gobj"
	const cpp_inline public explicit_return_type "GtkPlug"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkPlug*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 434473 "on_embedded"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 434601 "Plug"
	public explicit_return_type ""
	nparams 1
	  param in name "socket_id" explicit_type "GdkNativeWindow"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment "This is not available in on Win32.
This source file will not be compiled,
and the class will not be registered in wrap_init.h or wrap_init.cc"
      end

      operation 434729 "Plug"
	public explicit_return_type ""
	nparams 2
	  param in name "display" explicit_type "Glib::RefPtr<Gdk::Display>"
	  param in name "socket_id" explicit_type "GdkNativeWindow"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 434857 "get_id"
	const public explicit_return_type "GdkNativeWindow"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the window ID of a Gtk::Plug widget, which can then
   * be used to embed this window inside another window, for
   * instance with Gtk::Socket::add_id().
   * @return The window ID for the plug.
   "
      end

      operation 434985 "signal_embedded"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 314409 "PolicyType"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 "
      attribute 190761 "POLICY_ALWAYS"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 190889 "POLICY_AUTOMATIC"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 191017 "POLICY_NEVER"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 314793 "PositionType"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 "
      attribute 191145 "POS_LEFT"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 191273 "POS_RIGHT"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 191401 "POS_TOP"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 191529 "POS_BOTTOM"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 218921 "ProgressBar"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/progressbar.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* A widget which indicates progress visually.
 *
 * The Gtk::ProgressBar is typically used to display the progress of a long
 * running operation. It provides a visual clue that processing is underway.
 * The Gtk::ProgressBar can be used in two different modes: percentage mode
 * and activity mode.
 *
 * When an application can determine how much work needs to take place (e.g.
 * read a fixed number of bytes from a file) and can monitor its progress,
 * it can use the Gtk::ProgressBar in percentage mode and the user sees a
 * growing bar indicating the percentage of the work that has been
 * completed. In this mode, the application is required to call
 * set_fraction() periodically to update the progress bar.
 *
 * When an application has no accurate way of knowing the amount of work to
 * do, it can use the Gtk::ProgressBar in activity mode, which shows
 * activity by a block moving back and forth within the progress area. In
 * this mode, the application is required to call pulse() perodically to
 * update the progress bar.
 *
 * There is quite a bit of flexibility provided to control the appearance of
 * the Gtk::ProgressBar. Functions are provided to control the orientation of
 * the bar, optional text can be displayed along with the bar, and the step
 * size used in activity mode can be set. 
 *
 * @ingroup Widgets
 "
      classrelation 190505 // <generalisation>
	relation 190505 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 190505 // <generalisation>
	  b parent class_ref 130089 // Widget
      end

      class 219049 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 218921 // ProgressBar
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 190633 // <realization>
	  relation 190633 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 190633 // <realization>
	    b parent class_ref 218921 // ProgressBar
	end
      end

      class 219305 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "ProgressBar_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 219433 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkProgressBar"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 219561 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkProgressBarClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 435369 "~ProgressBar"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 191017 // progressbar_class_ (<directional composition>)
	relation 191017 *-->
	  a role_name "progressbar_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 191017 // progressbar_class_ (<directional composition>)
	  b parent class_ref 219305 // CppClassType
      end

      operation 435497 "ProgressBar"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 218921 // ProgressBar
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 435625 "operator ="
	private return_type class_ref 218921 // ProgressBar
	nparams 1
	  param in name "" type class_ref 218921 // ProgressBar
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 435753 "ProgressBar"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 435881 "ProgressBar"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkProgressBar"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 436009 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 436137 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 436265 "gobj"
	cpp_inline public explicit_return_type "GtkProgressBar"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkProgressBar*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 436393 "gobj"
	const cpp_inline public explicit_return_type "GtkProgressBar"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkProgressBar*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 436521 "ProgressBar"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 436649 "pulse"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Indicates that some progress is made, but you don't know how much.
   * Causes the progress bar to enter \"activity mode,\" where a block
   * bounces back and forth. Each call to pulse()
   * causes the block to move by a little bit (the amount of movement
   * per pulse is determined by set_pulse_step()).
   "
      end

      operation 436777 "get_text"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the text displayed superimposed on the progress bar,
   * if any, otherwise <tt>0</tt>. The return value is a reference
   * to the text, not a copy of it, so will become invalid
   * if you change the text in the progress bar.
   * @return Text, or <tt>0</tt>; this string is owned by the widget
   * and should not be modified or freed.
   "
      end

      operation 436905 "set_text"
	public explicit_return_type "void"
	nparams 1
	  param in name "text" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Causes the given @a text  to appear superimposed on the progress bar.
   * @param text A UTF-8 string.
   "
      end

      operation 437033 "get_fraction"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the current fraction of the task that's been completed.
   * @return A fraction from 0.0 to 1.0.
   "
      end

      operation 437161 "set_fraction"
	public explicit_return_type "void"
	nparams 1
	  param in name "fraction" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Causes the progress bar to \"fill in\" the given fraction
   * of the bar. The fraction should be between 0.0 and 1.0,
   * inclusive.
   * @param fraction Fraction of the task that's been completed.
   "
      end

      operation 437289 "get_pulse_step"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the pulse step set with set_pulse_step()
   * @return A fraction from 0.0 to 1.0.
   "
      end

      operation 437417 "set_pulse_step"
	public explicit_return_type "void"
	nparams 1
	  param in name "fraction" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the fraction of total progress bar length to move the
   * bouncing block for each call to pulse().
   * @param fraction Fraction between 0.0 and 1.0.
   "
      end

      operation 437545 "set_orientation"
	public explicit_return_type "void"
	nparams 1
	  param in name "orientation" type class_ref 218537 // ProgressBarOrientation
	    defaultvalue " PROGRESS_LEFT_TO_RIGHT"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Causes the progress bar to switch to a different orientation
   * (left-to-right, right-to-left, top-to-bottom, or bottom-to-top).
   * @param orientation Orientation of the progress bar.
   "
      end

      operation 437673 "get_orientation"
	const public return_type class_ref 218537 // ProgressBarOrientation
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the current progress bar orientation.
   * @return Orientation of the progress bar.
   "
      end

      operation 437801 "property_fraction"
	public explicit_return_type "Glib::PropertyProxy<double>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 437929 "property_fraction"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<double>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 438057 "property_pulse_step"
	public explicit_return_type "Glib::PropertyProxy<double>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 438185 "property_pulse_step"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<double>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 438313 "property_orientation"
	public explicit_return_type "Glib::PropertyProxy<ProgressBarOrientation>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 438441 "property_orientation"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<ProgressBarOrientation>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 438569 "property_text"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 438697 "property_text"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end
    end

    class 218537 "ProgressBarOrientation"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 "
      attribute 201897 "PROGRESS_LEFT_TO_RIGHT"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 202025 "PROGRESS_RIGHT_TO_LEFT"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 202153 "PROGRESS_BOTTOM_TO_TOP"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 202281 "PROGRESS_TOP_TO_BOTTOM"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 218153 "ProgressBarStyle"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* @addtogroup gtkmmEnums Enums and Flags 
*
 * @ingroup gtkmmEnums
 "
      attribute 201641 "PROGRESS_CONTINUOUS"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 201769 "PROGRESS_DISCRETE"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 205865 "QuitSig"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/quitsig.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ Quit Signal Class (internal)"
      class 205993 "SlotType"
	visibility package stereotype "typedef" explicit_base_type "sigc::slot<bool>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 394281 "connect"
	public explicit_return_type "sigc::connection"
	nparams 2
	  param in name "slot" type class_ref 205993 // SlotType
	  param in name "main_level" explicit_type "guint"
	    defaultvalue " 0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 394409 "gtk_callback"
	class_operation protected explicit_return_type "gboolean"
	nparams 1
	  param in name "data" explicit_type "gpointer"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 219689 "RadioAction"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/radioaction.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk"
      class 219945 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 219689 // RadioAction
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 191273 // <realization>
	  relation 191273 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 191273 // <realization>
	    b parent class_ref 219689 // RadioAction
	end
      end

      class 220201 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "RadioAction_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 220329 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkRadioAction"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 220457 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkRadioActionClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 191657 // radioaction_class_ (<directional composition>)
	relation 191657 *-->
	  a role_name "radioaction_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 191657 // radioaction_class_ (<directional composition>)
	  b parent class_ref 220201 // CppClassType
      end

      operation 438825 "RadioAction"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 219689 // RadioAction
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 438953 "operator ="
	private return_type class_ref 219689 // RadioAction
	nparams 1
	  param in name "" type class_ref 219689 // RadioAction
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 439081 "RadioAction"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 439209 "RadioAction"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkRadioAction"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 439337 "~RadioAction"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 439465 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 439593 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 439721 "gobj"
	cpp_inline public explicit_return_type "GtkRadioAction"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkRadioAction*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 439849 "gobj"
	const cpp_inline public explicit_return_type "GtkRadioAction"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkRadioAction*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 439977 "gobj_copy"
	public explicit_return_type "GtkRadioAction"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs."
      end

      class 220713 "Group"
	visibility package stereotype "typedef" base_type class_ref 220585 // RadioButtonGroup
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 191785 // <realization>
	  relation 191785 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 191785 // <realization>
	    b parent class_ref 220585 // RadioButtonGroup
	end
      end

      operation 440105 "RadioAction"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 440233 "RadioAction"
	protected explicit_return_type ""
	nparams 5
	  param inout name "group" type class_ref 220713 // Group
	  param in name "name" explicit_type "Glib::ustring"
	  param in name "stock_id" type class_ref 130985 // StockID
	  param in name "label" explicit_type "Glib::ustring"
	    defaultvalue " Glib::ustring()"
	  param in name "tooltip" explicit_type "Glib::ustring"
	    defaultvalue " Glib::ustring()"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, const ${t4} & ${p4}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, const ${t4} & ${p4}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 440361 "create"
	class_operation public explicit_return_type "Glib::RefPtr<RadioAction>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 440489 "create"
	class_operation public explicit_return_type "Glib::RefPtr<RadioAction>"
	nparams 4
	  param inout name "group" type class_ref 220713 // Group
	  param in name "name" explicit_type "Glib::ustring"
	  param in name "label" explicit_type "Glib::ustring"
	    defaultvalue "  Glib::ustring()"
	  param in name "tooltip" explicit_type "Glib::ustring"
	    defaultvalue " Glib::ustring()"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 440617 "create"
	class_operation public explicit_return_type "Glib::RefPtr<RadioAction>"
	nparams 5
	  param inout name "group" type class_ref 220713 // Group
	  param in name "name" explicit_type "Glib::ustring"
	  param in name "stock_id" explicit_type "Gtk::StockID"
	  param in name "label" explicit_type "Glib::ustring"
	    defaultvalue " Glib::ustring()"
	  param in name "tooltip" explicit_type "Glib::ustring"
	    defaultvalue "  Glib::ustring()"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, const ${t4} & ${p4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, const ${t4} & ${p4}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 440745 "get_group"
	public return_type class_ref 220713 // Group
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the list representing the radio group for this object
   * @return The list representing the radio group for this object
   * 
   * Since: 2.4.
   "
      end

      operation 440873 "set_group"
	public explicit_return_type "void"
	nparams 1
	  param inout name "group" type class_ref 220713 // Group
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 441001 "get_current_value"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Obtains the value property of the the currently active member of 
   * the group to which @a action  belongs.
   * @return The value of the currently active group member
   * 
   * Since: 2.4.
   "
      end

      operation 441129 "signal_changed"
	public explicit_return_type "Glib::SignalProxy1< void,const Glib::RefPtr<RadioAction>& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 441257 "property_value"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 441385 "property_value"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 441513 "on_changed"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "current" explicit_type "Glib::RefPtr<RadioAction>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end
    end

    class 192553 "RadioButton"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/radiobutton.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* A single radio button performs the same basic function as a Gtk::CheckButton, as its position in the object hierarchy reflects. It is only when multiple radio buttons are grouped together that they become a different user interface component in their own right.
 * Every radio button is a member of some group of radio buttons. When one is selected, all other radio buttons in the same group are deselected. A Gtk::RadioButton gives the user a choice from many options.
 * After constructing the first RadioButton in a group, use get_group() and provide this Group to the constructors ot the other RadioButtons in the same group.
 * To remove a Gtk::RadioButton from one group and make it part of a new one, use set_group().
 *
 * @ingroup Widgets
 "
      classrelation 191913 // <generalisation>
	relation 191913 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 191913 // <generalisation>
	  b parent class_ref 293417 // CheckButton
      end

      class 220841 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 192553 // RadioButton
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 192041 // <realization>
	  relation 192041 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 192041 // <realization>
	    b parent class_ref 192553 // RadioButton
	end
      end

      class 221097 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "RadioButton_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 221225 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkRadioButton"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 221353 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkRadioButtonClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 441641 "~RadioButton"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 192425 // radiobutton_class_ (<directional composition>)
	relation 192425 *-->
	  a role_name "radiobutton_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 192425 // radiobutton_class_ (<directional composition>)
	  b parent class_ref 221097 // CppClassType
      end

      operation 441769 "RadioButton"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 192553 // RadioButton
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 441897 "operator ="
	private return_type class_ref 192553 // RadioButton
	nparams 1
	  param in name "" type class_ref 192553 // RadioButton
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 442025 "RadioButton"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 442153 "RadioButton"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkRadioButton"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 442281 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 442409 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 442537 "gobj"
	cpp_inline public explicit_return_type "GtkRadioButton"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkRadioButton*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 442665 "gobj"
	const cpp_inline public explicit_return_type "GtkRadioButton"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkRadioButton*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 442793 "on_group_changed"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      class 221481 "Group"
	visibility package stereotype "typedef" base_type class_ref 220585 // RadioButtonGroup
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 192553 // <realization>
	  relation 192553 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 192553 // <realization>
	    b parent class_ref 220585 // RadioButtonGroup
	end
      end

      operation 442921 "RadioButton"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 443049 "RadioButton"
	public explicit_return_type ""
	nparams 2
	  param in name "label" explicit_type "Glib::ustring"
	  param in name "mnemonic" explicit_type "bool"
	    defaultvalue " false"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 443177 "RadioButton"
	public explicit_return_type ""
	nparams 1
	  param inout name "group" type class_ref 221481 // Group
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment "* Create an empty RadioButton belonging to the specified group,
   * into which you can add() a widget.
   * If you wish to add a Gtk::Label,
   * you may want to
   * use the Gtk::RadioButton(const Group& group, const Glib::ustring& label, bool mnemonic)
   * constructor directly instead.
   "
      end

      operation 443305 "RadioButton"
	public explicit_return_type ""
	nparams 3
	  param inout name "group" type class_ref 221481 // Group
	  param in name "label" explicit_type "Glib::ustring"
	  param in name "mnemonic" explicit_type "bool"
	    defaultvalue " false"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${throw}{
${body}}
"
	
	
	
	
	comment "* Create a button belonging to the specified group, with a label inside.
   * You won't be able to add a widget to this button
   * since it already contains a Gtk::Label.
   "
      end

      operation 443433 "get_group"
	public return_type class_ref 221481 // Group
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 443561 "set_group"
	public explicit_return_type "void"
	nparams 1
	  param inout name "group" type class_ref 221481 // Group
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 443689 "reset_group"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 443817 "signal_group_changed"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 220585 "RadioButtonGroup"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/radiobuttongroup.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* RadioButtonGroup identifier for RadioButtons
 * To set up this RadioButtonGroup, construct a RadioButtonGroup and then pass it
 * to the constructor of all radio items.  You do not need
 * to keep the RadioButtonGroup beyond the initial construction.
 * It should not be instantiated with new, and it will be invalid after the RadioButtons have been deleted.
 "
      operation 443945 "RadioButtonGroup"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 444073 "RadioButtonGroup"
	public explicit_return_type ""
	nparams 1
	  param in name "src" type class_ref 220585 // RadioButtonGroup
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 444201 "operator ="
	public return_type class_ref 220585 // RadioButtonGroup
	nparams 1
	  param in name "src" type class_ref 220585 // RadioButtonGroup
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 444329 "RadioButtonGroup"
	protected explicit_return_type ""
	nparams 1
	  param inout name "group" explicit_type "GSList"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      extra_member 128425 "friend"
	
	cpp "
  friend class Gtk::RadioButton;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      extra_member 128553 "friend"
	
	cpp "  friend class Gtk::RadioMenuItem;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      extra_member 128681 "friend"
	
	cpp "  friend class Gtk::RadioAction;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      extra_member 128809 "friend"
	
	cpp "  friend class Gtk::RadioToolButton;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 444457 "add"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "item" type class_ref 192553 // RadioButton
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "These all have similar interfaces.
TODO: Add a common multiply-inherited base class, with set_group()=0?
      Would that anything useful other than being tidy? murrayc"
      end

      operation 444585 "add"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "item" type class_ref 221609 // RadioMenuItem
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 444713 "add"
	protected explicit_return_type "void"
	nparams 1
	  param in name "item" explicit_type "Glib::RefPtr<RadioAction>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 444841 "add"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "item" type class_ref 221737 // RadioToolButton
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 444969 "operator new"
	protected explicit_return_type "void"
	nparams 1
	  param in name "" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      attribute 202409 "group_"
	protected explicit_type "GSList"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 221609 "RadioMenuItem"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/radiomenuitem.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* A CheckMenuItem that belongs to a group.
 * At each instant exactly one of the menu items from a group is selected.
 * @ingroup Menus
 * @ingroup Widgets
 "
      classrelation 192681 // <generalisation>
	relation 192681 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 192681 // <generalisation>
	  b parent class_ref 294185 // CheckMenuItem
      end

      class 221865 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 221609 // RadioMenuItem
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 192809 // <realization>
	  relation 192809 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 192809 // <realization>
	    b parent class_ref 221609 // RadioMenuItem
	end
      end

      class 222121 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "RadioMenuItem_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 222249 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkRadioMenuItem"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 222377 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkRadioMenuItemClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 445097 "~RadioMenuItem"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 193193 // radiomenuitem_class_ (<directional composition>)
	relation 193193 *-->
	  a role_name "radiomenuitem_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 193193 // radiomenuitem_class_ (<directional composition>)
	  b parent class_ref 222121 // CppClassType
      end

      operation 445225 "RadioMenuItem"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 221609 // RadioMenuItem
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 445353 "operator ="
	private return_type class_ref 221609 // RadioMenuItem
	nparams 1
	  param in name "" type class_ref 221609 // RadioMenuItem
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 445481 "RadioMenuItem"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 445609 "RadioMenuItem"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkRadioMenuItem"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 445737 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 445865 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 445993 "gobj"
	cpp_inline public explicit_return_type "GtkRadioMenuItem"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkRadioMenuItem*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 446121 "gobj"
	const cpp_inline public explicit_return_type "GtkRadioMenuItem"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkRadioMenuItem*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 446249 "on_group_changed"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      class 222505 "Group"
	visibility package stereotype "typedef" base_type class_ref 220585 // RadioButtonGroup
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 193321 // <realization>
	  relation 193321 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 193321 // <realization>
	    b parent class_ref 220585 // RadioButtonGroup
	end
      end

      operation 446377 "RadioMenuItem"
	public explicit_return_type ""
	nparams 1
	  param inout name "groupx" type class_ref 222505 // Group
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 446505 "RadioMenuItem"
	public explicit_return_type ""
	nparams 3
	  param inout name "groupx" type class_ref 222505 // Group
	  param in name "label" explicit_type "Glib::ustring"
	  param in name "mnemonic" explicit_type "bool"
	    defaultvalue " false"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 446633 "get_group"
	public return_type class_ref 222505 // Group
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "We ignore the _new_*_from_widget() functions because they are just the same as calling get_group() and set_group() ourselves."
      end

      operation 446761 "set_group"
	public explicit_return_type "void"
	nparams 1
	  param inout name "group" type class_ref 222505 // Group
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 446889 "reset_group"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 447017 "signal_group_changed"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 447145 "constructor"
	protected explicit_return_type "void"
	nparams 1
	  param in name "group" type class_ref 222505 // Group
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 221737 "RadioToolButton"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/radiotoolbutton.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* A toolbar item that contains a radio button.
 *
 * A Gtk::RadioToolButton is a Gtk::ToolItem that contains a radio button, that is,
 * a button that is part of a group of toggle buttons where only one button can be
 * active at a time.
 *
 * @ingroup Widgets
 "
      classrelation 193449 // <generalisation>
	relation 193449 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 193449 // <generalisation>
	  b parent class_ref 222633 // ToggleToolButton
      end

      class 222761 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 221737 // RadioToolButton
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 193577 // <realization>
	  relation 193577 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 193577 // <realization>
	    b parent class_ref 221737 // RadioToolButton
	end
      end

      class 223017 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "RadioToolButton_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 223145 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkRadioToolButton"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 223273 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkRadioToolButtonClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 447273 "~RadioToolButton"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 193961 // radiotoolbutton_class_ (<directional composition>)
	relation 193961 *-->
	  a role_name "radiotoolbutton_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 193961 // radiotoolbutton_class_ (<directional composition>)
	  b parent class_ref 223017 // CppClassType
      end

      operation 447401 "RadioToolButton"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 221737 // RadioToolButton
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 447529 "operator ="
	private return_type class_ref 221737 // RadioToolButton
	nparams 1
	  param in name "" type class_ref 221737 // RadioToolButton
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 447657 "RadioToolButton"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 447785 "RadioToolButton"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkRadioToolButton"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 447913 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 448041 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 448169 "gobj"
	cpp_inline public explicit_return_type "GtkRadioToolButton"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkRadioToolButton*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 448297 "gobj"
	const cpp_inline public explicit_return_type "GtkRadioToolButton"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkRadioToolButton*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      class 223401 "Group"
	visibility package stereotype "typedef" base_type class_ref 220585 // RadioButtonGroup
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 194089 // <realization>
	  relation 194089 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 194089 // <realization>
	    b parent class_ref 220585 // RadioButtonGroup
	end
      end

      operation 448425 "RadioToolButton"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "* Creates a new Gtk::RadioToolButton and a new group.
   *
   * The RadioToolButton will have an empty label and will reside in an newly created Group.
   * Use get_group() to retrieve this group and pass it to other radio buttons to assign
   * them to this group.
   *
   * Since: 2.4
   "
      end

      operation 448553 "RadioToolButton"
	public explicit_return_type ""
	nparams 2
	  param inout name "group" type class_ref 223401 // Group
	  param in name "label" explicit_type "Glib::ustring"
	    defaultvalue " Glib::ustring()"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${throw}{
${body}}
"
	
	
	
	
	comment "* Creates a new Gtk::RadioToolButton in an existing group.
   *
   * The RadioToolButton will have the label @a label and will be put into the Group
   * @a group.
   *
   * @param group The existing group which will be used for this RadioButton.
   * @param label The string used to display the label for this RadioToolButton.
   *
   * Since: 2.4
   "
      end

      operation 448681 "RadioToolButton"
	public explicit_return_type ""
	nparams 2
	  param inout name "group" type class_ref 223401 // Group
	  param in name "stock_id" explicit_type "Gtk::StockID"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${throw}{
${body}}
"
	
	
	
	
	comment "* Creates a new Gtk::RadioToolButton in an existing group.
   *
   * The RadioToolButton will be created according to the StockID properties and put into
   * the Group @a group.
   * 
   * @param group The existing group which will be used for this RadioButton.
   * @param stock_id The StockID which determines the look of the RadioToolButton.
   *
   * Since: 2.4
   "
      end

      operation 448809 "RadioToolButton"
	public explicit_return_type ""
	nparams 2
	  param inout name "icon_widget" type class_ref 130089 // Widget
	  param in name "label" explicit_type "Glib::ustring"
	    defaultvalue " Glib::ustring()"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${throw}{
${body}}
"
	
	
	
	
	comment "This would look to much like a copy constructor:
People should use second.set_group(first.get_group()) instead.
explicit RadioToolButton(RadioToolButton& group, const Gtk::StockID& stock_id = Gtk::StockID());
This does not correspond to any gtk_radio_tool_button_*_new() function,
but it should work (it just sets properties), and it makes this class consistent with the
other ToolButton classes.
* Creates a new Gtk::RadioToolButton with an image and a new group.
   *
   * The RadioToolButton will have the label @a label and an image widget @a icon_widget.
   *
   * @param icon_widget The widget placed as the RadioToolButton's icon.
   * @param label The string used to display the label for this RadioToolButton.
   *
   * Since: 2.4
   "
      end

      operation 448937 "get_group"
	public return_type class_ref 223401 // Group
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the radio button group @a button  belongs to.
   * @return The group @a button  belongs to.
   * 
   * Since: 2.4.
   "
      end

      operation 449065 "set_group"
	public explicit_return_type "void"
	nparams 1
	  param inout name "group" type class_ref 223401 // Group
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Adds @a button  to @a group , removing it from the group it belonged to before.
   * 
   * Since: 2.4
   * @param group An existing radio button group.
   "
      end
    end

    class 282281 "Range"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/range.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Base class for widgets which visualize an adjustment.
 *
 * @ingroup Widgets
 "
      classrelation 194217 // <generalisation>
	relation 194217 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 194217 // <generalisation>
	  b parent class_ref 130089 // Widget
      end

      class 223529 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 282281 // Range
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 194345 // <realization>
	  relation 194345 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 194345 // <realization>
	    b parent class_ref 282281 // Range
	end
      end

      class 223785 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Range_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 223913 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkRange"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 224041 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkRangeClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 449193 "~Range"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 194729 // range_class_ (<directional composition>)
	relation 194729 *-->
	  a role_name "range_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 194729 // range_class_ (<directional composition>)
	  b parent class_ref 223785 // CppClassType
      end

      operation 449321 "Range"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 282281 // Range
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 449449 "operator ="
	private return_type class_ref 282281 // Range
	nparams 1
	  param in name "" type class_ref 282281 // Range
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 449577 "Range"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 449705 "Range"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkRange"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 449833 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 449961 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 450089 "gobj"
	cpp_inline public explicit_return_type "GtkRange"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkRange*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 450217 "gobj"
	const cpp_inline public explicit_return_type "GtkRange"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkRange*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 450345 "on_value_changed"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 450473 "on_adjust_bounds"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "new_value" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 450601 "on_move_slider"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "scroll" type class_ref 282665 // ScrollType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 450729 "Range"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 450857 "set_update_policy"
	public explicit_return_type "void"
	nparams 1
	  param in name "policy" type class_ref 181033 // UpdateType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the update policy for the range. Gtk::UPDATE_CONTINUOUS means that
   * anytime the range slider is moved, the range value will change and the
   * value_changed signal will be emitted. Gtk::UPDATE_DELAYED means that
   * the value will be updated after a brief timeout where no slider motion
   * occurs, so updates are spaced by a short time rather than
   * continuous. Gtk::UPDATE_DISCONTINUOUS means that the value will only
   * be updated when the user releases the button and ends the slider
   * drag operation.
   * @param policy Update policy.
   "
      end

      operation 450985 "get_update_policy"
	const public return_type class_ref 181033 // UpdateType
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the update policy of @a range . See set_update_policy().
   * @return The current update policy.
   "
      end

      operation 451113 "set_adjustment"
	public explicit_return_type "void"
	nparams 1
	  param inout name "adjustment" explicit_type "Gtk::Adjustment"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the adjustment to be used as the \"model\" object for this range
   * widget. The adjustment indicates the current range value, the
   * minimum and maximum range values, the step/page increments used
   * for keybindings and scrolling, and the page size. The page size
   * is normally 0 for Gtk::Scale and nonzero for Gtk::Scrollbar, and
   * indicates the size of the visible area of the widget being scrolled.
   * The page size affects the size of the scrollbar slider.
   * @param adjustment A Gtk::Adjustment.
   "
      end

      operation 451241 "unset_adjustment"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 451369 "get_adjustment"
	public explicit_return_type "Gtk::Adjustment"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Get the Gtk::Adjustment which is the \"model\" object for Gtk::Range.
   * See set_adjustment() for details.
   * The return value does not have a reference added, so should not
   * be unreferenced.
   * @return A Gtk::Adjustment.
   "
      end

      operation 451497 "get_adjustment"
	const public explicit_return_type "Gtk::Adjustment"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Get the Gtk::Adjustment which is the \"model\" object for Gtk::Range.
   * See set_adjustment() for details.
   * The return value does not have a reference added, so should not
   * be unreferenced.
   * @return A Gtk::Adjustment.
   "
      end

      operation 451625 "set_inverted"
	public explicit_return_type "void"
	nparams 1
	  param in name "setting" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Ranges normally move from lower to higher values as the
   * slider moves from top to bottom or left to right. Inverted
   * ranges have higher values at the top or on the right rather than
   * on the bottom or left.
   * @param setting <tt>true</tt> to invert the range.
   "
      end

      operation 451753 "get_inverted"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the value set by set_inverted().
   * @return <tt>true</tt> if the range is inverted.
   "
      end

      operation 451881 "set_increments"
	public explicit_return_type "void"
	nparams 2
	  param in name "step" explicit_type "double"
	  param in name "page" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the step and page sizes for the range.
   * The step size is used when the user clicks the Gtk::Scrollbar
   * arrows or moves Gtk::Scale via arrow keys. The page size
   * is used for example when moving via Page Up or Page Down keys.
   * @param step Step size.
   * @param page Page size.
   "
      end

      operation 452009 "set_range"
	public explicit_return_type "void"
	nparams 2
	  param in name "min" explicit_type "double"
	  param in name "max" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the allowable values in the Gtk::Range, and clamps the range
   * value to be between @a min  and @a max . (If the range has a non-zero
   * page size, it is clamped between @a min  and @a max  - page-size.)
   * @param min Minimum range value.
   * @param max Maximum range value.
   "
      end

      operation 452137 "set_value"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the current value of the range; if the value is outside the
   * minimum or maximum range values, it will be clamped to fit inside
   * them. The range emits the \"value_changed\" signal if the value
   * changes.
   * @param value New value of the range.
   "
      end

      operation 452265 "get_value"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the current value of the range.
   * @return Current value of the range.
   "
      end

      operation 452393 "signal_value_changed"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 452521 "signal_adjust_bounds"
	public explicit_return_type "Glib::SignalProxy1< void,double >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 452649 "signal_move_slider"
	public explicit_return_type "Glib::SignalProxy1< void,ScrollType >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 452777 "property_update_policy"
	public explicit_return_type "Glib::PropertyProxy<UpdateType>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 452905 "property_update_policy"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<UpdateType>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 453033 "property_adjustment"
	public explicit_return_type "Glib::PropertyProxy<Adjustment*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 453161 "property_adjustment"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Adjustment*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 453289 "property_inverted"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 453417 "property_inverted"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 453545 "get_range_border_vfunc"
	const cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "border" explicit_type "GtkBorder"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 225321 "RC"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/rc.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      operation 458153 "RC"
	public explicit_return_type ""
	nparams 1
	  param in name "filename" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 458281 "get_style"
	class_operation public explicit_return_type "Glib::RefPtr<Style>"
	nparams 1
	  param in name "widget" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Finds all matching RC styles for a given widget,
   * composites them together, and then creates a
   * Gtk::Style representing the composite appearance.
   *
   * @param widget a Gtk::Widget.
   * @result the resulting style.
   "
      end

      operation 458409 "parse_string"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "rc_string" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 458537 "add_default_file"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "filename" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Adds a file to the list of files to be parsed at the end of gtk_init().
   *
   * @param filename the pathname to the file. If @a filename is not absolute, it is searched in the current directory.
   "
      end

      operation 458665 "set_default_files"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "filenames" explicit_type "Glib::StringArrayHandle"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the list of files that GTK+ will read at the end of gtk_init().
   *
   * @param filenames A list of filenames.
   "
      end

      operation 458793 "get_default_files"
	class_operation public explicit_return_type "Glib::StringArrayHandle"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the current list of RC files that will be parsed
   * at the end of gtk_init().
   *
   * @result An array of filenames.
   "
      end

      operation 458921 "reparse_all"
	class_operation public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* If the modification time on any previously read file for the
   * default Gtk::Settings has changed, discard all style information
   * and then reread all previously read RC files.
   *
   * @result true if the files were reread.
   "
      end

      operation 459049 "reparse_all"
	class_operation public explicit_return_type "bool"
	nparams 2
	  param in name "settings" explicit_type "Glib::RefPtr<Settings>"
	  param in name "force_load" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* If the modification time on any previously read file
   * for the given Gtk::Settings has changed, discard all style information
   * and then reread all previously read RC files.
   *
   * @param settings a Gtk::Settings
   * @param force_load load whether or not anything changed
   * @result true if the files were reread.
   "
      end

      operation 459177 "reset_styles"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "settings" explicit_type "Glib::RefPtr<Settings>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* This method recomputes the styles for all widgets that use a
   * particular Gtk::Settings object. (There is one Gtk::Settings object
   * per Gdk::Screen -  see Gtk::Settings::get_for_screen()); It is useful
   * when some global parameter has changed that affects the appearance
   * of all widgets, because when a widget gets a new style, it will
   * both redraw and recompute any cached information about its
   * appearance. As an example, it is used when the default font size
   * set by the operating system changes. Note that this function
   * doesn't affect widgets that have a style set explicitely on them
   * with Gtk::Widget::set_style().
   *
   * @param settings a Gtk::Settings
   *
   * Since: 2.4
   "
      end

      operation 459305 "find_pixmap_in_path"
	class_operation public explicit_return_type "Glib::ustring"
	nparams 3
	  param in name "settings" explicit_type "Glib::RefPtr<Settings>"
	  param inout name "scanner" explicit_type "GScanner"
	  param in name "pixmap_file" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Looks up a file in pixmap path for the specified Gtk::Settings.
   * If the file is not found, it outputs a warning message using
   * g_warning() and returns an empty string.
   *
   * @param settings a Gtk::Settings
   * @param scanner Scanner used to get line number information for the warning message.
   * @param pixmap_file name of the pixmap file to locate.
   * @result the filename.
   "
      end

      operation 459433 "find_pixmap_in_path"
	class_operation public explicit_return_type "Glib::ustring"
	nparams 2
	  param in name "settings" explicit_type "Glib::RefPtr<Settings>"
	  param in name "pixmap_file" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Looks up a file in pixmap path for the specified Gtk::Settings.
   * If the file is not found, it outputs a warning message using
   * g_warning() and returns an empty string.
   *
   * @param settings a Gtk::Settings
   * @param pixmap_file name of the pixmap file to locate.
   * @result the filename.
   "
      end

      operation 459561 "find_module_in_path"
	class_operation public explicit_return_type "Glib::ustring"
	nparams 1
	  param in name "pixmap_file" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Searches for a theme engine in the GTK+ search path. This function
   * is not useful for applications and should not be used.
   *
   * @param pixmap_file  name of a theme engine.
   * @result The filename, if found, otherwise an empty string.
   *"
      end

      operation 459689 "get_theme_dir"
	class_operation public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 459817 "get_module_dir"
	class_operation public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns a directory in which GTK+ looks for theme engines.
   * For full information about the search for theme engines,
   * see the GTK+ docs.
   *
   * @result the directory.
   *"
      end
    end

    class 224553 "RcStyle"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/rcstyle.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 224681 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 224553 // RcStyle
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 195113 // <realization>
	  relation 195113 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 195113 // <realization>
	    b parent class_ref 224553 // RcStyle
	end
      end

      class 224937 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "RcStyle_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 225065 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkRcStyle"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 225193 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkRcStyleClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 195497 // rcstyle_class_ (<directional composition>)
	relation 195497 *-->
	  a role_name "rcstyle_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 195497 // rcstyle_class_ (<directional composition>)
	  b parent class_ref 224937 // CppClassType
      end

      operation 453801 "RcStyle"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 224553 // RcStyle
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 453929 "operator ="
	private return_type class_ref 224553 // RcStyle
	nparams 1
	  param in name "" type class_ref 224553 // RcStyle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 454057 "RcStyle"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 454185 "RcStyle"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkRcStyle"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 454313 "~RcStyle"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 454441 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 454569 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 454697 "gobj"
	cpp_inline public explicit_return_type "GtkRcStyle"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkRcStyle*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 454825 "gobj"
	const cpp_inline public explicit_return_type "GtkRcStyle"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkRcStyle*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 454953 "gobj_copy"
	public explicit_return_type "GtkRcStyle"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs."
      end

      operation 455081 "RcStyle"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 455209 "create"
	class_operation public explicit_return_type "Glib::RefPtr<RcStyle>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 455337 "copy"
	const public explicit_return_type "Glib::RefPtr<RcStyle>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Makes a copy of the specified Gtk::RcStyle. This function
   * will correctly copy an RC style that is a member of a class
   * derived from Gtk::RcStyle.
   * @return The resulting Gtk::RcStyle.
   "
      end

      operation 455465 "set_name"
	public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 455593 "get_name"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 455721 "set_bg_pixmap_name"
	public explicit_return_type "void"
	nparams 2
	  param in name "state" explicit_type "Gtk::StateType"
	  param in name "name" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 455849 "get_bg_pixmap_name"
	const public explicit_return_type "Glib::ustring"
	nparams 1
	  param in name "state" explicit_type "Gtk::StateType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 455977 "set_font"
	public explicit_return_type "void"
	nparams 1
	  param in name "font_desc" explicit_type "Pango::FontDescription"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 456105 "get_font"
	const public explicit_return_type "Pango::FontDescription"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 456233 "set_color_flags"
	public explicit_return_type "void"
	nparams 2
	  param in name "state" explicit_type "Gtk::StateType"
	  param in name "flags" type class_ref 224169 // RcFlags
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 456361 "unset_color_flags"
	public explicit_return_type "void"
	nparams 2
	  param in name "state" explicit_type "Gtk::StateType"
	  param in name "flags" type class_ref 224169 // RcFlags
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 456489 "get_color_flags"
	const public return_type class_ref 224169 // RcFlags
	nparams 1
	  param in name "state" explicit_type "Gtk::StateType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 456617 "set_fg"
	public explicit_return_type "void"
	nparams 2
	  param in name "state" explicit_type "Gtk::StateType"
	  param in name "color" explicit_type "Gdk::Color"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 456745 "get_fg"
	const public explicit_return_type "Gdk::Color"
	nparams 1
	  param in name "state" explicit_type "Gtk::StateType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 456873 "set_bg"
	public explicit_return_type "void"
	nparams 2
	  param in name "state" explicit_type "Gtk::StateType"
	  param in name "color" explicit_type "Gdk::Color"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 457001 "get_bg"
	const public explicit_return_type "Gdk::Color"
	nparams 1
	  param in name "state" explicit_type "Gtk::StateType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 457129 "set_text"
	public explicit_return_type "void"
	nparams 2
	  param in name "state" explicit_type "Gtk::StateType"
	  param in name "color" explicit_type "Gdk::Color"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 457257 "get_text"
	const public explicit_return_type "Gdk::Color"
	nparams 1
	  param in name "state" explicit_type "Gtk::StateType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 457385 "set_base"
	public explicit_return_type "void"
	nparams 2
	  param in name "state" explicit_type "Gtk::StateType"
	  param in name "color" explicit_type "Gdk::Color"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 457513 "get_base"
	const public explicit_return_type "Gdk::Color"
	nparams 1
	  param in name "state" explicit_type "Gtk::StateType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 457641 "set_xthickness"
	public explicit_return_type "void"
	nparams 1
	  param in name "xthickness" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 457769 "get_xthickness"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 457897 "set_ythickness"
	public explicit_return_type "void"
	nparams 1
	  param in name "ythickness" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 458025 "get_ythickness"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 224169 "RcFlags"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* @addtogroup gtkmmEnums Enums and Flags 
*
 * @ingroup gtkmmEnums
 * @par Bitwise operators:
 * <tt>%RcFlags operator|(RcFlags, RcFlags)</tt><br>
 * <tt>%RcFlags operator&(RcFlags, RcFlags)</tt><br>
 * <tt>%RcFlags operator^(RcFlags, RcFlags)</tt><br>
 * <tt>%RcFlags operator~(RcFlags)</tt><br>
 * <tt>%RcFlags& operator|=(RcFlags&, RcFlags)</tt><br>
 * <tt>%RcFlags& operator&=(RcFlags&, RcFlags)</tt><br>
 * <tt>%RcFlags& operator^=(RcFlags&, RcFlags)</tt><br>
 "
      attribute 202537 "RC_FG"
	public explicit_type ""
	init_value " 1 << 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 202665 "RC_BG"
	public explicit_type ""
	init_value " 1 << 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 202793 "RC_TEXT"
	public explicit_type ""
	init_value " 1 << 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 202921 "RC_BASE"
	public explicit_type ""
	init_value " 1 << 3
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 142121 "ReliefStyle"
      visibility package stereotype "enum"
      cpp_external cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 "
      attribute 174633 "RELIEF_NORMAL"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 174761 "RELIEF_HALF"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 174889 "RELIEF_NONE"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 285737 "ResizeMode"
      visibility package stereotype "enum"
      cpp_external cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 "
      attribute 178985 "RESIZE_PARENT"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 179113 "RESIZE_QUEUE"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 179241 "RESIZE_IMMEDIATE"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 305705 "ResponseType"
      visibility package stereotype "enum"
      cpp_external cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* @defgroup Dialogs Dialogs
 
* @addtogroup gtkmmEnums Enums and Flags 
*
 * @ingroup gtkmmEnums
 "
      attribute 179497 "RESPONSE_NONE"
	public explicit_type ""
	init_value " -1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 179625 "RESPONSE_REJECT"
	public explicit_type ""
	init_value " -2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 179753 "RESPONSE_ACCEPT"
	public explicit_type ""
	init_value " -3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 179881 "RESPONSE_DELETE_EVENT"
	public explicit_type ""
	init_value " -4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 180009 "RESPONSE_OK"
	public explicit_type ""
	init_value " -5"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 180137 "RESPONSE_CANCEL"
	public explicit_type ""
	init_value " -6"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 180265 "RESPONSE_CLOSE"
	public explicit_type ""
	init_value " -7"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 180393 "RESPONSE_YES"
	public explicit_type ""
	init_value " -8"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 180521 "RESPONSE_NO"
	public explicit_type ""
	init_value " -9"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 180649 "RESPONSE_APPLY"
	public explicit_type ""
	init_value " -10"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 180777 "RESPONSE_HELP"
	public explicit_type ""
	init_value " -11
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 225449 "Ruler"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/ruler.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* Base class for horizontal or vertical rulers.
 *
 * NOTE this widget is considered too specialized/little-used for GTK+, and will in the future be moved to some other package. If your application needs this widget, feel free to use it, as the widget does work and is useful in some applications; it's just not of general interest. However, we are not accepting new features for the widget, and it will eventually move out of the GTK+ distribution.
 * Rulers are used to show the mouse pointer's location in a window. The ruler can either be horizontal or vertical. Within the ruler a small triangle indicates the location of the mouse relative to the horixontal or vertical ruler.

 * This is an abstract base for Gtk::HRuler and
 * Gtk::VRuler.  Users should only instantiate those types.
 *
 * @ingroup Widgets
 "
      classrelation 195625 // <generalisation>
	relation 195625 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 195625 // <generalisation>
	  b parent class_ref 130089 // Widget
      end

      class 225577 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 225449 // Ruler
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 195753 // <realization>
	  relation 195753 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 195753 // <realization>
	    b parent class_ref 225449 // Ruler
	end
      end

      class 225833 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Ruler_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 225961 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkRuler"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 226089 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkRulerClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 459945 "~Ruler"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 196137 // ruler_class_ (<directional composition>)
	relation 196137 *-->
	  a role_name "ruler_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 196137 // ruler_class_ (<directional composition>)
	  b parent class_ref 225833 // CppClassType
      end

      operation 460073 "Ruler"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 225449 // Ruler
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 460201 "operator ="
	private return_type class_ref 225449 // Ruler
	nparams 1
	  param in name "" type class_ref 225449 // Ruler
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 460329 "Ruler"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 460457 "Ruler"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkRuler"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 460585 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 460713 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 460841 "gobj"
	cpp_inline public explicit_return_type "GtkRuler"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkRuler*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 460969 "gobj"
	const cpp_inline public explicit_return_type "GtkRuler"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkRuler*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 461097 "Ruler"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 461225 "get_metric"
	const public return_type class_ref 311977 // MetricType
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 461353 "set_metric"
	public explicit_return_type "void"
	nparams 1
	  param in name "metric" type class_ref 311977 // MetricType
	    defaultvalue " PIXELS"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the desired metric of the ruler.  The possible choices are:
   * <ul><li>Gtk::PIXELS
   * <li>Gtk::INCHES
   * <li>Gtk::CENTIMETERS
   * </ul>The default metric is Gtk::PIXELS.
   "
      end

      operation 461481 "get_metric"
	public return_type class_ref 311977 // MetricType
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the units used for a Gtk::Ruler. See set_metric().
   * @return The units currently used for @a ruler .
   "
      end

      operation 461609 "get_range_lower"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 461737 "get_range_upper"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 461865 "set_range"
	public explicit_return_type "void"
	nparams 4
	  param in name "lower" explicit_type "double"
	  param in name "upper" explicit_type "double"
	  param in name "position" explicit_type "double"
	  param in name "max_size" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* sets the range of the ruler.
   * <i>upper</i> and <i>lower</i> arguments denote the extents of the Ruler.
   * <i>max_size</i> is the largest number displayed by the ruler.
   * <i>position</i> gives the initial value of the ruler.
   * Rulers do not have sane defaults so this function should always be called.
   "
      end

      operation 461993 "get_range"
	public explicit_return_type "void"
	nparams 4
	  param inout name "lower" explicit_type "double"
	  param inout name "upper" explicit_type "double"
	  param inout name "position" explicit_type "double"
	  param inout name "max_size" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}, ${t3} & ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}, ${t3} & ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves values indicating the range and current position of a Gtk::Ruler.
   * See set_range().
   * @param lower Location to store lower limit of the ruler, or <tt>0</tt>.
   * @param upper Location to store upper limit of the ruler, or <tt>0</tt>.
   * @param position Location to store the current position of the mark on the ruler, or <tt>0</tt>.
   * @param max_size Location to store the maximum size of the ruler used when calculating
   * the space to leave for the text, or <tt>0</tt>.
   "
      end

      operation 462121 "draw_ticks"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/ draw tick marks on the ruler"
      end

      operation 462249 "draw_pos"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/ draw a position indicator on the ruler"
      end

      operation 462377 "draw_ticks_vfunc"
	cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 462505 "draw_pos_vfunc"
	cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 462633 "property_lower"
	public explicit_return_type "Glib::PropertyProxy<double>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 462761 "property_lower"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<double>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 462889 "property_upper"
	public explicit_return_type "Glib::PropertyProxy<double>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 463017 "property_upper"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<double>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 463145 "property_position"
	public explicit_return_type "Glib::PropertyProxy<double>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 463273 "property_position"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<double>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 463401 "property_max_size"
	public explicit_return_type "Glib::PropertyProxy<double>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 463529 "property_max_size"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<double>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end
    end

    class 205609 "RunSig"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/runsig.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Actually, I'd like to just keep these out of the alphabetical list. murrayc.
/ Run Signal Class (internal)"
      class 205737 "SlotType"
	visibility package stereotype "typedef" explicit_base_type "sigc::slot<void>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 394025 "connect"
	public explicit_return_type "sigc::connection"
	nparams 1
	  param in name "slot" type class_ref 205737 // SlotType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 394153 "gtk_callback"
	class_operation protected explicit_return_type "gboolean"
	nparams 1
	  param in name "data" explicit_type "gpointer"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 227753 "Scale"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/scale.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* Abstract base clase for Gtk::HScale and Gtk::VScale.
 * 
 * A Gtk::Scale is a slider control used to select a numeric value. To use it,
 * you'll probably want to investigate the methods on its base class,
 * Gtk::Range, in addition to the methods for Gtk::Scale itself. To set the
 * value of a scale, you would normally use set_value(). To detect
 * changes to the value, you would normally use signal_value_changed().
 *
 * The Gtk::Scale widget is an abstract class, used only for deriving the
 * subclasses Gtk::HScale and Gtk::VScale, so you should instantiate them
 * instead.
 *
 * @ingroup Widgets
 "
      classrelation 197545 // <generalisation>
	relation 197545 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 197545 // <generalisation>
	  b parent class_ref 282281 // Range
      end

      class 227881 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 227753 // Scale
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 197673 // <realization>
	  relation 197673 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 197673 // <realization>
	    b parent class_ref 227753 // Scale
	end
      end

      class 228137 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Scale_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 228265 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkScale"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 228393 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkScaleClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 466217 "~Scale"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 198057 // scale_class_ (<directional composition>)
	relation 198057 *-->
	  a role_name "scale_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 198057 // scale_class_ (<directional composition>)
	  b parent class_ref 228137 // CppClassType
      end

      operation 466345 "Scale"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 227753 // Scale
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 466473 "operator ="
	private return_type class_ref 227753 // Scale
	nparams 1
	  param in name "" type class_ref 227753 // Scale
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 466601 "Scale"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 466729 "Scale"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkScale"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 466857 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 466985 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 467113 "gobj"
	cpp_inline public explicit_return_type "GtkScale"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkScale*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 467241 "gobj"
	const cpp_inline public explicit_return_type "GtkScale"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkScale*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 467369 "on_format_value"
	cpp_virtual protected explicit_return_type "Glib::ustring"
	nparams 1
	  param in name "value" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 467497 "Scale"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 467625 "set_digits"
	public explicit_return_type "void"
	nparams 1
	  param in name "digits" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Set the number of decimal digits.
   * 
   * This also causes the adjustment to be rounded off so the retrieved value
   * matches the value the user sees. Setting digits to 1 gives for example
   * 1.0, 2 gives 1.00, etc.
   "
      end

      operation 467753 "get_digits"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Get the number of decimal digits.
   "
      end

      operation 467881 "set_draw_value"
	public explicit_return_type "void"
	nparams 1
	  param in name "draw_value" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Set whether the current value is displayed as a string next to the slider. 
   "
      end

      operation 468009 "get_draw_value"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Get whether the current value is displayed as a string next to the slider. 
   "
      end

      operation 468137 "set_value_pos"
	public explicit_return_type "void"
	nparams 1
	  param in name "pos" type class_ref 314793 // PositionType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Set the position in which the value is displayed.
   "
      end

      operation 468265 "get_value_pos"
	const public return_type class_ref 314793 // PositionType
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Get the position in which the value is displayed.
   "
      end

      operation 468393 "get_layout"
	public explicit_return_type "Glib::RefPtr<Pango::Layout>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the Pango::Layout used to display the scale. The returned object
   * is owned by the scale so does not need to be freed by the caller.
   * @return The Pango::Layout for this scale, or <tt>0</tt> if the draw_value property
   * is <tt>false</tt>.
   * 
   * Since: 2.4.
   "
      end

      operation 468521 "get_layout"
	const public explicit_return_type "Glib::RefPtr<const Pango::Layout>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the Pango::Layout used to display the scale. The returned object
   * is owned by the scale so does not need to be freed by the caller.
   * @return The Pango::Layout for this scale, or <tt>0</tt> if the draw_value property
   * is <tt>false</tt>.
   * 
   * Since: 2.4.
   "
      end

      operation 468649 "get_layout_offsets"
	const public explicit_return_type "void"
	nparams 2
	  param inout name "x" explicit_type "int"
	  param inout name "y" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Obtains the coordinates where the scale will draw the Pango::Layout
   * representing the text in the scale. Remember
   * when using the Pango::Layout function you need to convert to
   * and from pixels using PANGO_PIXELS() or Pango::SCALE. 
   * 
   * If the draw_value property is <tt>false</tt>, the return values are 
   * undefined.
   * 
   * Since: 2.4
   * @param x Location to store X offset of layout, or <tt>0</tt>.
   * @param y Location to store Y offset of layout, or <tt>0</tt>.
   "
      end

      operation 468777 "signal_format_value"
	public explicit_return_type "Glib::SignalProxy1< Glib::ustring,double >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Determines how the value is formatted.
   * 
   * This can be used to connect a custom function for determining how the
   * value is formatted. The function (or function object) is given a the value
   * as a double and should return the representation of it as a Glib::ustring.
   "
      end

      operation 468905 "property_digits"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Number of displayed decimal digits.
   
* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 469033 "property_digits"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 469161 "property_draw_value"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Whether to draw the value as a string next to slider.
   
* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 469289 "property_draw_value"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 469417 "property_value_pos"
	public explicit_return_type "Glib::PropertyProxy<PositionType>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* The position in which the value is displayed.
   
* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 469545 "property_value_pos"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<PositionType>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 469673 "draw_value_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 469801 "calc_digits_"
	const cpp_virtual protected explicit_return_type "int"
	nparams 1
	  param in name "step" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 230057 "Scrollbar"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/scrollbar.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* 
 * The Gtk::Scrollbar widget is an abstract base class for Gtk::HScrollbar
 * and Gtk::VScrollbar. It is not very useful in itself. 
 *
 * The position of the thumb in a scrollbar is controlled by the scroll
 * adjustments. See Gtk::Adjustment for the fields in an adjustment - for
 * Gtk::Scrollbar, the \"value\" field represents the position of the scrollbar,
 * which must be between the \"lower\" field and \"upper - page_size.\" The
 * \"page_size\" field represents the size of the visible scrollable area. The
 * \"step_increment\" and \"page_increment\" fields are used when the user asks
 * to step down (using the small stepper arrows) or page down (using for
 * example the PageDown key).
 *
 * @ingroup Widgets
 "
      classrelation 199465 // <generalisation>
	relation 199465 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 199465 // <generalisation>
	  b parent class_ref 282281 // Range
      end

      class 230185 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 230057 // Scrollbar
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 199593 // <realization>
	  relation 199593 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 199593 // <realization>
	    b parent class_ref 230057 // Scrollbar
	end
      end

      class 230441 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Scrollbar_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 230569 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkScrollbar"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 230697 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkScrollbarClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 473001 "~Scrollbar"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 199977 // scrollbar_class_ (<directional composition>)
	relation 199977 *-->
	  a role_name "scrollbar_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 199977 // scrollbar_class_ (<directional composition>)
	  b parent class_ref 230441 // CppClassType
      end

      operation 473129 "Scrollbar"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 230057 // Scrollbar
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 473257 "operator ="
	private return_type class_ref 230057 // Scrollbar
	nparams 1
	  param in name "" type class_ref 230057 // Scrollbar
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 473385 "Scrollbar"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 473513 "Scrollbar"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkScrollbar"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 473641 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 473769 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 473897 "gobj"
	cpp_inline public explicit_return_type "GtkScrollbar"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkScrollbar*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 474025 "gobj"
	const cpp_inline public explicit_return_type "GtkScrollbar"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkScrollbar*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end
    end

    class 201385 "ScrolledWindow"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/scrolledwindow.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Adds scrollbars to its child widget.
 *
 * This container accepts a single child widget. It adds scrollbars to the child widget and optionally draws a beveled frame around the child widget.
 * The scrolled window can work in two ways:
 * 1) Some widgets have native scrolling support; these widgets handle certain Gtk::Adjustment signals. Widgets with native scroll support include Gtk::TreeView, Gtk::TextView, and Gtk::Layout.
 * 2) For widgets that lack native scrolling support, such as Gtk::Table, Gtk::Box, and so on, the widget will be placed inside a Gtk::Viewport.
 *
 * The position of the scrollbars is controlled by the scroll adjustments. See Gtk::Adjustment for the fields in an adjustment - for Gtk::Scrollbar, used by Gtk::ScrolledWindow,
 * the \"value\" field represents the position of the scrollbar, which must be between the \"lower\" field and \"upper - page_size.\"
 * The \"page_size\" field represents the size of the visible scrollable area.
 * The \"step_increment\" and \"page_increment\" fields are used when the user asks to step down (using the small stepper arrows) or page down (using for example the PageDown key).
 *
 * If a Gtk::ScrolledWindow doesn't behave quite as you would like, or doesn't have exactly the right layout, it's very possible to set up your own scrolling with Gtk::Scrollbar and, for example, a Gtk::Table.
 *
 * @ingroup Widgets
 * @ingroup Containers
 "
      classrelation 201385 // <generalisation>
	relation 201385 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 201385 // <generalisation>
	  b parent class_ref 281385 // Bin
      end

      class 232105 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 201385 // ScrolledWindow
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 201513 // <realization>
	  relation 201513 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 201513 // <realization>
	    b parent class_ref 201385 // ScrolledWindow
	end
      end

      class 232361 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "ScrolledWindow_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 232489 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkScrolledWindow"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 232617 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkScrolledWindowClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 476969 "~ScrolledWindow"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 201897 // scrolledwindow_class_ (<directional composition>)
	relation 201897 *-->
	  a role_name "scrolledwindow_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 201897 // scrolledwindow_class_ (<directional composition>)
	  b parent class_ref 232361 // CppClassType
      end

      operation 477097 "ScrolledWindow"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 201385 // ScrolledWindow
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 477225 "operator ="
	private return_type class_ref 201385 // ScrolledWindow
	nparams 1
	  param in name "" type class_ref 201385 // ScrolledWindow
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 477353 "ScrolledWindow"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 477481 "ScrolledWindow"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkScrolledWindow"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 477609 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 477737 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 477865 "gobj"
	cpp_inline public explicit_return_type "GtkScrolledWindow"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkScrolledWindow*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 477993 "gobj"
	const cpp_inline public explicit_return_type "GtkScrolledWindow"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkScrolledWindow*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 478121 "ScrolledWindow"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 478249 "ScrolledWindow"
	public explicit_return_type ""
	nparams 2
	  param inout name "hadjustment" type class_ref 132521 // Adjustment
	  param inout name "vadjustment" type class_ref 132521 // Adjustment
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 478377 "set_hadjustment"
	public explicit_return_type "void"
	nparams 1
	  param inout name "hadjustment" explicit_type "Gtk::Adjustment"
	    defaultvalue " 0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 478505 "set_vadjustment"
	public explicit_return_type "void"
	nparams 1
	  param inout name "vadjustment" explicit_type "Gtk::Adjustment"
	    defaultvalue " 0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 478633 "set_hadjustment"
	public explicit_return_type "void"
	nparams 1
	  param inout name "hadjustment" explicit_type "Gtk::Adjustment"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 478761 "set_vadjustment"
	public explicit_return_type "void"
	nparams 1
	  param inout name "vadjustment" explicit_type "Gtk::Adjustment"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 478889 "get_hadjustment"
	public explicit_return_type "Gtk::Adjustment"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 479017 "get_hadjustment"
	const public explicit_return_type "Gtk::Adjustment"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 479145 "get_vadjustment"
	public explicit_return_type "Gtk::Adjustment"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 479273 "get_vadjustment"
	const public explicit_return_type "Gtk::Adjustment"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 479401 "set_policy"
	public explicit_return_type "void"
	nparams 2
	  param in name "hscrollbar_policy" type class_ref 314409 // PolicyType
	  param in name "vscrollbar_policy" type class_ref 314409 // PolicyType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 479529 "get_policy"
	const public explicit_return_type "void"
	nparams 2
	  param inout name "hscrollbar_policy" type class_ref 314409 // PolicyType
	  param inout name "vscrollbar_policy" type class_ref 314409 // PolicyType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the current policy values for the horizontal and vertical
   * scrollbars. See set_policy().
   * @param hscrollbar_policy Location to store the policy for the horizontal scrollbar, or <tt>0</tt>.
   * @param vscrollbar_policy Location to store the policy for the horizontal scrollbar, or <tt>0</tt>.
   "
      end

      operation 479657 "set_placement"
	public explicit_return_type "void"
	nparams 1
	  param in name "window_placement" type class_ref 313001 // CornerType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 479785 "get_placement"
	const public return_type class_ref 313001 // CornerType
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the placement of the scrollbars for the scrolled window. See 
   * set_placement().
   * @return The current placement value.
   "
      end

      operation 479913 "set_shadow_type"
	public explicit_return_type "void"
	nparams 1
	  param in name "type" type class_ref 284329 // ShadowType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Changes the type of shadow drawn around the contents of
   *  @a scrolled_window .
   * @param type Kind of shadow to draw around scrolled window contents.
   "
      end

      operation 480041 "get_shadow_type"
	const public return_type class_ref 284329 // ShadowType
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the shadow type of the scrolled window. See 
   * set_shadow_type().
   * @return The current shadow type.
   "
      end

      operation 480169 "add"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param inout name "widget" explicit_type "Gtk::Widget"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Puts the child inside a Gtk::Viewport if it doesn't have native scrolling capability."
      end

      operation 480297 "get_vscrollbar_visible"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 480425 "get_hscrollbar_visible"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 480553 "get_hscrollbar"
	public explicit_return_type "Gtk::HScrollbar"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 480681 "get_hscrollbar"
	const public explicit_return_type "Gtk::HScrollbar"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 480809 "get_vscrollbar"
	public explicit_return_type "Gtk::VScrollbar"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 480937 "get_vscrollbar"
	const public explicit_return_type "Gtk::VScrollbar"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 481065 "property_hadjustment"
	public explicit_return_type "Glib::PropertyProxy<Gtk::Adjustment*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Keybinding signals:
* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 481193 "property_hadjustment"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Gtk::Adjustment*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 481321 "property_vadjustment"
	public explicit_return_type "Glib::PropertyProxy<Gtk::Adjustment*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 481449 "property_vadjustment"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Gtk::Adjustment*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 481577 "property_hscrollbar_policy"
	public explicit_return_type "Glib::PropertyProxy<PolicyType>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 481705 "property_hscrollbar_policy"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<PolicyType>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 481833 "property_vscrollbar_policy"
	public explicit_return_type "Glib::PropertyProxy<PolicyType>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 481961 "property_vscrollbar_policy"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<PolicyType>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 482089 "property_window_placement"
	public explicit_return_type "Glib::PropertyProxy<CornerType>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 482217 "property_window_placement"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<CornerType>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 482345 "property_shadow_type"
	public explicit_return_type "Glib::PropertyProxy<ShadowType>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 482473 "property_shadow_type"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<ShadowType>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end
    end

    class 282665 "ScrollType"
      visibility package stereotype "enum"
      cpp_external cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 "
      attribute 177449 "SCROLL_NONE"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 177577 "SCROLL_JUMP"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 177705 "SCROLL_STEP_BACKWARD"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 177833 "SCROLL_STEP_FORWARD"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 177961 "SCROLL_PAGE_BACKWARD"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 178089 "SCROLL_PAGE_FORWARD"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 178217 "SCROLL_STEP_UP"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 178345 "SCROLL_STEP_DOWN"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 148009 "SCROLL_PAGE_UP"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 148137 "SCROLL_PAGE_DOWN"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 148265 "SCROLL_STEP_LEFT"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 148393 "SCROLL_STEP_RIGHT"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 148521 "SCROLL_PAGE_LEFT"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 148649 "SCROLL_PAGE_RIGHT"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 178473 "SCROLL_START"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 178601 "SCROLL_END"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 280489 "SelectionData"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/selectiondata.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 232745 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 280489 // SelectionData
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 202025 // <realization>
	  relation 202025 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 202025 // <realization>
	    b parent class_ref 280489 // SelectionData
	end
      end

      class 232873 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkSelectionData"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 482601 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 482729 "SelectionData"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 482857 "SelectionData"
	public explicit_return_type ""
	nparams 2
	  param inout name "gobject" explicit_type "GtkSelectionData"
	  param in name "make_a_copy" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 482985 "SelectionData"
	public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 280489 // SelectionData
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 483113 "operator ="
	public return_type class_ref 280489 // SelectionData
	nparams 1
	  param in name "other" type class_ref 280489 // SelectionData
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 483241 "~SelectionData"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 483369 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 280489 // SelectionData
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 483497 "gobj"
	cpp_inline public explicit_return_type "GtkSelectionData"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return gobject_; };
"
	
	
	
	
	comment "/Provides access to the underlying C instance."
      end

      operation 483625 "gobj"
	const cpp_inline public explicit_return_type "GtkSelectionData"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return gobject_; };
"
	
	
	
	
	comment "/Provides access to the underlying C instance."
      end

      operation 483753 "gobj_copy"
	const public explicit_return_type "GtkSelectionData"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Provides access to the underlying C instance. The caller is responsible for freeing it. Use when directly setting fields in structs."
      end

      attribute 177321 "gobject_"
	protected explicit_type "GtkSelectionData"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 483881 "set"
	public explicit_return_type "void"
	nparams 3
	  param in name "format" explicit_type "int"
	  param in name "data" explicit_type "guint8"
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, const ${t1} * ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO : document this. It's like the other set(), but it uses this SelectionData's target type.
Why would you ever want to use any other type?"
      end

      operation 484009 "set"
	public explicit_return_type "void"
	nparams 4
	  param in name "type" explicit_type "string"
	  param in name "format" explicit_type "int"
	  param in name "data" explicit_type "guint8"
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} * ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} * ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Assign a memory block of raw data.
   * Store new data into the Gtk::SelectionData object. Should _only_ by called
   * from a selection handler callback.  A 0-byte terminates the stored data.
   * @param type The type of the selection.
   * @param format The data format, i.e. the number of bits in a unit.
   * @param data Pointer to the data (will be copied).
   * @param length The length of the data block in bytes.
   "
      end

      operation 484137 "set"
	public explicit_return_type "void"
	nparams 2
	  param in name "type" explicit_type "string"
	  param in name "data" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Assign a string of raw data.
   * Store new data into the Gtk::SelectionData object. Should _only_ by called
   * from a selection handler callback. 
   * @param type The type of the selection.
   * @param data A string that contains the data (does not have to be text).
   "
      end

      operation 484265 "set_text"
	public explicit_return_type "bool"
	nparams 1
	  param in name "data" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Assign UTF-8 encoded text.
   * Sets the contents of the selection from a UTF-8 encoded string.
   * The string is converted to the form determined by get_target().
   * @param data A UTF-8 encoded string.
   * @return <tt>true</tt> if the selection was successfully set,
   * otherwise <tt>false</tt>.
   "
      end

      operation 484393 "get_text"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the contents of the selection data as a UTF-8 string.
   * @return If the selection data contained a recognized text type and
   * it could be converted to UTF-8, a string containing the converted text,
   * otherwise an empty string.
   "
      end

      operation 484521 "get_data"
	const public explicit_return_type "guint8"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 484649 "get_length"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 484777 "get_data_as_string"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 484905 "get_target"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 485033 "get_targets"
	const public explicit_return_type "Glib::StringArrayHandle"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/ See also Gtk::Clipboard::request_targets()"
      end

      operation 485161 "get_selection"
	const public explicit_return_type "GdkAtom"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the ID of the selection.
   "
      end

      operation 485289 "get_data_type"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the type of the data as set by SelectionData::set().
   "
      end

      operation 485417 "get_format"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " get_type() already exists"
      end

      operation 485545 "get_display"
	public explicit_return_type "Glib::RefPtr<Gdk::Display>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 485673 "get_display"
	const public explicit_return_type "Glib::RefPtr<const Gdk::Display>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 485801 "targets_include_text"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Given a Gtk::SelectionData object holding a list of targets,
   * determines if any of the targets in @a targets  can be used to
   * provide text.
   * @return <tt>true</tt> if @a selection_data  holds a list of targets,
   * and a suitable target for text is included, otherwise <tt>false</tt>.
   "
      end
    end

    class 233257 "SelectionData_WithoutOwnership"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/selectiondata.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* This class allows GtkSelectionData to be manipulated via a C++ API, but doesn't take a copy
 * or try to free the underlying instance in its destructor.
 * So far it's only used by gtkmm internally.
 "
      classrelation 202281 // <generalisation>
	relation 202281 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 202281 // <generalisation>
	  b parent class_ref 280489 // SelectionData
      end

      operation 485929 "SelectionData_WithoutOwnership"
	public explicit_return_type ""
	nparams 1
	  param inout name "gobject" explicit_type "GtkSelectionData"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 486057 "~SelectionData_WithoutOwnership"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end
    end

    class 179241 "SelectionMode"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 "
      attribute 191657 "SELECTION_NONE"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 191785 "SELECTION_SINGLE"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 191913 "SELECTION_BROWSE"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 192041 "SELECTION_MULTIPLE"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 192169 "SELECTION_EXTENDED"
	public explicit_type ""
	init_value " SELECTION_MULTIPLE
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 233385 "Separator"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/separator.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* Separator base class.
 * Abstract base class for Gtk::VSeperator and Gtk::HSeperator.
 "
      classrelation 202409 // <generalisation>
	relation 202409 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 202409 // <generalisation>
	  b parent class_ref 130089 // Widget
      end

      class 233513 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 233385 // Separator
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 202537 // <realization>
	  relation 202537 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 202537 // <realization>
	    b parent class_ref 233385 // Separator
	end
      end

      class 233769 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Separator_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 233897 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkSeparator"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 234025 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkSeparatorClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 486185 "~Separator"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 202921 // separator_class_ (<directional composition>)
	relation 202921 *-->
	  a role_name "separator_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 202921 // separator_class_ (<directional composition>)
	  b parent class_ref 233769 // CppClassType
      end

      operation 486313 "Separator"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 233385 // Separator
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 486441 "operator ="
	private return_type class_ref 233385 // Separator
	nparams 1
	  param in name "" type class_ref 233385 // Separator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 486569 "Separator"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 486697 "Separator"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkSeparator"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 486825 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 486953 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 487081 "gobj"
	cpp_inline public explicit_return_type "GtkSeparator"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkSeparator*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 487209 "gobj"
	const cpp_inline public explicit_return_type "GtkSeparator"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkSeparator*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 487337 "Separator"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end
    end

    class 235689 "SeparatorMenuItem"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/separatormenuitem.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* A separator used to group items within a menu.
 * It displays a horizontal line with a shadow to make it appear sunken into the interface.
 * @ingroup Widgets
 * @ingroup Menus
 "
      classrelation 204329 // <generalisation>
	relation 204329 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 204329 // <generalisation>
	  b parent class_ref 131369 // MenuItem
      end

      class 235817 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 235689 // SeparatorMenuItem
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 204457 // <realization>
	  relation 204457 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 204457 // <realization>
	    b parent class_ref 235689 // SeparatorMenuItem
	end
      end

      class 236073 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "SeparatorMenuItem_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 236201 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkSeparatorMenuItem"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 236329 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkSeparatorMenuItemClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 490025 "~SeparatorMenuItem"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 204841 // separatormenuitem_class_ (<directional composition>)
	relation 204841 *-->
	  a role_name "separatormenuitem_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 204841 // separatormenuitem_class_ (<directional composition>)
	  b parent class_ref 236073 // CppClassType
      end

      operation 490153 "SeparatorMenuItem"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 235689 // SeparatorMenuItem
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 490281 "operator ="
	private return_type class_ref 235689 // SeparatorMenuItem
	nparams 1
	  param in name "" type class_ref 235689 // SeparatorMenuItem
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 490409 "SeparatorMenuItem"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 490537 "SeparatorMenuItem"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkSeparatorMenuItem"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 490665 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 490793 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 490921 "gobj"
	cpp_inline public explicit_return_type "GtkSeparatorMenuItem"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkSeparatorMenuItem*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 491049 "gobj"
	const cpp_inline public explicit_return_type "GtkSeparatorMenuItem"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkSeparatorMenuItem*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 491177 "SeparatorMenuItem"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end
    end

    class 236457 "SeparatorToolItem"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/separatortoolitem.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* A toolbar item that separates groups of other toolbar items.
 *
 * A Gtk::SeparatorToolItem is a Gtk::ToolItem that separates groups of other Gtk::ToolItems.
 * Depending on the theme, it will often look like a vertical line on
 * horizontally docked toolbars. If the property \"expand\" is <tt>true</tt> and the property \"draw\"
 * is <tt>false</tt>, a Gtk::SeparatorToolItem will act as a \"spring\" that forces other items to the
 * ends of the toolbar. 
 *
 * @ingroup Widgets
 "
      classrelation 204969 // <generalisation>
	relation 204969 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 204969 // <generalisation>
	  b parent class_ref 131497 // ToolItem
      end

      class 236585 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 236457 // SeparatorToolItem
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 205097 // <realization>
	  relation 205097 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 205097 // <realization>
	    b parent class_ref 236457 // SeparatorToolItem
	end
      end

      class 236841 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "SeparatorToolItem_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 236969 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkSeparatorToolItem"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 237097 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkSeparatorToolItemClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 491305 "~SeparatorToolItem"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 205481 // separatortoolitem_class_ (<directional composition>)
	relation 205481 *-->
	  a role_name "separatortoolitem_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 205481 // separatortoolitem_class_ (<directional composition>)
	  b parent class_ref 236841 // CppClassType
      end

      operation 491433 "SeparatorToolItem"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 236457 // SeparatorToolItem
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 491561 "operator ="
	private return_type class_ref 236457 // SeparatorToolItem
	nparams 1
	  param in name "" type class_ref 236457 // SeparatorToolItem
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 491689 "SeparatorToolItem"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 491817 "SeparatorToolItem"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkSeparatorToolItem"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 491945 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 492073 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 492201 "gobj"
	cpp_inline public explicit_return_type "GtkSeparatorToolItem"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkSeparatorToolItem*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 492329 "gobj"
	const cpp_inline public explicit_return_type "GtkSeparatorToolItem"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkSeparatorToolItem*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 492457 "SeparatorToolItem"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end
    end

    class 237225 "Settings"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/settings.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk"
      class 237353 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 237225 // Settings
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 205737 // <realization>
	  relation 205737 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 205737 // <realization>
	    b parent class_ref 237225 // Settings
	end
      end

      class 237609 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Settings_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 237737 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkSettings"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 237865 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkSettingsClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 206121 // settings_class_ (<directional composition>)
	relation 206121 *-->
	  a role_name "settings_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 206121 // settings_class_ (<directional composition>)
	  b parent class_ref 237609 // CppClassType
      end

      operation 492585 "Settings"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 237225 // Settings
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 492713 "operator ="
	private return_type class_ref 237225 // Settings
	nparams 1
	  param in name "" type class_ref 237225 // Settings
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 492841 "Settings"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 492969 "Settings"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkSettings"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 493097 "~Settings"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 493225 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 493353 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 493481 "gobj"
	cpp_inline public explicit_return_type "GtkSettings"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkSettings*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 493609 "gobj"
	const cpp_inline public explicit_return_type "GtkSettings"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkSettings*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 493737 "gobj_copy"
	public explicit_return_type "GtkSettings"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs."
      end

      operation 493865 "get_default"
	class_operation public explicit_return_type "Glib::RefPtr<Settings>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 493993 "get_for_screen"
	class_operation public explicit_return_type "Glib::RefPtr<Settings>"
	nparams 1
	  param in name "screen" explicit_type "Glib::RefPtr<Gdk::Screen>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the Gtk::Settings object for @a screen , creating it if necessary.
   * @param screen A Gdk::Screen.
   * @return A Gtk::Settings object.
   * 
   * Since: 2.2.
   "
      end

      operation 494121 "property_gtk_double_click_time"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 494249 "property_gtk_double_click_time"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 494377 "property_gtk_double_click_distance"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 494505 "property_gtk_double_click_distance"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 494633 "property_gtk_cursor_blink"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 494761 "property_gtk_cursor_blink"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 494889 "property_gtk_cursor_blink_time"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 495017 "property_gtk_cursor_blink_time"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 495145 "property_gtk_split_cursor"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 495273 "property_gtk_split_cursor"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 495401 "property_gtk_theme_name"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 495529 "property_gtk_theme_name"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 495657 "property_gtk_key_theme_name"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 495785 "property_gtk_key_theme_name"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 495913 "property_gtk_menu_bar_accel"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 496041 "property_gtk_menu_bar_accel"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 496169 "property_gtk_dnd_drag_threshold"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 496297 "property_gtk_dnd_drag_threshold"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 496425 "property_gtk_font_name"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 496553 "property_gtk_font_name"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 496681 "property_gtk_xft_antialias"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 496809 "property_gtk_xft_antialias"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 496937 "property_gtk_xft_hinting"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 497065 "property_gtk_xft_hinting"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 497193 "property_gtk_xft_hintstyle"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 497321 "property_gtk_xft_hintstyle"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 497449 "property_gtk_xft_rgba"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 497577 "property_gtk_xft_rgba"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 497705 "property_gtk_xft_dpi"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 497833 "property_gtk_xft_dpi"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 497961 "property_gtk_toolbar_style"
	public explicit_return_type "Glib::PropertyProxy<ToolbarStyle>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " from GtkToolbar
* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 498089 "property_gtk_toolbar_style"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<ToolbarStyle>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 498217 "property_gtk_toolbar_icon_size"
	public explicit_return_type "Glib::PropertyProxy<IconSize>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 498345 "property_gtk_toolbar_icon_size"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<IconSize>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 498473 "property_gtk_can_change_accels"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " from GtkMenu
* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 498601 "property_gtk_can_change_accels"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 498729 "property_gtk_entry_select_on_focus"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " from GtkEntry
* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 498857 "property_gtk_entry_select_on_focus"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 498985 "property_gtk_color_palette"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " from GtkColorSelection
* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 499113 "property_gtk_color_palette"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 499241 "property_gtk_button_images"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " from GtkButton
* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 499369 "property_gtk_button_images"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 499497 "property_gtk_icon_theme_name"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " from GtkIconTheme
* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 499625 "property_gtk_icon_theme_name"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 499753 "property_gtk_icon_sizes"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 499881 "property_gtk_icon_sizes"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end
    end

    class 284329 "ShadowType"
      visibility package stereotype "enum"
      cpp_external cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 "
      attribute 173737 "SHADOW_NONE"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 173865 "SHADOW_IN"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 173993 "SHADOW_OUT"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 174121 "SHADOW_ETCHED_IN"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 174249 "SHADOW_ETCHED_OUT"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 274729 "SignalProxy_CellData"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/signalproxy_celldata.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This Signal Proxy allows the C++ coder to specify a sigc::slot instead of a static function."
      class 274857 "SlotType"
	visibility package stereotype "typedef" base_type class_ref 274089 // SlotCellData
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 230313 // <realization>
	  relation 230313 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 230313 // <realization>
	    b parent class_ref 274089 // SlotCellData
	end
      end

      operation 697897 "SignalProxy_CellData"
	public explicit_return_type ""
	nparams 1
	  param in name "slot" type class_ref 274857 // SlotType
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 698025 "~SignalProxy_CellData"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 698153 "gtk_callback"
	class_operation public explicit_return_type "void"
	nparams 5
	  param inout name "" explicit_type "GtkTreeViewColumn"
	  param inout name "cell" explicit_type "GtkCellRenderer"
	  param inout name "model" explicit_type "GtkTreeModel"
	  param inout name "iter" explicit_type "GtkTreeIter"
	  param inout name "data" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} * ${p2}, ${t3} * ${p3}, ${t4} * ${p4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} * ${p2}, ${t3} * ${p3}, ${t4} * ${p4}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 698281 "gtk_callback_destroy"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "data" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      classrelation 230441 // slot_ (<directional composition>)
	relation 230441 *-->
	  a role_name "slot_" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 230441 // slot_ (<directional composition>)
	  b parent class_ref 274857 // SlotType
      end
    end

    class 238377 "SizeGroup"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/sizegroup.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 238505 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 238377 // SizeGroup
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 206505 // <realization>
	  relation 206505 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 206505 // <realization>
	    b parent class_ref 238377 // SizeGroup
	end
      end

      class 238761 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "SizeGroup_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 238889 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkSizeGroup"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 239017 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkSizeGroupClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 206889 // sizegroup_class_ (<directional composition>)
	relation 206889 *-->
	  a role_name "sizegroup_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 206889 // sizegroup_class_ (<directional composition>)
	  b parent class_ref 238761 // CppClassType
      end

      operation 500137 "SizeGroup"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 238377 // SizeGroup
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 500265 "operator ="
	private return_type class_ref 238377 // SizeGroup
	nparams 1
	  param in name "" type class_ref 238377 // SizeGroup
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 500393 "SizeGroup"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 500521 "SizeGroup"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkSizeGroup"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 500649 "~SizeGroup"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 500777 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 500905 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 501033 "gobj"
	cpp_inline public explicit_return_type "GtkSizeGroup"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkSizeGroup*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 501161 "gobj"
	const cpp_inline public explicit_return_type "GtkSizeGroup"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkSizeGroup*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 501289 "gobj_copy"
	public explicit_return_type "GtkSizeGroup"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs."
      end

      operation 501417 "SizeGroup"
	protected explicit_return_type ""
	nparams 1
	  param in name "mode" type class_ref 237993 // SizeGroupMode
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 501545 "create"
	class_operation public explicit_return_type "Glib::RefPtr<SizeGroup>"
	nparams 1
	  param in name "mode" type class_ref 237993 // SizeGroupMode
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 501673 "set_mode"
	public explicit_return_type "void"
	nparams 1
	  param in name "mode" type class_ref 237993 // SizeGroupMode
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the Gtk::SizeGroupMode of the size group. The mode of the size
   * group determines whether the widgets in the size group should
   * all have the same horizontal requisition (Gtk::SIZE_GROUP_MODE_HORIZONTAL)
   * all have the same vertical requisition (Gtk::SIZE_GROUP_MODE_VERTICAL),
   * or should all have the same requisition in both directions
   * (Gtk::SIZE_GROUP_MODE_BOTH).
   * @param mode The mode to set for the size group.
   "
      end

      operation 501801 "get_mode"
	const public return_type class_ref 237993 // SizeGroupMode
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the current mode of the size group. See set_mode().
   * @return The current mode of the size group.
   "
      end

      operation 501929 "add_widget"
	public explicit_return_type "void"
	nparams 1
	  param inout name "widget" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Adds a widget to a Gtk::SizeGroup. In the future, the requisition
   * of the widget will be determined as the maximum of its requisition
   * and the requisition of the other widgets in the size group.
   * Whether this applies horizontally, vertically, or in both directions
   * depends on the mode of the size group. See set_mode().
   * @param widget The Gtk::Widget to add.
   "
      end

      operation 502057 "remove_widget"
	public explicit_return_type "void"
	nparams 1
	  param inout name "widget" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Removes a widget from a Gtk::SizeGroup.
   * @param widget The Gtk::Widget to remove.
   "
      end

      operation 502185 "property_mode"
	public explicit_return_type "Glib::PropertyProxy<SizeGroupMode>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 502313 "property_mode"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<SizeGroupMode>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end
    end

    class 237993 "SizeGroupMode"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* @addtogroup gtkmmEnums Enums and Flags 
*
 * @ingroup gtkmmEnums
 "
      attribute 203049 "SIZE_GROUP_NONE"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 203177 "SIZE_GROUP_HORIZONTAL"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 203305 "SIZE_GROUP_VERTICAL"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 203433 "SIZE_GROUP_BOTH"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 239145 "Socket"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/socket.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* Container for widgets from other processes.
 * Together with Gtk::Plug, Gtk::Socket provides the ability to embed
 * widgets from one process into another process in a fashion that is
 * transparent to the user. One process creates a Gtk::Socket widget and,
 * passes the that widget's window ID to the other process, which then
 * creates a Gtk::Plug with that window ID. Any widgets contained in the
 * Gtk::Plug then will appear inside the first applications window.
 *
 * The socket's window ID is obtained by using get_id(). Before using this
 * function, the socket must have been realized, and for hence, have been
 * added to its parent.
 *
 * @code
 * Gtk::Socket socket;
 * parent.add(socket);
 *
 * // The following call is only necessary if one of the ancestors of the
 * // socket is not yet visible
 * socket.realize();
 *
 * cout << \"The ID of the sockets window is: \" << socket.get_id() << endl;
 *
 * @endcode
 *
 * Note that if you pass the window ID of the socket to another process that
 * will create a plug in the socket, you must make sure that the socket
 * widget is not destroyed until that plug is created. Violating this rule
 * will cause unpredictable consequences, the most likely consequence being
 * that the plug will appear as a separate toplevel window. You can check if
 * the plug has been created by examining the plug_window member of the
 * GtkSocket structure returned by gobj(). If this field is non-NULL, then
 * the plug has been successfully created inside of the socket.
 *
 * When gtkmm is notified that the embedded window has been destroyed, then
 * it will destroy the socket as well. You should always, therefore, be
 * prepared for your sockets to be destroyed at any time when the main event
 * loop is running.
 *
 * The communication between a Gtk::Socket and a Gtk::Plug follows the
 * XEmbed protocol. This protocol has also been implemented in other
 * toolkits, e.g. Qt, allowing the same level of integration when embedding
 * a Qt widget in gtkmm or vice versa.
 *
 * @ingroup Widgets
 * @ingroup Containers
 "
      classrelation 207017 // <generalisation>
	relation 207017 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 207017 // <generalisation>
	  b parent class_ref 280745 // Container
      end

      class 239273 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 239145 // Socket
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 207145 // <realization>
	  relation 207145 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 207145 // <realization>
	    b parent class_ref 239145 // Socket
	end
      end

      class 239529 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Socket_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 239657 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkSocket"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 239785 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkSocketClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 502441 "~Socket"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 207529 // socket_class_ (<directional composition>)
	relation 207529 *-->
	  a role_name "socket_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 207529 // socket_class_ (<directional composition>)
	  b parent class_ref 239529 // CppClassType
      end

      operation 502569 "Socket"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 239145 // Socket
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 502697 "operator ="
	private return_type class_ref 239145 // Socket
	nparams 1
	  param in name "" type class_ref 239145 // Socket
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 502825 "Socket"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 502953 "Socket"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkSocket"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 503081 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 503209 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 503337 "gobj"
	cpp_inline public explicit_return_type "GtkSocket"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkSocket*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 503465 "gobj"
	const cpp_inline public explicit_return_type "GtkSocket"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkSocket*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 503593 "on_plug_added"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 503721 "on_plug_removed"
	cpp_virtual protected explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 503849 "Socket"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "This is not available in on Win32.
This source file will not be compiled,
and the class will not be registered in wrap_init.h or wrap_init.cc"
      end

      operation 503977 "add_id"
	public explicit_return_type "void"
	nparams 1
	  param in name "window_id" explicit_type "Gdk::NativeWindow"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Adds an XEMBED client, such as a Gtk::Plug, to the Gtk::Socket.  The
   * client may be in the same process or in a different process. 
   * 
   * To embed a Gtk::Plug in a Gtk::Socket, you can either create the
   * Gtk::Plug with <tt>gtk_plug_new (0)</tt>, call 
   * Gtk::Plug::get_id() to get the window ID of the plug, and then pass that to the
   * add_id(), or you can call get_id() to get the
   * window ID for the socket, and call Gtk::Plug::new() passing in that
   * ID.
   * 
   * The Gtk::Socket must have already be added into a toplevel window
   * before you can make this call.
   * @param window_id The window ID of a client participating in the XEMBED protocol.
   "
      end

      operation 504105 "get_id"
	const public explicit_return_type "Gdk::NativeWindow"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the window ID of a Gtk::Socket widget, which can then
   * be used to create a client embedded inside the socket, for
   * instance with Gtk::Plug::new(). 
   * 
   * The Gtk::Socket must have already be added into a toplevel window 
   * before you can make this call.
   * @return The window ID for the socket.
   "
      end

      operation 504233 "signal_plug_added"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 504361 "signal_plug_removed"
	public explicit_return_type "Glib::SignalProxy0< bool >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 317609 "SortType"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 "
      attribute 195881 "SORT_ASCENDING"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 196009 "SORT_DESCENDING"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 240809 "SpinButton"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/spinbutton.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* numeric Entry with up/down buttons
 * Slightly misnamed, this should be called a SpinEntry.
 *
 * @ingroup Widgets
 "
      classrelation 207913 // <generalisation>
	relation 207913 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 207913 // <generalisation>
	  b parent class_ref 300457 // Entry
      end

      class 240937 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 240809 // SpinButton
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 208041 // <realization>
	  relation 208041 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 208041 // <realization>
	    b parent class_ref 240809 // SpinButton
	end
      end

      class 241193 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "SpinButton_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 241321 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkSpinButton"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 241449 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkSpinButtonClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 504745 "~SpinButton"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 208425 // spinbutton_class_ (<directional composition>)
	relation 208425 *-->
	  a role_name "spinbutton_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 208425 // spinbutton_class_ (<directional composition>)
	  b parent class_ref 241193 // CppClassType
      end

      operation 504873 "SpinButton"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 240809 // SpinButton
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 505001 "operator ="
	private return_type class_ref 240809 // SpinButton
	nparams 1
	  param in name "" type class_ref 240809 // SpinButton
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 505129 "SpinButton"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 505257 "SpinButton"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkSpinButton"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 505385 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 505513 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 505641 "gobj"
	cpp_inline public explicit_return_type "GtkSpinButton"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkSpinButton*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 505769 "gobj"
	const cpp_inline public explicit_return_type "GtkSpinButton"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkSpinButton*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 505897 "on_input"
	cpp_virtual protected explicit_return_type "int"
	nparams 1
	  param inout name "new_value" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 506025 "on_output"
	cpp_virtual protected explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 506153 "on_value_changed"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 506281 "SpinButton"
	public explicit_return_type ""
	nparams 2
	  param in name "climb_rate" explicit_type "double"
	    defaultvalue " 0.0"
	  param in name "digits" explicit_type "guint"
	    defaultvalue " 0"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throw}{
${body}}
"
	
	
	
	
	comment ": create instance
 adjustment: see Gtk::Adjustment
 climb_rate:
 digits: number of decimal digits (has to be < 6)"
      end

      operation 506409 "SpinButton"
	public explicit_return_type ""
	nparams 3
	  param inout name "adjustment" type class_ref 132521 // Adjustment
	  param in name "climb_rate" explicit_type "double"
	    defaultvalue " 0.0"
	  param in name "digits" explicit_type "guint"
	    defaultvalue " 0"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 506537 "configure"
	public explicit_return_type "void"
	nparams 3
	  param inout name "adjustment" type class_ref 132521 // Adjustment
	  param in name "climb_rate" explicit_type "double"
	  param in name "digits" explicit_type "guint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 506665 "set_adjustment"
	public explicit_return_type "void"
	nparams 1
	  param inout name "adjustment" type class_ref 132521 // Adjustment
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Replaces the Gtk::Adjustment associated with @a spin_button .
   * @param adjustment A Gtk::Adjustment to replace the existing adjustment.
   "
      end

      operation 506793 "unset_adjustment"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 506921 "get_adjustment"
	public explicit_return_type "Gtk::Adjustment"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Get the adjustment associated with a Gtk::SpinButton
   * @return The Gtk::Adjustment of @a spin_button .
   "
      end

      operation 507049 "get_adjustment"
	const public explicit_return_type "Gtk::Adjustment"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Get the adjustment associated with a Gtk::SpinButton
   * @return The Gtk::Adjustment of @a spin_button .
   "
      end

      operation 507177 "set_digits"
	public explicit_return_type "void"
	nparams 1
	  param in name "digits" explicit_type "guint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Set the precision to be displayed by @a spin_button . Up to 20 digit precision
   * is allowed.
   * @param digits The number of digits after the decimal point to be displayed for the spin button's value.
   "
      end

      operation 507305 "get_digits"
	const public explicit_return_type "guint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Fetches the precision of @a spin_button . See set_digits().
   * @return The current precision.
   "
      end

      operation 507433 "set_increments"
	public explicit_return_type "void"
	nparams 2
	  param in name "step" explicit_type "double"
	  param in name "page" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the step and page increments for spin_button.  This affects how 
   * quickly the value changes when the spin button's arrows are activated.
   * @param step Increment applied for a button 1 press.
   * @param page Increment applied for a button 2 press.
   "
      end

      operation 507561 "get_increments"
	const public explicit_return_type "void"
	nparams 2
	  param inout name "step" explicit_type "double"
	  param inout name "page" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the current step and page the increments used by @a spin_button . See
   * set_increments().
   * @param step Location to store step increment, or <tt>0</tt>.
   * @param page Location to store page increment, or <tt>0</tt>.
   "
      end

      operation 507689 "set_range"
	public explicit_return_type "void"
	nparams 2
	  param in name "min" explicit_type "double"
	  param in name "max" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the minimum and maximum allowable values for @a spin_button 
   * @param min Minimum allowable value.
   * @param max Maximum allowable value.
   "
      end

      operation 507817 "get_range"
	const public explicit_return_type "void"
	nparams 2
	  param inout name "min" explicit_type "double"
	  param inout name "max" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the range allowed for @a spin_button . See
   * set_range().
   * @param min Location to store minimum allowed value, or <tt>0</tt>.
   * @param max Location to store maximum allowed value, or <tt>0</tt>.
   "
      end

      operation 507945 "get_value"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Get the value in the @a spin_button .
   * @return The value of @a spin_button .
   "
      end

      operation 508073 "get_value_as_int"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Get the value @a spin_button  represented as an integer.
   * @return The value of @a spin_button .
   "
      end

      operation 508201 "set_value"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Set the value of @a spin_button .
   * @param value The new value.
   "
      end

      operation 508329 "set_update_policy"
	public explicit_return_type "void"
	nparams 1
	  param in name "policy" type class_ref 239913 // SpinButtonUpdatePolicy
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the update behavior of a spin button. This determines whether the
   * spin button is always updated or only when a valid value is set.
   * @param policy A Gtk::SpinButtonUpdatePolicy value.
   "
      end

      operation 508457 "get_update_policy"
	const public return_type class_ref 239913 // SpinButtonUpdatePolicy
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the update behavior of a spin button. See
   * set_update_policy().
   * @return The current update policy.
   "
      end

      operation 508585 "set_numeric"
	public explicit_return_type "void"
	nparams 1
	  param in name "numeric" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the flag that determines if non-numeric text can be typed into
   * the spin button.
   * @param numeric Flag indicating if only numeric entry is allowed.
   "
      end

      operation 508713 "get_numeric"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether non-numeric text can be typed into the spin button.
   * See set_numeric().
   * @return <tt>true</tt> if only numeric text can be entered.
   "
      end

      operation 508841 "spin"
	public explicit_return_type "void"
	nparams 2
	  param in name "direction" type class_ref 240297 // SpinType
	  param in name "increment" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Increment or decrement a spin button's value in a specified direction
   * by a specified amount.
   * @param direction A Gtk::SpinType indicating the direction to spin.
   * @param increment Step increment to apply in the specified direction.
   "
      end

      operation 508969 "set_wrap"
	public explicit_return_type "void"
	nparams 1
	  param in name "wrap" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the flag that determines if a spin button value wraps around to the
   * opposite limit when the upper or lower limit of the range is exceeded.
   * @param wrap A flag indicating if wrapping behavior is performed.
   "
      end

      operation 509097 "get_wrap"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether the spin button's value wraps around to the
   * opposite limit when the upper or lower limit of the range is
   * exceeded. See set_wrap().
   * @return <tt>true</tt> if the spin button wraps around.
   "
      end

      operation 509225 "set_snap_to_ticks"
	public explicit_return_type "void"
	nparams 1
	  param in name "snap_to_ticks" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the policy as to whether values are corrected to the nearest step 
   * increment when a spin button is activated after providing an invalid value.
   * @param snap_to_ticks A flag indicating if invalid values should be corrected.
   "
      end

      operation 509353 "get_snap_to_ticks"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether the values are corrected to the nearest step. See
   * set_snap_to_ticks().
   * @return <tt>true</tt> if values are snapped to the nearest step.
   "
      end

      operation 509481 "update"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Manually force an update of the spin button.
   "
      end

      operation 509609 "signal_input"
	public explicit_return_type "Glib::SignalProxy1< int,double* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Convert the Entry text to a number.
   * The computed number should be written to <tt>*new_value</tt>.
   * @return
   * @li <tt>false</tt>: No conversion done, continue with default handler.
   * @li <tt>true</tt>: Conversion successful, don't call default handler.
   * @li <tt>Gtk::INPUT_ERROR</tt>: Conversion failed, don't call default handler.
   "
      end

      operation 509737 "signal_output"
	public explicit_return_type "Glib::SignalProxy0< bool >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Convert the Adjustment position to text.
   * The computed text should be written via Gtk::Entry::set_text().
   * @return
   * @li <tt>false</tt>: No conversion done, continue with default handler.
   * @li <tt>true</tt>: Conversion successful, don't call default handler.
   "
      end

      operation 509865 "signal_value_changed"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 509993 "property_adjustment"
	public explicit_return_type "Glib::PropertyProxy<Gtk::Adjustment*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Keybinding signals:
* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 510121 "property_adjustment"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Gtk::Adjustment*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 510249 "property_climb_rate"
	public explicit_return_type "Glib::PropertyProxy<double>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 510377 "property_climb_rate"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<double>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 510505 "property_digits"
	public explicit_return_type "Glib::PropertyProxy<guint>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 510633 "property_digits"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<guint>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 510761 "property_snap_to_ticks"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 510889 "property_snap_to_ticks"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 511017 "property_numeric"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 511145 "property_numeric"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 511273 "property_wrap"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 511401 "property_wrap"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 511529 "property_update_policy"
	public explicit_return_type "Glib::PropertyProxy<SpinButtonUpdatePolicy>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 511657 "property_update_policy"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<SpinButtonUpdatePolicy>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 511785 "property_value"
	public explicit_return_type "Glib::PropertyProxy<double>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 511913 "property_value"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<double>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end
    end

    class 239913 "SpinButtonUpdatePolicy"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* @addtogroup gtkmmEnums Enums and Flags 
*
 * @ingroup gtkmmEnums
 "
      attribute 203561 "UPDATE_ALWAYS"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 203689 "UPDATE_IF_VALID"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 240297 "SpinType"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 "
      attribute 203817 "SPIN_STEP_FORWARD"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 203945 "SPIN_STEP_BACKWARD"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 204073 "SPIN_PAGE_FORWARD"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 204201 "SPIN_PAGE_BACKWARD"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 204329 "SPIN_HOME"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 204457 "SPIN_END"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 204585 "SPIN_USER_DEFINED"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 179881 "StateType"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 "
      attribute 192297 "STATE_NORMAL"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 192425 "STATE_ACTIVE"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 192553 "STATE_PRELIGHT"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 192681 "STATE_SELECTED"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 192809 "STATE_INSENSITIVE"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 241577 "Statusbar"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/statusbar.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* Text status indicator
 * This widget is used to display status information.
 * Messages are pushed and poped onto a message stack.
 * When text is pushed it replaces the old contents.
 * The old text is restored when popped.
 *
 * It derives from Gtk::HBox so that additional information can be added
 * easily.
 *
 * @ingroup Widgets
 "
      classrelation 208553 // <generalisation>
	relation 208553 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 208553 // <generalisation>
	  b parent class_ref 140585 // HBox
      end

      class 241705 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 241577 // Statusbar
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 208681 // <realization>
	  relation 208681 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 208681 // <realization>
	    b parent class_ref 241577 // Statusbar
	end
      end

      class 241961 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Statusbar_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 242089 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkStatusbar"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 242217 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkStatusbarClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 512041 "~Statusbar"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 209065 // statusbar_class_ (<directional composition>)
	relation 209065 *-->
	  a role_name "statusbar_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 209065 // statusbar_class_ (<directional composition>)
	  b parent class_ref 241961 // CppClassType
      end

      operation 512169 "Statusbar"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 241577 // Statusbar
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 512297 "operator ="
	private return_type class_ref 241577 // Statusbar
	nparams 1
	  param in name "" type class_ref 241577 // Statusbar
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 512425 "Statusbar"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 512553 "Statusbar"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkStatusbar"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 512681 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 512809 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 512937 "gobj"
	cpp_inline public explicit_return_type "GtkStatusbar"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkStatusbar*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 513065 "gobj"
	const cpp_inline public explicit_return_type "GtkStatusbar"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkStatusbar*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 513193 "on_text_pushed"
	cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param in name "context_id" explicit_type "guint"
	  param in name "text" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 513321 "on_text_popped"
	cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param in name "context_id" explicit_type "guint"
	  param in name "text" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 513449 "Statusbar"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 513577 "get_context_id"
	public explicit_return_type "guint"
	nparams 1
	  param in name "context_description" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 513705 "push"
	public explicit_return_type "guint"
	nparams 2
	  param in name "text" explicit_type "Glib::ustring"
	  param in name "context_id" explicit_type "guint"
	    defaultvalue " 0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 513833 "pop"
	public explicit_return_type "void"
	nparams 1
	  param in name "context_id" explicit_type "guint"
	    defaultvalue " 0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 513961 "remove_message"
	public explicit_return_type "void"
	nparams 2
	  param in name "message_id" explicit_type "guint"
	  param in name "context_id" explicit_type "guint"
	    defaultvalue " 0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 514089 "set_has_resize_grip"
	public explicit_return_type "void"
	nparams 1
	  param in name "setting" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 514217 "get_has_resize_grip"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 514345 "signal_text_pushed"
	public explicit_return_type "Glib::SignalProxy2< void,guint,const Glib::ustring& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 514473 "signal_text_popped"
	public explicit_return_type "Glib::SignalProxy2< void,guint,const Glib::ustring& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 514601 "property_has_resize_grip"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 514729 "property_has_resize_grip"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end
    end

    class 130985 "StockID"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/stockid.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* See also Gtk::BuiltinStockID.
 "
      operation 514857 "StockID"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 514985 "StockID"
	public explicit_return_type ""
	nparams 1
	  param in name "id" type class_ref 242601 // BuiltinStockID
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment "TODO: This was added for Action::Action, but there might be a better way to do this."
      end

      operation 515113 "StockID"
	public explicit_return_type ""
	nparams 1
	  param in name "id" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 515241 "StockID"
	public explicit_return_type ""
	nparams 1
	  param in name "id" explicit_type "char"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 515369 "~StockID"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment " id can be 0"
      end

      operation 515497 "StockID"
	public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 130985 // StockID
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 515625 "operator ="
	public return_type class_ref 130985 // StockID
	nparams 1
	  param in name "other" type class_ref 130985 // StockID
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 515753 "equal"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "rhs" type class_ref 130985 // StockID
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 515881 "get_string"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 516009 "get_c_str"
	const public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      attribute 172073 "id_"
	protected explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 242729 "StockID_Traits"
      visibility package stereotype "struct"
      cpp_external cpp_decl "${name}
#include <gtkmm/stockid_traits.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 242985 "CppType"
	visibility package stereotype "typedef" explicit_base_type "Gtk::StockID"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 516137 "to_c_type"
	class_operation cpp_inline public explicit_return_type "char"
	nparams 1
	  param in name "id" type class_ref 130985 // StockID
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} { return id.get_c_str(); };
"
	
	
	
	
      end

      operation 516265 "to_cpp_type"
	class_operation cpp_inline public return_type class_ref 130985 // StockID
	nparams 1
	  param in name "str" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${abstract} { return StockID(str);   };
"
	
	
	
	
      end
    end

    class 243497 "StockItem"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/stockitem.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 243625 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 243497 // StockItem
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 209449 // <realization>
	  relation 209449 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 209449 // <realization>
	    b parent class_ref 243497 // StockItem
	end
      end

      class 243753 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkStockItem"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 516649 "StockItem"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 516777 "StockItem"
	public explicit_return_type ""
	nparams 2
	  param inout name "castitem" explicit_type "GtkStockItem"
	  param in name "make_a_copy" explicit_type "bool"
	    defaultvalue " false"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${throw}{
${body}}
"
	
	
	
	
	comment " Use make_a_copy=true when getting it directly from a struct."
      end

      operation 516905 "StockItem"
	public explicit_return_type ""
	nparams 1
	  param in name "src" type class_ref 243497 // StockItem
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 517033 "operator ="
	public return_type class_ref 243497 // StockItem
	nparams 1
	  param in name "src" type class_ref 243497 // StockItem
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 517161 "~StockItem"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 517289 "gobj"
	cpp_inline public explicit_return_type "GtkStockItem"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return gobject_; };
"
	
	
	
	
      end

      operation 517417 "gobj"
	const cpp_inline public explicit_return_type "GtkStockItem"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return gobject_; };
"
	
	
	
	
      end

      operation 517545 "gobj_copy"
	const public explicit_return_type "GtkStockItem"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Provides access to the underlying C instance. The caller is responsible for freeing it. Use when directly setting fields in structs."
      end

      attribute 205225 "gobject_"
	protected explicit_type "GtkStockItem"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 517673 "StockItem"
	public explicit_return_type ""
	nparams 5
	  param in name "stock_id" explicit_type "Gtk::StockID"
	  param in name "label" explicit_type "Glib::ustring"
	  param in name "modifier" explicit_type "Gdk::ModifierType"
	    defaultvalue " Gdk::ModifierType(0)"
	  param in name "keyval" explicit_type "uint"
	    defaultvalue " 0"
	  param in name "translation_domain" explicit_type "Glib::ustring"
	    defaultvalue " Glib::ustring()"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, const ${t4} & ${p4}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, const ${t4} & ${p4}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 517801 "get_stock_id"
	const public return_type class_ref 130985 // StockID
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 517929 "get_label"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 518057 "get_modifier"
	const public explicit_return_type "Gdk::ModifierType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 518185 "get_keyval"
	const public explicit_return_type "guint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 518313 "get_translation_domain"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 518441 "lookup"
	class_operation public explicit_return_type "bool"
	nparams 2
	  param in name "stock_id" explicit_type "Gtk::StockID"
	  param inout name "item" explicit_type "Gtk::StockItem"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 243881 "Style"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/style.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 244009 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 243881 // Style
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 209705 // <realization>
	  relation 209705 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 209705 // <realization>
	    b parent class_ref 243881 // Style
	end
      end

      class 244265 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Style_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 244393 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkStyle"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 244521 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkStyleClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 210089 // style_class_ (<directional composition>)
	relation 210089 *-->
	  a role_name "style_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 210089 // style_class_ (<directional composition>)
	  b parent class_ref 244265 // CppClassType
      end

      operation 518569 "Style"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 243881 // Style
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 518697 "operator ="
	private return_type class_ref 243881 // Style
	nparams 1
	  param in name "" type class_ref 243881 // Style
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 518825 "Style"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 518953 "Style"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkStyle"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 519081 "~Style"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 519209 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 519337 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 519465 "gobj"
	cpp_inline public explicit_return_type "GtkStyle"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkStyle*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 519593 "gobj"
	const cpp_inline public explicit_return_type "GtkStyle"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkStyle*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 519721 "gobj_copy"
	public explicit_return_type "GtkStyle"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs."
      end

      operation 519849 "set_fg"
	public explicit_return_type "void"
	nparams 2
	  param in name "state" explicit_type "Gtk::StateType"
	  param in name "color" explicit_type "Gdk::Color"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 519977 "get_fg"
	const public explicit_return_type "Gdk::Color"
	nparams 1
	  param in name "state" explicit_type "Gtk::StateType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 520105 "set_bg"
	public explicit_return_type "void"
	nparams 2
	  param in name "state" explicit_type "Gtk::StateType"
	  param in name "color" explicit_type "Gdk::Color"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 520233 "get_bg"
	const public explicit_return_type "Gdk::Color"
	nparams 1
	  param in name "state" explicit_type "Gtk::StateType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 520361 "set_light"
	public explicit_return_type "void"
	nparams 2
	  param in name "state" explicit_type "Gtk::StateType"
	  param in name "color" explicit_type "Gdk::Color"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 520489 "get_light"
	const public explicit_return_type "Gdk::Color"
	nparams 1
	  param in name "state" explicit_type "Gtk::StateType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 520617 "set_dark"
	public explicit_return_type "void"
	nparams 2
	  param in name "state" explicit_type "Gtk::StateType"
	  param in name "color" explicit_type "Gdk::Color"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 520745 "get_dark"
	const public explicit_return_type "Gdk::Color"
	nparams 1
	  param in name "state" explicit_type "Gtk::StateType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 520873 "set_mid"
	public explicit_return_type "void"
	nparams 2
	  param in name "state" explicit_type "Gtk::StateType"
	  param in name "color" explicit_type "Gdk::Color"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 521001 "get_mid"
	const public explicit_return_type "Gdk::Color"
	nparams 1
	  param in name "state" explicit_type "Gtk::StateType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 521129 "set_text"
	public explicit_return_type "void"
	nparams 2
	  param in name "state" explicit_type "Gtk::StateType"
	  param in name "color" explicit_type "Gdk::Color"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 521257 "get_text"
	const public explicit_return_type "Gdk::Color"
	nparams 1
	  param in name "state" explicit_type "Gtk::StateType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 521385 "set_base"
	public explicit_return_type "void"
	nparams 2
	  param in name "state" explicit_type "Gtk::StateType"
	  param in name "color" explicit_type "Gdk::Color"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 521513 "get_base"
	const public explicit_return_type "Gdk::Color"
	nparams 1
	  param in name "state" explicit_type "Gtk::StateType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 521641 "set_text_aa"
	public explicit_return_type "void"
	nparams 2
	  param in name "state" explicit_type "Gtk::StateType"
	  param in name "color" explicit_type "Gdk::Color"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 521769 "get_text_aa"
	const public explicit_return_type "Gdk::Color"
	nparams 1
	  param in name "state" explicit_type "Gtk::StateType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 521897 "set_black"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "Gdk::Color"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 522025 "get_black"
	const public explicit_return_type "Gdk::Color"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 522153 "set_white"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "Gdk::Color"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 522281 "get_white"
	const public explicit_return_type "Gdk::Color"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 522409 "set_font"
	public explicit_return_type "void"
	nparams 1
	  param in name "font_desc" explicit_type "Pango::FontDescription"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 522537 "get_font"
	const public explicit_return_type "Pango::FontDescription"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " These are only available after being attached to a window."
      end

      operation 522665 "set_xthickness"
	public explicit_return_type "void"
	nparams 1
	  param in name "xthickness" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 522793 "get_xthickness"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 522921 "set_ythickness"
	public explicit_return_type "void"
	nparams 1
	  param in name "ythickness" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 523049 "get_ythickness"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 523177 "get_fg_gc"
	public explicit_return_type "Glib::RefPtr<Gdk::GC>"
	nparams 1
	  param in name "state_type" explicit_type "Gtk::StateType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 523305 "get_fg_gc"
	const public explicit_return_type "Glib::RefPtr<const Gdk::GC>"
	nparams 1
	  param in name "state_type" explicit_type "Gtk::StateType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 523433 "get_bg_gc"
	public explicit_return_type "Glib::RefPtr<Gdk::GC>"
	nparams 1
	  param in name "state_type" explicit_type "Gtk::StateType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 523561 "get_bg_gc"
	const public explicit_return_type "Glib::RefPtr<const Gdk::GC>"
	nparams 1
	  param in name "state_type" explicit_type "Gtk::StateType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 523689 "get_light_gc"
	public explicit_return_type "Glib::RefPtr<Gdk::GC>"
	nparams 1
	  param in name "state_type" explicit_type "Gtk::StateType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 523817 "get_light_gc"
	const public explicit_return_type "Glib::RefPtr<const Gdk::GC>"
	nparams 1
	  param in name "state_type" explicit_type "Gtk::StateType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 523945 "get_dark_gc"
	public explicit_return_type "Glib::RefPtr<Gdk::GC>"
	nparams 1
	  param in name "state_type" explicit_type "Gtk::StateType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 524073 "get_dark_gc"
	const public explicit_return_type "Glib::RefPtr<const Gdk::GC>"
	nparams 1
	  param in name "state_type" explicit_type "Gtk::StateType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 524201 "get_mid_gc"
	public explicit_return_type "Glib::RefPtr<Gdk::GC>"
	nparams 1
	  param in name "state_type" explicit_type "Gtk::StateType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 524329 "get_mid_gc"
	const public explicit_return_type "Glib::RefPtr<const Gdk::GC>"
	nparams 1
	  param in name "state_type" explicit_type "Gtk::StateType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 524457 "get_text_gc"
	public explicit_return_type "Glib::RefPtr<Gdk::GC>"
	nparams 1
	  param in name "state_type" explicit_type "Gtk::StateType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 524585 "get_text_gc"
	const public explicit_return_type "Glib::RefPtr<const Gdk::GC>"
	nparams 1
	  param in name "state_type" explicit_type "Gtk::StateType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 524713 "get_base_gc"
	public explicit_return_type "Glib::RefPtr<Gdk::GC>"
	nparams 1
	  param in name "state_type" explicit_type "Gtk::StateType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 524841 "get_base_gc"
	const public explicit_return_type "Glib::RefPtr<const Gdk::GC>"
	nparams 1
	  param in name "state_type" explicit_type "Gtk::StateType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 524969 "get_black_gc"
	public explicit_return_type "Glib::RefPtr<Gdk::GC>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 525097 "get_black_gc"
	const public explicit_return_type "Glib::RefPtr<const Gdk::GC>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 525225 "get_white_gc"
	public explicit_return_type "Glib::RefPtr<Gdk::GC>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 525353 "get_white_gc"
	const public explicit_return_type "Glib::RefPtr<const Gdk::GC>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 525481 "get_background"
	const public explicit_return_type "Gdk::Color"
	nparams 1
	  param in name "state_type" explicit_type "Gtk::StateType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " Deprecated in gtkmm 2.2 -- use get_bg() instead.
   * Honestly, I have absolutely no idea why this method was added
   * in the first place.  It's basically just confusing since it's
   * absolutely unrelated to set_background().  Sigh.
   "
      end

      operation 525609 "get_background_pixmap"
	public explicit_return_type "Glib::RefPtr<Gdk::Pixmap>"
	nparams 1
	  param in name "state_type" explicit_type "Gtk::StateType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " Deprecated in gtkmm 2.2 -- use get_bg_pixmap() instead.
   "
      end

      operation 525737 "set_bg_pixmap"
	public explicit_return_type "void"
	nparams 2
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "pixmap" explicit_type "Glib::RefPtr<Gdk::Pixmap>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 525865 "get_bg_pixmap"
	public explicit_return_type "Glib::RefPtr<Gdk::Pixmap>"
	nparams 1
	  param in name "state_type" explicit_type "Gtk::StateType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 525993 "get_bg_pixmap"
	const public explicit_return_type "Glib::RefPtr<const Gdk::Pixmap>"
	nparams 1
	  param in name "state_type" explicit_type "Gtk::StateType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 526121 "paint_arrow"
	const public explicit_return_type "void"
	nparams 12
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "shadow_type" type class_ref 284329 // ShadowType
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "arrow_type" type class_ref 284201 // ArrowType
	  param in name "fill" explicit_type "bool"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} & ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}, ${t10} ${p10}, ${t11} ${p11}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} & ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}, ${t10} ${p10}, ${t11} ${p11}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Draws an arrow in the given rectangle on @a window  using the given 
   * parameters. @a arrow_type  determines the direction of the arrow.
   * @param window A Gdk::Window.
   * @param state_type A state.
   * @param shadow_type The type of shadow to draw.
   * @param area Clip rectangle.
   * @param widget The widget.
   * @param detail A style detail.
   * @param arrow_type The type of arrow to draw.
   * @param fill <tt>true</tt> if the arrow tip should be filled.
   * @param x X origin of the rectangle to draw the arrow in.
   * @param y Y origin of the rectangle to draw the arrow in.
   * @param width Width of the rectangle to draw the arrow in.
   * @param height Height of the rectangle to draw the arrow in.
   "
      end

      operation 526249 "paint_box"
	const public explicit_return_type "void"
	nparams 10
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "shadow_type" type class_ref 284329 // ShadowType
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} & ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} & ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Draws a box on @a window  with the given parameters.
   * @param window A Gdk::Window.
   * @param state_type A state.
   * @param shadow_type The type of shadow to draw.
   * @param area Clip rectangle.
   * @param widget The widget.
   * @param detail A style detail.
   * @param x X origin of the box.
   * @param y Y origin of the box.
   * @param width The width of the box.
   * @param height The height of the box.
   "
      end

      operation 526377 "paint_box_gap"
	const public explicit_return_type "void"
	nparams 13
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "shadow_type" type class_ref 284329 // ShadowType
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	  param in name "gap_side" type class_ref 314793 // PositionType
	  param in name "gap_x" explicit_type "int"
	  param in name "gap_width" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} & ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}, ${t10} ${p10}, ${t11} ${p11}, ${t12} ${p12}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} & ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}, ${t10} ${p10}, ${t11} ${p11}, ${t12} ${p12}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Draws a box in @a window  using the given style and state and shadow type, 
   * leaving a gap in one side.
   * @param window A Gdk::Window.
   * @param state_type A state.
   * @param shadow_type Type of shadow to draw.
   * @param area Clip rectangle.
   * @param widget The widget.
   * @param detail A style detail.
   * @param x X origin of the rectangle.
   * @param y Y origin of the rectangle.
   * @param width Width of the rectangle.
   * @param height Width of the rectangle.
   * @param gap_side Side in which to leave the gap.
   * @param gap_x Starting position of the gap.
   * @param gap_width Width of the gap.
   "
      end

      operation 526505 "paint_check"
	const public explicit_return_type "void"
	nparams 10
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "shadow_type" type class_ref 284329 // ShadowType
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} & ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} & ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Draws a check button indicator in the given rectangle on @a window  with 
   * the given parameters.
   * @param window A Gdk::Window.
   * @param state_type A state.
   * @param shadow_type The type of shadow to draw.
   * @param area Clip rectangle.
   * @param widget The widget.
   * @param detail A style detail.
   * @param x X origin of the rectangle to draw the check in.
   * @param y Y origin of the rectangle to draw the check in.
   * @param width The width of the rectangle to draw the check in.
   * @param height The height of the rectangle to draw the check in.
   "
      end

      operation 526633 "paint_diamond"
	const public explicit_return_type "void"
	nparams 10
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "shadow_type" type class_ref 284329 // ShadowType
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} & ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} & ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Draws a diamond in the given rectangle on @a window  using the given
   * parameters.
   * @param window A Gdk::Window.
   * @param state_type A state.
   * @param shadow_type The type of shadow to draw.
   * @param area Clip rectangle.
   * @param widget The widget.
   * @param detail A style detail.
   * @param x X origin of the rectangle to draw the diamond in.
   * @param y Y origin of the rectangle to draw the diamond in.
   * @param width Width of the rectangle to draw the diamond in.
   * @param height Height of the rectangle to draw the diamond in.
   "
      end

      operation 526761 "paint_extension"
	const public explicit_return_type "void"
	nparams 11
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "shadow_type" type class_ref 284329 // ShadowType
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	  param in name "gap_side" type class_ref 314793 // PositionType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} & ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}, ${t10} ${p10}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} & ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}, ${t10} ${p10}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Draws an extension, i.e.\\ a notebook tab.
   * @param window A Gdk::Window.
   * @param state_type A state.
   * @param shadow_type Type of shadow to draw.
   * @param area Clip rectangle.
   * @param widget The widget.
   * @param detail A style detail.
   * @param x X origin of the extension.
   * @param y Y origin of the extension.
   * @param width Width of the extension.
   * @param height Width of the extension.
   * @param gap_side The side on to which the extension is attached.
   "
      end

      operation 526889 "paint_flat_box"
	const public explicit_return_type "void"
	nparams 10
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "shadow_type" type class_ref 284329 // ShadowType
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} & ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} & ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Draws a flat box on @a window  with the given parameters.
   * @param window A Gdk::Window.
   * @param state_type A state.
   * @param shadow_type The type of shadow to draw.
   * @param area Clip rectangle.
   * @param widget The widget.
   * @param detail A style detail.
   * @param x X origin of the box.
   * @param y Y origin of the box.
   * @param width The width of the box.
   * @param height The height of the box.
   "
      end

      operation 527017 "paint_focus"
	const public explicit_return_type "void"
	nparams 9
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}, ${t3} & ${p3}, const ${t4} & ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}, ${t3} & ${p3}, const ${t4} & ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Draws a focus indicator around the given rectangle on @a window  using the
   * given style.
   * @param window A Gdk::Window.
   * @param state_type A state.
   * @param area Clip rectangle.
   * @param widget The widget.
   * @param detail A style detail.
   * @param x The x origin of the rectangle around which to draw a focus indicator.
   * @param y The y origin of the rectangle around which to draw a focus indicator.
   * @param width The width of the rectangle around which to draw a focus indicator.
   * @param height The height of the rectangle around which to draw a focus indicator.
   "
      end

      operation 527145 "paint_handle"
	const public explicit_return_type "void"
	nparams 11
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "shadow_type" type class_ref 284329 // ShadowType
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	  param in name "orientation" type class_ref 281513 // Orientation
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} & ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}, ${t10} ${p10}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} & ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}, ${t10} ${p10}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Draws a handle as used in Gtk::HandleBox and Gtk::Paned.
   * @param window A Gdk::Window.
   * @param state_type A state.
   * @param shadow_type Type of shadow to draw.
   * @param area Clip rectangle.
   * @param widget The widget.
   * @param detail A style detail.
   * @param x X origin of the handle.
   * @param y Y origin of the handle.
   * @param width With of the handle.
   * @param height Height of the handle.
   * @param orientation The orientation of the handle.
   "
      end

      operation 527273 "paint_hline"
	const public explicit_return_type "void"
	nparams 8
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "x1" explicit_type "int"
	  param in name "x2" explicit_type "int"
	  param in name "y" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}, ${t3} & ${p3}, const ${t4} & ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}, ${t3} & ${p3}, const ${t4} & ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Draws a horizontal line from ( @a x1 , @a y ) to ( @a x2 , @a y ) in @a window 
   * using the given style and state.
   * @param window A Gdk::Window.
   * @param state_type A state.
   * @param area Rectangle to which the output is clipped.
   * @param widget The widget.
   * @param detail A style detail.
   * @param x1 The starting x coordinate.
   * @param x2 The ending x coordinate.
   * @param y The y coordinate.
   "
      end

      operation 527401 "paint_option"
	const public explicit_return_type "void"
	nparams 10
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "shadow_type" type class_ref 284329 // ShadowType
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} & ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} & ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Draws a radio button indicator in the given rectangle on @a window  with 
   * the given parameters.
   * @param window A Gdk::Window.
   * @param state_type A state.
   * @param shadow_type The type of shadow to draw.
   * @param area Clip rectangle.
   * @param widget The widget.
   * @param detail A style detail.
   * @param x X origin of the rectangle to draw the option in.
   * @param y Y origin of the rectangle to draw the option in.
   * @param width The width of the rectangle to draw the option in.
   * @param height The height of the rectangle to draw the option in.
   "
      end

      operation 527529 "paint_polygon"
	const public explicit_return_type "void"
	nparams 8
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "shadow_type" type class_ref 284329 // ShadowType
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "points" explicit_type "Glib::ArrayHandle<Gdk::Point>"
	  param in name "fill" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} & ${p4}, const ${t5} & ${p5}, const ${t6} & ${p6}, ${t7} ${p7}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} & ${p4}, const ${t5} & ${p5}, const ${t6} & ${p6}, ${t7} ${p7}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 527657 "paint_shadow"
	const public explicit_return_type "void"
	nparams 10
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "shadow_type" type class_ref 284329 // ShadowType
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} & ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} & ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Draws a shadow around the given rectangle in @a window  
   * using the given style and state and shadow type.
   * @param window A Gdk::Window.
   * @param state_type A state.
   * @param shadow_type Type of shadow to draw.
   * @param area Clip rectangle.
   * @param widget The widget.
   * @param detail A style detail.
   * @param x X origin of the rectangle.
   * @param y Y origin of the rectangle.
   * @param width Width of the rectangle.
   * @param height Width of the rectangle.
   "
      end

      operation 527785 "paint_shadow_gap"
	const public explicit_return_type "void"
	nparams 13
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "shadow_type" type class_ref 284329 // ShadowType
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	  param in name "gap_side" type class_ref 314793 // PositionType
	  param in name "gap_x" explicit_type "int"
	  param in name "gap_width" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} & ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}, ${t10} ${p10}, ${t11} ${p11}, ${t12} ${p12}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} & ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}, ${t10} ${p10}, ${t11} ${p11}, ${t12} ${p12}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Draws a shadow around the given rectangle in @a window  
   * using the given style and state and shadow type, leaving a 
   * gap in one side.
   * @param window A Gdk::Window.
   * @param state_type A state.
   * @param shadow_type Type of shadow to draw.
   * @param area Clip rectangle.
   * @param widget The widget.
   * @param detail A style detail.
   * @param x X origin of the rectangle.
   * @param y Y origin of the rectangle.
   * @param width Width of the rectangle.
   * @param height Width of the rectangle.
   * @param gap_side Side in which to leave the gap.
   * @param gap_x Starting position of the gap.
   * @param gap_width Width of the gap.
   "
      end

      operation 527913 "paint_slider"
	const public explicit_return_type "void"
	nparams 11
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "shadow_type" type class_ref 284329 // ShadowType
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	  param in name "orientation" type class_ref 281513 // Orientation
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} & ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}, ${t10} ${p10}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} & ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}, ${t10} ${p10}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* 
   "
      end

      operation 528041 "paint_tab"
	const public explicit_return_type "void"
	nparams 10
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "shadow_type" type class_ref 284329 // ShadowType
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} & ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} & ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Draws an option menu tab (i.e.\\ the up and down pointing arrows)
   * in the given rectangle on @a window  using the given parameters.
   * @param window A Gdk::Window.
   * @param state_type A state.
   * @param shadow_type The type of shadow to draw.
   * @param area Clip rectangle.
   * @param widget The widget.
   * @param detail A style detail.
   * @param x X origin of the rectangle to draw the tab in.
   * @param y Y origin of the rectangle to draw the tab in.
   * @param width The width of the rectangle to draw the tab in.
   * @param height The height of the rectangle to draw the tab in.
   "
      end

      operation 528169 "paint_vline"
	const public explicit_return_type "void"
	nparams 8
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "y1" explicit_type "int"
	  param in name "y2" explicit_type "int"
	  param in name "x" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}, ${t3} & ${p3}, const ${t4} & ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}, ${t3} & ${p3}, const ${t4} & ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Draws a vertical line from ( @a x , @a y1 ) to ( @a x , @a y2 ) in @a window 
   * using the given style and state.
   * @param window A Gdk::Window.
   * @param state_type A state.
   * @param area Rectangle to which the output is clipped.
   * @param widget The widget.
   * @param detail A style detail.
   * @param y1 The starting y coordinate.
   * @param y2 The ending y coordinate.
   * @param x The x coordinate.
   "
      end

      operation 528297 "paint_expander"
	const public explicit_return_type "void"
	nparams 8
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "expander_style" type class_ref 310441 // ExpanderStyle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}, ${t3} & ${p3}, const ${t4} & ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}, ${t3} & ${p3}, const ${t4} & ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Draws an expander as used in Gtk::TreeView.
   * @param window A Gdk::Window.
   * @param state_type A state.
   * @param area Clip rectangle.
   * @param widget The widget.
   * @param detail A style detail.
   * @param x The x position to draw the expander at.
   * @param y The y position to draw the expander at.
   * @param expander_style The style to draw the expander in.
   "
      end

      operation 528425 "paint_layout"
	const public explicit_return_type "void"
	nparams 9
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "use_text" explicit_type "bool"
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "layout" explicit_type "Glib::RefPtr<Pango::Layout>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} & ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, const ${t8} & ${p8}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} & ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, const ${t8} & ${p8}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* 
   "
      end

      operation 528553 "paint_resize_grip"
	const public explicit_return_type "void"
	nparams 10
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "edge" explicit_type "Gdk::WindowEdge"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}, ${t3} & ${p3}, const ${t4} & ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}, ${t3} & ${p3}, const ${t4} & ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Draws a resize grip in the given rectangle on @a window  using the given
   * parameters.
   * @param window A Gdk::Window.
   * @param state_type A state.
   * @param area Clip rectangle.
   * @param widget The widget.
   * @param detail A style detail.
   * @param edge The edge in which to draw the resize grip.
   * @param x The x origin of the rectangle in which to draw the resize grip.
   * @param y The y origin of the rectangle in which to draw the resize grip.
   * @param width The width of the rectangle in which to draw the resize grip.
   * @param height The height of the rectangle in which to draw the resize grip.
   "
      end

      operation 528681 "copy"
	public explicit_return_type "Glib::RefPtr<Style>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 528809 "set_background"
	public explicit_return_type "void"
	nparams 2
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " These are worthless to the users - they should use set_style instead.
_WRAP_METHOD(Glib::RefPtr<Style> attach(const Glib::RefPtr<Gdk::Window>& window), gtk_style_attach)
_WRAP_METHOD(void detach(), gtk_style_detach)
* Sets the background of @a window  to the background color or pixmap
   * specified by @a style  for the given state.
   * @param window A Gdk::Window.
   * @param state_type A state.
   "
      end

      operation 528937 "apply_default_background"
	public explicit_return_type "void"
	nparams 8
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "set_bg" explicit_type "bool"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 529065 "lookup_icon_set"
	public return_type class_ref 195753 // IconSet
	nparams 1
	  param in name "stock_id" explicit_type "Gtk::StockID"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 529193 "render_icon"
	public explicit_return_type "Glib::RefPtr<Gdk::Pixbuf>"
	nparams 6
	  param in name "source" type class_ref 196777 // IconSource
	  param in name "direction" explicit_type "Gtk::TextDirection"
	  param in name "state" explicit_type "Gtk::StateType"
	  param in name "size" explicit_type "Gtk::IconSize"
	  param inout name "widget" explicit_type "Gtk::Widget"
	  param in name "detail" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} & ${p4}, const ${t5} & ${p5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} & ${p4}, const ${t5} & ${p5}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Renders the icon specified by @a source  at the given @a size  
   * according to the given parameters and returns the result in a 
   * pixbuf.
   * @param source The Gtk::IconSource specifying the icon to render.
   * @param direction A text direction.
   * @param state A state.
   * @param size The size to render the icon at. A size of (GtkIconSize)-1
   * means render at the size of the source and don't scale.
   * @param widget The widget.
   * @param detail A style detail.
   * @return A newly-created Gdk::Pixbuf containing the rendered icon.
   "
      end

      operation 529321 "realize_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 529449 "unrealize_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 529577 "copy_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "src" explicit_type "Glib::RefPtr<Style>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 529705 "clone_vfunc"
	cpp_virtual protected explicit_return_type "Glib::RefPtr<Style>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 529833 "init_from_rc_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "rc_style" explicit_type "Glib::RefPtr<RcStyle>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 529961 "set_background_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 530089 "render_icon_vfunc"
	cpp_virtual protected explicit_return_type "Glib::RefPtr<Gdk::Pixbuf>"
	nparams 6
	  param in name "source" type class_ref 196777 // IconSource
	  param in name "direction" type class_ref 280233 // TextDirection
	  param in name "state" explicit_type "Gtk::StateType"
	  param in name "size" type class_ref 131241 // IconSize
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} * ${p4}, const ${t5} & ${p5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} * ${p4}, const ${t5} & ${p5}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 530217 "draw_hline_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 8
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "x1" explicit_type "int"
	  param in name "x2" explicit_type "int"
	  param in name "y" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}, ${t3} * ${p3}, const ${t4} & ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}, ${t3} * ${p3}, const ${t4} & ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 530345 "draw_vline_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 8
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "y1" explicit_type "int"
	  param in name "y2" explicit_type "int"
	  param in name "x" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}, ${t3} * ${p3}, const ${t4} & ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}, ${t3} * ${p3}, const ${t4} & ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 530473 "draw_shadow_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 10
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "shadow_type" type class_ref 284329 // ShadowType
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} * ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} * ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 530601 "draw_polygon_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 9
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "shadow_type" type class_ref 284329 // ShadowType
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param inout name "point" explicit_type "GdkPoint"
	  param in name "npoints" explicit_type "int"
	  param in name "fill" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} * ${p4}, const ${t5} & ${p5}, ${t6} * ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} * ${p4}, const ${t5} & ${p5}, ${t6} * ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 530729 "draw_arrow_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 12
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "shadow_type" type class_ref 284329 // ShadowType
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "arrow_type" explicit_type "Gtk::ArrowType"
	  param in name "fill" explicit_type "bool"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} * ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}, ${t10} ${p10}, ${t11} ${p11}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} * ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}, ${t10} ${p10}, ${t11} ${p11}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 530857 "draw_diamond_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 10
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "shadow_type" type class_ref 284329 // ShadowType
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} * ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} * ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 530985 "draw_string_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 8
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "string" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}, ${t3} * ${p3}, const ${t4} & ${p4}, ${t5} ${p5}, ${t6} ${p6}, const ${t7} & ${p7}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}, ${t3} * ${p3}, const ${t4} & ${p4}, ${t5} ${p5}, ${t6} ${p6}, const ${t7} & ${p7}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 531113 "draw_box_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 10
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "shadow_type" type class_ref 284329 // ShadowType
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} * ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} * ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 531241 "draw_flat_box_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 10
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "shadow_type" type class_ref 284329 // ShadowType
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} * ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} * ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 531369 "draw_check_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 10
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "shadow_type" type class_ref 284329 // ShadowType
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} * ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} * ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 531497 "draw_option_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 10
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "shadow_type" type class_ref 284329 // ShadowType
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} * ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} * ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 531625 "draw_tab_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 10
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "shadow_type" type class_ref 284329 // ShadowType
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} * ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} * ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 531753 "draw_shadow_gap_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 13
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "shadow_type" type class_ref 284329 // ShadowType
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	  param in name "gap_side" explicit_type "Gtk::PositionType"
	  param in name "gap_x" explicit_type "int"
	  param in name "gap_width" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} * ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}, ${t10} ${p10}, ${t11} ${p11}, ${t12} ${p12}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} * ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}, ${t10} ${p10}, ${t11} ${p11}, ${t12} ${p12}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 531881 "draw_box_gap_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 13
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "shadow_type" type class_ref 284329 // ShadowType
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	  param in name "gap_side" explicit_type "Gtk::PositionType"
	  param in name "gap_x" explicit_type "int"
	  param in name "gap_width" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} * ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}, ${t10} ${p10}, ${t11} ${p11}, ${t12} ${p12}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} * ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}, ${t10} ${p10}, ${t11} ${p11}, ${t12} ${p12}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 532009 "draw_extension_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 11
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "shadow_type" type class_ref 284329 // ShadowType
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	  param in name "gap_side" type class_ref 314793 // PositionType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} * ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}, ${t10} ${p10}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} * ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}, ${t10} ${p10}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 532137 "draw_focus_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 9
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}, ${t3} * ${p3}, const ${t4} & ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}, ${t3} * ${p3}, const ${t4} & ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 532265 "draw_slider_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 11
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "shadow_type" type class_ref 284329 // ShadowType
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	  param in name "orientation" type class_ref 281513 // Orientation
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} * ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}, ${t10} ${p10}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} * ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}, ${t10} ${p10}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 532393 "draw_handle_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 11
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "shadow_type" type class_ref 284329 // ShadowType
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	  param in name "orientation" type class_ref 281513 // Orientation
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} * ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}, ${t10} ${p10}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} * ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}, ${t10} ${p10}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 532521 "draw_expander_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 8
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "expander_style" type class_ref 310441 // ExpanderStyle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}, ${t3} * ${p3}, const ${t4} & ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}, ${t3} * ${p3}, const ${t4} & ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 532649 "draw_layout_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 9
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "use_text" explicit_type "bool"
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "layout" explicit_type "Glib::RefPtr<Pango::Layout>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} * ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, const ${t8} & ${p8}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} * ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, ${t7} ${p7}, const ${t8} & ${p8}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 532777 "draw_resize_grip_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 10
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "state_type" explicit_type "Gtk::StateType"
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "detail" explicit_type "Glib::ustring"
	  param in name "edge" explicit_type "Gdk::WindowEdge"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}, ${t3} * ${p3}, const ${t4} & ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}, ${t3} * ${p3}, const ${t4} & ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 532905 "signal_realize"
	protected explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 533033 "signal_unrealize"
	protected explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 533161 "on_realize"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 533289 "on_unrealize"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 201257 "Table"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/table.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Implented as custom or by LIST_CONTAINER_REMOVE
 namespace Table_Helpers
* Pack widgets in regular patterns.
 * @ingroup Widgets
 * @ingroup Containers
 * Gtk::Table is one of the primary ways of grouping widgets together.  It
 * consists of a set of lattice points to to which widgets can be attached.
 * There are <em>rows</em>&nbsp;+&nbsp;1 lattice points vertically and
 * <em>columns</em>&nbsp;+&nbsp;1 lattice points horizontally.  Lattice points
 * start counting from 0.  Lattice points can either be specified to be
 * <em>homogeneous</em>, meaning equally spaced, or not <em>homogeneous</em>,
 * meaning each cell should be calculated based on the widgets contained in the
 * row and column. The <em>homogeneous</em> property defaults to false.
 *
 * Widgets can be attached to the table by specifying the top, bottom, left and
 * right points corresponding to upper, lefthand lattice point and the lower,
 * righthand lattice point which the widget should span.  Widgets can either be
 * contained in a cell or may span cells.  A number of options control the
 * resizing behavior of widgets contained in the table.
 *
 * @par Packing options:
 * There are a number of packing options that can be specified when adding a
 * widget.  With <tt>Gtk::EXPAND</tt>, the lattice is allowed to grow to fill
 * space.  With <tt>Gtk::SHRINK</tt>, the lattice is allowed to shrink when
 * resized.  It is also possible to specify the behaviour of the widgets
 * allocation within the table.  The flag <tt>Gtk::FILL</tt> declares the
 * widget should grow to fill lattice.  If this is not set any extra space is
 * used as padding.  The default is <tt>(Gtk::FILL&nbsp;|&nbsp;Gtk::EXPAND)</tt>.
 *
 * @par Table sizing:
 * The table size is calculated based on the size of the widgets contained
 * within and the restrictions imposed by specified options.  Padding and
 * spacing can be used in the table.  Padding is added on either side of a
 * widget, while spacing is placed between widgets.
 *
 * @see Gtk::HBox, Gtk::VBox
 "
      classrelation 210345 // <generalisation>
	relation 210345 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 210345 // <generalisation>
	  b parent class_ref 280745 // Container
      end

      class 245033 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 201257 // Table
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 210473 // <realization>
	  relation 210473 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 210473 // <realization>
	    b parent class_ref 201257 // Table
	end
      end

      class 245289 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Table_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 245417 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkTable"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 245545 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkTableClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 535465 "~Table"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 210857 // table_class_ (<directional composition>)
	relation 210857 *-->
	  a role_name "table_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 210857 // table_class_ (<directional composition>)
	  b parent class_ref 245289 // CppClassType
      end

      operation 535593 "Table"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 201257 // Table
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 535721 "operator ="
	private return_type class_ref 201257 // Table
	nparams 1
	  param in name "" type class_ref 201257 // Table
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 535849 "Table"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 535977 "Table"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkTable"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 536105 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 536233 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 536361 "gobj"
	cpp_inline public explicit_return_type "GtkTable"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTable*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 536489 "gobj"
	const cpp_inline public explicit_return_type "GtkTable"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTable*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 536617 "Table"
	public explicit_return_type ""
	nparams 3
	  param in name "n_rows" explicit_type "guint"
	    defaultvalue " 1"
	  param in name "n_columns" explicit_type "guint"
	    defaultvalue " 1"
	  param in name "homogeneous" explicit_type "bool"
	    defaultvalue " false"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 536745 "attach"
	public explicit_return_type "void"
	nparams 9
	  param inout name "child" type class_ref 130089 // Widget
	  param in name "left_attach" explicit_type "guint"
	  param in name "right_attach" explicit_type "guint"
	  param in name "top_attach" explicit_type "guint"
	  param in name "bottom_attach" explicit_type "guint"
	  param in name "xoptions" type class_ref 308905 // AttachOptions
	    defaultvalue " FILL | EXPAND"
	  param in name "yoptions" type class_ref 308905 // AttachOptions
	    defaultvalue " FILL | EXPAND"
	  param in name "xpadding" explicit_type "guint"
	    defaultvalue " 0"
	  param in name "ypadding" explicit_type "guint"
	    defaultvalue " 0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 536873 "resize"
	public explicit_return_type "void"
	nparams 2
	  param in name "rows" explicit_type "guint"
	  param in name "columns" explicit_type "guint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 537001 "set_row_spacing"
	public explicit_return_type "void"
	nparams 2
	  param in name "row" explicit_type "guint"
	  param in name "spacing" explicit_type "guint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 537129 "get_row_spacing"
	const public explicit_return_type "guint"
	nparams 1
	  param in name "row" explicit_type "guint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the amount of space between row @a row , and
   * row @a row  + 1. See set_row_spacing().
   * @param row A row in the table, 0 indicates the first row.
   * @return The row spacing.
   "
      end

      operation 537257 "set_col_spacing"
	public explicit_return_type "void"
	nparams 2
	  param in name "column" explicit_type "guint"
	  param in name "spacing" explicit_type "guint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 537385 "get_col_spacing"
	const public explicit_return_type "guint"
	nparams 1
	  param in name "column" explicit_type "guint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the amount of space between column @a col , and
   * column @a col  + 1. See set_col_spacing().
   * @param column A column in the table, 0 indicates the first column.
   * @return The column spacing.
   "
      end

      operation 537513 "set_row_spacings"
	public explicit_return_type "void"
	nparams 1
	  param in name "spacing" explicit_type "guint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 537641 "set_col_spacings"
	public explicit_return_type "void"
	nparams 1
	  param in name "spacing" explicit_type "guint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 537769 "set_spacings"
	public explicit_return_type "void"
	nparams 1
	  param in name "spacing" explicit_type "guint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 537897 "get_default_row_spacing"
	public explicit_return_type "guint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the default row spacing for the table. This is
   * the spacing that will be used for newly added rows.
   * (See set_row_spacings())
   * @return Value: the default row spacing.
   "
      end

      operation 538025 "get_default_col_spacing"
	public explicit_return_type "guint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the default column spacing for the table. This is
   * the spacing that will be used for newly added columns.
   * (See set_col_spacings())
   * @return Value: the default column spacing.
   "
      end

      operation 538153 "set_homogeneous"
	public explicit_return_type "void"
	nparams 1
	  param in name "homogeneous" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 538281 "get_homogeneous"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether the table cells are all constrained to the same
   * width and height. (See gtk_table_set_homogenous())
   * @return <tt>true</tt> if the cells are all constrained to the same size.
   "
      end

      class 245673 "TableList"
	visibility package stereotype "typedef" base_type class_ref 244649 // TableList
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 210985 // <realization>
	  relation 210985 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 210985 // <realization>
	    b parent class_ref 244649 // TableList
	end
      end

      operation 538409 "children"
	public return_type class_ref 245673 // TableList
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 538537 "children"
	const public return_type class_ref 245673 // TableList
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 538665 "property_n_rows"
	public explicit_return_type "Glib::PropertyProxy<guint>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 538793 "property_n_rows"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<guint>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 538921 "property_n_columns"
	public explicit_return_type "Glib::PropertyProxy<guint>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 539049 "property_n_columns"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<guint>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 539177 "property_column_spacing"
	public explicit_return_type "Glib::PropertyProxy<guint>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 539305 "property_column_spacing"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<guint>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 539433 "property_row_spacing"
	public explicit_return_type "Glib::PropertyProxy<guint>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 539561 "property_row_spacing"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<guint>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      classrelation 211113 // children_proxy_ (<directional composition>)
	relation 211113 *-->
	  a role_name "children_proxy_" protected
	    cpp mutable default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 211113 // children_proxy_ (<directional composition>)
	  b parent class_ref 245673 // TableList
      end
    end

    class 244649 "TableList"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/tablelist.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 533417 "TableList"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 533545 "TableList"
	public explicit_return_type ""
	nparams 1
	  param inout name "gparent" explicit_type "GtkTable"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 533673 "TableList"
	public explicit_return_type ""
	nparams 1
	  param in name "src" type class_ref 244649 // TableList
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 533801 "~TableList"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	
	
      end

      operation 533929 "operator ="
	public return_type class_ref 244649 // TableList
	nparams 1
	  param in name "src" type class_ref 244649 // TableList
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      class 244905 "type_base"
	visibility package stereotype "typedef" explicit_base_type "Glib::HelperList< Child, Widget,  Glib::List_Iterator< Child > >"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 534057 "gparent"
	public explicit_return_type "GtkTable"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 534185 "gparent"
	const public explicit_return_type "GtkTable"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 534313 "glist"
	const cpp_virtual public explicit_return_type "GList"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 534441 "erase"
	cpp_virtual public explicit_return_type "void"
	nparams 2
	  param in name "start" explicit_type "iterator"
	  param in name "stop" explicit_type "iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " front of list"
      end

      operation 534569 "erase"
	cpp_virtual public explicit_return_type "iterator"
	nparams 1
	  param in name "" explicit_type "iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 534697 "remove"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "" explicit_type "const_reference"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Implented as custom or by LIST_CONTAINER_REMOVE"
      end

      operation 534825 "operator []"
	const public explicit_return_type "reference"
	nparams 1
	  param in name "l" explicit_type "size_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Implented as custom or by LIST_CONTAINER_REMOVE
/ This is order n. (use at own risk)"
      end

      operation 534953 "insert"
	protected explicit_return_type "iterator"
	nparams 2
	  param in name "position" explicit_type "iterator"
	  param inout name "e" explicit_type "element_type"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Hide these because its read-only:"
      end

      operation 535081 "pop_front"
	cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 535209 "pop_back"
	cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 535337 "remove"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "w" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "The standard iterator, instead of List_Cpp_Iterator,
only works because Child is derived from _GtkTableChild."
      end
    end

    class 245801 "TargetEntry"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/targetentry.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 539689 "TargetEntry"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 539817 "TargetEntry"
	public explicit_return_type ""
	nparams 3
	  param in name "target" explicit_type "Glib::ustring"
	  param in name "flags" explicit_type "Gtk::TargetFlags"
	    defaultvalue " Gtk::TargetFlags(0)"
	  param in name "info" explicit_type "guint"
	    defaultvalue " 0"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 539945 "TargetEntry"
	public explicit_return_type ""
	nparams 1
	  param in name "gobject" explicit_type "GtkTargetEntry"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 540073 "TargetEntry"
	public explicit_return_type ""
	nparams 1
	  param in name "src" type class_ref 245801 // TargetEntry
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 540201 "~TargetEntry"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 540329 "operator ="
	public return_type class_ref 245801 // TargetEntry
	nparams 1
	  param in name "src" type class_ref 245801 // TargetEntry
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 540457 "get_target"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 540585 "set_target"
	public explicit_return_type "void"
	nparams 1
	  param in name "target" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 540713 "get_flags"
	const public explicit_return_type "Gtk::TargetFlags"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 540841 "set_flags"
	public explicit_return_type "void"
	nparams 1
	  param in name "flags" explicit_type "Gtk::TargetFlags"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 540969 "get_info"
	const public explicit_return_type "guint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 541097 "set_info"
	public explicit_return_type "void"
	nparams 1
	  param in name "info" explicit_type "guint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 541225 "gobj"
	public explicit_return_type "GtkTargetEntry"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Use this when you have to use an array of GdkTargetEntrys
This TargetEntry will still own the string memory."
      end

      operation 541353 "gobj"
	const public explicit_return_type "GtkTargetEntry"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      attribute 205353 "gobject_"
	protected explicit_type "GtkTargetEntry"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 245929 "TargetEntry_Traits"
      visibility package stereotype "struct"
      cpp_external cpp_decl "${name}
#include <gtkmm/targetentry_traits.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 246057 "CppType"
	visibility package stereotype "typedef" base_type class_ref 245801 // TargetEntry
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 211241 // <realization>
	  relation 211241 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 211241 // <realization>
	    b parent class_ref 245801 // TargetEntry
	end
      end

      class 246185 "CType"
	visibility package stereotype "typedef" explicit_base_type "GtkTargetEntry"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 246313 "CTypeNonConst"
	visibility package stereotype "typedef" explicit_base_type "GtkTargetEntry"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 541481 "to_c_type"
	class_operation cpp_inline public return_type class_ref 246185 // CType
	nparams 1
	  param in name "item" type class_ref 246057 // CppType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} { return *item.gobj(); };
"
	
	
	
	
      end

      operation 541609 "to_c_type"
	class_operation cpp_inline public return_type class_ref 246185 // CType
	nparams 1
	  param in name "item" type class_ref 246185 // CType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} { return item; };
"
	
	
	
	
      end

      operation 541737 "to_cpp_type"
	class_operation cpp_inline public return_type class_ref 246057 // CppType
	nparams 1
	  param in name "item" type class_ref 246185 // CType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} { return TargetEntry(item); /* copies string */};
"
	
	
	
	
      end

      operation 541865 "release_c_type"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "" type class_ref 246185 // CType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end
    end

    class 315817 "TargetFlags"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 * @par Bitwise operators:
 * <tt>%TargetFlags operator|(TargetFlags, TargetFlags)</tt><br>
 * <tt>%TargetFlags operator&(TargetFlags, TargetFlags)</tt><br>
 * <tt>%TargetFlags operator^(TargetFlags, TargetFlags)</tt><br>
 * <tt>%TargetFlags operator~(TargetFlags)</tt><br>
 * <tt>%TargetFlags& operator|=(TargetFlags&, TargetFlags)</tt><br>
 * <tt>%TargetFlags& operator&=(TargetFlags&, TargetFlags)</tt><br>
 * <tt>%TargetFlags& operator^=(TargetFlags&, TargetFlags)</tt><br>
 "
      attribute 192937 "TARGET_SAME_APP"
	public explicit_type ""
	init_value " 1 << 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 193065 "TARGET_SAME_WIDGET"
	public explicit_type ""
	init_value " 1 << 1
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 246441 "TargetList"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/targetlist.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 246569 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 246441 // TargetList
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 211369 // <realization>
	  relation 211369 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 211369 // <realization>
	    b parent class_ref 246441 // TargetList
	end
      end

      class 246697 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkTargetList"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 541993 "reference"
	const public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " For use with Glib::RefPtr<> only."
      end

      operation 542121 "unreference"
	const public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 542249 "gobj"
	public explicit_return_type "GtkTargetList"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Provides access to the underlying C instance."
      end

      operation 542377 "gobj"
	const public explicit_return_type "GtkTargetList"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Provides access to the underlying C instance."
      end

      operation 542505 "gobj_copy"
	const public explicit_return_type "GtkTargetList"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs."
      end

      operation 542633 "TargetList"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment " Do not derive this.  Gtk::TargetList can neither be constructed nor deleted."
      end

      operation 542761 "operator delete"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "" explicit_type "void"
	  param in name "" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 542889 "TargetList"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 246441 // TargetList
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 543017 "operator ="
	private return_type class_ref 246441 // TargetList
	nparams 1
	  param in name "" type class_ref 246441 // TargetList
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 543145 "create"
	class_operation public explicit_return_type "Glib::RefPtr<Gtk::TargetList>"
	nparams 1
	  param in name "targets" explicit_type "ArrayHandle_TargetEntry"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 543273 "add"
	public explicit_return_type "void"
	nparams 3
	  param in name "target" explicit_type "Glib::ustring"
	  param in name "flags" type class_ref 315817 // TargetFlags
	    defaultvalue " TargetFlags(0)"
	  param in name "info" explicit_type "guint"
	    defaultvalue " 0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 543401 "add"
	public explicit_return_type "void"
	nparams 1
	  param in name "targets" explicit_type "ArrayHandle_TargetEntry"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 543529 "remove"
	public explicit_return_type "void"
	nparams 1
	  param in name "target" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 543657 "find"
	const public explicit_return_type "bool"
	nparams 2
	  param in name "target" explicit_type "Glib::ustring"
	  param inout name "info" explicit_type "guint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 246825 "TearoffMenuItem"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/tearoffmenuitem.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* A special Gtk::MenuItem which is used to tear off and reattach its menu.
 * When its menu is shown normally, the Gtk::TearoffMenuItem is drawn as a dotted line indicating that the menu can be torn off. Activating it causes its menu to be torn off and displayed in its own window.
 * When its menu is shown as a tearoff menu, the Gtk::TearoffMenuItem is drawn as a dotted line which has a left pointing arrow graphic indicating that the tearoff menu can be reattached. Activating it will erase the tearoff menu window.
 * @ingroup Widgets
 * @ingroup Menus
 "
      classrelation 211497 // <generalisation>
	relation 211497 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 211497 // <generalisation>
	  b parent class_ref 131369 // MenuItem
      end

      class 246953 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 246825 // TearoffMenuItem
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 211625 // <realization>
	  relation 211625 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 211625 // <realization>
	    b parent class_ref 246825 // TearoffMenuItem
	end
      end

      class 247209 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "TearoffMenuItem_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 247337 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkTearoffMenuItem"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 247465 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkTearoffMenuItemClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 543785 "~TearoffMenuItem"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 212009 // tearoffmenuitem_class_ (<directional composition>)
	relation 212009 *-->
	  a role_name "tearoffmenuitem_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 212009 // tearoffmenuitem_class_ (<directional composition>)
	  b parent class_ref 247209 // CppClassType
      end

      operation 543913 "TearoffMenuItem"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 246825 // TearoffMenuItem
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 544041 "operator ="
	private return_type class_ref 246825 // TearoffMenuItem
	nparams 1
	  param in name "" type class_ref 246825 // TearoffMenuItem
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 544169 "TearoffMenuItem"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 544297 "TearoffMenuItem"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkTearoffMenuItem"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 544425 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 544553 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 544681 "gobj"
	cpp_inline public explicit_return_type "GtkTearoffMenuItem"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTearoffMenuItem*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 544809 "gobj"
	const cpp_inline public explicit_return_type "GtkTearoffMenuItem"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTearoffMenuItem*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 544937 "TearoffMenuItem"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 545065 "is_torn_off"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 247593 "TextAttributes"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/textattributes.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup TextView
 "
      class 247721 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 247593 // TextAttributes
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 212137 // <realization>
	  relation 212137 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 212137 // <realization>
	    b parent class_ref 247593 // TextAttributes
	end
      end

      class 247849 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkTextAttributes"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 545193 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 545321 "TextAttributes"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 545449 "TextAttributes"
	public explicit_return_type ""
	nparams 2
	  param inout name "gobject" explicit_type "GtkTextAttributes"
	  param in name "make_a_copy" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 545577 "TextAttributes"
	public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 247593 // TextAttributes
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 545705 "operator ="
	public return_type class_ref 247593 // TextAttributes
	nparams 1
	  param in name "other" type class_ref 247593 // TextAttributes
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 545833 "~TextAttributes"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 545961 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 247593 // TextAttributes
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 546089 "gobj"
	cpp_inline public explicit_return_type "GtkTextAttributes"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return gobject_; };
"
	
	
	
	
	comment "/Provides access to the underlying C instance."
      end

      operation 546217 "gobj"
	const cpp_inline public explicit_return_type "GtkTextAttributes"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return gobject_; };
"
	
	
	
	
	comment "/Provides access to the underlying C instance."
      end

      operation 546345 "gobj_copy"
	const public explicit_return_type "GtkTextAttributes"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Provides access to the underlying C instance. The caller is responsible for freeing it. Use when directly setting fields in structs."
      end

      attribute 205481 "gobject_"
	protected explicit_type "GtkTextAttributes"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 248233 "TextBuffer"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/textbuffer.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Multi-line attributed text that can be displayed by one or more Gtk::TextView widgets.
 *
 * Text in a buffer can be marked with tags. A @link Gtk::TextTag Gtk::TextBuffer::Tag@endlink is an attribute that can be applied to some range of text. For example, a tag
 * might be called \"bold\" and make the text inside the tag bold. However, the tag concept is more general than that; tags don't
 * have to affect appearance. They can instead affect the behavior of mouse and key presses, \"lock\" a range of text so the user
 * can't edit it, or countless other things. A tag is represented by a @link Gtk::TextTag Gtk::TextBuffer::Tag@endlink object.
 * One @link Gtk::TextTag Gtk::TextBuffer::Tag@endlink can be applied to any number of text ranges in any number of @link Gtk::TextBuffer Gtk::TextBuffers@endlink.
 *
 * Each tag is stored in a @link Gtk::TextTagTable Gtk::TextBuffer::TagTable@endlink. A tag table defines a set of tags that can be used together. Each buffer has one tag
 * table associated with it; only tags from that tag table can be used with the buffer. A single tag table can be shared between
 * multiple buffers, however.
 *
 * Most text manipulation is accomplished with iterators, represented by an @link Gtk::TextIter iterator@endlink. The iterator can
 * be used to navigate over characters, words, lines, and sentences.
 *
 * But iterators can't be used to preserve positions across buffer modifications. To preserve a position, the
 * @link Gtk::TextMark Gtk::TextBuffer::Mark@endlink object is ideal. There are two marks built-in to GtkTextBuffer; these are
 * named \"insert\" and \"selection_bound\" and refer to the insertion point and the boundary of the selection which is not the
 * insertion point. If no text is selected, these two marks will be in the same position. You can manipulate what is selected and
 * where the cursor appears by moving these marks around.
 *
 * Text buffers always contain at least one line, but may be empty (that is, buffers can contain zero characters). The last line
 * in the text buffer never ends in a line separator (such as newline); the other lines in the buffer always end in a line
 * separator. Line separators count as characters when computing character counts and character offsets. Note that some Unicode
 * line separators are represented with multiple bytes in UTF-8, and the two-character sequence \"\\r\\n\" is also considered a line
 * separator.
 *
 * @ingroup TextView
 "
      class 248361 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 248233 // TextBuffer
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 212521 // <realization>
	  relation 212521 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 212521 // <realization>
	    b parent class_ref 248233 // TextBuffer
	end
      end

      class 248617 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "TextBuffer_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 248745 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkTextBuffer"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 248873 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkTextBufferClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 212905 // textbuffer_class_ (<directional composition>)
	relation 212905 *-->
	  a role_name "textbuffer_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 212905 // textbuffer_class_ (<directional composition>)
	  b parent class_ref 248617 // CppClassType
      end

      operation 546473 "TextBuffer"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 248233 // TextBuffer
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 546601 "operator ="
	private return_type class_ref 248233 // TextBuffer
	nparams 1
	  param in name "" type class_ref 248233 // TextBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 546729 "TextBuffer"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 546857 "TextBuffer"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkTextBuffer"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 546985 "~TextBuffer"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 547113 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 547241 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 547369 "gobj"
	cpp_inline public explicit_return_type "GtkTextBuffer"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTextBuffer*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 547497 "gobj"
	const cpp_inline public explicit_return_type "GtkTextBuffer"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTextBuffer*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 547625 "gobj_copy"
	public explicit_return_type "GtkTextBuffer"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs."
      end

      class 249129 "iterator"
	visibility package stereotype "typedef" base_type class_ref 249001 // TextIter
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 213033 // <realization>
	  relation 213033 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 213033 // <realization>
	    b parent class_ref 249001 // TextIter
	end
      end

      class 249385 "Tag"
	visibility package stereotype "typedef" base_type class_ref 249257 // TextTag
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 213161 // <realization>
	  relation 213161 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 213161 // <realization>
	    b parent class_ref 249257 // TextTag
	end
      end

      class 249641 "TagTable"
	visibility package stereotype "typedef" base_type class_ref 249513 // TextTagTable
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 213289 // <realization>
	  relation 213289 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 213289 // <realization>
	    b parent class_ref 249513 // TextTagTable
	end
      end

      class 249897 "Mark"
	visibility package stereotype "typedef" base_type class_ref 249769 // TextMark
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 213417 // <realization>
	  relation 213417 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 213417 // <realization>
	    b parent class_ref 249769 // TextMark
	end
      end

      class 250153 "ChildAnchor"
	visibility package stereotype "typedef" base_type class_ref 250025 // TextChildAnchor
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 213545 // <realization>
	  relation 213545 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 213545 // <realization>
	    b parent class_ref 250025 // TextChildAnchor
	end
      end

      operation 547753 "TextBuffer"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 547881 "TextBuffer"
	protected explicit_return_type ""
	nparams 1
	  param in name "tag_table" explicit_type "Glib::RefPtr<TagTable>"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 548009 "create"
	class_operation public explicit_return_type "Glib::RefPtr<TextBuffer>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 548137 "create"
	class_operation public explicit_return_type "Glib::RefPtr<TextBuffer>"
	nparams 1
	  param in name "tag_table" explicit_type "Glib::RefPtr<TagTable>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 548265 "get_line_count"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Obtains the number of lines in the buffer. This value is cached, so
   * the function is very fast.
   * @return Number of lines in the buffer.
   "
      end

      operation 548393 "get_char_count"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the number of characters in the buffer; note that characters
   * and bytes are not the same, you can't e.g.\\ expect the contents of
   * the buffer in string form to be this many bytes long. The character
   * count is cached, so this function is very fast.
   * @return Number of characters in the buffer.
   "
      end

      operation 548521 "size"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/ See get_char_count()."
      end

      operation 548649 "get_tag_table"
	public explicit_return_type "Glib::RefPtr<TextBuffer::TagTable>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Get the Gtk::TextTagTable associated with this buffer.
   * @return The buffer's tag table.
   "
      end

      operation 548777 "get_tag_table"
	const public explicit_return_type "Glib::RefPtr<const TextBuffer::TagTable>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Get the Gtk::TextTagTable associated with this buffer.
   * @return The buffer's tag table.
   "
      end

      operation 548905 "set_text"
	public explicit_return_type "void"
	nparams 1
	  param in name "text" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Removes the current contents of the buffer, and inserts @a text instead.
   * @param text The text to put in the buffer.
   "
      end

      operation 549033 "set_text"
	public explicit_return_type "void"
	nparams 2
	  param in name "text_begin" explicit_type "char"
	  param in name "text_end" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Removes the current contents of the buffer, and inserts @a text instead.
   * @param text_begin The start of a UTF8 character array.
   * @param text_end The end of the UTF8 character array.
   "
      end

      operation 549161 "assign"
	public explicit_return_type "void"
	nparams 1
	  param in name "text" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* @deprecated Use set_text()
   "
      end

      operation 549289 "assign"
	public explicit_return_type "void"
	nparams 2
	  param in name "text_begin" explicit_type "char"
	  param in name "text_end" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* @deprecated Use set_text()
   "
      end

      operation 549417 "insert"
	public return_type class_ref 249129 // iterator
	nparams 2
	  param in name "pos" type class_ref 249129 // iterator
	  param in name "text" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO: Make all insert() methods have the same return type:
* Inserts @a text at position @a pos.
   * Emits the \"insert_text\" signal; insertion actually occurs in the default handler for the signal.
   * The @a pos iterator is invalidated when insertion occurs (because the buffer contents change).
   *
   * @param pos An iterator pointing to the position at which the text should be inserted.
   * @param text The text to be inserted in the buffer.
   * @result An iterator that points to the end of the inserted text.
   "
      end

      operation 549545 "insert"
	public return_type class_ref 249129 // iterator
	nparams 3
	  param in name "pos" type class_ref 249129 // iterator
	  param in name "text_begin" explicit_type "char"
	  param in name "text_end" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} * ${p1}, const ${t2} * ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} * ${p1}, const ${t2} * ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Inserts text at position @a pos.
   * Emits the \"insert_text\" signal; insertion actually occurs in the default handler for the signal.
   * The @a pos iterator is invalidated when insertion occurs (because the buffer contents change).
   *
   * @param pos An iterator pointing to the position at which the text should be inserted.
   * @param text_begin The start of a UTF8 character array.
   * @param text_end The end of the UTF8 character array.
   * @result An iterator that points to the end of the inserted text.
   "
      end

      operation 549673 "insert_at_cursor"
	public explicit_return_type "void"
	nparams 1
	  param in name "text" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Inserts @a text, using the current cursor position as the insertion point.
   * Emits the \"insert_text\" signal; insertion actually occurs in the default handler for the signal.
   *
   * @param text The text to be inserted in the buffer.
   * @result An iterator that points to the end of the inserted text.
   "
      end

      operation 549801 "insert_at_cursor"
	public explicit_return_type "void"
	nparams 2
	  param in name "text_begin" explicit_type "char"
	  param in name "text_end" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Inserts text, using the current cursor position as the insertion point.
   * Emits the \"insert_text\" signal; insertion actually occurs in the default handler for the signal.
   *
   * @param text_begin The start of a UTF8 character array.
   * @param text_end The end of the UTF8 character array.
   * @result An iterator that points to the end of the inserted text.
   "
      end

      operation 549929 "insert_interactive"
	public explicit_return_type "std::pair<iterator,bool>"
	nparams 3
	  param in name "pos" type class_ref 249129 // iterator
	  param in name "text" explicit_type "Glib::ustring"
	  param in name "default_editable" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Like insert(), but the insertion will not occur if @a iter is at a non-editable location in the buffer.
   * Usually you want to prevent insertions at ineditable locations if the insertion results from a user action (is interactive).
   *
   * @a default_editable indicates the editability of text that doesn't have a tag affecting editability applied to it.
   * Typically the result of Gtk::TextView::get_editable() is appropriate here.
   *
   * @param pos An iterator pointing to the position at which the text should be inserted.
   * @param text The text to be inserted in the buffer.
   * @param default_editable Default editability of buffer
   * @result Whether text was actually inserted
   "
      end

      operation 550057 "insert_interactive"
	public explicit_return_type "std::pair<iterator,bool>"
	nparams 4
	  param in name "pos" type class_ref 249129 // iterator
	  param in name "text_begin" explicit_type "char"
	  param in name "text_end" explicit_type "char"
	  param in name "default_editable" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} * ${p1}, const ${t2} * ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} * ${p1}, const ${t2} * ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Like insert(), but the insertion will not occur if @a pos is at a non-editable location in the buffer.
   * Usually you want to prevent insertions at ineditable locations if the insertion results from a user action (is interactive).
   *
   * @a default_editable indicates the editability of text that doesn't have a tag affecting editability applied to it.
   * Typically the result of Gtk::TextView::get_editable() is appropriate here.
   *
   * @param pos An iterator pointing to the position at which the text should be inserted.
   * @param text_begin The start of a UTF8 character array.
   * @param text_end The end of the UTF8 character array.
   * @param default_editable Default editability of buffer.
   * @result Whether text was actually inserted
   "
      end

      operation 550185 "insert_interactive_at_cursor"
	public explicit_return_type "bool"
	nparams 2
	  param in name "text" explicit_type "Glib::ustring"
	  param in name "default_editable" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Calls insert_interactive() at the cursor position.
   *
   * @a default_editable indicates the editability of text that doesn't have a tag affecting editability applied to it.
   * Typically the result of Gtk::TextView::get_editable() is appropriate here.
   *
   * @param text The text to be inserted in the buffer.
   * @param default_editable Default editability of buffer
   * @result Whether text was actually inserted
   "
      end

      operation 550313 "insert_interactive_at_cursor"
	public explicit_return_type "bool"
	nparams 3
	  param in name "text_begin" explicit_type "char"
	  param in name "text_end" explicit_type "char"
	  param in name "default_editable" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Calls insert_interactive() at the cursor position.
   *
   * @a default_editable indicates the editability of text that doesn't have a tag affecting editability applied to it.
   * Typically the result of Gtk::TextView::get_editable() is appropriate here.
   *
   * @param text_begin The start of a UTF8 character array.
   * @param text_end The end of the UTF8 character array.
   * @param default_editable Default editability of buffer
   * @result Whether text was actually inserted
   "
      end

      operation 550441 "insert"
	public return_type class_ref 249129 // iterator
	nparams 3
	  param in name "pos" type class_ref 249129 // iterator
	  param in name "range_begin" type class_ref 249129 // iterator
	  param in name "range_end" type class_ref 249129 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Copies text, tags, and pixbufs between @a range_begin and @a range_end (the order of range_begin and range_begin doesn't
   * matter) and inserts the copy at @a pos. Used instead of simply getting/inserting text because it preserves images and tags.
   * If range_begin and range_end are in a different buffer, the two buffers must share the same tag table.
   *
   * Implemented via emissions of the insert_text and apply_tag signals, so expect those.
   *
   * @param pos An iterator pointing to the position at which the text should be inserted.
   * @param range_begin A position in a buffer.
   * @param range_end Another position in the same buffer as @a range_begin.
   * @result Whether text was actually inserted
   "
      end

      operation 550569 "insert_interactive"
	public explicit_return_type "std::pair<iterator,bool>"
	nparams 4
	  param in name "pos" type class_ref 249129 // iterator
	  param in name "range_begin" type class_ref 249129 // iterator
	  param in name "range_end" type class_ref 249129 // iterator
	  param in name "default_editable" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Same as insert_range(), but does nothing if the insertion point isn't editable.
   *
   * The @a default_editable parameter indicates whether the text is editable at @a pos if no tags enclosing @a pos affect editability.
   * Typically the result of Gtk::TextView::get_editable() is appropriate here.
   *
   * @param pos An iterator pointing to the position at which the text should be inserted.
   * @param range_begin A position in a buffer.
   * @param range_end Another position in the same buffer as @a range_begin.
   * @param default_editable Default editability of buffer.
   * @result Whether text was actually inserted
   "
      end

      operation 550697 "insert_with_tag"
	public return_type class_ref 249129 // iterator
	nparams 3
	  param in name "pos" type class_ref 249129 // iterator
	  param in name "text" explicit_type "Glib::ustring"
	  param in name "tag" explicit_type "Glib::RefPtr<Tag>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 550825 "insert_with_tag"
	public return_type class_ref 249129 // iterator
	nparams 4
	  param in name "pos" type class_ref 249129 // iterator
	  param in name "text_begin" explicit_type "char"
	  param in name "text_end" explicit_type "char"
	  param in name "tag" explicit_type "Glib::RefPtr<Tag>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} * ${p1}, const ${t2} * ${p2}, const ${t3} & ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} * ${p1}, const ${t2} * ${p2}, const ${t3} & ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 550953 "insert_with_tag"
	public return_type class_ref 249129 // iterator
	nparams 3
	  param in name "pos" type class_ref 249129 // iterator
	  param in name "text" explicit_type "Glib::ustring"
	  param in name "tag_name" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 551081 "insert_with_tag"
	public return_type class_ref 249129 // iterator
	nparams 4
	  param in name "pos" type class_ref 249129 // iterator
	  param in name "text_begin" explicit_type "char"
	  param in name "text_end" explicit_type "char"
	  param in name "tag_name" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} * ${p1}, const ${t2} * ${p2}, const ${t3} & ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} * ${p1}, const ${t2} * ${p2}, const ${t3} & ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 551209 "insert_with_tags"
	public return_type class_ref 249129 // iterator
	nparams 3
	  param in name "pos" type class_ref 249129 // iterator
	  param in name "text" explicit_type "Glib::ustring"
	  param in name "tags" explicit_type "Glib::ArrayHandle< Glib::RefPtr<Tag> >"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Inserts text into buffer at @a pos, applying the list of tags to the newly-inserted text.
   * Equivalent to calling insert(), then apply_tag() on the inserted text; This is just a convenience function.
   *
   * @param pos An iterator pointing to the position at which the text should be inserted.
   * @param text The text to be inserted in the buffer.
   * @param tags A standard C++ container of @link Gtk::TextTag Gtk::TextBuffer::Tags@endlink.
   * @result Whether text was actually inserted
   "
      end

      operation 551337 "insert_with_tags"
	public return_type class_ref 249129 // iterator
	nparams 4
	  param in name "pos" type class_ref 249129 // iterator
	  param in name "text_begin" explicit_type "char"
	  param in name "text_end" explicit_type "char"
	  param in name "tags" explicit_type "Glib::ArrayHandle< Glib::RefPtr<Tag> >"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} * ${p1}, const ${t2} * ${p2}, const ${t3} & ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} * ${p1}, const ${t2} * ${p2}, const ${t3} & ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Inserts text into buffer at @a pos, applying the list of tags to the newly-inserted text.
   * Equivalent to calling insert(), then apply_tag() on the inserted text; This is just a convenience function.
   *
   * @param pos An iterator pointing to the position at which the text should be inserted.
   * @param text_begin The start of a UTF8 character array.
   * @param text_end The end of the UTF8 character array.
   * @param tags A standard C++ container of @link Gtk::TextTag Gtk::TextBuffer::Tags@endlink.
   * @result Whether text was actually inserted
   "
      end

      operation 551465 "insert_with_tags_by_name"
	public return_type class_ref 249129 // iterator
	nparams 3
	  param in name "pos" type class_ref 249129 // iterator
	  param in name "text" explicit_type "Glib::ustring"
	  param in name "tag_names" explicit_type "Glib::StringArrayHandle"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Inserts text into buffer at @a pos, applying the list of tags to the newly-inserted text.
   * Equivalent to calling insert(), then apply_tag() on the inserted text; This is just a convenience function.
   *
   * @param pos An iterator pointing to the position at which the text should be inserted.
   * @param text The text to be inserted in the buffer.
   * @param tag_names A standard C++ container of tag names.
   * @result Whether text was actually inserted
   "
      end

      operation 551593 "insert_with_tags_by_name"
	public return_type class_ref 249129 // iterator
	nparams 4
	  param in name "pos" type class_ref 249129 // iterator
	  param in name "text_begin" explicit_type "char"
	  param in name "text_end" explicit_type "char"
	  param in name "tag_names" explicit_type "Glib::StringArrayHandle"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} * ${p1}, const ${t2} * ${p2}, const ${t3} & ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} * ${p1}, const ${t2} * ${p2}, const ${t3} & ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Equivalent to calling insert(), then apply_tag() on the inserted text; This is just a convenience function.
   *
   * @param pos An iterator pointing to the position at which the text should be inserted.
   * @param text_begin The start of a UTF8 character array.
   * @param text_end The end of the UTF8 character array.
   * @param tag_names A standard C++ container of tag names.
   * @result Whether text was actually inserted
   "
      end

      operation 551721 "erase"
	public return_type class_ref 249129 // iterator
	nparams 2
	  param in name "range_begin" type class_ref 249129 // iterator
	  param in name "range_end" type class_ref 249129 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " Deletes all text between @a range_begin and @a range_end. The order of range_begin and range_end is not actually relevant.
   * This function actually emits the \"delete_range\" signal, and the default handler of that signal deletes the text.
   * Because the buffer is modified, all outstanding iterators become invalid after calling this function.
   * @param range_begin
   * @param range_end
   * @result An iterator that points to the location where text was deleted.
   "
      end

      operation 551849 "erase_interactive"
	public explicit_return_type "std::pair<iterator,bool>"
	nparams 3
	  param in name "range_begin" type class_ref 249129 // iterator
	  param in name "range_end" type class_ref 249129 // iterator
	  param in name "default_editable" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " Deletes all editable text between @a range_begin and @a range_end. The order of range_begin and range_end is not actually relevant.
   * This function actually emits the \"delete_range\" signal, and the default handler of that signal deletes the text.
   * Because the buffer is modified, all outstanding iterators become invalid after calling this function.
   *
   * @a default_editable indicates the editability of text that doesn't have a tag affecting editability applied to it.
   * Typically the result of Gtk::TextView::get_editable() is appropriate here.
   *
   * @param range_begin
   * @param range_end
   * @param default_editable Default editability of buffer
   * @result An iterator that points to the location where text was deleted, or end() is no text was deleted.
   "
      end

      operation 551977 "get_text"
	public explicit_return_type "Glib::ustring"
	nparams 3
	  param in name "start" type class_ref 249129 // iterator
	  param in name "end" type class_ref 249129 // iterator
	  param in name "include_hidden_chars" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the text in the range [ @a start , @a end ). Excludes undisplayed
   * text (text marked with tags that set the invisibility attribute) if
   *  @a include_hidden_chars  is <tt>false</tt>. Does not include characters
   * representing embedded images, so byte and character indexes into
   * the returned string do <em>not</em> correspond to byte
   * and character indexes into the buffer. Contrast with
   * get_slice().
   * @param start Start of a range.
   * @param end End of a range.
   * @param include_hidden_chars Whether to include invisible text.
   * @return An allocated UTF-8 string.
   "
      end

      operation 552105 "get_text"
	public explicit_return_type "Glib::ustring"
	nparams 1
	  param in name "include_hidden_chars" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns all the text in the buffer. Excludes undisplayed
   * text (text marked with tags that set the invisibility attribute) if
   *  @a include_hidden_chars  is <tt>false</tt>. Does not include characters
   * representing embedded images, so byte and character indexes into
   * the returned string do <em>not</em> correspond to byte
   * and character indexes into the buffer. Contrast with
   * get_slice().
   *
   * @param include_hidden_chars Whether to include invisible text.
   * @return An allocated UTF-8 string.
   "
      end

      operation 552233 "get_slice"
	public explicit_return_type "Glib::ustring"
	nparams 3
	  param in name "start" type class_ref 249129 // iterator
	  param in name "end" type class_ref 249129 // iterator
	  param in name "include_hidden_chars" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the text in the range [ @a start , @a end ). Excludes undisplayed
   * text (text marked with tags that set the invisibility attribute) if
   *  @a include_hidden_chars  is <tt>false</tt>. The returned string includes a
   * 0xFFFC character whenever the buffer contains
   * embedded images, so byte and character indexes into
   * the returned string <em>do</em> correspond to byte
   * and character indexes into the buffer. Contrast with
   * get_text(). Note that 0xFFFC can occur in normal
   * text as well, so it is not a reliable indicator that a pixbuf or
   * widget is in the buffer.
   * @param start Start of a range.
   * @param end End of a range.
   * @param include_hidden_chars Whether to include invisible text.
   * @return An allocated UTF-8 string.
   "
      end

      operation 552361 "insert_pixbuf"
	public return_type class_ref 249129 // iterator
	nparams 2
	  param in name "pos" type class_ref 249129 // iterator
	  param in name "pixbuf" explicit_type "Glib::RefPtr<Gdk::Pixbuf>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 552489 "insert_child_anchor"
	public return_type class_ref 249129 // iterator
	nparams 2
	  param in name "pos" type class_ref 249129 // iterator
	  param in name "anchor" explicit_type "Glib::RefPtr<ChildAnchor>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 552617 "create_child_anchor"
	public explicit_return_type "Glib::RefPtr<ChildAnchor>"
	nparams 1
	  param in name "pos" type class_ref 249129 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 552745 "create_mark"
	public explicit_return_type "Glib::RefPtr<TextBuffer::Mark>"
	nparams 3
	  param in name "mark_name" explicit_type "Glib::ustring"
	  param in name "where" type class_ref 249129 // iterator
	  param in name "left_gravity" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Creates a mark at position @a where . The mark can be retrieved by name using
   * get_mark(). If a mark has left gravity, and text is
   * inserted at the mark's current location, the mark will be moved to
   * the left of the newly-inserted text. If the mark has right gravity
   * ( @a left_gravity  = <tt>false</tt>), the mark will end up on the right of
   * newly-inserted text. The standard left-to-right cursor is a mark
   * with right gravity (when you type, the cursor stays on the right
   * side of the text you're typing).
   * 
   * Emits the \"mark_set\" signal as notification of the mark's initial
   * placement.
   * @param mark_name Name for mark, or <tt>0</tt>.
   * @param where Location to place mark.
   * @param left_gravity Whether the mark has left gravity.
   * @return The new Gtk::TextMark object.
   "
      end

      operation 552873 "create_mark"
	public explicit_return_type "Glib::RefPtr<Mark>"
	nparams 2
	  param in name "where" type class_ref 249129 // iterator
	  param in name "left_gravity" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Create an anonymous mark. 
* Creates an anonymous mark at position @a where.
   *
   * If a mark has left gravity, and text is
   * inserted at the mark's current location, the mark will be moved to
   * the left of the newly-inserted text. If the mark has right gravity
   * ( @a left_gravity  = <tt>false</tt>), the mark will end up on the right of
   * newly-inserted text. The standard left-to-right cursor is a mark
   * with right gravity (when you type, the cursor stays on the right
   * side of the text you're typing).
   *
   * Emits the \"mark_set\" signal as notification of the mark's initial
   * placement.
   * @param where Location to place mark.
   * @param left_gravity Whether the mark has left gravity.
   * @return The new Gtk::TextMark object.
   "
      end

      operation 553001 "move_mark"
	public explicit_return_type "void"
	nparams 2
	  param in name "mark" explicit_type "Glib::RefPtr<Mark>"
	  param in name "where" type class_ref 249129 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves @a mark  to the new location @a where . Emits the \"mark_set\" signal
   * as notification of the move.
   * @param mark A Gtk::TextMark.
   * @param where New location for @a mark  in @a buffer .
   "
      end

      operation 553129 "delete_mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "mark" explicit_type "Glib::RefPtr<Mark>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Deletes @a mark , so that it's no longer located anywhere in the
   * buffer. Removes the reference the buffer holds to the mark, so if
   * you don't keep a Glib::RefPtr to the mark, it will be freed. Even
   * if the mark isn't freed, most operations on @a mark  become
   * invalid. There is no way to undelete a
   * mark. Gtk::TextMark::get_deleted() will return <tt>true</tt> after this
   * function has been called on a mark; Gtk::TextMark::get_deleted()
   * indicates that a mark no longer belongs to a buffer. The \"mark_deleted\"
   * signal will be emitted as notification after the mark is deleted.
   * @param mark A Gtk::TextMark in @a buffer .
   "
      end

      operation 553257 "get_mark"
	public explicit_return_type "Glib::RefPtr<TextBuffer::Mark>"
	nparams 1
	  param in name "name" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the mark named @a name  in buffer @a buffer , or <tt>0</tt> if no such
   * mark exists in the buffer.
   * @param name A mark name.
   * @return A Gtk::TextMark, or <tt>0</tt>.
   "
      end

      operation 553385 "get_mark"
	const public explicit_return_type "Glib::RefPtr<const TextBuffer::Mark>"
	nparams 1
	  param in name "name" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the mark named @a name  in buffer @a buffer , or <tt>0</tt> if no such
   * mark exists in the buffer.
   * @param name A mark name.
   * @return A Gtk::TextMark, or <tt>0</tt>.
   "
      end

      operation 553513 "move_mark_by_name"
	public explicit_return_type "void"
	nparams 2
	  param in name "name" explicit_type "Glib::ustring"
	  param in name "where" type class_ref 249129 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves the mark named @a name  (which must exist) to location @a where .
   * See move_mark() for details.
   * @param name Name of a mark.
   * @param where New location for mark.
   "
      end

      operation 553641 "delete_mark_by_name"
	public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Deletes the mark named @a name ; the mark must exist. See
   * delete_mark() for details.
   * @param name Name of a mark in @a buffer .
   "
      end

      operation 553769 "get_insert"
	public explicit_return_type "Glib::RefPtr<TextBuffer::Mark>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the mark that represents the cursor (insertion point).
   * Equivalent to calling get_mark() to get the mark
   * named \"insert\", but very slightly more efficient, and involves less
   * typing.
   * @return Insertion point mark.
   "
      end

      operation 553897 "get_selection_bound"
	public explicit_return_type "Glib::RefPtr<TextBuffer::Mark>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the mark that represents the selection bound.  Equivalent
   * to calling get_mark() to get the mark named
   * \"selection_bound\", but very slightly more efficient, and involves
   * less typing.
   * 
   * The currently-selected text in @a buffer  is the region between the
   * \"selection_bound\" and \"insert\" marks. If \"selection_bound\" and
   * \"insert\" are in the same place, then there is no current selection.
   * get_selection_bounds() is another convenient function
   * for handling the selection, if you just want to know whether there's a
   * selection and what its bounds are.
   * @return Selection bound mark.
   "
      end

      operation 554025 "place_cursor"
	public explicit_return_type "void"
	nparams 1
	  param in name "where" type class_ref 249129 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* This function moves the \"insert\" and \"selection_bound\" marks
   * simultaneously.  If you move them to the same place in two steps
   * with move_mark(), you will temporarily select a
   * region in between their old and new locations, which can be pretty
   * inefficient since the temporarily-selected region will force stuff
   * to be recalculated. This function moves them as a unit, which can
   * be optimized.
   * @param where Where to put the cursor.
   "
      end

      operation 554153 "apply_tag"
	public explicit_return_type "void"
	nparams 3
	  param in name "tag" explicit_type "Glib::RefPtr<Tag>"
	  param in name "start" type class_ref 249129 // iterator
	  param in name "end" type class_ref 249129 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Emits the \"apply_tag\" signal on @a buffer . The default
   * handler for the signal applies @a tag  to the given range.
   *  @a start  and @a end  do not have to be in order.
   * @param tag A Gtk::TextTag.
   * @param start One bound of range to be tagged.
   * @param end Other bound of range to be tagged.
   "
      end

      operation 554281 "remove_tag"
	public explicit_return_type "void"
	nparams 3
	  param in name "tag" explicit_type "Glib::RefPtr<Tag>"
	  param in name "start" type class_ref 249129 // iterator
	  param in name "end" type class_ref 249129 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Emits the \"remove_tag\" signal. The default handler for the signal
   * removes all occurrences of @a tag  from the given range. @a start  and
   *  @a end  don't have to be in order.
   * @param tag A Gtk::TextTag.
   * @param start One bound of range to be untagged.
   * @param end Other bound of range to be untagged.
   "
      end

      operation 554409 "apply_tag_by_name"
	public explicit_return_type "void"
	nparams 3
	  param in name "name" explicit_type "Glib::ustring"
	  param in name "start" type class_ref 249129 // iterator
	  param in name "end" type class_ref 249129 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Calls Gtk::TextTagTable::lookup() on the buffer's tag table to
   * get a Gtk::TextTag, then calls apply_tag().
   * @param name Name of a named Gtk::TextTag.
   * @param start One bound of range to be tagged.
   * @param end Other bound of range to be tagged.
   "
      end

      operation 554537 "remove_tag_by_name"
	public explicit_return_type "void"
	nparams 3
	  param in name "name" explicit_type "Glib::ustring"
	  param in name "start" type class_ref 249129 // iterator
	  param in name "end" type class_ref 249129 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Calls Gtk::TextTagTable::lookup() on the buffer's tag table to
   * get a Gtk::TextTag, then calls remove_tag().
   * @param name Name of a Gtk::TextTag.
   * @param start One bound of range to be untagged.
   * @param end Other bound of range to be untagged.
   "
      end

      operation 554665 "remove_all_tags"
	public explicit_return_type "void"
	nparams 2
	  param in name "start" type class_ref 249129 // iterator
	  param in name "end" type class_ref 249129 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Removes all tags in the range between @a start  and @a end .  Be careful
   * with this function; it could remove tags added in code unrelated to
   * the code you're currently writing. That is, using this function is
   * probably a bad idea if you have two or more unrelated code sections
   * that add tags.
   * @param start One bound of range to be untagged.
   * @param end Other bound of range to be untagged.
   "
      end

      operation 554793 "create_tag"
	public explicit_return_type "Glib::RefPtr<Tag>"
	nparams 1
	  param in name "tag_name" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Creates a tag and adds it to the tag table for buffer. Equivalent to calling Gtk::TextBuffer::Tag::create() and then adding
   * the tag to the buffer's tag table.
   * A tag called @a tag_name must not already exist in the tag table for this buffer.
   *
   * @param tag_name The name for the new tag.
   * @result The new tag.
   "
      end

      operation 554921 "create_tag"
	public explicit_return_type "Glib::RefPtr<Tag>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Creates an anoymous tag and adds it to the tag table for buffer. Equivalent to calling Gtk::TextBuffer::Tag::create() and then adding
   * the tag to the buffer's tag table.
   *
   * @result The new tag.
   "
      end

      operation 555049 "get_iter_at_line_offset"
	public return_type class_ref 249129 // iterator
	nparams 2
	  param in name "line_number" explicit_type "int"
	  param in name "char_offset" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 555177 "get_iter_at_line_index"
	public return_type class_ref 249129 // iterator
	nparams 2
	  param in name "line_number" explicit_type "int"
	  param in name "byte_index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 555305 "get_iter_at_offset"
	public return_type class_ref 249129 // iterator
	nparams 1
	  param in name "char_offset" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 555433 "get_iter_at_line"
	public return_type class_ref 249129 // iterator
	nparams 1
	  param in name "line_number" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 555561 "begin"
	public return_type class_ref 249129 // iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 555689 "end"
	public return_type class_ref 249129 // iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 555817 "get_bounds"
	public explicit_return_type "void"
	nparams 2
	  param inout name "range_begin" type class_ref 249129 // iterator
	  param inout name "range_end" type class_ref 249129 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 555945 "get_iter_at_mark"
	public return_type class_ref 249129 // iterator
	nparams 1
	  param in name "mark" explicit_type "Glib::RefPtr<Mark>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Get the current position of a mark.
   * @param mark The @link Gtk::TextMark Gtk::TextBuffer::Mark@endlink
   * @result An iterator that points to the position of the @a mark.
   "
      end

      operation 556073 "get_iter_at_child_anchor"
	public return_type class_ref 249129 // iterator
	nparams 1
	  param in name "anchor" explicit_type "Glib::RefPtr<ChildAnchor>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Get the current position of an anchor.
   * @param anchor A @link Gtk::TextChildAnchor Gtk::TextBuffer::Anchor@endlink that appears in the buffer.
   * @result An iterator that points to the position of the @a anchor.
   "
      end

      operation 556201 "get_modified"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Indicates whether the buffer has been modified since the last call
   * to set_modified() set the modification flag to
   * <tt>false</tt>. Used for example to enable a \"save\" function in a text
   * editor.
   * @return <tt>true</tt> if the buffer has been modified.
   "
      end

      operation 556329 "set_modified"
	public explicit_return_type "void"
	nparams 1
	  param in name "setting" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Used to keep track of whether the buffer has been modified since the
   * last time it was saved. Whenever the buffer is saved to disk, call
   * gtk_text_buffer_set_modified ( @a buffer , <tt>false</tt>). When the buffer is modified,
   * it will automatically toggled on the modified bit again. When the modified
   * bit flips, the buffer emits a \"modified_changed\" signal.
   * @param setting Modification flag setting.
   "
      end

      operation 556457 "add_selection_clipboard"
	public explicit_return_type "void"
	nparams 1
	  param in name "clipboard" explicit_type "Glib::RefPtr<Clipboard>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Adds @a clipboard  to the list of clipboards in which the selection contents
   * of @a buffer  are available. In most cases, @a clipboard  will be the Gtk::Clipboard
   * of type Gdk::SELECTION_PRIMARY for a view of @a buffer .
   * @param clipboard A Gtk::Clipboard.
   "
      end

      operation 556585 "remove_selection_clipboard"
	public explicit_return_type "void"
	nparams 1
	  param in name "clipboard" explicit_type "Glib::RefPtr<Clipboard>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Removes a Gtk::Clipboard added with add_selection_clipboard()
   * @param clipboard A Gtk::Clipboard added to @a buffer  by add_selection_clipboard().
   "
      end

      operation 556713 "cut_clipboard"
	public explicit_return_type "void"
	nparams 2
	  param in name "clipboard" explicit_type "Glib::RefPtr<Clipboard>"
	  param in name "default_editable" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Copies the currently-selected text to a clipboard, then deletes
   * said text if it's editable.
   * @param clipboard The Gtk::Clipboard object to cut to.
   * @param default_editable Default editability of the buffer.
   "
      end

      operation 556841 "copy_clipboard"
	public explicit_return_type "void"
	nparams 1
	  param in name "clipboard" explicit_type "Glib::RefPtr<Clipboard>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Copies the currently-selected text to a clipboard.
   * @param clipboard The Gtk::Clipboard object to copy to.
   "
      end

      operation 556969 "paste_clipboard"
	public explicit_return_type "void"
	nparams 3
	  param in name "clipboard" explicit_type "Glib::RefPtr<Clipboard>"
	  param in name "override_location" type class_ref 249129 // iterator
	  param in name "default_editable" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 557097 "paste_clipboard"
	public explicit_return_type "void"
	nparams 2
	  param in name "clipboard" explicit_type "Glib::RefPtr<Clipboard>"
	  param in name "default_editable" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 557225 "get_selection_bounds"
	const public explicit_return_type "bool"
	nparams 2
	  param inout name "start" type class_ref 249129 // iterator
	  param inout name "end" type class_ref 249129 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns <tt>true</tt> if some text is selected; places the bounds
   * of the selection in @a start  and @a end  (if the selection has length 0,
   * then @a start  and @a end  are filled in with the same value).
   *  @a start  and @a end  will be in ascending order. If @a start  and @a end  are
   * <tt>0</tt>, then they are not filled in, but the return value still indicates
   * whether text is selected.
   * @param start Iterator to initialize with selection start.
   * @param end Iterator to initialize with selection end.
   * @return Whether the selection has nonzero length.
   "
      end

      operation 557353 "erase_selection"
	public explicit_return_type "bool"
	nparams 2
	  param in name "interactive" explicit_type "bool"
	    defaultvalue " true"
	  param in name "default_editable" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Deletes the range between the \"insert\" and \"selection_bound\" marks,
   * that is, the currently-selected text. If @a interactive  is <tt>true</tt>,
   * the editability of the selection will be considered (users can't delete
   * uneditable text).
   * @param interactive Whether the deletion is caused by user interaction.
   * @param default_editable Whether the buffer is editable by default.
   * @return Whether there was a non-empty selection to delete.
   "
      end

      operation 557481 "select_range"
	public explicit_return_type "void"
	nparams 2
	  param in name "ins" type class_ref 249129 // iterator
	  param in name "bound" type class_ref 249129 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* This function moves the \"insert\" and \"selection_bound\" marks
   * simultaneously.  If you move them in two steps
   * with move_mark(), you will temporarily select a
   * region in between their old and new locations, which can be pretty
   * inefficient since the temporarily-selected region will force stuff
   * to be recalculated. This function moves them as a unit, which can
   * be optimized.
   * 
   * Since: 2.4
   * @param ins Where to put the \"insert\" mark.
   * @param bound Where to put the \"selection_bound\" mark.
   "
      end

      operation 557609 "begin_user_action"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " Called to specify atomic user actions, used to implement undo 
* Called to indicate that the buffer operations between here and a
   * call to end_user_action() are part of a single
   * user-visible operation. The operations between
   * begin_user_action() and
   * end_user_action() can then be grouped when creating
   * an undo stack. Gtk::TextBuffer maintains a count of calls to
   * begin_user_action() that have not been closed with
   * a call to end_user_action(), and emits the \"begin_user_action\"
   * and \"end_user_action\" signals only for the outermost pair of calls.
   * This allows you to build user actions from other user actions.
   * 
   * The \"interactive\" buffer mutation functions, such as
   * insert_interactive(), automatically call begin/end
   * user action around the buffer operations they perform, so there's
   * no need to add extra calls if you user action consists solely of a
   * single call to one of those functions.
   "
      end

      operation 557737 "end_user_action"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Should be paired with a call to begin_user_action().
   * See that function for a full explanation.
   "
      end

      operation 557865 "signal_insert"
	public explicit_return_type "Glib::SignalProxy3< void,const TextBuffer::iterator&,const Glib::ustring&,int >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 557993 "signal_insert_pixbuf"
	public explicit_return_type "Glib::SignalProxy2< void,const TextBuffer::iterator&,const Glib::RefPtr<Gdk::Pixbuf>& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 558121 "signal_insert_child_anchor"
	public explicit_return_type "Glib::SignalProxy2< void,const TextBuffer::iterator&,const Glib::RefPtr<ChildAnchor>& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 558249 "signal_erase"
	public explicit_return_type "Glib::SignalProxy2< void,const TextBuffer::iterator&,const TextBuffer::iterator& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 558377 "signal_changed"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 558505 "signal_modified_changed"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 558633 "signal_mark_set"
	public explicit_return_type "Glib::SignalProxy2< void,const TextBuffer::iterator&,const Glib::RefPtr<TextBuffer::Mark>& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 558761 "signal_mark_deleted"
	public explicit_return_type "Glib::SignalProxy1< void,const Glib::RefPtr<TextBuffer::Mark>& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 558889 "signal_apply_tag"
	public explicit_return_type "Glib::SignalProxy3< void,const Glib::RefPtr<TextBuffer::Tag>&,const TextBuffer::iterator&,const TextBuffer::iterator& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 559017 "signal_remove_tag"
	public explicit_return_type "Glib::SignalProxy3< void,const Glib::RefPtr<TextBuffer::Tag>&,const TextBuffer::iterator&,const TextBuffer::iterator& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 559145 "signal_begin_user_action"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 559273 "signal_end_user_action"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 559401 "on_insert"
	cpp_virtual protected explicit_return_type "void"
	nparams 3
	  param in name "pos" type class_ref 249129 // iterator
	  param in name "text" explicit_type "Glib::ustring"
	  param in name "bytes" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 559529 "on_insert_pixbuf"
	cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param in name "pos" type class_ref 249129 // iterator
	  param in name "pixbuf" explicit_type "Glib::RefPtr<Gdk::Pixbuf>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 559657 "on_insert_child_anchor"
	cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param in name "pos" type class_ref 249129 // iterator
	  param in name "anchor" explicit_type "Glib::RefPtr<ChildAnchor>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 559785 "on_erase"
	cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param in name "range_begin" type class_ref 249129 // iterator
	  param in name "range_end" type class_ref 249129 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 559913 "on_changed"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 560041 "on_modified_changed"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 560169 "on_mark_set"
	cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param in name "location" type class_ref 249129 // iterator
	  param in name "mark" explicit_type "Glib::RefPtr<TextBuffer::Mark>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 560297 "on_mark_deleted"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "mark" explicit_type "Glib::RefPtr<TextBuffer::Mark>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 560425 "on_apply_tag"
	cpp_virtual protected explicit_return_type "void"
	nparams 3
	  param in name "tag" explicit_type "Glib::RefPtr<TextBuffer::Tag>"
	  param in name "range_begin" type class_ref 249129 // iterator
	  param in name "range_end" type class_ref 249129 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 560553 "on_remove_tag"
	cpp_virtual protected explicit_return_type "void"
	nparams 3
	  param in name "tag" explicit_type "Glib::RefPtr<TextBuffer::Tag>"
	  param in name "range_begin" type class_ref 249129 // iterator
	  param in name "range_end" type class_ref 249129 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 560681 "on_begin_user_action"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 560809 "on_end_user_action"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 250025 "TextChildAnchor"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/textchildanchor.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
TODO: Add a real class description.
* Typedefed as Gtk::TextBuffer::ChildAnchor.
 * @ingroup TextView
 "
      class 250281 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 250025 // TextChildAnchor
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 213801 // <realization>
	  relation 213801 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 213801 // <realization>
	    b parent class_ref 250025 // TextChildAnchor
	end
      end

      class 250537 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "TextChildAnchor_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 250665 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkTextChildAnchor"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 250793 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkTextChildAnchorClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 214185 // textchildanchor_class_ (<directional composition>)
	relation 214185 *-->
	  a role_name "textchildanchor_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 214185 // textchildanchor_class_ (<directional composition>)
	  b parent class_ref 250537 // CppClassType
      end

      operation 560937 "TextChildAnchor"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 250025 // TextChildAnchor
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 561065 "operator ="
	private return_type class_ref 250025 // TextChildAnchor
	nparams 1
	  param in name "" type class_ref 250025 // TextChildAnchor
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 561193 "TextChildAnchor"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 561321 "TextChildAnchor"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkTextChildAnchor"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 561449 "~TextChildAnchor"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 561577 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 561705 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 561833 "gobj"
	cpp_inline public explicit_return_type "GtkTextChildAnchor"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTextChildAnchor*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 561961 "gobj"
	const cpp_inline public explicit_return_type "GtkTextChildAnchor"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTextChildAnchor*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 562089 "gobj_copy"
	public explicit_return_type "GtkTextChildAnchor"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs."
      end

      operation 562217 "TextChildAnchor"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 562345 "create"
	class_operation public explicit_return_type "Glib::RefPtr<TextChildAnchor>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 562473 "get_widgets"
	public explicit_return_type "Glib::ListHandle<Widget*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets a list of all widgets anchored at this child anchor.
   * @return List of widgets anchored at @a anchor .
   "
      end

      operation 562601 "get_widgets"
	const public explicit_return_type "Glib::ListHandle<const Widget*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets a list of all widgets anchored at this child anchor.
   * @return List of widgets anchored at @a anchor .
   "
      end

      operation 562729 "get_deleted"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Determines whether a child anchor has been deleted from
   * the buffer. Keep in mind that the child anchor will be
   * unreferenced when removed from the buffer, so you need to
   * hold your own reference (with Glib::object_ref()) if you plan
   * to use this function  @htmlonly&mdash;@endhtmlonly  otherwise all deleted child anchors
   * will also be finalized.
   * @return <tt>true</tt> if the child anchor has been deleted from its buffer.
   "
      end
    end

    class 280233 "TextDirection"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 "
      attribute 186793 "TEXT_DIR_NONE"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 186921 "TEXT_DIR_LTR"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 187049 "TEXT_DIR_RTL"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 249001 "TextIter"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/textiter.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Typefed as Gtk::TextBuffer::iterator.
 * An iterator represents a position between two characters in the text buffer. Iterators are not valid indefinitely; whenever the buffer is
 * modified in a way that affects the number of characters in the buffer, all outstanding iterators become invalid. (Note that
 * deleting 5 characters and then reinserting 5 still invalidates iterators, though you end up with the same number of characters
 * you pass through a state with a different number).
 *
 * Because of this, iterators can't be used to preserve positions across buffer modifications. To preserve a position, the
 * @link Gtk::TextMark Gtk::TextBuffer::Mark@endlink object is ideal.
 *
 * You can iterate over characters, words, lines, and sentences,
 * but operator*() and operator++() deal only in characters.
 *
 * TODO: Maybe we should have separate iterators for words, lines, and sentences.
 * @ingroup TextView
 "
      class 251305 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 249001 // TextIter
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 214441 // <realization>
	  relation 214441 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 214441 // <realization>
	    b parent class_ref 249001 // TextIter
	end
      end

      class 251433 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkTextIter"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 562985 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 563113 "TextIter"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 563241 "TextIter"
	public explicit_return_type ""
	nparams 1
	  param in name "gobject" explicit_type "GtkTextIter"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 563369 "gobj"
	cpp_inline public explicit_return_type "GtkTextIter"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return &gobject_; };
"
	
	
	
	
	comment " always takes a copy
/Provides access to the underlying C instance."
      end

      operation 563497 "gobj"
	const cpp_inline public explicit_return_type "GtkTextIter"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return &gobject_; };
"
	
	
	
	
	comment "/Provides access to the underlying C instance."
      end

      attribute 205609 "gobject_"
	protected explicit_type "GtkTextIter"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      class 251561 "iterator_category"
	visibility package stereotype "typedef" explicit_base_type "std::bidirectional_iterator_tag"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 251689 "value_type"
	visibility package stereotype "typedef" explicit_base_type "gunichar"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 251817 "difference_type"
	visibility package stereotype "typedef" explicit_base_type "int"
	cpp_decl "${comment}typedef ${type}                             ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 251945 "reference"
	visibility package stereotype "typedef" base_type class_ref 251689 // value_type
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 214569 // <realization>
	  relation 214569 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 214569 // <realization>
	    b parent class_ref 251689 // value_type
	end
      end

      class 252073 "pointer"
	visibility package stereotype "typedef" explicit_base_type "void"
	cpp_decl "${comment}typedef ${type}                            ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 563625 "operator ++"
	cpp_inline public return_type class_ref 249001 // TextIter
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Alias for forward_char(). "
      end

      operation 563753 "operator ++"
	cpp_inline public return_type class_ref 249001 // TextIter
	nparams 1
	  param in name "" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 563881 "operator --"
	cpp_inline public return_type class_ref 249001 // TextIter
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Alias for backward_char(). "
      end

      operation 564009 "operator --"
	cpp_inline public return_type class_ref 249001 // TextIter
	nparams 1
	  param in name "" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 564137 "operator *"
	const cpp_inline public return_type class_ref 251689 // value_type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Alias for get_char(). "
      end

      operation 564265 "operator bool"
	const cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Alias for !is_end(). "
      end

      class 252201 "PredicateAdapter"
	visibility package stereotype "struct"
	nformals 1
	formal name "Predicate" type "class" explicit_default_value ""
	  explicit_extends ""
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 205737 "predicate_"
	  public explicit_type "Predicate"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 564393 "PredicateAdapter"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param in name "predicate" explicit_type "Predicate"
	  cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}
:
  predicate_ (predicate)
${throw}{
${body}}
"
	  
	  
	  
	  
	end

	operation 564521 "gtk_callback"
	  class_operation public explicit_return_type "gboolean"
	  nparams 2
	    param in name "uc" explicit_type "gunichar"
	    param inout name "user_data" explicit_type "void"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "// static

${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	  
	  
	  
	  
	end
      end

      operation 564649 "forward_find_char_impl"
	protected explicit_return_type "bool"
	nparams 3
	  param in name "predicate" explicit_type "GtkTextCharPredicate"
	  param inout name "user_data" explicit_type "void"
	  param in name "limit" explicit_type "GtkTextIter"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} * ${p1}, const ${t2} * ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}, const ${t2} * ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Advances @a iter , calling @a pred  on each character. If
   *  @a pred  returns <tt>true</tt>, returns <tt>true</tt> and stops scanning.
   * If @a pred  never returns <tt>true</tt>, @a iter  is set to @a limit  if
   *  @a limit  is non-<tt>0</tt>, otherwise to the end iterator.
   * @param pred A function to be called on each character.
   * @param user_data User data for @a pred .
   * @param limit Search limit, or <tt>0</tt> for none.
   * @return Whether a match was found.
   "
      end

      operation 564777 "backward_find_char_impl"
	protected explicit_return_type "bool"
	nparams 3
	  param in name "predicate" explicit_type "GtkTextCharPredicate"
	  param inout name "user_data" explicit_type "void"
	  param in name "limit" explicit_type "GtkTextIter"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} * ${p1}, const ${t2} * ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}, const ${t2} * ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Same as gtk_text_iter_forward_find_char(), but goes backward from @a iter .
   * @param pred Function to be called on each character.
   * @param user_data User data for @a pred .
   * @param limit Search limit, or <tt>0</tt> for none.
   * @return Whether a match was found.
   "
      end

      operation 564905 "get_buffer"
	const public explicit_return_type "Glib::RefPtr<TextBuffer>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the Gtk::TextBuffer this iterator is associated with.
   * @return The buffer.
   "
      end

      operation 565033 "get_offset"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the character offset of an iterator.
   * Each character in a Gtk::TextBuffer has an offset,
   * starting with 0 for the first character in the buffer.
   * Use Gtk::TextBuffer::get_iter_at_offset() to convert an
   * offset back into an iterator.
   * @return A character offset.
   "
      end

      operation 565161 "get_line"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the line number containing the iterator. Lines in
   * a Gtk::TextBuffer are numbered beginning with 0 for the first
   * line in the buffer.
   * @return A line number.
   "
      end

      operation 565289 "get_line_offset"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the character offset of the iterator,
   * counting from the start of a newline-terminated line.
   * The first character on the line has offset 0.
   * @return Offset from start of line.
   "
      end

      operation 565417 "get_line_index"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the byte index of the iterator, counting
   * from the start of a newline-terminated line.
   * Remember that Gtk::TextBuffer encodes text in
   * UTF-8, and that characters can require a variable
   * number of bytes to represent.
   * @return Distance from start of line, in bytes.
   "
      end

      operation 565545 "get_visible_line_offset"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the offset in characters from the start of the
   * line to the given @a iter , not counting characters that
   * are invisible due to tags with the \"invisible\" flag
   * toggled on.
   * @return Offset in visible characters from the start of the line.
   "
      end

      operation 565673 "get_visible_line_index"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the number of bytes from the start of the
   * line to the given @a iter , not counting bytes that
   * are invisible due to tags with the \"invisible\" flag
   * toggled on.
   * @return Byte index of @a iter  with respect to the start of the line.
   "
      end

      operation 565801 "get_char"
	const public explicit_return_type "gunichar"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the Unicode character at this iterator.  (Equivalent to
   * operator* on a C++ iterator.)  If the element at this iterator is a
   * non-character element, such as an image embedded in the buffer, the
   * Unicode \"unknown\" character 0xFFFC is returned. If invoked on
   * the end iterator, zero is returned; zero is not a valid Unicode character.
   * So you can write a loop which ends when gtk_text_iter_get_char()
   * returns 0.
   * @return A Unicode character, or 0 if @a iter  is not dereferenceable.
   "
      end

      operation 565929 "get_slice"
	const public explicit_return_type "Glib::ustring"
	nparams 1
	  param in name "end" type class_ref 249001 // TextIter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the text in the given range. A \"slice\" is an array of
   * characters encoded in UTF-8 format, including the Unicode \"unknown\"
   * character 0xFFFC for iterable non-character elements in the buffer,
   * such as images.  Because images are encoded in the slice, byte and
   * character offsets in the returned array will correspond to byte
   * offsets in the text buffer. Note that 0xFFFC can occur in normal
   * text as well, so it is not a reliable indicator that a pixbuf or
   * widget is in the buffer.
   * @param end Iterator at end of a range.
   * @return Slice of text from the buffer.
   "
      end

      operation 566057 "get_text"
	const public explicit_return_type "Glib::ustring"
	nparams 1
	  param in name "end" type class_ref 249001 // TextIter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns <em>text</em> in the given range.  If the range
   * contains non-text elements such as images, the character and byte
   * offsets in the returned string will not correspond to character and
   * byte offsets in the buffer. If you want offsets to correspond, see
   * gtk_text_iter_get_slice().
   * @param end Iterator at end of a range.
   * @return Array of characters from the buffer.
   "
      end

      operation 566185 "get_visible_slice"
	const public explicit_return_type "Glib::ustring"
	nparams 1
	  param in name "end" type class_ref 249001 // TextIter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Like gtk_text_iter_get_slice(), but invisible text is not included.
   * Invisible text is usually invisible because a Gtk::TextTag with the
   * \"invisible\" attribute turned on has been applied to it.
   * @param end Iterator at end of range.
   * @return Slice of text from the buffer.
   "
      end

      operation 566313 "get_visible_text"
	const public explicit_return_type "Glib::ustring"
	nparams 1
	  param in name "end" type class_ref 249001 // TextIter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Like gtk_text_iter_get_text(), but invisible text is not included.
   * Invisible text is usually invisible because a Gtk::TextTag with the
   * \"invisible\" attribute turned on has been applied to it.
   * @param end Iterator at end of range.
   * @return String containing visible text in the range.
   "
      end

      operation 566441 "get_pixbuf"
	const public explicit_return_type "Glib::RefPtr<Gdk::Pixbuf>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* If the element at @a iter  is a pixbuf, the pixbuf is returned
   * (with no new reference count added). Otherwise,
   * <tt>0</tt> is returned.
   * @return The pixbuf at @a iter .
   "
      end

      operation 566569 "get_marks"
	public explicit_return_type "Glib::SListHandle< Glib::RefPtr<TextMark> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns a list of all Gtk::TextMark at this location. Because marks
   * are not iterable (they don't take up any \"space\" in the buffer,
   * they are just marks in between iterable locations), multiple marks
   * can exist in the same place. The returned list is not in any
   * meaningful order.
   * @return List of Gtk::TextMark.
   "
      end

      operation 566697 "get_marks"
	const public explicit_return_type "Glib::SListHandle< Glib::RefPtr<const TextMark> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns a list of all Gtk::TextMark at this location. Because marks
   * are not iterable (they don't take up any \"space\" in the buffer,
   * they are just marks in between iterable locations), multiple marks
   * can exist in the same place. The returned list is not in any
   * meaningful order.
   * @return List of Gtk::TextMark.
   "
      end

      operation 566825 "get_child_anchor"
	public explicit_return_type "Glib::RefPtr<TextChildAnchor>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* If the location at @a iter  contains a child anchor, the
   * anchor is returned (with no new reference count added). Otherwise,
   * <tt>0</tt> is returned.
   * @return The anchor at @a iter .
   "
      end

      operation 566953 "get_child_anchor"
	const public explicit_return_type "Glib::RefPtr<const TextChildAnchor>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* If the location at @a iter  contains a child anchor, the
   * anchor is returned (with no new reference count added). Otherwise,
   * <tt>0</tt> is returned.
   * @return The anchor at @a iter .
   "
      end

      operation 567081 "get_toggled_tags"
	public explicit_return_type "Glib::SListHandle< Glib::RefPtr<TextTag> >"
	nparams 1
	  param in name "toggled_on" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns a list of Gtk::TextTag that are toggled on or off at this
   * point.  (If @a toggled_on  is <tt>true</tt>, the list contains tags that are
   * toggled on.) If a tag is toggled on at @a iter , then some non-empty
   * range of characters following @a iter  has that tag applied to it.  If
   * a tag is toggled off, then some non-empty range following @a iter 
   * does <em>not</em> have the tag applied to it.
   * @param toggled_on <tt>true</tt> to get toggled-on tags.
   * @return Tags toggled at this point.
   "
      end

      operation 567209 "get_toggled_tags"
	const public explicit_return_type "Glib::SListHandle< Glib::RefPtr<const TextTag> >"
	nparams 1
	  param in name "toggled_on" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns a list of Gtk::TextTag that are toggled on or off at this
   * point.  (If @a toggled_on  is <tt>true</tt>, the list contains tags that are
   * toggled on.) If a tag is toggled on at @a iter , then some non-empty
   * range of characters following @a iter  has that tag applied to it.  If
   * a tag is toggled off, then some non-empty range following @a iter 
   * does <em>not</em> have the tag applied to it.
   * @param toggled_on <tt>true</tt> to get toggled-on tags.
   * @return Tags toggled at this point.
   "
      end

      operation 567337 "begins_tag"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "tag" explicit_type "Glib::RefPtr<const TextTag>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns <tt>true</tt> if @a tag  is toggled on at exactly this point. If @a tag 
   * is <tt>0</tt>, returns <tt>true</tt> if any tag is toggled on at this point. Note
   * that the gtk_text_iter_begins_tag() returns <tt>true</tt> if @a iter  is the
   * <em>start</em> of the tagged range;
   * gtk_text_iter_has_tag() tells you whether an iterator is
   * <em>within</em> a tagged range.
   * @param tag A Gtk::TextTag, or <tt>0</tt>.
   * @return Whether @a iter  is the start of a range tagged with @a tag .
   "
      end

      operation 567465 "begins_tag"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 567593 "ends_tag"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "tag" explicit_type "Glib::RefPtr<const TextTag>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns <tt>true</tt> if @a tag  is toggled off at exactly this point. If @a tag 
   * is <tt>0</tt>, returns <tt>true</tt> if any tag is toggled off at this point. Note
   * that the gtk_text_iter_ends_tag() returns <tt>true</tt> if @a iter  is the
   * <em>end</em> of the tagged range;
   * gtk_text_iter_has_tag() tells you whether an iterator is
   * <em>within</em> a tagged range.
   * @param tag A Gtk::TextTag, or <tt>0</tt>.
   * @return Whether @a iter  is the end of a range tagged with @a tag .
   "
      end

      operation 567721 "ends_tag"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 567849 "toggles_tag"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "tag" explicit_type "Glib::RefPtr<const TextTag>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* This is equivalent to (gtk_text_iter_begins_tag() ||
   * gtk_text_iter_ends_tag()), i.e.\\ it tells you whether a range with
   *  @a tag  applied to it begins <em>or</em> ends at @a iter .
   * @param tag A Gtk::TextTag, or <tt>0</tt>.
   * @return Whether @a tag  is toggled on or off at @a iter .
   "
      end

      operation 567977 "toggles_tag"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 568105 "has_tag"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "tag" explicit_type "Glib::RefPtr<const TextTag>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns <tt>true</tt> if @a iter  is within a range tagged with @a tag .
   * @param tag A Gtk::TextTag.
   * @return Whether @a iter  is tagged with @a tag .
   "
      end

      operation 568233 "has_tag"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 568361 "get_tags"
	public explicit_return_type "Glib::SListHandle< Glib::RefPtr<TextTag> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns a list of tags that apply to @a iter , in ascending order of
   * priority (highest-priority tags are last).
   * @return List of Gtk::TextTag.
   "
      end

      operation 568489 "get_tags"
	const public explicit_return_type "Glib::SListHandle< Glib::RefPtr<const TextTag> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns a list of tags that apply to @a iter , in ascending order of
   * priority (highest-priority tags are last).
   * @return List of Gtk::TextTag.
   "
      end

      operation 568617 "editable"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "default_setting" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether the character at @a iter  is within an editable region
   * of text.  Non-editable text is \"locked\" and can't be changed by the
   * user via Gtk::TextView. This function is simply a convenience
   * wrapper around gtk_text_iter_get_attributes(). If no tags applied
   * to this text affect editability, @a default_setting  will be returned.
   * 
   * You don't want to use this function to decide whether text can be
   * inserted at @a iter , because for insertion you don't want to know
   * whether the char at @a iter  is inside an editable range, you want to
   * know whether a new character inserted at @a iter  would be inside an
   * editable range. Use gtk_text_iter_can_insert() to handle this
   * case.
   * @param default_setting <tt>true</tt> if text is editable by default.
   * @return Whether @a iter  is inside an editable range.
   "
      end

      operation 568745 "can_insert"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "default_editability" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Considering the default editability of the buffer, and tags that
   * affect editability, determines whether text inserted at @a iter  would
   * be editable. If text inserted at @a iter  would be editable then the
   * user should be allowed to insert text at @a iter .
   * Gtk::TextBuffer::insert_interactive() uses this function to decide
   * whether insertions are allowed at a given position.
   * @param default_editability <tt>true</tt> if text is editable by default.
   * @return Whether text inserted at @a iter  would be editable.
   "
      end

      operation 568873 "starts_word"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Determines whether @a iter  begins a natural-language word.  Word
   * breaks are determined by Pango and should be correct for nearly any
   * language (if not, the correct fix would be to the Pango word break
   * algorithms).
   * @return <tt>true</tt> if @a iter  is at the start of a word.
   "
      end

      operation 569001 "ends_word"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Determines whether @a iter  ends a natural-language word.  Word breaks
   * are determined by Pango and should be correct for nearly any
   * language (if not, the correct fix would be to the Pango word break
   * algorithms).
   * @return <tt>true</tt> if @a iter  is at the end of a word.
   "
      end

      operation 569129 "inside_word"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Determines whether @a iter  is inside a natural-language word (as
   * opposed to say inside some whitespace).  Word breaks are determined
   * by Pango and should be correct for nearly any language (if not, the
   * correct fix would be to the Pango word break algorithms).
   * @return <tt>true</tt> if @a iter  is inside a word.
   "
      end

      operation 569257 "starts_sentence"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Determines whether @a iter  begins a sentence.  Sentence boundaries are
   * determined by Pango and should be correct for nearly any language
   * (if not, the correct fix would be to the Pango text boundary
   * algorithms).
   * @return <tt>true</tt> if @a iter  is at the start of a sentence.
   "
      end

      operation 569385 "ends_sentence"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Determines whether @a iter  ends a sentence.  Sentence boundaries are
   * determined by Pango and should be correct for nearly any language
   * (if not, the correct fix would be to the Pango text boundary
   * algorithms).
   * @return <tt>true</tt> if @a iter  is at the end of a sentence.
   "
      end

      operation 569513 "inside_sentence"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Determines whether @a iter  is inside a sentence (as opposed to in
   * between two sentences, e.g.\\ after a period and before the first
   * letter of the next sentence).  Sentence boundaries are determined
   * by Pango and should be correct for nearly any language (if not, the
   * correct fix would be to the Pango text boundary algorithms).
   * @return <tt>true</tt> if @a iter  is inside a sentence.
   "
      end

      operation 569641 "starts_line"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns <tt>true</tt> if @a iter  begins a paragraph,
   * i.e.\\ if gtk_text_iter_get_line_offset() would return 0.
   * However this function is potentially more efficient than
   * gtk_text_iter_get_line_offset() because it doesn't have to compute
   * the offset, it just has to see whether it's 0.
   * @return Whether @a iter  begins a line.
   "
      end

      operation 569769 "ends_line"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns <tt>true</tt> if @a iter  points to the start of the paragraph
   * delimiter characters for a line (delimiters will be either a
   * newline, a carriage return, a carriage return followed by a
   * newline, or a Unicode paragraph separator character). Note that an
   * iterator pointing to the <tt>\\\\n</tt> of a <tt>\\\\r</tt><tt>\\\\n</tt> pair will not be counted as
   * the end of a line, the line ends before the <tt>\\\\r</tt>. The end iterator is
   * considered to be at the end of a line, even though there are no
   * paragraph delimiter chars there.
   * @return Whether @a iter  is at the end of a line.
   "
      end

      operation 569897 "is_cursor_position"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* See gtk_text_iter_forward_cursor_position() or Pango::LogAttr or
   * pango_break() for details on what a cursor position is.
   * @return <tt>true</tt> if the cursor can be placed at @a iter .
   "
      end

      operation 570025 "get_chars_in_line"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the number of characters in the line containing @a iter ,
   * including the paragraph delimiters.
   * @return Number of characters in the line.
   "
      end

      operation 570153 "get_bytes_in_line"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the number of bytes in the line containing @a iter ,
   * including the paragraph delimiters.
   * @return Number of bytes in the line.
   "
      end

      operation 570281 "get_attributes"
	const public explicit_return_type "bool"
	nparams 1
	  param inout name "values" type class_ref 247593 // TextAttributes
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 570409 "get_language"
	const public explicit_return_type "Pango::Language"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* A convenience wrapper around gtk_text_iter_get_attributes(),
   * which returns the language in effect at @a iter . If no tags affecting
   * language apply to @a iter , the return value is identical to that of
   * gtk_get_default_language().
   * @return Language in effect at @a iter .
   "
      end

      operation 570537 "is_end"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns <tt>true</tt> if @a iter  is the end iterator, i.e.\\ one past the last
   * dereferenceable iterator in the buffer. gtk_text_iter_is_end() is
   * the most efficient way to check whether an iterator is the end
   * iterator.
   * @return Whether @a iter  is the end iterator.
   "
      end

      operation 570665 "is_start"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns <tt>true</tt> if @a iter  is the first iterator in the buffer, that is
   * if @a iter  has a character offset of 0.
   * @return Whether @a iter  is the first in the buffer.
   "
      end

      operation 570793 "forward_char"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves @a iter  forward by one character offset. Note that images
   * embedded in the buffer occupy 1 character slot, so
   * gtk_text_iter_forward_char() may actually move onto an image instead
   * of a character, if you have images in your buffer.  If @a iter  is the
   * end iterator or one character before it, @a iter  will now point at
   * the end iterator, and gtk_text_iter_forward_char() returns <tt>false</tt> for
   * convenience when writing loops.
   * @return Whether @a iter  moved and is dereferenceable.
   "
      end

      operation 570921 "backward_char"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves backward by one character offset. Returns <tt>true</tt> if movement
   * was possible; if @a iter  was the first in the buffer (character
   * offset 0), gtk_text_iter_backward_char() returns <tt>false</tt> for convenience when
   * writing loops.
   * @return Whether movement was possible.
   "
      end

      operation 571049 "forward_chars"
	public explicit_return_type "bool"
	nparams 1
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves @a count  characters if possible (if @a count  would move past the
   * start or end of the buffer, moves to the start or end of the
   * buffer). The return value indicates whether the new position of
   *  @a iter  is different from its original position, and dereferenceable
   * (the last iterator in the buffer is not dereferenceable). If @a count 
   * is 0, the function does nothing and returns <tt>false</tt>.
   * @param count Number of characters to move, may be negative.
   * @return Whether @a iter  moved and is dereferenceable.
   "
      end

      operation 571177 "backward_chars"
	public explicit_return_type "bool"
	nparams 1
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves @a count  characters backward, if possible (if @a count  would move
   * past the start or end of the buffer, moves to the start or end of
   * the buffer).  The return value indicates whether the iterator moved
   * onto a dereferenceable position; if the iterator didn't move, or
   * moved onto the end iterator, then <tt>false</tt> is returned. If @a count  is 0,
   * the function does nothing and returns <tt>false</tt>.
   * @param count Number of characters to move.
   * @return Whether @a iter  moved and is dereferenceable.
   "
      end

      operation 571305 "forward_line"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves @a iter  to the start of the next line. Returns <tt>true</tt> if there
   * was a next line to move to, and <tt>false</tt> if @a iter  was simply moved to
   * the end of the buffer and is now not dereferenceable, or if @a iter  was
   * already at the end of the buffer.
   * @return Whether @a iter  can be dereferenced.
   "
      end

      operation 571433 "backward_line"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves @a iter  to the start of the previous line. Returns <tt>true</tt> if
   *  @a iter  could be moved; i.e. if @a iter  was at character offset 0, this
   * function returns <tt>false</tt>. Therefore if @a iter  was already on line 0,
   * but not at the start of the line, @a iter  is snapped to the start of
   * the line and the function returns <tt>true</tt>. (Note that this implies that
   * in a loop calling this function, the line number may not change on
   * every iteration, if your first iteration is on line 0.)
   * @return Whether @a iter  moved.
   "
      end

      operation 571561 "forward_lines"
	public explicit_return_type "bool"
	nparams 1
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves @a count  lines forward, if possible (if @a count  would move
   * past the start or end of the buffer, moves to the start or end of
   * the buffer).  The return value indicates whether the iterator moved
   * onto a dereferenceable position; if the iterator didn't move, or
   * moved onto the end iterator, then <tt>false</tt> is returned. If @a count  is 0,
   * the function does nothing and returns <tt>false</tt>. If @a count  is negative,
   * moves backward by 0 - @a count  lines.
   * @param count Number of lines to move forward.
   * @return Whether @a iter  moved and is dereferenceable.
   "
      end

      operation 571689 "backward_lines"
	public explicit_return_type "bool"
	nparams 1
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves @a count  lines backward, if possible (if @a count  would move
   * past the start or end of the buffer, moves to the start or end of
   * the buffer).  The return value indicates whether the iterator moved
   * onto a dereferenceable position; if the iterator didn't move, or
   * moved onto the end iterator, then <tt>false</tt> is returned. If @a count  is 0,
   * the function does nothing and returns <tt>false</tt>. If @a count  is negative,
   * moves forward by 0 - @a count  lines.
   * @param count Number of lines to move backward.
   * @return Whether @a iter  moved and is dereferenceable.
   "
      end

      operation 571817 "forward_word_end"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves forward to the next word end. (If @a iter  is currently on a
   * word end, moves forward to the next one after that.) Word breaks
   * are determined by Pango and should be correct for nearly any
   * language (if not, the correct fix would be to the Pango word break
   * algorithms).
   * @return <tt>true</tt> if @a iter  moved and is not the end iterator.
   "
      end

      operation 571945 "backward_word_start"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves backward to the previous word start. (If @a iter  is currently on a
   * word start, moves backward to the next one after that.) Word breaks
   * are determined by Pango and should be correct for nearly any
   * language (if not, the correct fix would be to the Pango word break
   * algorithms).
   * @return <tt>true</tt> if @a iter  moved and is not the end iterator.
   "
      end

      operation 572073 "forward_word_ends"
	public explicit_return_type "bool"
	nparams 1
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Calls gtk_text_iter_forward_word_end() up to @a count  times.
   * @param count Number of times to move.
   * @return <tt>true</tt> if @a iter  moved and is not the end iterator.
   "
      end

      operation 572201 "backward_word_starts"
	public explicit_return_type "bool"
	nparams 1
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Calls gtk_text_iter_backward_word_start() up to @a count  times.
   * @param count Number of times to move.
   * @return <tt>true</tt> if @a iter  moved and is not the end iterator.
   "
      end

      operation 572329 "forward_visible_word_end"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO: Now that there are so many *_visible_ versions of the methods, maybe we should
just add a visible=false parameter and therefore halve the number of methods. murrayc
* Moves forward to the next visible word end. (If @a iter  is currently on a
   * word end, moves forward to the next one after that.) Word breaks
   * are determined by Pango and should be correct for nearly any
   * language (if not, the correct fix would be to the Pango word break
   * algorithms).
   * @return <tt>true</tt> if @a iter  moved and is not the end iterator 
   * 
   * Since: 2.4.
   "
      end

      operation 572457 "backward_visible_word_start"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves backward to the previous visible word start. (If @a iter  is currently 
   * on a word start, moves backward to the next one after that.) Word breaks
   * are determined by Pango and should be correct for nearly any
   * language (if not, the correct fix would be to the Pango word break
   * algorithms).
   * @return <tt>true</tt> if @a iter  moved and is not the end iterator 
   * 
   * Since: 2.4.
   "
      end

      operation 572585 "forward_visible_word_ends"
	public explicit_return_type "bool"
	nparams 1
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Calls gtk_text_iter_forward_visible_word_end() up to @a count  times.
   * @param count Number of times to move.
   * @return <tt>true</tt> if @a iter  moved and is not the end iterator 
   * 
   * Since: 2.4.
   "
      end

      operation 572713 "backward_visible_word_starts"
	public explicit_return_type "bool"
	nparams 1
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Calls gtk_text_iter_backward_visible_word_start() up to @a count  times.
   * @param count Number of times to move.
   * @return <tt>true</tt> if @a iter  moved and is not the end iterator 
   * 
   * Since: 2.4.
   "
      end

      operation 572841 "forward_sentence_end"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves forward to the next sentence end. (If @a iter  is at the end of
   * a sentence, moves to the next end of sentence.)  Sentence
   * boundaries are determined by Pango and should be correct for nearly
   * any language (if not, the correct fix would be to the Pango text
   * boundary algorithms).
   * @return <tt>true</tt> if @a iter  moved and is not the end iterator.
   "
      end

      operation 572969 "backward_sentence_start"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves backward to the previous sentence start; if @a iter  is already at
   * the start of a sentence, moves backward to the next one.  Sentence
   * boundaries are determined by Pango and should be correct for nearly
   * any language (if not, the correct fix would be to the Pango text
   * boundary algorithms).
   * @return <tt>true</tt> if @a iter  moved and is not the end iterator.
   "
      end

      operation 573097 "forward_sentence_ends"
	public explicit_return_type "bool"
	nparams 1
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Calls gtk_text_iter_forward_sentence_end() @a count  times (or until
   * gtk_text_iter_forward_sentence_end() returns <tt>false</tt>). If @a count  is
   * negative, moves backward instead of forward.
   * @param count Number of sentences to move.
   * @return <tt>true</tt> if @a iter  moved and is not the end iterator.
   "
      end

      operation 573225 "backward_sentence_starts"
	public explicit_return_type "bool"
	nparams 1
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Calls gtk_text_iter_backward_sentence_start() up to @a count  times,
   * or until it returns <tt>false</tt>. If @a count  is negative, moves forward
   * instead of backward.
   * @param count Number of sentences to move.
   * @return <tt>true</tt> if @a iter  moved and is not the end iterator.
   "
      end

      operation 573353 "forward_cursor_position"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves @a iter  forward by a single cursor position. Cursor positions
   * are (unsurprisingly) positions where the cursor can appear. Perhaps
   * surprisingly, there may not be a cursor position between all
   * characters. The most common example for European languages would be
   * a carriage return/newline sequence. For some Unicode characters,
   * the equivalent of say the letter \"a\" with an accent mark will be
   * represented as two characters, first the letter then a \"combining
   * mark\" that causes the accent to be rendered; so the cursor can't go
   * between those two characters. See also the Pango::LogAttr structure and
   * pango_break() function.
   * @return <tt>true</tt> if we moved and the new position is dereferenceable.
   "
      end

      operation 573481 "backward_cursor_position"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Like gtk_text_iter_forward_cursor_position(), but moves backward.
   * @return <tt>true</tt> if we moved.
   "
      end

      operation 573609 "forward_cursor_positions"
	public explicit_return_type "bool"
	nparams 1
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves up to @a count  cursor positions. See
   * gtk_text_iter_forward_cursor_position() for details.
   * @param count Number of positions to move.
   * @return <tt>true</tt> if we moved and the new position is dereferenceable.
   "
      end

      operation 573737 "backward_cursor_positions"
	public explicit_return_type "bool"
	nparams 1
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves up to @a count  cursor positions. See
   * gtk_text_iter_forward_cursor_position() for details.
   * @param count Number of positions to move.
   * @return <tt>true</tt> if we moved and the new position is dereferenceable.
   "
      end

      operation 573865 "forward_visible_cursor_position"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves @a iter  forward to the next visible cursor position. See 
   * gtk_text_iter_forward_cursor_position() for details.
   * @return <tt>true</tt> if we moved and the new position is dereferenceable
   * 
   * Since: 2.4.
   "
      end

      operation 573993 "backward_visible_cursor_position"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves @a iter  forward to the previous visible cursor position. See 
   * gtk_text_iter_backward_cursor_position() for details.
   * @return <tt>true</tt> if we moved and the new position is dereferenceable
   * 
   * Since: 2.4.
   "
      end

      operation 574121 "forward_visible_cursor_positions"
	public explicit_return_type "bool"
	nparams 1
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves up to @a count  visible cursor positions. See
   * gtk_text_iter_forward_cursor_position() for details.
   * @param count Number of positions to move.
   * @return <tt>true</tt> if we moved and the new position is dereferenceable
   * 
   * Since: 2.4.
   "
      end

      operation 574249 "backward_visible_cursor_positions"
	public explicit_return_type "bool"
	nparams 1
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves up to @a count  visible cursor positions. See
   * gtk_text_iter_forward_cursor_position() for details.
   * @param count Number of positions to move.
   * @return <tt>true</tt> if we moved and the new position is dereferenceable
   * 
   * Since: 2.4.
   "
      end

      operation 574377 "set_offset"
	public explicit_return_type "void"
	nparams 1
	  param in name "char_offset" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets @a iter  to point to @a char_offset . @a char_offset  counts from the start
   * of the entire text buffer, starting with 0.
   * @param char_offset A character number.
   "
      end

      operation 574505 "set_line"
	public explicit_return_type "void"
	nparams 1
	  param in name "line_number" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves iterator @a iter  to the start of the line @a line_number .  If
   *  @a line_number  is negative or larger than the number of lines in the
   * buffer, moves @a iter  to the start of the last line in the buffer.
   * @param line_number Line number (counted from 0).
   "
      end

      operation 574633 "set_line_offset"
	public explicit_return_type "void"
	nparams 1
	  param in name "char_on_line" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves @a iter  within a line, to a new <em>character</em>
   * (not byte) offset. The given character offset must be less than or
   * equal to the number of characters in the line; if equal, @a iter 
   * moves to the start of the next line. See
   * gtk_text_iter_set_line_index() if you have a byte index rather than
   * a character offset.
   * @param char_on_line A character offset relative to the start of @a iter 's current line.
   "
      end

      operation 574761 "set_line_index"
	public explicit_return_type "void"
	nparams 1
	  param in name "byte_on_line" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Same as gtk_text_iter_set_line_offset(), but works with a
   * <em>byte</em> index. The given byte index must be at
   * the start of a character, it can't be in the middle of a UTF-8
   * encoded character.
   * @param byte_on_line A byte index relative to the start of @a iter 's current line.
   "
      end

      operation 574889 "forward_to_end"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves @a iter  forward to the \"end iterator,\" which points one past the last
   * valid character in the buffer. gtk_text_iter_get_char() called on the
   * end iterator returns 0, which is convenient for writing loops.
   "
      end

      operation 575017 "forward_to_line_end"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves the iterator to point to the paragraph delimiter characters,
   * which will be either a newline, a carriage return, a carriage
   * return/newline in sequence, or the Unicode paragraph separator
   * character. If the iterator is already at the paragraph delimiter
   * characters, moves to the paragraph delimiter characters for the
   * next line. If @a iter  is on the last line in the buffer, which does
   * not end in paragraph delimiters, moves to the end iterator (end of
   * the last line), and returns <tt>false</tt>.
   * @return <tt>true</tt> if we moved and the new location is not the end iterator.
   "
      end

      operation 575145 "set_visible_line_offset"
	public explicit_return_type "void"
	nparams 1
	  param in name "char_on_line" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Like gtk_text_iter_set_line_offset(), but the offset is in visible
   * characters, i.e.\\ text with a tag making it invisible is not
   * counted in the offset.
   * @param char_on_line A character offset.
   "
      end

      operation 575273 "set_visible_line_index"
	public explicit_return_type "void"
	nparams 1
	  param in name "byte_on_line" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Like gtk_text_iter_set_line_index(), but the index is in visible
   * bytes, i.e.\\ text with a tag making it invisible is not counted
   * in the index.
   * @param byte_on_line A byte index.
   "
      end

      operation 575401 "forward_to_tag_toggle"
	public explicit_return_type "bool"
	nparams 1
	  param in name "tag" explicit_type "Glib::RefPtr<TextTag>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves forward to the next toggle (on or off) of the
   * Gtk::TextTag @a tag , or to the next toggle of any tag if
   *  @a tag  is <tt>0</tt>. If no matching tag toggles are found,
   * returns <tt>false</tt>, otherwise <tt>true</tt>. Does not return toggles
   * located at @a iter , only toggles after @a iter . Sets @a iter  to
   * the location of the toggle, or to the end of the buffer
   * if no toggle is found.
   * @param tag A Gtk::TextTag, or <tt>0</tt>.
   * @return Whether we found a tag toggle after @a iter .
   "
      end

      operation 575529 "backward_to_tag_toggle"
	public explicit_return_type "bool"
	nparams 1
	  param in name "tag" explicit_type "Glib::RefPtr<TextTag>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves backward to the next toggle (on or off) of the
   * Gtk::TextTag @a tag , or to the next toggle of any tag if
   *  @a tag  is <tt>0</tt>. If no matching tag toggles are found,
   * returns <tt>false</tt>, otherwise <tt>true</tt>. Does not return toggles
   * located at @a iter , only toggles before @a iter . Sets @a iter 
   * to the location of the toggle, or the start of the buffer
   * if no toggle is found.
   * @param tag A Gtk::TextTag, or <tt>0</tt>.
   * @return Whether we found a tag toggle before @a iter .
   "
      end

      operation 575657 "forward_find_char"
	stereotype "template"
	public explicit_return_type "bool"
	nparams 2
	  param in name "predicate" explicit_type "Predicate"
	  param in name "limit" type class_ref 249001 // TextIter
	cpp_decl "    ${comment}template<class Predicate>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}template<class Predicate>
${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 575785 "forward_find_char"
	stereotype "template"
	public explicit_return_type "bool"
	nparams 1
	  param in name "predicate" explicit_type "Predicate"
	cpp_decl "    ${comment}template<class Predicate>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}template<class Predicate>
${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 575913 "backward_find_char"
	stereotype "template"
	public explicit_return_type "bool"
	nparams 2
	  param in name "predicate" explicit_type "Predicate"
	  param in name "limit" type class_ref 249001 // TextIter
	cpp_decl "    ${comment}template<class Predicate>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}template<class Predicate>
${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 576041 "backward_find_char"
	stereotype "template"
	public explicit_return_type "bool"
	nparams 1
	  param in name "predicate" explicit_type "Predicate"
	cpp_decl "    ${comment}template<class Predicate>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}template<class Predicate>
${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 576169 "forward_search"
	const public explicit_return_type "bool"
	nparams 5
	  param in name "str" explicit_type "Glib::ustring"
	  param in name "flags" type class_ref 250921 // TextSearchFlags
	  param inout name "match_start" type class_ref 249001 // TextIter
	  param inout name "match_end" type class_ref 249001 // TextIter
	  param in name "limit" type class_ref 249001 // TextIter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} & ${p2}, ${t3} & ${p3}, const ${t4} & ${p4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} & ${p2}, ${t3} & ${p3}, const ${t4} & ${p4}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Searches forward for @a str . Any match is returned by setting 
   *  @a match_start  to the first character of the match and @a match_end  to the 
   * first character after the match. The search will not continue past
   *  @a limit . Note that a search is a linear or O(n) operation, so you
   * may wish to use @a limit  to avoid locking up your UI on large
   * buffers.
   * 
   * If the Gtk::TEXT_SEARCH_VISIBLE_ONLY flag is present, the match may
   * have invisible text interspersed in @a str . i.e. @a str  will be a
   * possibly-noncontiguous subsequence of the matched range. similarly,
   * if you specify Gtk::TEXT_SEARCH_TEXT_ONLY, the match may have
   * pixbufs or child widgets mixed inside the matched range. If these
   * flags are not given, the match must be exact; the special 0xFFFC
   * character in @a str  will match embedded pixbufs or child widgets.
   * @param str A search string.
   * @param flags Flags affecting how the search is done.
   * @param match_start Return location for start of match, or <tt>0</tt>.
   * @param match_end Return location for end of match, or <tt>0</tt>.
   * @param limit Bound for the search, or <tt>0</tt> for the end of the buffer.
   * @return Whether a match was found.
   "
      end

      operation 576297 "backward_search"
	const public explicit_return_type "bool"
	nparams 5
	  param in name "str" explicit_type "Glib::ustring"
	  param in name "flags" type class_ref 250921 // TextSearchFlags
	  param inout name "match_start" type class_ref 249001 // TextIter
	  param inout name "match_end" type class_ref 249001 // TextIter
	  param in name "limit" type class_ref 249001 // TextIter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} & ${p2}, ${t3} & ${p3}, const ${t4} & ${p4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} & ${p2}, ${t3} & ${p3}, const ${t4} & ${p4}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Same as gtk_text_iter_forward_search(), but moves backward.
   * @param str Search string.
   * @param flags Bitmask of flags affecting the search.
   * @param match_start Return location for start of match, or <tt>0</tt>.
   * @param match_end Return location for end of match, or <tt>0</tt>.
   * @param limit Location of last possible @a match_start , or <tt>0</tt> for start of buffer.
   * @return Whether a match was found.
   "
      end

      operation 576425 "compare"
	const public explicit_return_type "int"
	nparams 1
	  param in name "rhs" type class_ref 249001 // TextIter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* A qsort()-style function that returns negative if @a lhs  is less than
   *  @a rhs , positive if @a lhs  is greater than @a rhs , and 0 if they're equal.
   * Ordering is in character offset order, i.e. the first character in the buffer
   * is less than the second character in the buffer.
   * @param rhs Another Gtk::TextIter.
   * @return -1 if @a lhs  is less than @a rhs , 1 if @a lhs  is greater, 0 if they are equal.
   "
      end

      operation 576553 "in_range"
	const public explicit_return_type "bool"
	nparams 2
	  param in name "start" type class_ref 249001 // TextIter
	  param in name "end" type class_ref 249001 // TextIter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Checks whether @a iter  falls in the range [ @a start , @a end ).
   *  @a start  and @a end  must be in ascending order.
   * @param start Start of range.
   * @param end End of range.
   * @return <tt>true</tt> if @a iter  is in the range.
   "
      end

      operation 576681 "order"
	public explicit_return_type "void"
	nparams 1
	  param inout name "second" type class_ref 249001 // TextIter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Swaps the value of @a first  and @a second  if @a second  comes before
   *  @a first  in the buffer. That is, ensures that @a first  and @a second  are
   * in sequence. Most text buffer functions that take a range call this
   * automatically on your behalf, so there's no real reason to call it yourself
   * in those cases. There are some exceptions, such as gtk_text_iter_in_range(),
   * that expect a pre-sorted range.
   * @param second Another Gtk::TextIter.
   "
      end
    end

    class 249769 "TextMark"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/textmark.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Typedefed as Gtk::TextBuffer::Mark. A position in the buffer, preserved across buffer modifications.
 *
 * A Mark is like a bookmark in a text buffer; it preserves a position in the text.  Unlike iterators, marks remain valid across buffer mutations, because
 * their behavior is defined when text is inserted or deleted. When text containing a mark is deleted, the mark remains in
 * the position originally occupied by the deleted text. When text is inserted at a mark, a mark with left gravity will be
 * moved to the beginning of the newly-inserted text, and a mark with right gravity will be moved to the end.
 * The standard text cursor in left-to-right languages is a mark with right gravity, because it stays to the right of inserted
 * text.
 *
 * Like tags, marks can be either named or anonymous. There are two marks built-in to Gtk::TextBuffer; these are named \"insert\" and
 * \"selection_bound\" and refer to the insertion point and the boundary of the selection which is not the insertion point,
 * respectively. If no text is selected, these two marks will be in the same position. You can manipulate what is selected and
 * where the cursor appears by moving these marks around.
 *
 * \"left\" and \"right\" here refer to logical direction (left is the toward the start of the buffer); in some languages such as
 * Hebrew the logically-leftmost text is not actually on the left when displayed.
 *
 * You can convert the mark to an @link Gtk::TextIter iterator@endlink using Gtk::TextBuffer::get_iter_at_mark().
 *
 * Marks can be deleted from the buffer at any time with Gtk::TextBuffer::delete_mark(). Once deleted from the buffer, a mark is essentially useless.
 *
 * Marks optionally have names; these can be convenient to avoid passing the Gtk::TextBuffer::Mark object around.
 *
 * Marks are typically created using the Gtk::TextBuffer::create_mark() function.
 *
 * @ingroup TextView
 "
      class 252585 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 249769 // TextMark
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 214953 // <realization>
	  relation 214953 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 214953 // <realization>
	    b parent class_ref 249769 // TextMark
	end
      end

      class 252841 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "TextMark_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 252969 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkTextMark"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 253097 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkTextMarkClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 215337 // textmark_class_ (<directional composition>)
	relation 215337 *-->
	  a role_name "textmark_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 215337 // textmark_class_ (<directional composition>)
	  b parent class_ref 252841 // CppClassType
      end

      operation 576809 "TextMark"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 249769 // TextMark
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 576937 "operator ="
	private return_type class_ref 249769 // TextMark
	nparams 1
	  param in name "" type class_ref 249769 // TextMark
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 577065 "TextMark"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 577193 "TextMark"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkTextMark"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 577321 "~TextMark"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 577449 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 577577 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 577705 "gobj"
	cpp_inline public explicit_return_type "GtkTextMark"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTextMark*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 577833 "gobj"
	const cpp_inline public explicit_return_type "GtkTextMark"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTextMark*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 577961 "gobj_copy"
	public explicit_return_type "GtkTextMark"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs."
      end

      operation 578089 "set_visible"
	public explicit_return_type "void"
	nparams 1
	  param in name "setting" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the visibility of @a mark ; the insertion point is normally
   * visible, i.e.\\ you can see it as a vertical bar. Also, the text
   * widget uses a visible mark to indicate where a drop will occur when
   * dragging-and-dropping text. Most other marks are not visible.
   * Marks are not visible by default.
   * @param setting Visibility of mark.
   "
      end

      operation 578217 "get_visible"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns <tt>true</tt> if the mark is visible (i.e.\\ a cursor is displayed
   * for it)
   * @return <tt>true</tt> if visible.
   "
      end

      operation 578345 "get_name"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the mark name; returns <tt>0</tt> for anonymous marks.
   * @return Mark name.
   "
      end

      operation 578473 "get_deleted"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns <tt>true</tt> if the mark has been removed from its buffer
   * with Gtk::TextBuffer::delete_mark(). Marks can't be used
   * once deleted.
   * @return Whether the mark is deleted.
   "
      end

      operation 578601 "get_buffer"
	public explicit_return_type "Glib::RefPtr<TextBuffer>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the buffer this mark is located inside,
   * or <tt>0</tt> if the mark is deleted.
   * @return The mark's Gtk::TextBuffer.
   "
      end

      operation 578729 "get_buffer"
	const public explicit_return_type "Glib::RefPtr<const TextBuffer>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the buffer this mark is located inside,
   * or <tt>0</tt> if the mark is deleted.
   * @return The mark's Gtk::TextBuffer.
   "
      end

      operation 578857 "get_left_gravity"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Determines whether the mark has left gravity.
   * @return <tt>true</tt> if the mark has left gravity, <tt>false</tt> otherwise.
   "
      end

      operation 578985 "get_iter"
	public return_type class_ref 249001 // TextIter
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 250921 "TextSearchFlags"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* @addtogroup gtkmmEnums Enums and Flags 
*
 * @ingroup gtkmmEnums
 * @par Bitwise operators:
 * <tt>%TextSearchFlags operator|(TextSearchFlags, TextSearchFlags)</tt><br>
 * <tt>%TextSearchFlags operator&(TextSearchFlags, TextSearchFlags)</tt><br>
 * <tt>%TextSearchFlags operator^(TextSearchFlags, TextSearchFlags)</tt><br>
 * <tt>%TextSearchFlags operator~(TextSearchFlags)</tt><br>
 * <tt>%TextSearchFlags& operator|=(TextSearchFlags&, TextSearchFlags)</tt><br>
 * <tt>%TextSearchFlags& operator&=(TextSearchFlags&, TextSearchFlags)</tt><br>
 * <tt>%TextSearchFlags& operator^=(TextSearchFlags&, TextSearchFlags)</tt><br>
 "
      attribute 205865 "TEXT_SEARCH_VISIBLE_ONLY"
	public explicit_type ""
	init_value " 1 << 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 205993 "TEXT_SEARCH_TEXT_ONLY"
	public explicit_type ""
	init_value " 1 << 1
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 249257 "TextTag"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/texttag.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Typedefed as Gtk::TextBuffer::Tag.
 *
 * Text in a buffer can be marked with tags. A tag is an attribute that can be applied to some range of text. For example, a tag
 * might be called \"bold\" and might make the text inside the tag bold. However, the tag concept is more general than that; tags don't
 * have to affect appearance. They can instead affect the behavior of mouse and key presses, \"lock\" a range of text so the user
 * can't edit it, or countless other things.
 * One tag can be applied to any number of text ranges in any number of @link Gtk::TextBuffer Gtk::TextBuffers@endlink.
 *
 * Each tag is stored in a @link Gtk::TextTagTable Gtk::TextBuffer::TagTable@endlink, and Tags should be in the
 * @link Gtk::TextTagTable Gtk::TextBuffer::TagTable@endlink for a given Gtk::TextBuffer before using
 * them with that buffer.
 *
 * Tags can have names, which is convenient sometimes (for example, you can name your tag that makes things bold \"bold\"), but
 * they can also be anonymous (which is convenient if you're creating tags on-the-fly). 
 *
 * Gtk::TextBuffer::create_tag() is the best way to create tags. See the demo for numerous examples.
 *
 * @ingroup TextView
 "
      class 253225 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 249257 // TextTag
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 215593 // <realization>
	  relation 215593 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 215593 // <realization>
	    b parent class_ref 249257 // TextTag
	end
      end

      class 253481 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "TextTag_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 253609 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkTextTag"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 253737 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkTextTagClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 215977 // texttag_class_ (<directional composition>)
	relation 215977 *-->
	  a role_name "texttag_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 215977 // texttag_class_ (<directional composition>)
	  b parent class_ref 253481 // CppClassType
      end

      operation 579113 "TextTag"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 249257 // TextTag
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 579241 "operator ="
	private return_type class_ref 249257 // TextTag
	nparams 1
	  param in name "" type class_ref 249257 // TextTag
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 579369 "TextTag"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 579497 "TextTag"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkTextTag"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 579625 "~TextTag"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 579753 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 579881 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 580009 "gobj"
	cpp_inline public explicit_return_type "GtkTextTag"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTextTag*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 580137 "gobj"
	const cpp_inline public explicit_return_type "GtkTextTag"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTextTag*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 580265 "gobj_copy"
	public explicit_return_type "GtkTextTag"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs."
      end

      operation 580393 "TextTag"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 580521 "TextTag"
	protected explicit_return_type ""
	nparams 1
	  param in name "name" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 580649 "create"
	class_operation public explicit_return_type "Glib::RefPtr<TextTag>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 580777 "create"
	class_operation public explicit_return_type "Glib::RefPtr<TextTag>"
	nparams 1
	  param in name "name" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 580905 "get_priority"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Get the tag priority.
   * @return The tag's priority.
   "
      end

      operation 581033 "set_priority"
	public explicit_return_type "void"
	nparams 1
	  param in name "priority" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the priority of a Gtk::TextTag. Valid priorities are
   * start at 0 and go to one less than Gtk::TextTagTable::get_size().
   * Each tag in a table has a unique priority; setting the priority
   * of one tag shifts the priorities of all the other tags in the
   * table to maintain a unique priority for each tag. Higher priority
   * tags \"win\" if two tags both set the same text attribute. When adding
   * a tag to a tag table, it will be assigned the highest priority in
   * the table by default; so normally the precedence of a set of tags
   * is the order in which they were added to the table, or created with
   * Gtk::TextBuffer::create_tag(), which adds the tag to the buffer's table
   * automatically.
   * @param priority The new priority.
   "
      end

      operation 581161 "event"
	public explicit_return_type "bool"
	nparams 3
	  param in name "event_object" explicit_type "Glib::RefPtr<Glib::Object>"
	  param inout name "event" explicit_type "GdkEvent"
	  param in name "iter" type class_ref 249001 // TextIter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Emits the \"event\" signal on the Gtk::TextTag.
   * @param event_object Object that received the event, such as a widget.
   * @param event The event.
   * @param iter Location where the event was received.
   * @return Result of signal emission (whether the event was handled).
   "
      end

      operation 581289 "signal_event"
	public explicit_return_type "Glib::SignalProxy3< bool,const Glib::RefPtr<Glib::Object>&,GdkEvent*,const TextIter& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 581417 "property_name"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 581545 "property_background"
	public explicit_return_type "Glib::PropertyProxy_WriteOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "construct-only.
* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 581673 "property_background"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 581801 "property_foreground"
	public explicit_return_type "Glib::PropertyProxy_WriteOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 581929 "property_foreground"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 582057 "property_background_gdk"
	public explicit_return_type "Glib::PropertyProxy<Gdk::Color>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 582185 "property_background_gdk"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Gdk::Color>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 582313 "property_foreground_gdk"
	public explicit_return_type "Glib::PropertyProxy<Gdk::Color>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 582441 "property_foreground_gdk"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Gdk::Color>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 582569 "property_background_stipple"
	public explicit_return_type "Glib::PropertyProxy< Glib::RefPtr<Gdk::Bitmap> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 582697 "property_background_stipple"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gdk::Bitmap> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 582825 "property_foreground_stipple"
	public explicit_return_type "Glib::PropertyProxy< Glib::RefPtr<Gdk::Bitmap> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 582953 "property_foreground_stipple"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gdk::Bitmap> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 583081 "property_font"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 583209 "property_font"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 583337 "property_font_desc"
	public explicit_return_type "Glib::PropertyProxy<Pango::FontDescription>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 583465 "property_font_desc"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Pango::FontDescription>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 583593 "property_family"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 583721 "property_family"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 583849 "property_style"
	public explicit_return_type "Glib::PropertyProxy<Pango::Style>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 583977 "property_style"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Pango::Style>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 584105 "property_variant"
	public explicit_return_type "Glib::PropertyProxy<Pango::Variant>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 584233 "property_variant"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Pango::Variant>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 584361 "property_weight"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 584489 "property_weight"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 584617 "property_stretch"
	public explicit_return_type "Glib::PropertyProxy<Pango::Stretch>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 584745 "property_stretch"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Pango::Stretch>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 584873 "property_size"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 585001 "property_size"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 585129 "property_size_points"
	public explicit_return_type "Glib::PropertyProxy<double>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 585257 "property_size_points"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<double>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 585385 "property_scale"
	public explicit_return_type "Glib::PropertyProxy<double>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 585513 "property_scale"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<double>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 585641 "property_pixels_above_lines"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 585769 "property_pixels_above_lines"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 585897 "property_pixels_below_lines"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 586025 "property_pixels_below_lines"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 586153 "property_pixels_inside_wrap"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 586281 "property_pixels_inside_wrap"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 586409 "property_editable"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 586537 "property_editable"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 586665 "property_wrap_mode"
	public explicit_return_type "Glib::PropertyProxy<WrapMode>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 586793 "property_wrap_mode"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<WrapMode>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 586921 "property_justification"
	public explicit_return_type "Glib::PropertyProxy<Justification>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 587049 "property_justification"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Justification>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 587177 "property_direction"
	public explicit_return_type "Glib::PropertyProxy<TextDirection>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 587305 "property_direction"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<TextDirection>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 587433 "property_left_margin"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 587561 "property_left_margin"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 587689 "property_indent"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 587817 "property_indent"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 587945 "property_strikethrough"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 588073 "property_strikethrough"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 588201 "property_right_margin"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 588329 "property_right_margin"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 588457 "property_underline"
	public explicit_return_type "Glib::PropertyProxy<Pango::Underline>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 588585 "property_underline"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Pango::Underline>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 588713 "property_rise"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 588841 "property_rise"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 588969 "property_background_full_height"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 589097 "property_background_full_height"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 589225 "property_language"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 589353 "property_language"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 589481 "property_tabs"
	public explicit_return_type "Glib::PropertyProxy<Pango::TabArray>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 589609 "property_tabs"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Pango::TabArray>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 589737 "property_invisible"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 589865 "property_invisible"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 589993 "property_background_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 590121 "property_background_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 590249 "property_foreground_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 590377 "property_foreground_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 590505 "property_background_stipple_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 590633 "property_background_stipple_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 590761 "property_foreground_stipple_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 590889 "property_foreground_stipple_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 591017 "property_family_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 591145 "property_family_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 591273 "property_style_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 591401 "property_style_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 591529 "property_variant_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 591657 "property_variant_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 591785 "property_weight_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 591913 "property_weight_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 592041 "property_stretch_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 592169 "property_stretch_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 592297 "property_size_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 592425 "property_size_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 592553 "property_scale_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 592681 "property_scale_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 592809 "property_pixels_above_lines_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 592937 "property_pixels_above_lines_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 593065 "property_pixels_below_lines_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 593193 "property_pixels_below_lines_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 593321 "property_pixels_inside_wrap_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 593449 "property_pixels_inside_wrap_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 593577 "property_editable_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 593705 "property_editable_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 593833 "property_wrap_mode_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 593961 "property_wrap_mode_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 594089 "property_justification_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 594217 "property_justification_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 594345 "property_left_margin_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 594473 "property_left_margin_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 594601 "property_indent_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 594729 "property_indent_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 594857 "property_strikethrough_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 594985 "property_strikethrough_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 595113 "property_right_margin_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 595241 "property_right_margin_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 595369 "property_underline_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 595497 "property_underline_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 595625 "property_rise_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 595753 "property_rise_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 595881 "property_background_full_height_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 596009 "property_background_full_height_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 596137 "property_language_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 596265 "property_language_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 596393 "property_tabs_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 596521 "property_tabs_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 596649 "property_invisible_set"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 596777 "property_invisible_set"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 596905 "on_event"
	cpp_virtual protected explicit_return_type "bool"
	nparams 3
	  param in name "event_object" explicit_type "Glib::RefPtr<Glib::Object>"
	  param inout name "event" explicit_type "GdkEvent"
	  param in name "iter" type class_ref 249001 // TextIter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end
    end

    class 249513 "TextTagTable"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/texttagtable.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Typedefed as Gtk::TextBuffer::TagTable. A Collection of @link Gtk::TextTag Gtk::TextBuffer::Tags@endlink that can be used together.
 *
 * A tag table defines a set of @link Gtk::TextTag Gtk::TextBuffer::Tags@endlink that can be used together. Each buffer has one tag
 * table associated with it; only tags from that tag table can be used with the buffer. A single tag table can be shared between
 * multiple buffers, however.
 *
 * @ingroup TextView
 "
      class 253865 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 249513 // TextTagTable
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 216233 // <realization>
	  relation 216233 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 216233 // <realization>
	    b parent class_ref 249513 // TextTagTable
	end
      end

      class 254121 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "TextTagTable_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 254249 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkTextTagTable"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 254377 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkTextTagTableClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 216617 // texttagtable_class_ (<directional composition>)
	relation 216617 *-->
	  a role_name "texttagtable_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 216617 // texttagtable_class_ (<directional composition>)
	  b parent class_ref 254121 // CppClassType
      end

      operation 597033 "TextTagTable"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 249513 // TextTagTable
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 597161 "operator ="
	private return_type class_ref 249513 // TextTagTable
	nparams 1
	  param in name "" type class_ref 249513 // TextTagTable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 597289 "TextTagTable"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 597417 "TextTagTable"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkTextTagTable"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 597545 "~TextTagTable"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 597673 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 597801 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 597929 "gobj"
	cpp_inline public explicit_return_type "GtkTextTagTable"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTextTagTable*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 598057 "gobj"
	const cpp_inline public explicit_return_type "GtkTextTagTable"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTextTagTable*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 598185 "gobj_copy"
	public explicit_return_type "GtkTextTagTable"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs."
      end

      operation 598313 "TextTagTable"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 598441 "create"
	class_operation public explicit_return_type "Glib::RefPtr<TextTagTable>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 598569 "add"
	public explicit_return_type "void"
	nparams 1
	  param in name "tag" explicit_type "Glib::RefPtr<TextTag>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Add a tag to the table. The tag is assigned the highest priority
   * in the table.
   * 
   *  @a tag  must not be in a tag table already, and may not have
   * the same name as an already-added tag.
   * @param tag A Gtk::TextTag.
   "
      end

      operation 598697 "remove"
	public explicit_return_type "void"
	nparams 1
	  param in name "tag" explicit_type "Glib::RefPtr<TextTag>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Remove a tag from the table. This will remove the table's
   * reference to the tag, so be careful - the tag will end
   * up destroyed if you don't have a reference to it.
   * @param tag A Gtk::TextTag.
   "
      end

      operation 598825 "lookup"
	public explicit_return_type "Glib::RefPtr<TextTag>"
	nparams 1
	  param in name "name" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Look up a named tag.
   * @param name Name of a tag.
   * @return The tag, or <tt>0</tt> if none by that name is in the table.
   "
      end

      operation 598953 "lookup"
	const public explicit_return_type "Glib::RefPtr<const TextTag>"
	nparams 1
	  param in name "name" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Look up a named tag.
   * @param name Name of a tag.
   * @return The tag, or <tt>0</tt> if none by that name is in the table.
   "
      end

      class 254505 "SlotForEach"
	visibility package stereotype "typedef" explicit_base_type "sigc::slot<void, const Glib::RefPtr<TextTag>&>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 599081 "foreach"
	public explicit_return_type "void"
	nparams 1
	  param in name "slot" type class_ref 254505 // SlotForEach
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 599209 "get_size"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the size of the table (number of tags)
   * @return Number of tags in @a table .
   "
      end

      operation 599337 "signal_tag_changed"
	public explicit_return_type "Glib::SignalProxy2< void,const Glib::RefPtr<TextTag>&,bool >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 599465 "signal_tag_added"
	public explicit_return_type "Glib::SignalProxy1< void,const Glib::RefPtr<TextTag>& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 599593 "signal_tag_removed"
	public explicit_return_type "Glib::SignalProxy1< void,const Glib::RefPtr<TextTag>& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 599721 "on_tag_changed"
	cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param in name "tag" explicit_type "Glib::RefPtr<TextTag>"
	  param in name "size_changed" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 599849 "on_tag_added"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "tag" explicit_type "Glib::RefPtr<TextTag>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 599977 "on_tag_removed"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "tag" explicit_type "Glib::RefPtr<TextTag>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 255017 "TextView"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/textview.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* @defgroup TextView TextView Classes
 * These classes are used with the Gtk::TextView widget.
 
* Multi-line text editing widget. It displays a Gtk::TextBuffer.
 *
 * @ingroup Widgets
 * @ingroup Containers
 * @ingroup TextView
 "
      classrelation 216873 // <generalisation>
	relation 216873 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 216873 // <generalisation>
	  b parent class_ref 280745 // Container
      end

      class 255145 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 255017 // TextView
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 217001 // <realization>
	  relation 217001 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 217001 // <realization>
	    b parent class_ref 255017 // TextView
	end
      end

      class 255401 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "TextView_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 255529 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkTextView"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 255657 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkTextViewClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 600233 "~TextView"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 217385 // textview_class_ (<directional composition>)
	relation 217385 *-->
	  a role_name "textview_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 217385 // textview_class_ (<directional composition>)
	  b parent class_ref 255401 // CppClassType
      end

      operation 600361 "TextView"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 255017 // TextView
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 600489 "operator ="
	private return_type class_ref 255017 // TextView
	nparams 1
	  param in name "" type class_ref 255017 // TextView
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 600617 "TextView"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 600745 "TextView"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkTextView"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 600873 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 601001 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 601129 "gobj"
	cpp_inline public explicit_return_type "GtkTextView"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTextView*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 601257 "gobj"
	const cpp_inline public explicit_return_type "GtkTextView"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTextView*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 601385 "on_set_scroll_adjustments"
	cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param inout name "hadjustment" type class_ref 132521 // Adjustment
	  param inout name "vadjustment" type class_ref 132521 // Adjustment
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 601513 "on_populate_popup"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "menu" type class_ref 203689 // Menu
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 601641 "on_set_anchor"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 601769 "on_insert_at_cursor"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "str" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 601897 "TextView"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 602025 "TextView"
	public explicit_return_type ""
	nparams 1
	  param in name "buffer" explicit_type "Glib::RefPtr<TextBuffer>"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 602153 "set_buffer"
	public explicit_return_type "void"
	nparams 1
	  param in name "buffer" explicit_type "Glib::RefPtr<TextBuffer>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets @a buffer  as the buffer being displayed by @a text_view . The previous
   * buffer displayed by the text view is unreferenced, and a reference is
   * added to @a buffer . If you owned a reference to @a buffer  before passing it
   * to this function, you must remove that reference yourself; Gtk::TextView
   * will not \"adopt\" it.
   * @param buffer A Gtk::TextBuffer.
   "
      end

      operation 602281 "get_buffer"
	public explicit_return_type "Glib::RefPtr<TextBuffer>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the Gtk::TextBuffer being displayed by this text view.
   * The reference count on the buffer is not incremented; the caller
   * of this function won't own a new reference.
   * @return A Gtk::TextBuffer.
   "
      end

      operation 602409 "get_buffer"
	const public explicit_return_type "Glib::RefPtr<const TextBuffer>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the Gtk::TextBuffer being displayed by this text view.
   * The reference count on the buffer is not incremented; the caller
   * of this function won't own a new reference.
   * @return A Gtk::TextBuffer.
   "
      end

      operation 602537 "scroll_to_iter"
	public explicit_return_type "bool"
	nparams 2
	  param inout name "iter" type class_ref 249129 // iterator
	  param in name "within_margin" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* @deprecated Use scroll_to().
   "
      end

      operation 602665 "scroll_to_mark"
	public explicit_return_type "void"
	nparams 2
	  param in name "mark" explicit_type "Glib::RefPtr<TextBuffer::Mark>"
	  param in name "within_margin" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* @deprecated Use scroll_to().
   "
      end

      operation 602793 "scroll_mark_onscreen"
	public explicit_return_type "void"
	nparams 1
	  param in name "mark" explicit_type "Glib::RefPtr<TextBuffer::Mark>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* @deprecated Use scroll_to()
   "
      end

      operation 602921 "scroll_to"
	public explicit_return_type "bool"
	nparams 2
	  param inout name "iter" type class_ref 249129 // iterator
	  param in name "within_margin" explicit_type "double"
	    defaultvalue " 0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Scrolls the TextView so that @a iter is on the screen, by scrolling the minimal distance to get the mark onscreen,
   * possibly not scrolling at all. The effective screen for purposes of this function is reduced by a margin of size
   * @a within_margin.
   * @note This function uses the currently-computed height of the lines in the text buffer. Note that line heights are computed
   * in an idle handler; so this function may not have the desired effect if it's called before the height computations. To avoid
   * oddness, consider using gtk_text_view_scroll_to_mark() which saves a point to be scrolled to after line validation.
   *
   * @param iter An iterator pointing to the position that should be made visible by scrolling.
   * @param within_margin margin as a [0.0,0.5] fraction of screen size.
   * @result true if scrolling occurred.
   "
      end

      operation 603049 "scroll_to"
	public explicit_return_type "bool"
	nparams 4
	  param inout name "iter" type class_ref 249129 // iterator
	  param in name "within_margin" explicit_type "double"
	  param in name "xalign" explicit_type "double"
	  param in name "yalign" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Scrolls the TextView so that @a iter is on the screen, in the position indicated by xalign and yalign,
   * possibly not scrolling at all. The effective screen for purposes of this function is reduced by a margin of size
   * @a within_margin.
   * @note This function uses the currently-computed height of the lines in the text buffer. Note that line heights are computed
   * in an idle handler; so this function may not have the desired effect if it's called before the height computations. To avoid
   * oddness, consider using gtk_text_view_scroll_to_mark() which saves a point to be scrolled to after line validation.
   *
   * @param iter An iterator pointing to the position that should be made visible by scrolling.
   * @param within_margin margin as a [0.0,0.5] fraction of screen size.
   * @param xalign horizontal alignment of mark within visible area. An alignment of 0.0 indicates left, 1.0 indicates right, 0.5 means center.
   * @param yalign vertical alignment of mark within visible area. An alignment of 0.0 indicates top, 1.0 indicates bottom, 0.5 means center.
   * @result true if scrolling occurred.
   "
      end

      operation 603177 "scroll_to"
	public explicit_return_type "void"
	nparams 2
	  param in name "mark" explicit_type "Glib::RefPtr<TextBuffer::Mark>"
	  param in name "within_margin" explicit_type "double"
	    defaultvalue " 0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Scrolls text_view so that @a mark is on the screen, by scrolling the minimal distance to get the mark onscreen,
   * possibly not scrolling at all. The effective screen for purposes of this function is reduced by a margin of size
   * @a within_margin.
   *
   * @param mark An mark pointing to the position that should be made visible by scrolling.
   * @param within_margin margin as a [0.0,0.5] fraction of screen size.
   "
      end

      operation 603305 "scroll_to"
	public explicit_return_type "void"
	nparams 4
	  param in name "mark" explicit_type "Glib::RefPtr<TextBuffer::Mark>"
	  param in name "within_margin" explicit_type "double"
	  param in name "xalign" explicit_type "double"
	  param in name "yalign" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Scrolls the TextView so that @a iter is on the screen, in the position indicated by xalign and yalign,
   * possibly not scrolling at all. The effective screen for purposes of this function is reduced by a margin of size
   * @a within_margin.
   *
   * @param mark An mark pointing to the position that should be made visible by scrolling.
   * @param within_margin margin as a [0.0,0.5] fraction of screen size.
   * @param xalign horizontal alignment of mark within visible area. An alignment of 0.0 indicates left, 1.0 indicates right, 0.5 means center.
   * @param yalign vertical alignment of mark within visible area. An alignment of 0.0 indicates top, 1.0 indicates bottom, 0.5 means center.
   "
      end

      operation 603433 "move_mark_onscreen"
	public explicit_return_type "bool"
	nparams 1
	  param in name "mark" explicit_type "Glib::RefPtr<TextBuffer::Mark>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "It does not do anything more than the default scroll_to(mark).
* Moves a mark within the buffer so that it's
   * located within the currently-visible text area.
   * @param mark A Gtk::TextMark.
   * @return <tt>true</tt> if the mark moved (wasn't already onscreen).
   "
      end

      operation 603561 "place_cursor_onscreen"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves the cursor to the currently visible region of the
   * buffer, it it isn't there already.
   * @return <tt>true</tt> if the cursor had to be moved.
   "
      end

      operation 603689 "get_visible_rect"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "visible_rect" explicit_type "Gdk::Rectangle"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Fills @a visible_rect  with the currently-visible
   * region of the buffer, in buffer coordinates. Convert to window coordinates
   * with buffer_to_window_coords().
   * @param visible_rect Rectangle to fill.
   "
      end

      operation 603817 "set_cursor_visible"
	public explicit_return_type "void"
	nparams 1
	  param in name "setting" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Toggles whether the insertion point is displayed. A buffer with no editable
   * text probably shouldn't have a visible cursor, so you may want to turn
   * the cursor off.
   * @param setting Whether to show the insertion cursor.
   "
      end

      operation 603945 "get_cursor_visible"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Find out whether the cursor is being displayed.
   * @return Whether the insertion mark is visible.
   "
      end

      operation 604073 "get_iter_location"
	const public explicit_return_type "void"
	nparams 2
	  param in name "iter" type class_ref 249129 // iterator
	  param inout name "location" explicit_type "Gdk::Rectangle"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets a rectangle which roughly contains the character at @a iter .
   * The rectangle position is in buffer coordinates; use
   * buffer_to_window_coords() to convert these
   * coordinates to coordinates for one of the windows in the text view.
   * @param iter A Gtk::TextIter.
   * @param location Bounds of the character at @a iter .
   "
      end

      operation 604201 "get_iter_at_location"
	const public explicit_return_type "void"
	nparams 3
	  param inout name "iter" type class_ref 249129 // iterator
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the iterator at buffer coordinates @a x  and @a y . Buffer
   * coordinates are coordinates for the entire buffer, not just the
   * currently-displayed portion.  If you have coordinates from an
   * event, you have to convert those to buffer coordinates with
   * window_to_buffer_coords().
   * @param iter A Gtk::TextIter.
   * @param x X position, in buffer coordinates.
   * @param y Y position, in buffer coordinates.
   "
      end

      operation 604329 "get_line_yrange"
	const public explicit_return_type "void"
	nparams 3
	  param in name "iter" type class_ref 249129 // iterator
	  param inout name "y" explicit_type "int"
	  param inout name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the y coordinate of the top of the line containing @a iter ,
   * and the height of the line. The coordinate is a buffer coordinate;
   * convert to window coordinates with buffer_to_window_coords().
   * @param iter A Gtk::TextIter.
   * @param y Return location for a y coordinate.
   * @param height Return location for a height.
   "
      end

      operation 604457 "get_line_at_y"
	const public explicit_return_type "void"
	nparams 3
	  param inout name "target_iter" type class_ref 249129 // iterator
	  param in name "y" explicit_type "int"
	  param inout name "line_top" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the Gtk::TextIter at the start of the line containing
   * the coordinate @a y . @a y  is in buffer coordinates, convert from
   * window coordinates with window_to_buffer_coords().
   * If non-<tt>0</tt>, @a line_top  will be filled with the coordinate of the top
   * edge of the line.
   * @param target_iter A Gtk::TextIter.
   * @param y A y coordinate.
   * @param line_top Return location for top coordinate of the line.
   "
      end

      operation 604585 "buffer_to_window_coords"
	const public explicit_return_type "void"
	nparams 5
	  param in name "win" type class_ref 254633 // TextWindowType
	  param in name "buffer_x" explicit_type "int"
	  param in name "buffer_y" explicit_type "int"
	  param inout name "window_x" explicit_type "int"
	  param inout name "window_y" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} & ${p3}, ${t4} & ${p4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} & ${p3}, ${t4} & ${p4}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Converts coordinate ( @a buffer_x , @a buffer_y ) to coordinates for the window
   *  @a win , and stores the result in ( @a window_x , @a window_y ). 
   * 
   * Note that you can't convert coordinates for a nonexisting window (see 
   * set_border_window_size()).
   * @param win A Gtk::TextWindowType except Gtk::TEXT_WINDOW_PRIVATE.
   * @param buffer_x Buffer x coordinate.
   * @param buffer_y Buffer y coordinate.
   * @param window_x Window x coordinate return location.
   * @param window_y Window y coordinate return location.
   "
      end

      operation 604713 "window_to_buffer_coords"
	const public explicit_return_type "void"
	nparams 5
	  param in name "win" type class_ref 254633 // TextWindowType
	  param in name "window_x" explicit_type "int"
	  param in name "window_y" explicit_type "int"
	  param inout name "buffer_x" explicit_type "int"
	  param inout name "buffer_y" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} & ${p3}, ${t4} & ${p4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} & ${p3}, ${t4} & ${p4}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Converts coordinates on the window identified by @a win  to buffer
   * coordinates, storing the result in ( @a buffer_x , @a buffer_y ).
   * 
   * Note that you can't convert coordinates for a nonexisting window (see 
   * set_border_window_size()).
   * @param win A Gtk::TextWindowType except Gtk::TEXT_WINDOW_PRIVATE.
   * @param window_x Window x coordinate.
   * @param window_y Window y coordinate.
   * @param buffer_x Buffer x coordinate return location.
   * @param buffer_y Buffer y coordinate return location.
   "
      end

      operation 604841 "get_window"
	public explicit_return_type "Glib::RefPtr<Gdk::Window>"
	nparams 1
	  param in name "win" type class_ref 254633 // TextWindowType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the Gdk::Window corresponding to an area of the text view;
   * possible windows include the overall widget window, child windows
   * on the left, right, top, bottom, and the window that displays the
   * text buffer. Windows are <tt>0</tt> and nonexistent if their width or
   * height is 0, and are nonexistent before the widget has been
   * realized.
   * @param win Window to get.
   * @return A Gdk::Window, or <tt>0</tt>.
   "
      end

      operation 604969 "get_window"
	const public explicit_return_type "Glib::RefPtr<const Gdk::Window>"
	nparams 1
	  param in name "win" type class_ref 254633 // TextWindowType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the Gdk::Window corresponding to an area of the text view;
   * possible windows include the overall widget window, child windows
   * on the left, right, top, bottom, and the window that displays the
   * text buffer. Windows are <tt>0</tt> and nonexistent if their width or
   * height is 0, and are nonexistent before the widget has been
   * realized.
   * @param win Window to get.
   * @return A Gdk::Window, or <tt>0</tt>.
   "
      end

      operation 605097 "get_window_type"
	public return_type class_ref 254633 // TextWindowType
	nparams 1
	  param in name "window" explicit_type "Glib::RefPtr<Gdk::Window>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Usually used to find out which window an event corresponds to.
   * If you connect to an event signal on @a text_view , this function
   * should be called on <tt>event->window</tt> to
   * see which window it was.
   * @param window A window type.
   * @return The window type.
   "
      end

      operation 605225 "set_border_window_size"
	public explicit_return_type "void"
	nparams 2
	  param in name "type" type class_ref 254633 // TextWindowType
	  param in name "size" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the width of Gtk::TEXT_WINDOW_LEFT or Gtk::TEXT_WINDOW_RIGHT,
   * or the height of Gtk::TEXT_WINDOW_TOP or Gtk::TEXT_WINDOW_BOTTOM.
   * Automatically destroys the corresponding window if the size is set
   * to 0, and creates the window if the size is set to non-zero.  This
   * function can only be used for the \"border windows,\" it doesn't work
   * with Gtk::TEXT_WINDOW_WIDGET, Gtk::TEXT_WINDOW_TEXT, or
   * Gtk::TEXT_WINDOW_PRIVATE.
   * @param type Window to affect.
   * @param size Width or height of the window.
   "
      end

      operation 605353 "get_border_window_size"
	const public explicit_return_type "int"
	nparams 1
	  param in name "type" type class_ref 254633 // TextWindowType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the width of the specified border window. See
   * set_border_window_size().
   * @param type Window to return size from.
   * @return Width of window.
   "
      end

      operation 605481 "forward_display_line"
	public explicit_return_type "bool"
	nparams 1
	  param inout name "iter" type class_ref 249129 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves the given @a iter  forward by one display (wrapped) line.  A
   * display line is different from a paragraph. Paragraphs are
   * separated by newlines or other paragraph separator characters.
   * Display lines are created by line-wrapping a paragraph.  If
   * wrapping is turned off, display lines and paragraphs will be the
   * same. Display lines are divided differently for each view, since
   * they depend on the view's width; paragraphs are the same in all
   * views, since they depend on the contents of the Gtk::TextBuffer.
   * @param iter A Gtk::TextIter.
   * @return <tt>true</tt> if @a iter  was moved and is not on the end iterator.
   "
      end

      operation 605609 "backward_display_line"
	public explicit_return_type "bool"
	nparams 1
	  param inout name "iter" type class_ref 249129 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves the given @a iter  backward by one display (wrapped) line.  A
   * display line is different from a paragraph. Paragraphs are
   * separated by newlines or other paragraph separator characters.
   * Display lines are created by line-wrapping a paragraph.  If
   * wrapping is turned off, display lines and paragraphs will be the
   * same. Display lines are divided differently for each view, since
   * they depend on the view's width; paragraphs are the same in all
   * views, since they depend on the contents of the Gtk::TextBuffer.
   * @param iter A Gtk::TextIter.
   * @return <tt>true</tt> if @a iter  was moved and is not on the end iterator.
   "
      end

      operation 605737 "forward_display_line_end"
	public explicit_return_type "bool"
	nparams 1
	  param inout name "iter" type class_ref 249129 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves the given @a iter  forward to the next display line end.  A
   * display line is different from a paragraph. Paragraphs are
   * separated by newlines or other paragraph separator characters.
   * Display lines are created by line-wrapping a paragraph.  If
   * wrapping is turned off, display lines and paragraphs will be the
   * same. Display lines are divided differently for each view, since
   * they depend on the view's width; paragraphs are the same in all
   * views, since they depend on the contents of the Gtk::TextBuffer.
   * @param iter A Gtk::TextIter.
   * @return <tt>true</tt> if @a iter  was moved and is not on the end iterator.
   "
      end

      operation 605865 "backward_display_line_start"
	public explicit_return_type "bool"
	nparams 1
	  param inout name "iter" type class_ref 249129 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves the given @a iter  backward to the next display line start.  A
   * display line is different from a paragraph. Paragraphs are
   * separated by newlines or other paragraph separator characters.
   * Display lines are created by line-wrapping a paragraph.  If
   * wrapping is turned off, display lines and paragraphs will be the
   * same. Display lines are divided differently for each view, since
   * they depend on the view's width; paragraphs are the same in all
   * views, since they depend on the contents of the Gtk::TextBuffer.
   * @param iter A Gtk::TextIter.
   * @return <tt>true</tt> if @a iter  was moved and is not on the end iterator.
   "
      end

      operation 605993 "starts_display_line"
	public explicit_return_type "bool"
	nparams 1
	  param in name "iter" type class_ref 249129 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Determines whether @a iter  is at the start of a display line.
   * See forward_display_line() for an explanation of
   * display lines vs. paragraphs.
   * @param iter A Gtk::TextIter.
   * @return <tt>true</tt> if @a iter  begins a wrapped line.
   "
      end

      operation 606121 "move_visually"
	public explicit_return_type "bool"
	nparams 2
	  param inout name "iter" type class_ref 249129 // iterator
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Move the iterator a given number of characters visually, treating
   * it as the strong cursor position. If @a count  is positive, then the
   * new strong cursor position will be @a count  positions to the right of
   * the old cursor position. If @a count  is negative then the new strong
   * cursor position will be @a count  positions to the left of the old
   * cursor position.
   * 
   * In the presence of bidirection text, the correspondence
   * between logical and visual order will depend on the direction
   * of the current run, and there may be jumps when the cursor
   * is moved off of the end of a run.
   * @param iter A Gtk::TextIter.
   * @param count Number of characters to move (negative moves left, positive moves right).
   * @return <tt>true</tt> if @a iter  moved and is not on the end iterator.
   "
      end

      operation 606249 "add_child_at_anchor"
	public explicit_return_type "void"
	nparams 2
	  param inout name "child" type class_ref 130089 // Widget
	  param in name "anchor" explicit_type "Glib::RefPtr<TextBuffer::ChildAnchor>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Adds a child widget in the text buffer, at the given @a anchor .
   * @param child A Gtk::Widget.
   * @param anchor A Gtk::TextChildAnchor in the Gtk::TextBuffer for @a text_view .
   "
      end

      operation 606377 "add_child_in_window"
	public explicit_return_type "void"
	nparams 4
	  param inout name "child" type class_ref 130089 // Widget
	  param in name "which_window" type class_ref 254633 // TextWindowType
	  param in name "xpos" explicit_type "int"
	  param in name "ypos" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Adds a child at fixed coordinates in one of the text widget's
   * windows.  The window must have nonzero size (see
   * set_border_window_size()).  Note that the child
   * coordinates are given relative to the Gdk::Window in question, and
   * that these coordinates have no sane relationship to scrolling. When
   * placing a child in Gtk::TEXT_WINDOW_WIDGET, scrolling is
   * irrelevant, the child floats above all scrollable areas. But when
   * placing a child in one of the scrollable windows (border windows or
   * text window), you'll need to compute the child's correct position
   * in buffer coordinates any time scrolling occurs or buffer changes
   * occur, and then call move_child() to update the
   * child's position. Unfortunately there's no good way to detect that
   * scrolling has occurred, using the current API; a possible hack
   * would be to update all child positions when the scroll adjustments
   * change or the text buffer changes. See bug 64518 on
   * bugzilla.gnome.org for status of fixing this issue.
   * @param child A Gtk::Widget.
   * @param which_window Which window the child should appear in.
   * @param xpos X position of child in window coordinates.
   * @param ypos Y position of child in window coordinates.
   "
      end

      operation 606505 "move_child"
	public explicit_return_type "void"
	nparams 3
	  param inout name "child" type class_ref 130089 // Widget
	  param in name "xpos" explicit_type "int"
	  param in name "ypos" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Updates the position of a child, as for add_child_in_window().
   * @param child Child widget already added to the text view.
   * @param xpos New X position in window coordinates.
   * @param ypos New Y position in window coordinates.
   "
      end

      operation 606633 "set_wrap_mode"
	public explicit_return_type "void"
	nparams 1
	  param in name "wrap_mode" type class_ref 317225 // WrapMode
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the line wrapping for the view.
   * @param wrap_mode A Gtk::WrapMode.
   "
      end

      operation 606761 "get_wrap_mode"
	const public return_type class_ref 317225 // WrapMode
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the line wrapping for the view.
   * @return The line wrap setting.
   "
      end

      operation 606889 "set_editable"
	public explicit_return_type "void"
	nparams 1
	  param in name "setting" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the default editability of the Gtk::TextView. You can override
   * this default setting with tags in the buffer, using the \"editable\"
   * attribute of tags.
   * @param setting Whether it's editable.
   "
      end

      operation 607017 "get_editable"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the default editability of the Gtk::TextView. Tags in the
   * buffer may override this setting for some ranges of text.
   * @return Whether text is editable by default.
   "
      end

      operation 607145 "set_pixels_above_lines"
	public explicit_return_type "void"
	nparams 1
	  param in name "pixels_above_lines" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the default number of blank pixels above paragraphs in @a text_view .
   * Tags in the buffer for @a text_view  may override the defaults.
   * @param pixels_above_lines Pixels above paragraphs.
   "
      end

      operation 607273 "get_pixels_above_lines"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the default number of pixels to put above paragraphs.
   * @return Default number of pixels above paragraphs.
   "
      end

      operation 607401 "set_pixels_below_lines"
	public explicit_return_type "void"
	nparams 1
	  param in name "pixels_below_lines" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the default number of pixels of blank space
   * to put below paragraphs in @a text_view . May be overridden
   * by tags applied to @a text_view 's buffer.
   * @param pixels_below_lines Pixels below paragraphs.
   "
      end

      operation 607529 "get_pixels_below_lines"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the value set by set_pixels_below_lines().
   * @return Default number of blank pixels below paragraphs.
   "
      end

      operation 607657 "set_pixels_inside_wrap"
	public explicit_return_type "void"
	nparams 1
	  param in name "pixels_inside_wrap" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the default number of pixels of blank space to leave between
   * display/wrapped lines within a paragraph. May be overridden by
   * tags in @a text_view 's buffer.
   * @param pixels_inside_wrap Default number of pixels between wrapped lines.
   "
      end

      operation 607785 "get_pixels_inside_wrap"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the value set by set_pixels_inside_wrap().
   * @return Default number of pixels of blank space between wrapped lines.
   "
      end

      operation 607913 "set_justification"
	public explicit_return_type "void"
	nparams 1
	  param in name "justification" type class_ref 203817 // Justification
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the default justification of text in @a text_view .
   * Tags in the view's buffer may override the default.
   * @param justification Justification.
   "
      end

      operation 608041 "get_justification"
	const public return_type class_ref 203817 // Justification
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the default justification of paragraphs in @a text_view .
   * Tags in the buffer may override the default.
   * @return Default justification.
   "
      end

      operation 608169 "set_left_margin"
	public explicit_return_type "void"
	nparams 1
	  param in name "left_margin" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the default left margin for text in @a text_view .
   * Tags in the buffer may override the default.
   * @param left_margin Left margin in pixels.
   "
      end

      operation 608297 "get_left_margin"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the default left margin size of paragraphs in the @a text_view .
   * Tags in the buffer may override the default.
   * @return Left margin in pixels.
   "
      end

      operation 608425 "set_right_margin"
	public explicit_return_type "void"
	nparams 1
	  param in name "right_margin" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the default right margin for text in the text view.
   * Tags in the buffer may override the default.
   * @param right_margin Right margin in pixels.
   "
      end

      operation 608553 "get_right_margin"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the default right margin for text in @a text_view . Tags
   * in the buffer may override the default.
   * @return Right margin in pixels.
   "
      end

      operation 608681 "set_indent"
	public explicit_return_type "void"
	nparams 1
	  param in name "indent" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the default indentation for paragraphs in @a text_view .
   * Tags in the buffer may override the default.
   * @param indent Indentation in pixels.
   "
      end

      operation 608809 "get_indent"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the default indentation of paragraphs in @a text_view .
   * Tags in the view's buffer may override the default.
   * The indentation may be negative.
   * @return Number of pixels of indentation.
   "
      end

      operation 608937 "set_tabs"
	public explicit_return_type "void"
	nparams 1
	  param inout name "tabs" explicit_type "Pango::TabArray"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the default tab stops for paragraphs in @a text_view .
   * Tags in the buffer may override the default.
   * @param tabs Tabs as a Pango::TabArray.
   "
      end

      operation 609065 "get_tabs"
	const public explicit_return_type "Pango::TabArray"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the default tabs for @a text_view . Tags in the buffer may
   * override the defaults. The returned array will be <tt>0</tt> if
   * \"standard\" (8-space) tabs are used.
   * @return Copy of default tab array, or <tt>0</tt> if \"standard\" tabs are used.
   "
      end

      operation 609193 "get_default_attributes"
	const public return_type class_ref 247593 // TextAttributes
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Obtains a copy of the default text attributes. These are the
   * attributes used for text unless a tag overrides them.
   * You'd typically pass the default attributes in to
   * Gtk::TextIter::get_attributes() in order to get the
   * attributes in effect at a given text position.
   * @return A new #Gtk::TextAttributes.
   "
      end

      operation 609321 "set_overwrite"
	public explicit_return_type "void"
	nparams 1
	  param in name "overwrite" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Changes the Gtk::TextView overwrite mode.
   * 
   * Since: 2.4
   * @param overwrite <tt>true</tt> to turn on overwrite mode, <tt>false</tt> to turn it off.
   "
      end

      operation 609449 "get_overwrite"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether the Gtk::TextView is in overwrite mode or not.
   * @return Whether @a text_view  is in overwrite mode or not.
   * 
   * Since: 2.4.
   "
      end

      operation 609577 "set_accepts_tab"
	public explicit_return_type "void"
	nparams 1
	  param in name "accepts_tab" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the behavior of the text widget when the Tab key is pressed. If @a accepts_tab 
   * is <tt>true</tt> a tab character is inserted. If @a accepts_tab  is <tt>false</tt> the keyboard focus
   * is moved to the next widget in the focus chain.
   * 
   * Since: 2.4
   * @param accepts_tab <tt>true</tt> if pressing the Tab key should insert a tab character, <tt>false</tt>, if pressing the Tab key should move the keyboard focus.
   "
      end

      operation 609705 "get_accepts_tab"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether pressing the Tab key inserts a tab characters.
   * set_accepts_tab().
   * @return <tt>true</tt> if pressing the Tab key inserts a tab character, <tt>false</tt> if pressing the Tab key moves the keyboard focus.
   * 
   * Since: 2.4.
   "
      end

      operation 609833 "signal_set_scroll_adjustments"
	public explicit_return_type "Glib::SignalProxy2< void,Adjustment*,Adjustment* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 609961 "signal_populate_popup"
	public explicit_return_type "Glib::SignalProxy1< void,Menu* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 610089 "signal_set_anchor"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 610217 "signal_insert_at_cursor"
	public explicit_return_type "Glib::SignalProxy1< void,const Glib::ustring& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 610345 "property_pixels_above_lines"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Keybinding signals:
* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 610473 "property_pixels_above_lines"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 610601 "property_pixels_below_lines"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 610729 "property_pixels_below_lines"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 610857 "property_pixels_inside_wrap"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 610985 "property_pixels_inside_wrap"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 611113 "property_editable"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 611241 "property_editable"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 611369 "property_wrap_mode"
	public explicit_return_type "Glib::PropertyProxy<WrapMode>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 611497 "property_wrap_mode"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<WrapMode>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 611625 "property_justification"
	public explicit_return_type "Glib::PropertyProxy<Justification>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 611753 "property_justification"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Justification>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 611881 "property_left_margin"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 612009 "property_left_margin"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 612137 "property_right_margin"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 612265 "property_right_margin"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 612393 "property_indent"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 612521 "property_indent"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 612649 "property_tabs"
	public explicit_return_type "Glib::PropertyProxy<Pango::TabArray>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 612777 "property_tabs"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Pango::TabArray>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 612905 "property_cursor_visible"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 613033 "property_cursor_visible"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 613161 "property_buffer"
	public explicit_return_type "Glib::PropertyProxy< Glib::RefPtr<TextBuffer> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 613289 "property_buffer"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly< Glib::RefPtr<TextBuffer> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 613417 "property_overwrite"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 613545 "property_overwrite"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 613673 "property_accepts_tab"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 613801 "property_accepts_tab"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end
    end

    class 254633 "TextWindowType"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* @addtogroup gtkmmEnums Enums and Flags 
*
 * @ingroup gtkmmEnums
 "
      attribute 206121 "TEXT_WINDOW_PRIVATE"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 206249 "TEXT_WINDOW_WIDGET"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 206377 "TEXT_WINDOW_TEXT"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 206505 "TEXT_WINDOW_LEFT"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 206633 "TEXT_WINDOW_RIGHT"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 206761 "TEXT_WINDOW_TOP"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 206889 "TEXT_WINDOW_BOTTOM"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 255785 "ToggleAction"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/toggleaction.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk"
      class 256041 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 255785 // ToggleAction
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 217641 // <realization>
	  relation 217641 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 217641 // <realization>
	    b parent class_ref 255785 // ToggleAction
	end
      end

      class 256297 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "ToggleAction_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 256425 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkToggleAction"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 256553 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkToggleActionClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 218025 // toggleaction_class_ (<directional composition>)
	relation 218025 *-->
	  a role_name "toggleaction_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 218025 // toggleaction_class_ (<directional composition>)
	  b parent class_ref 256297 // CppClassType
      end

      operation 613929 "ToggleAction"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 255785 // ToggleAction
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 614057 "operator ="
	private return_type class_ref 255785 // ToggleAction
	nparams 1
	  param in name "" type class_ref 255785 // ToggleAction
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 614185 "ToggleAction"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 614313 "ToggleAction"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkToggleAction"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 614441 "~ToggleAction"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 614569 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 614697 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 614825 "gobj"
	cpp_inline public explicit_return_type "GtkToggleAction"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkToggleAction*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 614953 "gobj"
	const cpp_inline public explicit_return_type "GtkToggleAction"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkToggleAction*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 615081 "gobj_copy"
	public explicit_return_type "GtkToggleAction"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs."
      end

      operation 615209 "ToggleAction"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 615337 "ToggleAction"
	protected explicit_return_type ""
	nparams 5
	  param in name "name" explicit_type "Glib::ustring"
	  param in name "stock_id" type class_ref 130985 // StockID
	  param in name "label" explicit_type "Glib::ustring"
	    defaultvalue " Glib::ustring()"
	  param in name "tooltip" explicit_type "Glib::ustring"
	    defaultvalue " Glib::ustring()"
	  param in name "is_active" explicit_type "bool"
	    defaultvalue " false"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, ${t4} ${p4}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, ${t4} ${p4}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 615465 "create"
	class_operation public explicit_return_type "Glib::RefPtr<ToggleAction>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 615593 "create"
	class_operation public explicit_return_type "Glib::RefPtr<ToggleAction>"
	nparams 4
	  param in name "name" explicit_type "Glib::ustring"
	  param in name "label" explicit_type "Glib::ustring"
	    defaultvalue " Glib::ustring()"
	  param in name "tooltip" explicit_type "Glib::ustring"
	    defaultvalue "  Glib::ustring()"
	  param in name "is_active" explicit_type "bool"
	    defaultvalue " false"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 615721 "create"
	class_operation public explicit_return_type "Glib::RefPtr<ToggleAction>"
	nparams 5
	  param in name "name" explicit_type "Glib::ustring"
	  param in name "stock_id" explicit_type "Gtk::StockID"
	  param in name "label" explicit_type "Glib::ustring"
	    defaultvalue "  Glib::ustring()"
	  param in name "tooltip" explicit_type "Glib::ustring"
	    defaultvalue "  Glib::ustring()"
	  param in name "is_active" explicit_type "bool"
	    defaultvalue " false"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, ${t4} ${p4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, ${t4} ${p4}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 615849 "toggled"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Emits the \"toggled\" signal on the toggle action.
   * 
   * Since: 2.4
   "
      end

      operation 615977 "set_active"
	public explicit_return_type "void"
	nparams 1
	  param in name "is_active" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the checked state on the toggle action.
   * 
   * Since: 2.4
   * @param is_active Whether the action should be checked or not.
   "
      end

      operation 616105 "get_active"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the checked state of the toggle action.
   * @return The checked state of the toggle action
   * 
   * Since: 2.4.
   "
      end

      operation 616233 "set_draw_as_radio"
	public explicit_return_type "void"
	nparams 1
	  param in name "draw_as_radio" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets whether the action should have proxies like a radio action.
   * 
   * Since: 2.4
   * @param draw_as_radio Whether the action should have proxies like a radio 
   * action.
   "
      end

      operation 616361 "get_draw_as_radio"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether the action should have proxies like a radio action.
   * @return Whether the action should have proxies like a radio action.
   * 
   * Since: 2.4.
   "
      end

      operation 616489 "signal_toggled"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 616617 "property_draw_as_radio"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 616745 "property_draw_as_radio"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 616873 "on_toggled"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end
    end

    class 293545 "ToggleButton"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/togglebutton.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* A Gtk::ToggleButton will remain 'pressed-in' when clicked. Clicking again will cause the toggle button to return to it's normal state.
 * The state of a Gtk::ToggleButton can be set specifically using set_active(), and retrieved using get_active().
 * To simply switch the state of a toggle button, use toggled().
 *
 * @ingroup Widgets
 "
      classrelation 218153 // <generalisation>
	relation 218153 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 218153 // <generalisation>
	  b parent class_ref 141353 // Button
      end

      class 256681 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 293545 // ToggleButton
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 218281 // <realization>
	  relation 218281 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 218281 // <realization>
	    b parent class_ref 293545 // ToggleButton
	end
      end

      class 256937 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "ToggleButton_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 257065 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkToggleButton"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 257193 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkToggleButtonClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 617001 "~ToggleButton"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 218665 // togglebutton_class_ (<directional composition>)
	relation 218665 *-->
	  a role_name "togglebutton_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 218665 // togglebutton_class_ (<directional composition>)
	  b parent class_ref 256937 // CppClassType
      end

      operation 617129 "ToggleButton"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 293545 // ToggleButton
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 617257 "operator ="
	private return_type class_ref 293545 // ToggleButton
	nparams 1
	  param in name "" type class_ref 293545 // ToggleButton
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 617385 "ToggleButton"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 617513 "ToggleButton"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkToggleButton"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 617641 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 617769 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 617897 "gobj"
	cpp_inline public explicit_return_type "GtkToggleButton"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkToggleButton*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 618025 "gobj"
	const cpp_inline public explicit_return_type "GtkToggleButton"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkToggleButton*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 618153 "on_toggled"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 618281 "ToggleButton"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "* Create an empty toggle button.
   * With an empty button, you can Gtk::Button::add() a widget such as a
   * Gtk::Pixmap or Gtk::Box.
   *
   * If you just wish to add a Gtk::Label, you may want to use the
   * Gtk::ToggleButton(const Glib::ustring &label) constructor directly
   * instead.
   "
      end

      operation 618409 "ToggleButton"
	public explicit_return_type ""
	nparams 2
	  param in name "label" explicit_type "Glib::ustring"
	  param in name "mnemonic" explicit_type "bool"
	    defaultvalue " false"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${throw}{
${body}}
"
	
	
	
	
	comment "* Create a toggle button with a label.
   * You won't be able
   * to add a widget to this button since it already contains a Gtk::Label
   "
      end

      operation 618537 "set_mode"
	public explicit_return_type "void"
	nparams 1
	  param in name "draw_indicator" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets whether the button is displayed as a separate indicator and label.
   * You can call this function on a checkbutton or a radiobutton with
   *  @a draw_indicator  = <tt>false</tt> to make the button look like a normal button
   * 
   * This function only effects instances of classes like Gtk::CheckButton
   * and Gtk::RadioButton that derive from Gtk::ToggleButton,
   * not instances of Gtk::ToggleButton itself.
   * @param draw_indicator If <tt>true</tt>, draw the button as a separate indicator
   * and label; if <tt>false</tt>, draw the button like a normal button.
   "
      end

      operation 618665 "get_mode"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves whether the button is displayed as a separate indicator
   * and label. See set_mode().
   * @return <tt>true</tt> if the togglebutton is drawn as a separate indicator
   * and label.
   "
      end

      operation 618793 "set_active"
	public explicit_return_type "void"
	nparams 1
	  param in name "is_active" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 618921 "get_active"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 619049 "set_inconsistent"
	public explicit_return_type "void"
	nparams 1
	  param in name "setting" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* If the user has selected a range of elements (such as some text or
   * spreadsheet cells) that are affected by a toggle button, and the
   * current values in that range are inconsistent, you may want to
   * display the toggle in an \"in between\" state. This function turns on
   * \"in between\" display.  Normally you would turn off the inconsistent
   * state again if the user toggles the toggle button. This has to be
   * done manually, set_inconsistent() only affects
   * visual appearance, it doesn't affect the semantics of the button.
   * @param setting <tt>true</tt> if state is inconsistent.
   "
      end

      operation 619177 "get_inconsistent"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the value set by set_inconsistent().
   * @return <tt>true</tt> if the button is displayed as inconsistent, <tt>false</tt> otherwise.
   "
      end

      operation 619305 "toggled"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 619433 "signal_toggled"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 619561 "property_active"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 619689 "property_active"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 619817 "property_inconsistent"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 619945 "property_inconsistent"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 620073 "property_draw_indicator"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 620201 "property_draw_indicator"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end
    end

    class 222633 "ToggleToolButton"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/toggletoolbutton.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* A Gtk::ToolItem containing a toggle button.
 *
 * A ToggleToolButton is a Gtk::ToolItem that contains a toggle button.
 * @ingroup Widgets
 "
      classrelation 218793 // <generalisation>
	relation 218793 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 218793 // <generalisation>
	  b parent class_ref 257321 // ToolButton
      end

      class 257449 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 222633 // ToggleToolButton
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 218921 // <realization>
	  relation 218921 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 218921 // <realization>
	    b parent class_ref 222633 // ToggleToolButton
	end
      end

      class 257705 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "ToggleToolButton_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 257833 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkToggleToolButton"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 257961 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkToggleToolButtonClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 620329 "~ToggleToolButton"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 219305 // toggletoolbutton_class_ (<directional composition>)
	relation 219305 *-->
	  a role_name "toggletoolbutton_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 219305 // toggletoolbutton_class_ (<directional composition>)
	  b parent class_ref 257705 // CppClassType
      end

      operation 620457 "ToggleToolButton"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 222633 // ToggleToolButton
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 620585 "operator ="
	private return_type class_ref 222633 // ToggleToolButton
	nparams 1
	  param in name "" type class_ref 222633 // ToggleToolButton
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 620713 "ToggleToolButton"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 620841 "ToggleToolButton"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkToggleToolButton"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 620969 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 621097 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 621225 "gobj"
	cpp_inline public explicit_return_type "GtkToggleToolButton"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkToggleToolButton*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 621353 "gobj"
	const cpp_inline public explicit_return_type "GtkToggleToolButton"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkToggleToolButton*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 621481 "on_toggled"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 621609 "ToggleToolButton"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "* Creates a new ToggleToolButton.
   "
      end

      operation 621737 "ToggleToolButton"
	public explicit_return_type ""
	nparams 1
	  param in name "stock_id" explicit_type "Gtk::StockID"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment "* Creates a new ToggleToolButton from a StockID.
   *
   * The ToggleToolButton will be created according to the @a stock_id properties.
   * 
   * @param stock_id The StockID which determines the look of the ToggleToolButton.
   "
      end

      operation 621865 "ToggleToolButton"
	public explicit_return_type ""
	nparams 1
	  param in name "label" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment "* Creates a new ToggleToolButton with a label.
   *
   * The ToggleToolButton will have the label @a label.
   *
   * @param label The string used to display the label for this ToggleToolButton.
   "
      end

      operation 621993 "ToggleToolButton"
	public explicit_return_type ""
	nparams 2
	  param inout name "icon_widget" type class_ref 130089 // Widget
	  param in name "label" explicit_type "Glib::ustring"
	    defaultvalue " Glib::ustring()"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${throw}{
${body}}
"
	
	
	
	
	comment "* Creates a new ToggleToolButton with an image.
   *
   * The ToggleToolButton will have the label @a label and an image widget @a icon_widget.
   *
   * @param icon_widget The widget placed as the ToggleToolButton's icon.
   * @param label The string used to display the label for this ToggleToolButton.
   "
      end

      operation 622121 "set_active"
	public explicit_return_type "void"
	nparams 1
	  param in name "is_active" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the status of the toggle tool button. Set to <tt>true</tt> if you
   * want the GtkToggleButton to be 'pressed in', and <tt>false</tt> to raise it.
   * This action causes the toggled signal to be emitted.
   * 
   * Since: 2.4
   * @param is_active Whether @a button  should be active.
   "
      end

      operation 622249 "get_active"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Queries a Gtk::ToggleToolButton and returns its current state.
   * Returns <tt>true</tt> if the toggle button is pressed in and <tt>false</tt> if it is raised.
   * @return <tt>true</tt> if the toggle tool button is pressed in, <tt>false</tt> if not
   * 
   * Since: 2.4.
   "
      end

      operation 622377 "signal_toggled"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 258089 "Toolbar"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/toolbar.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* Bars of buttons and other widgets.
 * @ingroup Widgets
 * @ingroup Containers
 * @ingroup Toolbars
 "
      classrelation 219433 // <generalisation>
	relation 219433 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 219433 // <generalisation>
	  b parent class_ref 280745 // Container
      end

      class 258217 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 258089 // Toolbar
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 219561 // <realization>
	  relation 219561 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 219561 // <realization>
	    b parent class_ref 258089 // Toolbar
	end
      end

      class 258473 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Toolbar_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 258601 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkToolbar"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 258729 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkToolbarClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 622505 "~Toolbar"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 219945 // toolbar_class_ (<directional composition>)
	relation 219945 *-->
	  a role_name "toolbar_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 219945 // toolbar_class_ (<directional composition>)
	  b parent class_ref 258473 // CppClassType
      end

      operation 622633 "Toolbar"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 258089 // Toolbar
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 622761 "operator ="
	private return_type class_ref 258089 // Toolbar
	nparams 1
	  param in name "" type class_ref 258089 // Toolbar
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 622889 "Toolbar"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 623017 "Toolbar"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkToolbar"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 623145 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 623273 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 623401 "gobj"
	cpp_inline public explicit_return_type "GtkToolbar"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkToolbar*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 623529 "gobj"
	const cpp_inline public explicit_return_type "GtkToolbar"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkToolbar*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 623657 "on_orientation_changed"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "orientation" type class_ref 281513 // Orientation
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 623785 "on_toolbar_style_changed"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "style" type class_ref 281641 // ToolbarStyle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 623913 "on_popup_context_menu"
	cpp_virtual protected explicit_return_type "bool"
	nparams 3
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "button_number" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 624041 "Toolbar"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 624169 "insert"
	public explicit_return_type "void"
	nparams 2
	  param inout name "item" type class_ref 131497 // ToolItem
	  param in name "pos" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Insert a Gtk::ToolItem into the toolbar at position @a pos . If @a pos  is
   * 0 the item is prepended to the start of the toolbar. If @a pos  is
   * negative, the item is appended to the end of the toolbar.
   * 
   * Since: 2.4
   * @param item A Gtk::ToolItem.
   * @param pos The position of the new item.
   "
      end

      operation 624297 "insert"
	public explicit_return_type "void"
	nparams 3
	  param inout name "item" type class_ref 257321 // ToolButton
	  param in name "pos" explicit_type "int"
	  param in name "clicked_slot" explicit_type "sigc::slot<void>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 624425 "insert"
	public explicit_return_type "void"
	nparams 3
	  param inout name "item" type class_ref 222633 // ToggleToolButton
	  param in name "pos" explicit_type "int"
	  param in name "toggled_slot" explicit_type "sigc::slot<void>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 624553 "append"
	public explicit_return_type "void"
	nparams 1
	  param inout name "item" type class_ref 131497 // ToolItem
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 624681 "append"
	public explicit_return_type "void"
	nparams 2
	  param inout name "item" type class_ref 257321 // ToolButton
	  param in name "clicked_slot" explicit_type "sigc::slot<void>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 624809 "append"
	public explicit_return_type "void"
	nparams 2
	  param inout name "item" type class_ref 222633 // ToggleToolButton
	  param in name "toggled_slot" explicit_type "sigc::slot<void>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 624937 "prepend"
	public explicit_return_type "void"
	nparams 1
	  param inout name "item" type class_ref 131497 // ToolItem
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 625065 "prepend"
	public explicit_return_type "void"
	nparams 2
	  param inout name "item" type class_ref 257321 // ToolButton
	  param in name "clicked_slot" explicit_type "sigc::slot<void>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 625193 "prepend"
	public explicit_return_type "void"
	nparams 2
	  param inout name "item" type class_ref 222633 // ToggleToolButton
	  param in name "toggled_slot" explicit_type "sigc::slot<void>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 625321 "get_item_index"
	const public explicit_return_type "int"
	nparams 1
	  param in name "item" type class_ref 131497 // ToolItem
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the position of @a item  on the toolbar, starting from 0.
   * It is an error if @a item  is not a child of the toolbar.
   * @param item A Gtk::ToolItem that is a child of @a toolbar .
   * @return The position of item on the toolbar.
   * 
   * Since: 2.4.
   "
      end

      operation 625449 "get_n_items"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the number of items on the toolbar.
   * @return The number of items on the toolbar
   * 
   * Since: 2.4.
   "
      end

      operation 625577 "get_nth_item"
	public return_type class_ref 131497 // ToolItem
	nparams 1
	  param in name "n" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the @a n &lt;!-- --&gt;'s item on @a toolbar , or <tt>0</tt> if the
   * toolbar does not contain an @a n &lt;!-- --&gt;'th item.
   * @param n A position on the toolbar.
   * @return The @a n &lt;!-- --&gt;'th Gtk::ToolItem on @a toolbar , or <tt>0</tt> if there
   * isn't an @a n &lt;!-- --&gt;th item.
   * 
   * Since: 2.4.
   "
      end

      operation 625705 "get_nth_item"
	const public return_type class_ref 131497 // ToolItem
	nparams 1
	  param in name "n" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the @a n &lt;!-- --&gt;'s item on @a toolbar , or <tt>0</tt> if the
   * toolbar does not contain an @a n &lt;!-- --&gt;'th item.
   * @param n A position on the toolbar.
   * @return The @a n &lt;!-- --&gt;'th Gtk::ToolItem on @a toolbar , or <tt>0</tt> if there
   * isn't an @a n &lt;!-- --&gt;th item.
   * 
   * Since: 2.4.
   "
      end

      operation 625833 "get_show_arrow"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether the toolbar has an overflow menu.
   * See set_show_arrow()
   * @return Since: 2.4.
   "
      end

      operation 625961 "set_show_arrow"
	public explicit_return_type "void"
	nparams 1
	  param in name "show_arrow" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets whether to show an overflow menu when
   *  @a toolbar  doesn't have room for all items on it. If <tt>true</tt>,
   * items that there are not room are available through an
   * overflow menu.
   * 
   * Since: 2.4
   * @param show_arrow Whether to show an overflow menu.
   "
      end

      operation 626089 "set_orientation"
	public explicit_return_type "void"
	nparams 1
	  param in name "orientation" type class_ref 281513 // Orientation
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " Style methods 
* Sets whether a toolbar should appear horizontally or vertically.
   * @param orientation A new Gtk::Orientation.
   "
      end

      operation 626217 "get_orientation"
	const public return_type class_ref 281513 // Orientation
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the current orientation of the toolbar. See
   * set_orientation().
   * @return The orientation.
   "
      end

      operation 626345 "set_toolbar_style"
	public explicit_return_type "void"
	nparams 1
	  param in name "style" type class_ref 281641 // ToolbarStyle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Alters the view of @a toolbar  to display either icons only, text only, or both.
   * @param style The new style for @a toolbar .
   "
      end

      operation 626473 "get_toolbar_style"
	const public return_type class_ref 281641 // ToolbarStyle
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves whether the toolbar has text, icons, or both . See
   * set_style().
   * @return The current style of @a toolbar .
   "
      end

      operation 626601 "set_tooltips"
	public explicit_return_type "void"
	nparams 1
	  param in name "enable" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets if the tooltips of a toolbar should be active or not.
   * @param enable Set to <tt>false</tt> to disable the tooltips, or <tt>true</tt> to enable them.
   "
      end

      operation 626729 "get_tooltips"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves whether tooltips are enabled. See
   * set_tooltips().
   * @return <tt>true</tt> if tooltips are enabled.
   "
      end

      operation 626857 "unset_toolbar_style"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Unsets a toolbar style set with set_style(), so that
   * user preferences will be used to determine the toolbar style.
   "
      end

      operation 626985 "get_icon_size"
	const public return_type class_ref 131241 // IconSize
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Note that gtk_toolbar_set_icon_size() is deprecated, bug gtk_toolbar_get_icon_size() is not.
* Retrieves the icon size fo the toolbar. See set_icon_size().
   * @return The current icon size for the icons on the toolbar.
   "
      end

      operation 627113 "get_relief_style"
	const public return_type class_ref 142121 // ReliefStyle
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the relief style of buttons on @a toolbar . See
   * Gtk::Button::set_relief().
   * @return The relief style of buttons on @a toolbar .
   * 
   * Since: 2.4.
   "
      end

      operation 627241 "get_drop_index"
	const public explicit_return_type "int"
	nparams 2
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the position corresponding to the indicated point on
   *  @a toolbar . This is useful when dragging items to the toolbar:
   * this function returns the position a new item should be
   * inserted.
   * 
   *  @a x  and @a y  are in @a toolbar  coordinates.
   * @param x X coordinate of a point on the toolbar.
   * @param y Y coordinate of a point on the toolbar.
   * @return The position corresponding to the point ( @a x , @a y ) on the toolbar.
   * 
   * Since: 2.4.
   "
      end

      operation 627369 "set_drop_highlight_item"
	public explicit_return_type "void"
	nparams 2
	  param inout name "tool_item" type class_ref 131497 // ToolItem
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Highlights @a toolbar  to give an idea of what it would look like
   * if @a item  was added to @a toolbar  at position indicated by @a index . If @a item 
   * is <tt>0</tt>, highlighting is turned off. In that case @a index  is ignored.
   * 
   * The @a tool_item  passed to this function must not be part of any widget
   * hierarchy. When an item is set as drop highlight item it can not
   * added to any widget hierarchy or used as highlight item for another
   * toolbar.
   * 
   * Since: 2.4
   * @param tool_item A Gtk::ToolItem, or <tt>0</tt> to turn of highlighting.
   * @param index A position on @a toolbar .
   "
      end

      operation 627497 "unset_drop_highlight_item"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 627625 "signal_orientation_changed"
	public explicit_return_type "Glib::SignalProxy1< void,Orientation >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 627753 "signal_toolbar_style_changed"
	public explicit_return_type "Glib::SignalProxy1< void,ToolbarStyle >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 627881 "signal_popup_context_menu"
	public explicit_return_type "Glib::SignalProxy3< bool,int,int,int >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 628009 "get_tooltips_object"
	const public return_type class_ref 258857 // Tooltips
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "This is called get_tooltips_object() to avoid a clash with get_tooltips(), which just says whether they are enabled."
      end

      operation 628137 "property_orientation"
	public explicit_return_type "Glib::PropertyProxy<Orientation>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "This is probably the same as Container::children().size(), which is deprecated anyway?
_MEMBER_GET(num_children, num_children, int, gint)
There is already set/get_orientation():
_MEMBER_GET(orientation, orientation, GtkOrientation, Orientation)
There is already set/get_toolbar_style():
_MEMBER_GET(style, style, GtkToolbarStyle, ToolbarStyle)
There is already set/get_icon_size():
_MEMBER_GET(icon_size, icon_size, int, gint)
Ignore deprecated GtkToolbarAPI:
Normally we just deprecate it in gtkmm too,
but the GtkToolbar compatibility system is particularly unpleasant, so we just removed it in gtkmm 2.4. murrayc.
* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 628265 "property_orientation"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Orientation>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 628393 "property_toolbar_style"
	public explicit_return_type "Glib::PropertyProxy<ToolbarStyle>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 628521 "property_toolbar_style"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<ToolbarStyle>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 628649 "property_show_arrow"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 628777 "property_show_arrow"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end
    end

    class 281641 "ToolbarStyle"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 "
      attribute 193193 "TOOLBAR_ICONS"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 193321 "TOOLBAR_TEXT"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 193449 "TOOLBAR_BOTH"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 193577 "TOOLBAR_BOTH_HORIZ"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 257321 "ToolButton"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/toolbutton.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* A Gtk::ToolItem subclass that displays buttons.
 * 
 * A ToolButton is are Gtk::ToolItem containing a button.
 * @ingroup Widgets
 "
      classrelation 220073 // <generalisation>
	relation 220073 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 220073 // <generalisation>
	  b parent class_ref 131497 // ToolItem
      end

      class 258985 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 257321 // ToolButton
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 220201 // <realization>
	  relation 220201 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 220201 // <realization>
	    b parent class_ref 257321 // ToolButton
	end
      end

      class 259241 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "ToolButton_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 259369 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkToolButton"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 259497 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkToolButtonClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 628905 "~ToolButton"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 220585 // toolbutton_class_ (<directional composition>)
	relation 220585 *-->
	  a role_name "toolbutton_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 220585 // toolbutton_class_ (<directional composition>)
	  b parent class_ref 259241 // CppClassType
      end

      operation 629033 "ToolButton"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 257321 // ToolButton
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 629161 "operator ="
	private return_type class_ref 257321 // ToolButton
	nparams 1
	  param in name "" type class_ref 257321 // ToolButton
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 629289 "ToolButton"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 629417 "ToolButton"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkToolButton"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 629545 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 629673 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 629801 "gobj"
	cpp_inline public explicit_return_type "GtkToolButton"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkToolButton*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 629929 "gobj"
	const cpp_inline public explicit_return_type "GtkToolButton"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkToolButton*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 630057 "on_clicked"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 630185 "ToolButton"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "* Creates a new ToolButton.
   "
      end

      operation 630313 "ToolButton"
	public explicit_return_type ""
	nparams 1
	  param in name "stock_id" explicit_type "Gtk::StockID"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment "* Creates a new ToolButton from a StockID.
   *
   * The ToolButton will be created according to the @a stock_id properties.
   * 
   * @param stock_id The StockID which determines the look of the ToolButton.
   "
      end

      operation 630441 "ToolButton"
	public explicit_return_type ""
	nparams 1
	  param in name "label" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment "* Creates a new ToolButton with a label.
   *
   * The ToolButton will have the label @a label.
   *
   * @param label The string used to display the label for this ToolButton.
   "
      end

      operation 630569 "ToolButton"
	public explicit_return_type ""
	nparams 2
	  param inout name "icon_widget" type class_ref 130089 // Widget
	  param in name "label" explicit_type "Glib::ustring"
	    defaultvalue " Glib::ustring()"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${throw}{
${body}}
"
	
	
	
	
	comment "* Creates a new ToolButton with an image.
   *
   * The ToolButton will have the label @a label and an image widget @a icon_widget.
   *
   * @param icon_widget The widget placed as the ToolButton's icon.
   * @param label The string used to display the label for this ToolButton.
   "
      end

      operation 630697 "set_label"
	public explicit_return_type "void"
	nparams 1
	  param in name "label" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets @a label  as the label used for the tool button. The \"label\" property
   * only has an effect if not overridden by a non-<tt>0</tt> \"label_widget\" property.
   * If both the \"label_widget\" and \"label\" properties are <tt>0</tt>, the label
   * is determined by the \"stock_id\" property. If the \"stock_id\" property is also
   * <tt>0</tt>, @a button  will not have a label.
   * 
   * Since: 2.4
   * @param label A string that will be used as label, or <tt>0</tt>.
   "
      end

      operation 630825 "get_label"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the label used by the tool button, or <tt>0</tt> if the tool button
   * doesn't have a label. or uses a the label from a stock item. The returned
   * string is owned by GTK+, and must not be modified or freed.
   * @return The label, or <tt>0</tt>
   * 
   * Since: 2.4.
   "
      end

      operation 630953 "set_use_underline"
	public explicit_return_type "void"
	nparams 1
	  param in name "use_underline" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* If set, an underline in the label property indicates that the next character
   * should be used for the mnemonic accelerator key in the overflow menu. For
   * example, if the label property is \"_Open\" and @a use_underline  is <tt>true</tt>,
   * the label on the tool button will be \"Open\" and the item on the overflow
   * menu will have an underlined 'O'.
   * 
   * Labels shown on tool buttons never have mnemonics on them; this property
   * only affects the menu item on the overflow menu.
   * 
   * Since: 2.4
   * @param use_underline Whether the button label has the form \"_Open\".
   "
      end

      operation 631081 "get_use_underline"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether underscores in the label property are used as mnemonics
   * on menu items on the overflow menu. See set_use_underline().
   * @return <tt>true</tt> if underscores in the label property are used as
   * mnemonics on menu items on the overflow menu.
   * 
   * Since: 2.4.
   "
      end

      operation 631209 "set_stock_id"
	public explicit_return_type "void"
	nparams 1
	  param in name "stock_id" explicit_type "Gtk::StockID"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the name of the stock item. See new_from_stock().
   * The stock_id property only has an effect if not
   * overridden by non-<tt>0</tt> \"label\" and \"icon_widget\" properties.
   * 
   * Since: 2.4
   * @param stock_id A name of a stock item, or <tt>0</tt>.
   "
      end

      operation 631337 "get_stock_id"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the name of the stock item. See set_stock_id().
   * The returned string is owned by GTK+ and must not be freed or modifed.
   * @return The name of the stock item for @a button .
   * 
   * Since: 2.4.
   "
      end

      operation 631465 "set_icon_widget"
	public explicit_return_type "void"
	nparams 1
	  param inout name "icon_widget" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets @a icon  as the widget used as icon on @a button . If @a icon_widget  is
   * <tt>0</tt> the icon is determined by the \"stock_id\" property. If the
   * \"stock_id\" property is also <tt>0</tt>, @a button  will not have an icon.
   * 
   * Since: 2.4
   * @param icon_widget The widget used as icon, or <tt>0</tt>.
   "
      end

      operation 631593 "get_icon_widget"
	public return_type class_ref 130089 // Widget
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Return the widget used as icon widget on @a button . See
   * set_icon_widget().
   * @return The widget used as icon on @a button , or <tt>0</tt>.
   * 
   * Since: 2.4.
   "
      end

      operation 631721 "get_icon_widget"
	const public return_type class_ref 130089 // Widget
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Return the widget used as icon widget on @a button . See
   * set_icon_widget().
   * @return The widget used as icon on @a button , or <tt>0</tt>.
   * 
   * Since: 2.4.
   "
      end

      operation 631849 "set_label_widget"
	public explicit_return_type "void"
	nparams 1
	  param inout name "label_widget" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets @a label_widget  as the widget that will be used as the label
   * for @a button . If @a label_widget  is <tt>0</tt> the \"label\" property is used
   * as label. If \"label\" is also <tt>0</tt>, the label in the stock item
   * determined by the \"stock_id\" property is used as label. If
   * \"stock_id\" is also <tt>0</tt>, @a button  does not have a label.
   * 
   * Since: 2.4
   * @param label_widget The widget used as label, or <tt>0</tt>.
   "
      end

      operation 631977 "get_label_widget"
	public return_type class_ref 130089 // Widget
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the widget used as label on @a button . See
   * set_label_widget().
   * @return The widget used as label on @a button , or <tt>0</tt>.
   * 
   * Since: 2.4.
   "
      end

      operation 632105 "get_label_widget"
	const public return_type class_ref 130089 // Widget
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the widget used as label on @a button . See
   * set_label_widget().
   * @return The widget used as label on @a button , or <tt>0</tt>.
   * 
   * Since: 2.4.
   "
      end

      operation 632233 "signal_clicked"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 632361 "property_label"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 632489 "property_label"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 632617 "property_use_underline"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 632745 "property_use_underline"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 632873 "property_label_widget"
	public explicit_return_type "Glib::PropertyProxy<Gtk::Widget*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 633001 "property_label_widget"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Gtk::Widget*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 633129 "property_stock_id"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 633257 "property_stock_id"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 633385 "property_icon_widget"
	public explicit_return_type "Glib::PropertyProxy<Gtk::Widget>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 633513 "property_icon_widget"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Gtk::Widget>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end
    end

    class 258857 "Tooltips"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/tooltips.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Tooltips are the messages that appear next to a widget when the mouse
 * pointer is held over it for a short amount of time. They are especially
 * helpful for adding more verbose descriptions of things such as buttons
 * in a toolbar. 
 *
 * This widget holds tooltips for other widgets.  You should only need one
 * Tooltip widget for all widgets you wish to add tips to.
 "
      classrelation 221353 // <generalisation>
	relation 221353 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 221353 // <generalisation>
	  b parent class_ref 132649 // Object
      end

      class 260265 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 258857 // Tooltips
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 221481 // <realization>
	  relation 221481 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 221481 // <realization>
	    b parent class_ref 258857 // Tooltips
	end
      end

      class 260521 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Tooltips_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 260649 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkTooltips"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 260777 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkTooltipsClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 639017 "~Tooltips"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 221865 // tooltips_class_ (<directional composition>)
	relation 221865 *-->
	  a role_name "tooltips_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 221865 // tooltips_class_ (<directional composition>)
	  b parent class_ref 260521 // CppClassType
      end

      operation 639145 "Tooltips"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 258857 // Tooltips
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 639273 "operator ="
	private return_type class_ref 258857 // Tooltips
	nparams 1
	  param in name "" type class_ref 258857 // Tooltips
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 639401 "Tooltips"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 639529 "Tooltips"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkTooltips"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 639657 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 639785 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 639913 "gobj"
	cpp_inline public explicit_return_type "GtkTooltips"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTooltips*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 640041 "gobj"
	const cpp_inline public explicit_return_type "GtkTooltips"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTooltips*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 640169 "Tooltips"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 640297 "enable"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 640425 "disable"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 640553 "set_tip"
	public explicit_return_type "void"
	nparams 3
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "tip_text" explicit_type "Glib::ustring"
	  param in name "tip_private" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 640681 "set_tip"
	public explicit_return_type "void"
	nparams 2
	  param inout name "widget" type class_ref 130089 // Widget
	  param in name "tip_text" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 640809 "unset_tip"
	public explicit_return_type "void"
	nparams 1
	  param inout name "widget" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 640937 "data_get"
	class_operation protected explicit_return_type "GtkTooltipsData"
	nparams 1
	  param inout name "widget" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 641065 "force_window"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 131497 "ToolItem"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/toolitem.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* 
 *
 * @ingroup Widgets
 "
      classrelation 220713 // <generalisation>
	relation 220713 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 220713 // <generalisation>
	  b parent class_ref 281385 // Bin
      end

      class 259625 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 131497 // ToolItem
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 220841 // <realization>
	  relation 220841 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 220841 // <realization>
	    b parent class_ref 131497 // ToolItem
	end
      end

      class 259881 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "ToolItem_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 260009 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkToolItem"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 260137 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkToolItemClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 633641 "~ToolItem"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 221225 // toolitem_class_ (<directional composition>)
	relation 221225 *-->
	  a role_name "toolitem_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 221225 // toolitem_class_ (<directional composition>)
	  b parent class_ref 259881 // CppClassType
      end

      operation 633769 "ToolItem"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 131497 // ToolItem
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 633897 "operator ="
	private return_type class_ref 131497 // ToolItem
	nparams 1
	  param in name "" type class_ref 131497 // ToolItem
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 634025 "ToolItem"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 634153 "ToolItem"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkToolItem"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 634281 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 634409 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 634537 "gobj"
	cpp_inline public explicit_return_type "GtkToolItem"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkToolItem*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 634665 "gobj"
	const cpp_inline public explicit_return_type "GtkToolItem"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkToolItem*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 634793 "on_create_menu_proxy"
	cpp_virtual protected explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 634921 "on_toolbar_reconfigured"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 635049 "ToolItem"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 635177 "set_homogeneous"
	public explicit_return_type "void"
	nparams 1
	  param in name "homogeneous" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets whether @a tool_item  is to be allocated the same size as other
   * homogeneous items. The effect is that all homogeneous items will have
   * the same width as the widest of the items.
   * 
   * Since: 2.4
   * @param homogeneous Whether @a tool_item  is the same size as other homogeneous items.
   "
      end

      operation 635305 "get_homogeneous"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether @a tool_item  is the same size as other homogeneous
   * items. See set_homogeneous().
   * @return <tt>true</tt> if the item is the same size as other homogeneous
   * item.s
   * 
   * Since: 2.4.
   "
      end

      operation 635433 "set_expand"
	public explicit_return_type "void"
	nparams 1
	  param in name "expand" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets whether @a tool_item  is allocated extra space when there
   * is more room on the toolbar then needed for the items. The
   * effect is that the item gets bigger when the toolbar gets bigger
   * and smaller when the toolbar gets smaller.
   * 
   * Since: 2.4
   * @param expand Whether @a tool_item  is allocated extra space.
   "
      end

      operation 635561 "get_expand"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether @a tool_item  is allocated extra space.
   * See set_expand().
   * @return <tt>true</tt> if @a tool_item  is allocated extra space.
   * 
   * Since: 2.4.
   "
      end

      operation 635689 "set_tooltip"
	public explicit_return_type "void"
	nparams 3
	  param inout name "tooltips" type class_ref 258857 // Tooltips
	  param in name "tip_text" explicit_type "Glib::ustring"
	  param in name "tip_private" explicit_type "Glib::ustring"
	    defaultvalue " Glib::ustring()"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the Gtk::Tooltips object to be used for @a tool_item , the
   * text to be displayed as tooltip on the item and the private text
   * to be used. See Gtk::Tooltips::set_tip().
   * 
   * Since: 2.4
   * @param tooltips The Gtk::Tooltips object to be used.
   * @param tip_text Text to be used as tooltip text for @a tool_item .
   * @param tip_private Text to be used as private tooltip text.
   "
      end

      operation 635817 "set_use_drag_window"
	public explicit_return_type "void"
	nparams 1
	  param in name "use_drag_window" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets whether @a toolitem  has a drag window. When <tt>true</tt> the
   * toolitem can be used as a drag source through gtk_drag_source_set().
   * When @a toolitem  has a drag window it will intercept all events,
   * even those that would otherwise be sent to a child of @a toolitem .
   * 
   * Since: 2.4
   * @param use_drag_window Whether @a toolitem  has a drag window.
   "
      end

      operation 635945 "get_use_drag_window"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether @a toolitem  has a drag window. See
   * set_use_drag_window().
   * @return <tt>true</tt> if @a toolitem  uses a drag window.
   * 
   * Since: 2.4.
   "
      end

      operation 636073 "set_visible_horizontal"
	public explicit_return_type "void"
	nparams 1
	  param in name "visible_horizontal" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets whether @a toolitem  is visible when the toolbar is docked horizontally.
   * 
   * Since: 2.4
   * @param visible_horizontal Whether @a toolitem  is visible when in horizontal mode.
   "
      end

      operation 636201 "get_visible_horizontal"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether the @a toolitem  is visible on toolbars that are
   * docked horizontally.
   * @return <tt>true</tt> if @a toolitem  is visible on toolbars that are
   * docked horizontally.
   * 
   * Since: 2.4.
   "
      end

      operation 636329 "set_visible_vertical"
	public explicit_return_type "void"
	nparams 1
	  param in name "visible_vertical" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets whether @a toolitem  is visible when the toolbar is docked
   * vertically. Some tool items, such as text entries, are too wide to be
   * useful on a vertically docked toolbar. If @a visible_vertical  is <tt>false</tt>
   *  @a toolitem  will not appear on toolbars that are docked vertically.
   * 
   * Since: 2.4
   * @param visible_vertical Whether @a toolitem  is visible when the toolbar
   * is in vertical mode.
   "
      end

      operation 636457 "get_visible_vertical"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether @a toolitem  is visible when the toolbar is docked vertically.
   * See set_visible_vertical().
   * @return Whether @a toolitem  is visible when the toolbar is docked vertically
   * 
   * Since: 2.4.
   "
      end

      operation 636585 "get_is_important"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether @a tool_item  is considered important. See
   * set_is_important()
   * @return <tt>true</tt> if @a tool_item  is considered important.
   * 
   * Since: 2.4.
   "
      end

      operation 636713 "set_is_important"
	public explicit_return_type "void"
	nparams 1
	  param in name "is_important" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets whether @a tool_item  should be considered important. The Gtk::ToolButton
   * class uses this property to determine whether to show or hide its label
   * when the toolbar style is Gtk::TOOLBAR_BOTH_HORIZ. The result is that
   * only tool buttons with the \"is_important\" property set have labels, an
   * effect known as \"priority text\"
   * 
   * Since: 2.4
   * @param is_important Whether the tool item should be considered important.
   "
      end

      operation 636841 "get_icon_size"
	const public return_type class_ref 131241 // IconSize
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the icon size used for @a tool_item . Custom subclasses of
   * Gtk::ToolItem should call this function to find out what size icons
   * they should use.
   * @return A Gtk::IconSize indicating the icon size used for @a tool_item 
   * 
   * Since: 2.4.
   "
      end

      operation 636969 "get_orientation"
	const public return_type class_ref 281513 // Orientation
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the orientation used for @a tool_item . Custom subclasses of
   * Gtk::ToolItem should call this function to find out what size icons
   * they should use.
   * @return A Gtk::Orientation indicating the orientation
   * used for @a tool_item 
   * 
   * Since: 2.4.
   "
      end

      operation 637097 "get_toolbar_style"
	const public return_type class_ref 281641 // ToolbarStyle
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the toolbar style used for @a tool_item . Custom subclasses of
   * Gtk::ToolItem should call this function in the handler of the
   * GtkToolItem::toolbar_reconfigured signal to find out in what style
   * the toolbar is displayed and change themselves accordingly 
   * 
   * Possibilities are:
   * &lt;itemizedlist&gt;
   * &lt;listitem&gt; GTK_TOOLBAR_BOTH, meaning the tool item should show
   * both an icon and a label, stacked vertically &lt;/listitem&gt;
   * &lt;listitem&gt; GTK_TOOLBAR_ICONS, meaning the toolbar shows
   * only icons &lt;/listitem&gt;
   * &lt;listitem&gt; GTK_TOOLBAR_TEXT, meaning the tool item should only
   * show text&lt;/listitem&gt;
   * &lt;listitem&gt; GTK_TOOLBAR_BOTH_HORIZ, meaning the tool item should show
   * both an icon and a label, arranged horizontally (however, note the 
   * Gtk::ToolButton::has_text_horizontally that makes tool buttons not
   * show labels when the toolbar style is GTK_TOOLBAR_BOTH_HORIZ.
   * &lt;/listitem&gt;
   * &lt;/itemizedlist&gt;
   * @return A Gtk::ToolbarStyle indicating the toolbar style used
   * for @a tool_item .
   * 
   * Since: 2.4.
   "
      end

      operation 637225 "get_relief_style"
	const public return_type class_ref 142121 // ReliefStyle
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the relief style of @a tool_item . See gtk_button_set_relief_style().
   * Custom subclasses of Gtk::ToolItem should call this function in the handler
   * of the Gtk::ToolItem::toolbar_reconfigured signal to find out the
   * relief style of buttons.
   * @return A Gtk::ReliefStyle indicating the relief style used
   * for @a tool_item .
   * 
   * Since: 2.4.
   "
      end

      operation 637353 "retrieve_proxy_menu_item"
	public return_type class_ref 130089 // Widget
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the Gtk::MenuItem that was last set by
   * set_proxy_menu_item(), ie. the Gtk::MenuItem
   * that is going to appear in the overflow menu.
   * @return The Gtk::MenuItem that is going to appear in the
   * overflow menu for @a tool_item .
   * 
   * Since: 2.4.
   "
      end

      operation 637481 "retrieve_proxy_menu_item"
	const public return_type class_ref 130089 // Widget
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the Gtk::MenuItem that was last set by
   * set_proxy_menu_item(), ie. the Gtk::MenuItem
   * that is going to appear in the overflow menu.
   * @return The Gtk::MenuItem that is going to appear in the
   * overflow menu for @a tool_item .
   * 
   * Since: 2.4.
   "
      end

      operation 637609 "get_proxy_menu_item"
	public return_type class_ref 130089 // Widget
	nparams 1
	  param in name "menu_item_id" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* If @a menu_item_id  matches the string passed to
   * set_proxy_menu_item() return the corresponding Gtk::MenuItem.
   * 
   * Custom subclasses of Gtk::ToolItem should use this function to update
   * their menu item when the Gtk::ToolItem changes. That the
   *  @a menu_item_id &lt;!-- --&gt;s must match ensures that a Gtk::ToolItem will not
   * inadvertently change a menu item that they did not create.
   * @param menu_item_id A string used to identify the menu item.
   * @return The Gtk::MenuItem passed to
   * set_proxy_menu_item(), if the @a menu_item_id &lt;!-- --&gt;s match.
   * 
   * Since: 2.4.
   "
      end

      operation 637737 "get_proxy_menu_item"
	const public return_type class_ref 130089 // Widget
	nparams 1
	  param in name "menu_item_id" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* If @a menu_item_id  matches the string passed to
   * set_proxy_menu_item() return the corresponding Gtk::MenuItem.
   * 
   * Custom subclasses of Gtk::ToolItem should use this function to update
   * their menu item when the Gtk::ToolItem changes. That the
   *  @a menu_item_id &lt;!-- --&gt;s must match ensures that a Gtk::ToolItem will not
   * inadvertently change a menu item that they did not create.
   * @param menu_item_id A string used to identify the menu item.
   * @return The Gtk::MenuItem passed to
   * set_proxy_menu_item(), if the @a menu_item_id &lt;!-- --&gt;s match.
   * 
   * Since: 2.4.
   "
      end

      operation 637865 "set_proxy_menu_item"
	public explicit_return_type "void"
	nparams 2
	  param in name "menu_item_id" explicit_type "Glib::ustring"
	  param inout name "menu_item" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the Gtk::MenuItem used in the toolbar overflow menu. The
   *  @a menu_item_id  is used to identify the caller of this function and
   * should also be used with get_proxy_menu_item().
   * 
   * Since: 2.4
   * @param menu_item_id A string used to identify @a menu_item .
   * @param menu_item A Gtk::MenuItem to be used in the overflow menu.
   "
      end

      operation 637993 "signal_create_menu_proxy"
	public explicit_return_type "Glib::SignalProxy0< bool >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 638121 "signal_toolbar_reconfigured"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 638249 "property_visible_horizontal"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO: This doesn't compile - I don't know why. murryac.
_WRAP_SIGNAL(bool set_tooltip(Tooltips& tooltips, const Glib::ustring& tip_text, const Glib::ustring& tip_private), set_tooltip)
* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 638377 "property_visible_horizontal"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 638505 "property_visible_vertical"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 638633 "property_visible_vertical"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 638761 "property_is_important"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 638889 "property_is_important"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end
    end

    class 204841 "TreeDragDest"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/treedragdest.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
*
 * @ingroup TreeView
 "
      class 260905 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 204841 // TreeDragDest
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 222121 // <realization>
	  relation 222121 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 222121 // <realization>
	    b parent class_ref 204841 // TreeDragDest
	end
      end

      class 261161 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "TreeDragDest_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 261289 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkTreeDragDest"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 261417 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkTreeDragDestIface"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 222505 // treedragdest_class_ (<directional composition>)
	relation 222505 *-->
	  a role_name "treedragdest_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 222505 // treedragdest_class_ (<directional composition>)
	  b parent class_ref 261161 // CppClassType
      end

      operation 641193 "TreeDragDest"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 204841 // TreeDragDest
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 641321 "operator ="
	private return_type class_ref 204841 // TreeDragDest
	nparams 1
	  param in name "" type class_ref 204841 // TreeDragDest
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 641449 "TreeDragDest"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 641577 "TreeDragDest"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkTreeDragDest"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " you must derive from this class"
      end

      operation 641705 "~TreeDragDest"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 641833 "add_interface"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "gtype_implementer" explicit_type "GType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 641961 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 642089 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 642217 "gobj"
	cpp_inline public explicit_return_type "GtkTreeDragDest"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTreeDragDest*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 642345 "gobj"
	const cpp_inline public explicit_return_type "GtkTreeDragDest"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTreeDragDest*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject.  "
      end

      operation 642473 "drag_data_received"
	public explicit_return_type "bool"
	nparams 2
	  param in name "dest" type class_ref 261545 // Path
	  param in name "selection_data" type class_ref 280489 // SelectionData
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Asks the Gtk::TreeDragDest to insert a row before the path @a dest ,
   * deriving the contents of the row from @a selection_data . If @a dest  is
   * outside the tree so that inserting before it is impossible, <tt>false</tt>
   * will be returned. Also, <tt>false</tt> may be returned if the new row is
   * not created for some model-specific reason.  Should robustly handle
   * a @a dest  no longer found in the model!
   * @param dest Row to drop in front of.
   * @param selection_data Data to drop.
   * @return Whether a new row was created before position @a dest .
   "
      end

      operation 642601 "row_drop_possible"
	const public explicit_return_type "bool"
	nparams 2
	  param in name "dest_path" type class_ref 261545 // Path
	  param in name "selection_data" type class_ref 280489 // SelectionData
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Determines whether a drop is possible before the given @a dest_path ,
   * at the same depth as @a dest_path . i.e., can we drop the data in
   *  @a selection_data  at that location. @a dest_path  does not have to
   * exist; the return value will almost certainly be <tt>false</tt> if the
   * parent of @a dest_path  doesn't exist, though.
   * @param dest_path Destination row.
   * @param selection_data The data being dragged.
   * @return <tt>true</tt> if a drop is possible before @a dest_path .
   "
      end

      operation 642729 "drag_data_received_vfunc"
	cpp_virtual protected explicit_return_type "bool"
	nparams 2
	  param in name "dest" type class_ref 261545 // Path
	  param in name "selection_data" type class_ref 280489 // SelectionData
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 642857 "row_drop_possible_vfunc"
	const cpp_virtual protected explicit_return_type "bool"
	nparams 2
	  param in name "dest" type class_ref 261545 // Path
	  param in name "selection_data" type class_ref 280489 // SelectionData
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 204713 "TreeDragSource"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/treedragsource.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
*
 * @ingroup TreeView
"
      class 261673 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 204713 // TreeDragSource
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 222761 // <realization>
	  relation 222761 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 222761 // <realization>
	    b parent class_ref 204713 // TreeDragSource
	end
      end

      class 261929 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "TreeDragSource_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 262057 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkTreeDragSource"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 262185 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkTreeDragSourceIface"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 223145 // treedragsource_class_ (<directional composition>)
	relation 223145 *-->
	  a role_name "treedragsource_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 223145 // treedragsource_class_ (<directional composition>)
	  b parent class_ref 261929 // CppClassType
      end

      operation 642985 "TreeDragSource"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 204713 // TreeDragSource
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 643113 "operator ="
	private return_type class_ref 204713 // TreeDragSource
	nparams 1
	  param in name "" type class_ref 204713 // TreeDragSource
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 643241 "TreeDragSource"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 643369 "TreeDragSource"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkTreeDragSource"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " you must derive from this class"
      end

      operation 643497 "~TreeDragSource"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 643625 "add_interface"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "gtype_implementer" explicit_type "GType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 643753 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 643881 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 644009 "gobj"
	cpp_inline public explicit_return_type "GtkTreeDragSource"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTreeDragSource*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 644137 "gobj"
	const cpp_inline public explicit_return_type "GtkTreeDragSource"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTreeDragSource*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject.  "
      end

      operation 644265 "row_draggable"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "path" type class_ref 261545 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Asks the Gtk::TreeDragSource whether a particular row can be used as
   * the source of a DND operation. If the source doesn't implement
   * this interface, the row is assumed draggable.
   * @param path Row on which user is initiating a drag.
   * @return <tt>true</tt> if the row can be dragged.
   "
      end

      operation 644393 "drag_data_get"
	public explicit_return_type "bool"
	nparams 2
	  param in name "path" type class_ref 261545 // Path
	  param inout name "selection_data" type class_ref 280489 // SelectionData
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Asks the Gtk::TreeDragSource to fill in @a selection_data  with a
   * representation of the row at @a path . @a selection_data -&gt;target gives
   * the required type of the data.  Should robustly handle a @a path  no
   * longer found in the model!
   * @param path Row that was dragged.
   * @param selection_data A Gtk::SelectionData to fill with data from the dragged row.
   * @return <tt>true</tt> if data of the required type was provided.
   "
      end

      operation 644521 "drag_data_delete"
	public explicit_return_type "bool"
	nparams 1
	  param in name "path" type class_ref 261545 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Asks the Gtk::TreeDragSource to delete the row at @a path , because
   * it was moved somewhere else via drag-and-drop. Returns <tt>false</tt>
   * if the deletion fails because @a path  no longer exists, or for
   * some model-specific reason. Should robustly handle a @a path  no
   * longer found in the model!
   * @param path Row that was being dragged.
   * @return <tt>true</tt> if the row was successfully deleted.
   "
      end

      operation 644649 "row_draggable_vfunc"
	const cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param in name "path" type class_ref 261545 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 644777 "drag_data_get_vfunc"
	const cpp_virtual protected explicit_return_type "bool"
	nparams 2
	  param in name "path" type class_ref 261545 // Path
	  param inout name "selection_data" type class_ref 280489 // SelectionData
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "We hand-code this so that we can use a temporary instance for teh SelectionData& output parameter:"
      end

      operation 644905 "drag_data_delete_vfunc"
	cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param in name "path" type class_ref 261545 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 302121 "TreeModel"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/treemodel.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "TODO: Remove any mention of null arguments from the method documentation, by adding overrides in gtk_docs_override.xml.
* This class defines a generic tree interface for use by the Gtk::TreeView widget.
 * @ingroup TreeView
 *
 * It is is designed to be usable with any appropriate data structure. The
 * programmer just has to implement this interface on their own data type for
 * it to be viewable by a Gtk::TreeView widget.
 *
 * The model is represented as a hierarchical tree of strongly-typed, columned
 * data. In other words, the model can be seen as a tree where every node has
 * different values depending on which column is being queried.  The type of
 * data found in a column is determined by TreeModel::Column<> templates.
 * The types are homogeneous per column across all nodes. It is important to note that this
 * interface only provides a way of examining a model and observing changes.
 * The implementation of each individual model decides how and if changes are
 * made.
 *
 * In order to make life simpler for programmers who do not need to write their
 * own specialized model, two generic models are provided - the Gtk::TreeStore
 * and the Gtk::ListStore. To use these, the developer simply pushes data into
 * these models as necessary. These models provide the data structure as well
 * as all appropriate tree interfaces. As a result, implementing drag and drop,
 * sorting, and storing data is trivial. For the vast majority of trees and
 * lists, these two models are sufficient.
 *
 * Models are accessed on a node/column level of granularity. One can query for
 * the value of a model at a certain node and a certain column on that node.
 * There are two structures used to reference a particular node in a model.
 * They are the @link Gtk::TreePath Path@endlink and the iterator. Most of the interface consists of
 * operations on an @link Gtk::TreeIter iterator@endlink.
 *
 * A @link Gtk::TreePath Gtk::TreeModel::Path@endlink is essentially a potential node. It is a location on a model that may
 * or may not actually correspond to a node on a specific model.
 *
 * By contrast, an @link Gtk::TreeIter Gtk::TreeModel::iterator@endlink  is a reference to a specific node on a specific
 * model. One can convert a path to an @link Gtk::TreeIter iterator@endlink by calling Gtk::TreeModel::get_iter().
 * These iterators are the primary way of accessing a model and are similar to the iterators
 * used by Gtk::TextBuffer. The model interface defines a set of operations
 * using them for navigating the model.
 *
 * The @link Gtk::TreeRowReference RowReference@endlink is also useful, because it remains
 * valid as long as there is an existing row pointed to by it's path. You can convert between RowReferences and iterators and @link Gtk::TreePath Path@endlink s.
 "
      class 301865 "iterator"
	visibility package stereotype "typedef" explicit_base_type "Children::iterator"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 301993 "const_iterator"
	visibility package stereotype "typedef" explicit_base_type "Children::const_iterator"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 261545 "Path"
	visibility package stereotype "typedef" base_type class_ref 264233 // TreePath
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 224169 // <realization>
	  relation 224169 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 224169 // <realization>
	    b parent class_ref 264233 // TreePath
	end
      end

      class 262953 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 302121 // TreeModel
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 223657 // <realization>
	  relation 223657 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 223657 // <realization>
	    b parent class_ref 302121 // TreeModel
	end
      end

      class 263209 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "TreeModel_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 263337 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkTreeModel"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 263465 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkTreeModelIface"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 224041 // treemodel_class_ (<directional composition>)
	relation 224041 *-->
	  a role_name "treemodel_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 224041 // treemodel_class_ (<directional composition>)
	  b parent class_ref 263209 // CppClassType
      end

      operation 645161 "TreeModel"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 302121 // TreeModel
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 645289 "operator ="
	private return_type class_ref 302121 // TreeModel
	nparams 1
	  param in name "" type class_ref 302121 // TreeModel
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 645417 "TreeModel"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 645545 "TreeModel"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkTreeModel"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " you must derive from this class"
      end

      operation 645673 "~TreeModel"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 645801 "add_interface"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "gtype_implementer" explicit_type "GType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 645929 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 646057 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 646185 "gobj"
	cpp_inline public explicit_return_type "GtkTreeModel"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTreeModel*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 646313 "gobj"
	const cpp_inline public explicit_return_type "GtkTreeModel"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTreeModel*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject.  "
      end

      class 263593 "ColumnRecord"
	visibility package stereotype "typedef" explicit_base_type "TreeModelColumnRecord"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 263721 "Children"
	visibility package stereotype "typedef" explicit_base_type "TreeNodeChildren"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 263849 "reverse_iterator"
	visibility package stereotype "typedef" explicit_base_type "Children::reverse_iterator"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 263977 "const_reverse_iterator"
	visibility package stereotype "typedef" explicit_base_type "Children::const_reverse_iterator"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 264105 "Row"
	visibility package stereotype "typedef" explicit_base_type "TreeRow"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 264489 "RowReference"
	visibility package stereotype "typedef" base_type class_ref 264361 // TreeRowReference
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 224297 // <realization>
	  relation 224297 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 224297 // <realization>
	    b parent class_ref 264361 // TreeRowReference
	end
      end

      operation 646441 "get_iter"
	public return_type class_ref 301865 // iterator
	nparams 1
	  param in name "path" type class_ref 261545 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "These are part of GtkTreeModelFilter or GtkTreeModelSort, not GtkTreeModel:
* Returns a valid iterator pointing to @a path.
   *
   * @param path The @link Gtk::TreePath Gtk::TreeModel::Path@endlink.
   * @result A valid iterator pointing to the path, or an invalid iterator if that is not possible.
   "
      end

      operation 646569 "get_iter"
	public return_type class_ref 301865 // iterator
	nparams 1
	  param in name "path_string" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO: Add const_iterator get_iter(const Path& path) const;
Implement a const_iterator?
* Returns a valid iterator pointing to @a path_string.
   *
   * @param path_string The path, as a string representation.
   * @result A valid iterator pointing to the path, or an invalid iterator if that is not possible.
   "
      end

      operation 646697 "children"
	public return_type class_ref 263721 // Children
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO: Implement a const_iterator? const_iterator get_iter(const Glib::ustring& path_string) const;
/This returns an STL-like container API, for iterating over the rows."
      end

      operation 646825 "children"
	const public return_type class_ref 263721 // Children
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO: Return a real TreeNodeChildren (a container of const_iterators), when we have a real const_iterator.
/This returns an STL-like container API, for iterating over the rows."
      end

      class 264617 "SlotForeachIter"
	visibility package stereotype "typedef" explicit_base_type "sigc::slot<bool, const TreeModel::iterator&>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 646953 "foreach_iter"
	public explicit_return_type "void"
	nparams 1
	  param in name "slot" type class_ref 264617 // SlotForeachIter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Calls a callback slot on each node in the model in a depth-first fashion.
   * If the callback function returns true, then the tree ceases to be walked, and foreach() returns.
   *
   * @param slot The function to call for each selected node.
   "
      end

      class 264745 "SlotForeachPath"
	visibility package stereotype "typedef" explicit_base_type "sigc::slot<bool, const TreeModel::Path&>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 647081 "foreach_path"
	public explicit_return_type "void"
	nparams 1
	  param in name "slot" type class_ref 264745 // SlotForeachPath
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Calls a callback slot on each node in the model in a depth-first fashion.
   * If the callback function returns true, then the tree ceases to be walked, and foreach() returns.
   *
   * @param slot The function to call for each selected node.
   "
      end

      class 264873 "SlotForeachPathAndIter"
	visibility package stereotype "typedef" explicit_base_type "sigc::slot<bool, const TreeModel::Path&, const TreeModel::iterator&>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 647209 "foreach"
	public explicit_return_type "void"
	nparams 1
	  param in name "slot" type class_ref 264873 // SlotForeachPathAndIter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Calls a callback slot on each node in the model in a depth-first fashion.
   * If the callback function returns true, then the tree ceases to be walked, and foreach() returns.
   *
   * @param slot The function to call for each selected node.
   "
      end

      operation 647337 "get_flags"
	const public return_type class_ref 262569 // TreeModelFlags
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns a set of flags supported by this interface.  The flags are a bitwise
   * combination of Gtk::TreeModelFlags.  The flags supported should not change
   * during the lifecycle of the tree_model.
   * @return The flags supported by this interface.
   "
      end

      operation 647465 "get_n_columns"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the number of columns supported by @a tree_model .
   * @return The number of columns.
   "
      end

      operation 647593 "get_column_type"
	const public explicit_return_type "GType"
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the type of the column.
   * @param index The column index.
   * @return The type of the column.
   "
      end

      operation 647721 "get_path"
	const public return_type class_ref 261545 // Path
	nparams 1
	  param in name "iter" type class_ref 301865 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO: A C++-type version of get_column_type()?
* Returns a Gtk::TreePath referenced by @a iter .
   * @param iter The Gtk::TreeIter.
   * @return A Gtk::TreePath.
   "
      end

      operation 647849 "row_changed"
	public explicit_return_type "void"
	nparams 2
	  param in name "path" type class_ref 261545 // Path
	  param in name "iter" type class_ref 301865 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Emits the \"row_changed\" signal on @a tree_model .
   * @param path A Gtk::TreePath pointing to the changed row.
   * @param iter A valid Gtk::TreeIter pointing to the changed row.
   "
      end

      operation 647977 "row_inserted"
	public explicit_return_type "void"
	nparams 2
	  param in name "path" type class_ref 261545 // Path
	  param in name "iter" type class_ref 301865 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Emits the \"row_inserted\" signal on @a tree_model 
   * @param path A Gtk::TreePath pointing to the inserted row.
   * @param iter A valid Gtk::TreeIter pointing to the inserted row.
   "
      end

      operation 648105 "row_has_child_toggled"
	public explicit_return_type "void"
	nparams 2
	  param in name "path" type class_ref 261545 // Path
	  param in name "iter" type class_ref 301865 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Emits the \"row_has_child_toggled\" signal on @a tree_model .  This should be
   * called by models after the child state of a node changes.
   * @param path A Gtk::TreePath pointing to the changed row.
   * @param iter A valid Gtk::TreeIter pointing to the changed row.
   "
      end

      operation 648233 "row_deleted"
	public explicit_return_type "void"
	nparams 1
	  param in name "path" type class_ref 261545 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Emits the \"row_deleted\" signal on @a tree_model .  This should be called by
   * models after a row has been removed.  The location pointed to by @a path  should
   * be the location that the row previously was at.  It may not be a valid
   * location anymore.
   * @param path A Gtk::TreePath pointing to the previous location of the deleted row.
   "
      end

      operation 648361 "rows_reordered"
	public explicit_return_type "void"
	nparams 3
	  param in name "path" type class_ref 261545 // Path
	  param in name "iter" type class_ref 301865 // iterator
	  param in name "new_order" explicit_type "Glib::ArrayHandle<int>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 648489 "rows_reordered"
	public explicit_return_type "void"
	nparams 3
	  param in name "path" type class_ref 261545 // Path
	  param in name "iter" type class_ref 301865 // iterator
	  param inout name "new_order" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} * ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} * ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Emits the \"rows_reordered\" signal on @a tree_model .  This should be called by
   * models when their rows have been reordered.
   * @param path A Gtk::TreePath pointing to the tree node whose children have been reordered.
   * @param iter A valid Gtk::TreeIter pointing to the node whose children have been reordered.
   * @param new_order An array of integers mapping the current position of each child
   * to its old position before the re-ordering,
   * i.e. @a new_order <tt>[newpos] = oldpos</tt>.
   "
      end

      operation 648617 "get_string"
	const public explicit_return_type "Glib::ustring"
	nparams 1
	  param in name "iter" type class_ref 301865 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Generates a string representation of the iter. This string is a ':'
   * separated list of numbers. For example, \"4:10:0:3\" would be an
   * acceptable return value for this string.
   * @param iter An Gtk::TreeIter.
   * @return The string.
   * 
   * Since: 2.2.
   "
      end

      operation 648745 "signal_row_changed"
	public explicit_return_type "Glib::SignalProxy2< void,const TreeModel::Path&,const TreeModel::iterator& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 648873 "signal_row_inserted"
	public explicit_return_type "Glib::SignalProxy2< void,const TreeModel::Path&,const TreeModel::iterator& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 649001 "signal_row_has_child_toggled"
	public explicit_return_type "Glib::SignalProxy2< void,const TreeModel::Path&,const TreeModel::iterator& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 649129 "signal_row_deleted"
	public explicit_return_type "Glib::SignalProxy1< void,const TreeModel::Path& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 649257 "signal_rows_reordered"
	public explicit_return_type "Glib::SignalProxy3< void,const TreeModel::Path&,const TreeModel::iterator&,int* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 649385 "get_flags_vfunc"
	const cpp_virtual protected return_type class_ref 262569 // TreeModelFlags
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 649513 "get_n_columns_vfunc"
	const cpp_virtual protected explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 649641 "get_column_type_vfunc"
	const cpp_virtual protected explicit_return_type "GType"
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 649769 "iter_next_vfunc"
	const cpp_virtual protected explicit_return_type "bool"
	nparams 2
	  param in name "iter" type class_ref 301865 // iterator
	  param inout name "iter_next" type class_ref 301865 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "These are only for deriving new TreeModels, which isn't very common or easy:
* Override and implement this in a derived TreeModel class.
   * Sets @a iter_next to refer to the node following @a iter it at the current level.
   * If there is no next iter, false is returned and iter_next is set to be invalid.
   *
   * @param iter An iterator.
   * @param iter_next An iterator that will be set to refer to the next node, or will be set as invalid.
   * @result true if the operation was possible.
   "
      end

      operation 649897 "get_iter_vfunc"
	const cpp_virtual protected explicit_return_type "bool"
	nparams 2
	  param in name "path" type class_ref 261545 // Path
	  param inout name "iter" type class_ref 301865 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Override and implement this in a derived TreeModel class.
   * Sets @a iter to a valid iterator pointing to @a path
   *
   * @param path An path to a node.
   * @param iter An iterator that will be set to refer to a node to the path, or will be set as invalid.
   * @result true if the operation was possible.
   "
      end

      operation 650025 "iter_children_vfunc"
	const cpp_virtual protected explicit_return_type "bool"
	nparams 2
	  param in name "parent" type class_ref 301865 // iterator
	  param inout name "iter" type class_ref 301865 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Override and implement this in a derived TreeModel class.
   * Sets @a iter to refer to the first child of @a parent. If @a parent has no children,
   * false is returned and @a iter is set to be invalid.
   *
   * @param parent An iterator.
   * @param iter An iterator that will be set to refer to the firt child node, or will be set as invalid.
   * @result true if the operation was possible.
   "
      end

      operation 650153 "iter_parent_vfunc"
	const cpp_virtual protected explicit_return_type "bool"
	nparams 2
	  param in name "child" type class_ref 301865 // iterator
	  param inout name "iter" type class_ref 301865 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Override and implement this in a derived TreeModel class.
   * Sets @a iter to be the parent of @a child. If @a child is at the toplevel, and
   * doesn't have a parent, then @a iter is set to an invalid iterator and false
   * is returned.
   *
   * @param child An iterator.
   * @param iter An iterator that will be set to refer to the parent node, or will be set as invalid.
   * @result true if the operation was possible.
   "
      end

      operation 650281 "iter_nth_child_vfunc"
	const cpp_virtual protected explicit_return_type "bool"
	nparams 3
	  param in name "parent" type class_ref 301865 // iterator
	  param in name "n" explicit_type "int"
	  param inout name "iter" type class_ref 301865 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Override and implement this in a derived TreeModel class.
   * Sets @a iter to be the child of @a parent using the given index.  The first
   * index is 0.  If @a n is too big, or @a parent has no children, @a iter is set
   * to an invalid iterator and false is returned.
   * See also iter_nth_root_child_vfunc()
   *
   * @param parent An iterator.
   * @param n The index of the child node to which @a iter should be set.
   * @param iter An iterator that will be set to refer to the nth node, or will be set as invalid.
   * @result true if the operation was possible.
   "
      end

      operation 650409 "iter_nth_root_child_vfunc"
	const cpp_virtual protected explicit_return_type "bool"
	nparams 2
	  param in name "n" explicit_type "int"
	  param inout name "iter" type class_ref 301865 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Override and implement this in a derived TreeModel class.
   * Sets @a iter to be the child of at the root level using the given index.  The first
   * index is 0.  If @a n is too big, or if there are no children, @a iter is set
   * to an invalid iterator and false is returned.
   * See also iter_nth_child_vfunc().
   *
   * @param n The index of the child node to which @a iter should be set.
   * @param iter An iterator that will be set to refer to the nth node, or will be set as invalid.
   * @result true if the operation was possible.
   "
      end

      operation 650537 "iter_has_child_vfunc"
	const cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param in name "iter" type class_ref 301865 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Override and implement this in a derived TreeModel class.
   * Returns true if @a iter has children, false otherwise.
   *
   * @param iter The iterator to test for children.
   * @result true if @a iter has children.
   "
      end

      operation 650665 "iter_n_children_vfunc"
	const cpp_virtual protected explicit_return_type "int"
	nparams 1
	  param in name "iter" type class_ref 301865 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Override and implement this in a derived TreeModel class.
   * Returns the number of children that @a iter has.
   * See also iter_n_root_children_vfunc().  
   *
   * @param iter The iterator to test for children.
   * @result The number of children of @a iter.
   "
      end

      operation 650793 "iter_n_root_children_vfunc"
	const cpp_virtual protected explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Override and implement this in a derived TreeModel class.
   * Returns the number of toplevel nodes.
   * See also iter_n_children().
   *
   * @result The number of children at the root level.
   "
      end

      operation 650921 "ref_node_vfunc"
	const cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "iter" type class_ref 301865 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Override and implement this in a derived TreeModel class.
   * Lets the tree ref the node.  This is an optional method for models to
   * implement.  To be more specific, models may ignore this call as it exists
   * primarily for performance reasons.
   *
   * This function is primarily meant as a way for views to let caching model know
   * when nodes are being displayed (and hence, whether or not to cache that
   * node.)  For example, a file-system based model would not want to keep the
   * entire file-hierarchy in memory, just the sections that are currently being
   * displayed by every current view.
   *
   * A model should be expected to be able to get an iter independent of its
   * reffed state.
   *
   * @param iter the iterator.
   "
      end

      operation 651049 "unref_node_vfunc"
	const cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "iter" type class_ref 301865 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Override and implement this in a derived TreeModel class.
   * Lets the tree unref the node.  This is an optional method for models to
   * implement.  To be more specific, models may ignore this call as it exists
   * primarily for performance reasons.
   *
   * For more information on what this means, see unref_node_vfunc().
   * Please note that nodes that are deleted are not unreffed.
   *
   * @param iter the iterator.
   "
      end

      operation 651177 "get_path_vfunc"
	const cpp_virtual protected return_type class_ref 261545 // Path
	nparams 1
	  param in name "iter" type class_ref 301865 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Override and implement this in a derived TreeModel class.
   * Returns a Path referenced by @a iter.
   *
   * @param iter The iterator.
   * @result The path.
   "
      end

      operation 651305 "get_value_vfunc"
	const cpp_virtual protected explicit_return_type "void"
	nparams 3
	  param in name "iter" type class_ref 301865 // iterator
	  param in name "column" explicit_type "int"
	  param inout name "value" explicit_type "Glib::ValueBase"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Override and implement this in a derived TreeModel class.
   * Initializes and sets @a value to that at @a column.
   *
   * @param iter The iterator.
   * @param column The column to lookup the value at.
   * @param value An empty Glib:Value to set.
   "
      end

      operation 651433 "iter_is_valid"
	const cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param in name "iter" type class_ref 301865 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Override and implement this in a derived TreeModel class.
   * @note This virtual method is <em>deprecated</em>.  If you want to check
   * whether an iterator is valid, call TreeStore::iter_is_valid(),
   * ListStore::iter_is_valid() or TreeModelSort::iter_is_valid() directly
   * instead.  Because these methods are intended to be used only for debugging
   * and/or testing purposes, it doesn't make sense to provide an abstract
   * interface to them.
   *
   * @result true if the iterator is valid.
   "
      end

      operation 651561 "set_value_impl"
	cpp_virtual protected explicit_return_type "void"
	nparams 3
	  param in name "row" type class_ref 301865 // iterator
	  param in name "column" explicit_type "int"
	  param in name "value" explicit_type "Glib::ValueBase"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Called by TreeRow, which is a friend class:
The comment about set_row_changed() in the documentation is based on my reading of the source of
gtk_list_store_set_value() and gtk_tree_store_set_value().  
* Override and implement this in a derived TreeModel class, so that Row::operator() and
   * Row::set_value() work.
   * You can probably just implement this by calling set_value_vfunc().
   * Your implementation of set_value_impl() should also call set_row_changed() after changing the value.
   "
      end

      operation 651689 "get_value_impl"
	const cpp_virtual protected explicit_return_type "void"
	nparams 3
	  param in name "row" type class_ref 301865 // iterator
	  param in name "column" explicit_type "int"
	  param inout name "value" explicit_type "Glib::ValueBase"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "This might not need to be virtual, but it's not a big deal. murrayc."
      end

      extra_member 128937 "friend"
	
	cpp "
  friend class Gtk::TreeModelSort;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      extra_member 129065 "friend"
	
	cpp "  friend class Gtk::TreeRow;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      extra_member 129193 "friend"
	
	cpp "  friend class Gtk::TreeIter;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 651817 "on_row_changed"
	cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param in name "path" type class_ref 261545 // Path
	  param in name "iter" type class_ref 301865 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 651945 "on_row_inserted"
	cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param in name "path" type class_ref 261545 // Path
	  param in name "iter" type class_ref 301865 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 652073 "on_row_has_child_toggled"
	cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param in name "path" type class_ref 261545 // Path
	  param in name "iter" type class_ref 301865 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 652201 "on_row_deleted"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "path" type class_ref 261545 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 652329 "on_rows_reordered"
	cpp_virtual protected explicit_return_type "void"
	nparams 3
	  param in name "path" type class_ref 261545 // Path
	  param in name "iter" type class_ref 301865 // iterator
	  param inout name "new_order" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} * ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} * ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 262569 "TreeModelFlags"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* @addtogroup gtkmmEnums Enums and Flags 
*
 * @ingroup gtkmmEnums
 * @par Bitwise operators:
 * <tt>%TreeModelFlags operator|(TreeModelFlags, TreeModelFlags)</tt><br>
 * <tt>%TreeModelFlags operator&(TreeModelFlags, TreeModelFlags)</tt><br>
 * <tt>%TreeModelFlags operator^(TreeModelFlags, TreeModelFlags)</tt><br>
 * <tt>%TreeModelFlags operator~(TreeModelFlags)</tt><br>
 * <tt>%TreeModelFlags& operator|=(TreeModelFlags&, TreeModelFlags)</tt><br>
 * <tt>%TreeModelFlags& operator&=(TreeModelFlags&, TreeModelFlags)</tt><br>
 * <tt>%TreeModelFlags& operator^=(TreeModelFlags&, TreeModelFlags)</tt><br>
 "
      attribute 207017 "TREE_MODEL_ITERS_PERSIST"
	public explicit_type ""
	init_value " 1 << 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 207145 "TREE_MODEL_LIST_ONLY"
	public explicit_type ""
	init_value " 1 << 1
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 265001 "TreeModelFilter"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/treemodelfilter.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* 
 * @ingroup TreeView
 * 
 "
      classrelation 224553 // <generalisation>
	relation 224553 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 224553 // <generalisation>
	  b parent class_ref 302121 // TreeModel
      end

      class 265129 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 265001 // TreeModelFilter
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 224681 // <realization>
	  relation 224681 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 224681 // <realization>
	    b parent class_ref 265001 // TreeModelFilter
	end
      end

      class 265385 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "TreeModelFilter_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 265513 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkTreeModelFilter"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 265641 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkTreeModelFilterClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 225065 // treemodelfilter_class_ (<directional composition>)
	relation 225065 *-->
	  a role_name "treemodelfilter_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 225065 // treemodelfilter_class_ (<directional composition>)
	  b parent class_ref 265385 // CppClassType
      end

      operation 652457 "TreeModelFilter"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 265001 // TreeModelFilter
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 652585 "operator ="
	private return_type class_ref 265001 // TreeModelFilter
	nparams 1
	  param in name "" type class_ref 265001 // TreeModelFilter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 652713 "TreeModelFilter"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 652841 "TreeModelFilter"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkTreeModelFilter"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 652969 "~TreeModelFilter"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 653097 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 653225 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 653353 "gobj"
	cpp_inline public explicit_return_type "GtkTreeModelFilter"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTreeModelFilter*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 653481 "gobj"
	const cpp_inline public explicit_return_type "GtkTreeModelFilter"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTreeModelFilter*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 653609 "gobj_copy"
	public explicit_return_type "GtkTreeModelFilter"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs."
      end

      operation 653737 "TreeModelFilter"
	protected explicit_return_type ""
	nparams 2
	  param in name "child_model" explicit_type "Glib::RefPtr<TreeModel>"
	  param in name "virtual_root" type class_ref 261545 // Path
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${throw}{
${body}}
"
	
	
	
	
	comment "TODO in gtkmm 2.5: explicit TreeModelFilter(const Glib::RefPtr<TreeModel>& child_model);"
      end

      operation 653865 "create"
	class_operation public explicit_return_type "Glib::RefPtr<TreeModelFilter>"
	nparams 2
	  param in name "child_model" explicit_type "Glib::RefPtr<TreeModel>"
	  param in name "virtual_root" type class_ref 261545 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO: Add a create() method that takes no root.
* This creates a TreeModelFilter with @a child_model as the child model.
   * You can use set_visible_func(), set_visible_column() and/or set_modify_func() to change the mapping of child
   * model to parent model.
   
TODO in gtkmm 2.5: _WRAP_CREATE(const Glib::RefPtr<TreeModel>& child_model)
TODO: Add a create() method that takes no root.
* This creates a TreeModelFilter with @a child_model as the child model, and @a root as the virtual root.
   * You can use set_visible_func(), set_visible_column() and/or set_modify_func() to change the mapping of child
   * model to parent model.
   "
      end

      class 265769 "SlotVisible"
	visibility package stereotype "typedef" explicit_base_type "sigc::slot<bool, const TreeModel::const_iterator&>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 653993 "set_visible_func"
	public explicit_return_type "void"
	nparams 1
	  param in name "slot" type class_ref 265769 // SlotVisible
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO: Copy the method docs from GTK+ when they are mature: See bug #127727
* Sets the \"visible\" callback used when filtering the filter.
   * The callback function should return true if the given row should be visible and false otherwise.
   * @param slot A callback slot which determines whether the row should be visible.
   "
      end

      class 265897 "SlotModify"
	visibility package stereotype "typedef" explicit_base_type "sigc::slot<void, const Gtk::TreeModel::iterator& /* iter */, Glib::ValueBase& /* value */, int /* column */>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 654121 "set_modify_func"
	public explicit_return_type "void"
	nparams 2
	  param in name "columns" explicit_type "TreeModelColumnRecord"
	  param in name "slot" type class_ref 265897 // SlotModify
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO: Copy the method docs from GTK+ when they are mature: See bug #127727"
      end

      operation 654249 "set_visible_column"
	public explicit_return_type "void"
	nparams 1
	  param in name "column" explicit_type "TreeModelColumnBase"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets @a column  of the child_model to be the column where @a filter  should
   * look for visibility information. @a columns  should be a column of type
   * G::TYPE_BOOLEAN, where <tt>true</tt> means that a row is visible, and <tt>false</tt>
   * if not.
   * 
   * Since: 2.4
   * @param column A <tt>int</tt> which is the column containing the visible information.
   "
      end

      operation 654377 "set_visible_column"
	public explicit_return_type "void"
	nparams 1
	  param in name "column" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets @a column  of the child_model to be the column where @a filter  should
   * look for visibility information. @a columns  should be a column of type
   * G::TYPE_BOOLEAN, where <tt>true</tt> means that a row is visible, and <tt>false</tt>
   * if not.
   * 
   * Since: 2.4
   * @param column A <tt>int</tt> which is the column containing the visible information.
   "
      end

      operation 654505 "get_model"
	public explicit_return_type "Glib::RefPtr<TreeModel>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns a pointer to the child model of @a filter .
   * @return A pointer to a Gtk::TreeModel.
   * 
   * Since: 2.4.
   "
      end

      operation 654633 "get_model"
	const public explicit_return_type "Glib::RefPtr<const TreeModel>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns a pointer to the child model of @a filter .
   * @return A pointer to a Gtk::TreeModel.
   * 
   * Since: 2.4.
   "
      end

      operation 654761 "convert_child_iter_to_iter"
	const public explicit_return_type "iterator"
	nparams 1
	  param in name "child_iter" explicit_type "iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets an iterator that points to the sorted row that corresponds to the child row pointed at by child_iter.
   *
   * @param child_iter A valid iterator pointing to a row on the child model.
   * @result A valid iterator that points to the row in this sorted model.
   "
      end

      operation 654889 "convert_iter_to_child_iter"
	const public explicit_return_type "iterator"
	nparams 1
	  param in name "filter_iter" explicit_type "iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets an iterator that points to the child row that corresponds to the sorted row pointed at by sorted_iter.
   *
   * @param filter_iter A valid iterator pointing to a row on the sorted model.
   * @result A valid iterator that points to the row in the child model.
   "
      end

      operation 655017 "convert_child_path_to_path"
	public explicit_return_type "Path"
	nparams 1
	  param in name "child_path" explicit_type "Path"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Converts @a child_path  to a path relative to @a filter . That is, @a child_path 
   * points to a path in the child model. The rerturned path will point to the
   * same row in the filtered model. If @a child_path  isn't a valid path on the
   * child model, then <tt>0</tt> is returned.
   * @param child_path A Gtk::TreePath to convert.
   * @return A newly allocated Gtk::TreePath, or <tt>0</tt>.
   * 
   * Since: 2.4.
   "
      end

      operation 655145 "convert_path_to_child_path"
	public explicit_return_type "Path"
	nparams 1
	  param in name "filter_path" explicit_type "Path"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Converts @a filter_path  to a path on the child model of @a filter . That is,
   *  @a filter_path  points to a location in @a filter . The returned path will
   * point to the same location in the model not being filtered. If @a filter_path 
   * does not point to a location in the child model, <tt>0</tt> is returned.
   * @param filter_path A Gtk::TreePath to convert.
   * @return A newly allocated Gtk::TreePath, or <tt>0</tt>.
   * 
   * Since: 2.4.
   "
      end

      operation 655273 "refilter"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Emits ::row_changed for each row in the child model, which causes
   * the filter to re-evaluate whether a row is visible or not.
   * 
   * Since: 2.4
   "
      end

      operation 655401 "clear_cache"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* This function should almost never be called. It clears the @a filter 
   * of any cached iterators that haven't been reffed with
   * ref_node(). This might be useful if the child model
   * being filtered is static (and doesn't change often) and there has been
   * a lot of unreffed access to nodes. As a side effect of this function,
   * all unreffed itters will be invalid.
   * 
   * Since: 2.4
   "
      end

      operation 655529 "set_value_impl"
	cpp_virtual protected explicit_return_type "void"
	nparams 3
	  param in name "row" explicit_type "iterator"
	  param in name "column" explicit_type "int"
	  param in name "value" explicit_type "Glib::ValueBase"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 266025 "TreeModelSort"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/treemodelsort.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* A wrapper which makes an underlying Gtk::TreeModel sortable.
 * @ingroup TreeView
 "
      classrelation 225321 // <generalisation>
	relation 225321 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 225321 // <generalisation>
	  b parent class_ref 302121 // TreeModel
      end

      classrelation 225449 // <generalisation>
	relation 225449 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 225449 // <generalisation>
	  b parent class_ref 204585 // TreeSortable
      end

      class 266153 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 266025 // TreeModelSort
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 225577 // <realization>
	  relation 225577 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 225577 // <realization>
	    b parent class_ref 266025 // TreeModelSort
	end
      end

      class 266409 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "TreeModelSort_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 266537 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkTreeModelSort"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 266665 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkTreeModelSortClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 225961 // treemodelsort_class_ (<directional composition>)
	relation 225961 *-->
	  a role_name "treemodelsort_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 225961 // treemodelsort_class_ (<directional composition>)
	  b parent class_ref 266409 // CppClassType
      end

      operation 655657 "TreeModelSort"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 266025 // TreeModelSort
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 655785 "operator ="
	private return_type class_ref 266025 // TreeModelSort
	nparams 1
	  param in name "" type class_ref 266025 // TreeModelSort
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 655913 "TreeModelSort"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 656041 "TreeModelSort"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkTreeModelSort"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 656169 "~TreeModelSort"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 656297 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 656425 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 656553 "gobj"
	cpp_inline public explicit_return_type "GtkTreeModelSort"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTreeModelSort*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 656681 "gobj"
	const cpp_inline public explicit_return_type "GtkTreeModelSort"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTreeModelSort*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 656809 "gobj_copy"
	public explicit_return_type "GtkTreeModelSort"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs."
      end

      operation 656937 "TreeModelSort"
	protected explicit_return_type ""
	nparams 1
	  param in name "model" explicit_type "Glib::RefPtr<TreeModel>"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 657065 "create"
	class_operation public explicit_return_type "Glib::RefPtr<TreeModelSort>"
	nparams 1
	  param in name "model" explicit_type "Glib::RefPtr<TreeModel>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 657193 "get_model"
	public explicit_return_type "Glib::RefPtr<TreeModel>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the model the Gtk::TreeModelSort is sorting.
   * @return The \"child model\" being sorted.
   "
      end

      operation 657321 "get_model"
	const public explicit_return_type "Glib::RefPtr<const TreeModel>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the model the Gtk::TreeModelSort is sorting.
   * @return The \"child model\" being sorted.
   "
      end

      operation 657449 "convert_child_path_to_path"
	const public explicit_return_type "Path"
	nparams 1
	  param in name "child_path" explicit_type "Path"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Converts @a child_path  to a path relative to @a tree_model_sort .  That is,
   *  @a child_path  points to a path in the child model.  The returned path will
   * point to the same row in the sorted model.  If @a child_path  isn't a valid path
   * on the child model, then <tt>0</tt> is returned.
   * @param child_path A Gtk::TreePath to convert.
   * @return A newly allocated Gtk::TreePath, or <tt>0</tt>.
   "
      end

      operation 657577 "convert_child_iter_to_iter"
	const public explicit_return_type "iterator"
	nparams 1
	  param in name "child_iter" explicit_type "iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets an iterator that points to the sorted row that corresponds to the child row pointed at by child_iter.
   *
   * @param child_iter A valid iterator pointing to a row on the child model.
   * @result A valid iterator that points to the row in this sorted model.
   "
      end

      operation 657705 "convert_path_to_child_path"
	const public explicit_return_type "Path"
	nparams 1
	  param in name "sorted_path" explicit_type "Path"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Converts @a sorted_path  to a path on the child model of @a tree_model_sort .  That
   * is, @a sorted_path  points to a location in @a tree_model_sort .  The returned path
   * will point to the same location in the model not being sorted.  If @a sorted_path  
   * does not point to a location in the child model, <tt>0</tt> is returned.
   * @param sorted_path A Gtk::TreePath to convert.
   * @return A newly allocated Gtk::TreePath, or <tt>0</tt>.
   "
      end

      operation 657833 "convert_iter_to_child_iter"
	const public explicit_return_type "iterator"
	nparams 1
	  param in name "sorted_iter" explicit_type "iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets an iterator that points to the child row that corresponds to the sorted row pointed at by sorted_iter.
   *
   * @param sorted_iter A valid iterator pointing to a row on the sorted model.
   * @result A valid iterator that points to the row in the child model.
   "
      end

      operation 657961 "reset_default_sort_func"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* This resets the default sort function to be in the 'unsorted' state.  That
   * is, it is in the same order as the child model. It will re-sort the model
   * to be in the same order as the child model only if the Gtk::TreeModelSort
   * is in 'unsorted' state.
   "
      end

      operation 658089 "clear_cache"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* This function should almost never be called.  It clears the @a tree_model_sort 
   * of any cached iterators that haven't been reffed with
   * ref_node().  This might be useful if the child model being
   * sorted is static (and doesn't change often) and there has been a lot of
   * unreffed access to nodes.  As a side effect of this function, all unreffed
   * iters will be invalid.
   "
      end

      operation 658217 "iter_is_valid"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "iter" explicit_type "iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* WARNING: This function is slow. Only use it for debugging and/or testing
   * purposes.
   * 
   * Checks if the given iter is a valid iter for this Gtk::TreeModelSort.
   * @param iter A Gtk::TreeIter.
   * @return <tt>true</tt> if the iter is valid, <tt>false</tt> if the iter is invalid.
   * 
   * Since: 2.2.
   "
      end

      operation 658345 "set_value_impl"
	cpp_virtual protected explicit_return_type "void"
	nparams 3
	  param in name "row" explicit_type "iterator"
	  param in name "column" explicit_type "int"
	  param in name "value" explicit_type "Glib::ValueBase"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 264233 "TreePath"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/treepath.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* A path is essentially a potential node. It is a location on a model that may
 * or may not actually correspond to a node on a specific model.
 *
 * A Path can be converted into either an array of unsigned integers or a string. The string
 * form is a list of numbers separated by a colon. Each number refers to the
 * offset at that level. Thus, the path \"0\" refers to the root node and the
 * path \"2:4\" refers to the fifth child of the third node.
 *
 * Typedefed as Gtk::TreeModel::Path.
 * @ingroup TreeView
 "
      class 266793 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 264233 // TreePath
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 226089 // <realization>
	  relation 226089 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 226089 // <realization>
	    b parent class_ref 264233 // TreePath
	end
      end

      class 266921 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkTreePath"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 658473 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 658601 "TreePath"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 658729 "TreePath"
	public explicit_return_type ""
	nparams 2
	  param inout name "gobject" explicit_type "GtkTreePath"
	  param in name "make_a_copy" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 658857 "TreePath"
	public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 264233 // TreePath
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 658985 "operator ="
	public return_type class_ref 264233 // TreePath
	nparams 1
	  param in name "other" type class_ref 264233 // TreePath
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 659113 "~TreePath"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 659241 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 264233 // TreePath
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 659369 "gobj"
	cpp_inline public explicit_return_type "GtkTreePath"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return gobject_; };
"
	
	
	
	
	comment "/Provides access to the underlying C instance."
      end

      operation 659497 "gobj"
	const cpp_inline public explicit_return_type "GtkTreePath"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return gobject_; };
"
	
	
	
	
	comment "/Provides access to the underlying C instance."
      end

      operation 659625 "gobj_copy"
	const public explicit_return_type "GtkTreePath"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Provides access to the underlying C instance. The caller is responsible for freeing it. Use when directly setting fields in structs."
      end

      attribute 207273 "gobject_"
	protected explicit_type "GtkTreePath"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      class 267049 "size_type"
	visibility package stereotype "typedef" explicit_base_type "unsigned int"
	cpp_decl "${comment}typedef ${type}  ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 267177 "difference_type"
	visibility package stereotype "typedef" explicit_base_type "int"
	cpp_decl "${comment}typedef ${type}           ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 267305 "value_type"
	visibility package stereotype "typedef" explicit_base_type "int"
	cpp_decl "${comment}typedef ${type}           ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 267433 "reference"
	visibility package stereotype "typedef" explicit_base_type "int"
	cpp_decl "${comment}typedef ${type}&           ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 267561 "const_reference"
	visibility package stereotype "typedef" explicit_base_type "int"
	cpp_decl "${comment}typedef  const ${type}&     ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 267689 "iterator"
	visibility package stereotype "typedef" explicit_base_type "int"
	cpp_decl "${comment}typedef ${type}*           ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 267817 "const_iterator"
	visibility package stereotype "typedef" explicit_base_type "int"
	cpp_decl "${comment}typedef  const ${type}*     ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 267945 "reverse_iterator"
	visibility package stereotype "typedef" explicit_base_type "std::reverse_iterator<iterator, std::random_access_iterator_tag,
                                int, int&, int*, ptrdiff_t>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 268073 "const_reverse_iterator"
	visibility package stereotype "typedef" explicit_base_type "std::reverse_iterator<const_iterator, std::random_access_iterator_tag,
                                int, const int&, const int*, ptrdiff_t>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 659753 "TreePath"
	public explicit_return_type ""
	nparams 2
	  param in name "n" type class_ref 267049 // size_type
	  param in name "value" type class_ref 267305 // value_type
	    defaultvalue " 0"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 659881 "TreePath"
	public explicit_return_type ""
	nparams 1
	  param in name "path" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 660009 "TreePath"
	public explicit_return_type ""
	nparams 1
	  param in name "iter" type class_ref 301865 // iterator
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 660137 "TreePath"
	stereotype "template"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "pbegin" explicit_type "In"
	  param in name "pend" explicit_type "In"
	cpp_decl "    ${comment}template<class In>
  ${inline}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}template<class In>
${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 660265 "clear"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 660393 "operator ="
	public return_type class_ref 264233 // TreePath
	nparams 1
	  param in name "iter" type class_ref 301865 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " I think it's OK for this assignment to be implicit.  It's very useful."
      end

      operation 660521 "assign"
	stereotype "template"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "pbegin" explicit_type "In"
	  param in name "pend" explicit_type "In"
	cpp_decl "    ${comment}template<class In>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}template<class In>
${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 660649 "append"
	stereotype "template"
	public explicit_return_type "void"
	nparams 2
	  param in name "pbegin" explicit_type "In"
	  param in name "pend" explicit_type "In"
	cpp_decl "    ${comment}template<class In>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}template<class In>
${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 660777 "push_back"
	public explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Appends a new index to a path.  As a result, the depth of the path is
   * increased.
   * @param index The index.
   "
      end

      operation 660905 "push_front"
	public explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Prepends a new index to a path.  As a result, the depth of the path is
   * increased.
   * @param index The index.
   "
      end

      operation 661033 "size"
	const public return_type class_ref 267049 // size_type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 661161 "empty"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 661289 "operator []"
	public return_type class_ref 267433 // reference
	nparams 1
	  param in name "i" type class_ref 267049 // size_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 661417 "operator []"
	const public return_type class_ref 267561 // const_reference
	nparams 1
	  param in name "i" type class_ref 267049 // size_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 661545 "begin"
	public return_type class_ref 267689 // iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 661673 "end"
	public return_type class_ref 267689 // iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 661801 "begin"
	const public return_type class_ref 267817 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 661929 "end"
	const public return_type class_ref 267817 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 662057 "rbegin"
	cpp_inline public return_type class_ref 267945 // reverse_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reverse_iterator(end());         };
"
	
	
	
	
	comment " Note: there is no advantage in not inlining these methods.
 We can't change them without breaking ABI anyway."
      end

      operation 662185 "rend"
	cpp_inline public return_type class_ref 267945 // reverse_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reverse_iterator(begin());       };
"
	
	
	
	
      end

      operation 662313 "rbegin"
	const cpp_inline public return_type class_ref 268073 // const_reverse_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return const_reverse_iterator(end());   };
"
	
	
	
	
      end

      operation 662441 "rend"
	const cpp_inline public return_type class_ref 268073 // const_reverse_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return const_reverse_iterator(begin()); };
"
	
	
	
	
      end

      operation 662569 "front"
	cpp_inline public return_type class_ref 267433 // reference
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return *begin();  };
"
	
	
	
	
      end

      operation 662697 "front"
	const cpp_inline public return_type class_ref 267561 // const_reference
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return *begin();  };
"
	
	
	
	
      end

      operation 662825 "back"
	cpp_inline public return_type class_ref 267433 // reference
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return *rbegin(); };
"
	
	
	
	
      end

      operation 662953 "back"
	const cpp_inline public return_type class_ref 267561 // const_reference
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return *rbegin(); };
"
	
	
	
	
      end

      operation 663081 "next"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves the @a path  to point to the next node at the current depth.
   "
      end

      operation 663209 "prev"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves the @a path  to point to the previous node at the current depth, if it exists.
   * @return <tt>true</tt> if @a path  has a previous node, and the move was made.
   "
      end

      operation 663337 "up"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves the @a path  to point to its parent node, if it has a parent.
   * @return <tt>true</tt> if @a path  has a parent, and the move was made.
   "
      end

      operation 663465 "down"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves @a path  to point to the first child of the current path.
   "
      end

      operation 663593 "is_ancestor"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "descendant" type class_ref 264233 // TreePath
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns <tt>true</tt> if @a descendant  is a descendant of @a path .
   * @param descendant Another Gtk::TreePath.
   * @return <tt>true</tt> if @a descendant  is contained inside @a path .
   "
      end

      operation 663721 "is_descendant"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "ancestor" type class_ref 264233 // TreePath
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns <tt>true</tt> if @a path  is a descendant of @a ancestor .
   * @param ancestor Another Gtk::TreePath.
   * @return <tt>true</tt> if @a ancestor  contains @a path  somewhere below it.
   "
      end

      operation 663849 "to_string"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Generates a string representation of the path.  This string is a ':'
   * separated list of numbers.  For example, \"4:10:0:3\" would be an acceptable return value for this string.
   * @return The string.
   "
      end

      operation 663977 "append_index"
	public explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/ @deprecated replaced by push_back():
* Appends a new index to a path.  As a result, the depth of the path is
   * increased.
   * @param index The index.
   "
      end

      operation 664105 "prepend_index"
	public explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/ @deprecated replaced by push_front():
* Prepends a new index to a path.  As a result, the depth of the path is
   * increased.
   * @param index The index.
   "
      end

      operation 664233 "get_depth"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/ @deprecated replaced by size():
* Returns the current depth of @a path .
   * @return The depth of @a path .
   "
      end

      operation 664361 "get_indices"
	const public explicit_return_type "Glib::ArrayHandle<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/ @deprecated replaced by begin(), end(), and operator[]"
      end

      operation 664489 "get_from_selection_data"
	class_operation public explicit_return_type "bool"
	nparams 3
	  param in name "selection_data" type class_ref 280489 // SelectionData
	  param inout name "model" explicit_type "Glib::RefPtr<TreeModel>"
	  param inout name "path" type class_ref 264233 // TreePath
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "*
   * Obtains a Gtk::TreeModel and Gtk::TreeModel::Path from selection data of target type
   * \"GTK_TREE_MODEL_ROW\". Normally called from a drag_data_received handler.
   * This function can only be used if @a selection_data originates from the same
   * process that's calling this function, because a pointer to the tree model
   * is being passed around. If you aren't in the same process, then you'll
   * get memory corruption. In the Gtk::TreeDragDest drag_data_received signal handler,
   * you can assume that selection data of type \"GTK_TREE_MODEL_ROW\" is
   * from the current process. 
   *
   * @param selection_data a #SelectionData
   * @param model a Gtk::TreeModel
   * @param path a row in model
   *
   * @return true if the selection_data had target type \"GTK_TREE_MODEL_ROW\" and
   *  is otherwise valid
   *"
      end

      operation 664617 "get_from_selection_data"
	class_operation public explicit_return_type "bool"
	nparams 2
	  param in name "selection_data" type class_ref 280489 // SelectionData
	  param inout name "path" type class_ref 264233 // TreePath
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO: Add an override that takes a const TreeModel (and deprecate the current version).
/ See description in the other overload."
      end

      operation 664745 "set_in_selection_data"
	const public explicit_return_type "bool"
	nparams 2
	  param inout name "selection_data" type class_ref 280489 // SelectionData
	  param in name "model" explicit_type "Glib::RefPtr<const TreeModel>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "*
   * Sets selection data of target type \"GTK_TREE_MODEL_ROW\". Normally used
   * in a drag_data_get signal handler.
   *
   * @param selection_data some #SelectionData
   * @param model: a Gtk::TreeModel
   *
   * @return true if the selection_data had the proper target type to allow us to set a tree row
   *"
      end
    end

    class 268201 "TreePath_Traits"
      visibility package stereotype "struct"
      cpp_external cpp_decl "${name}
#include <gtkmm/treepath_traits.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Traits for use of TreePath in a Glib::ListHandle<>.
 "
      class 268329 "CppType"
	visibility package stereotype "typedef" base_type class_ref 264233 // TreePath
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 226217 // <realization>
	  relation 226217 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 226217 // <realization>
	    b parent class_ref 264233 // TreePath
	end
      end

      class 268457 "CType"
	visibility package stereotype "typedef" explicit_base_type "GtkTreePath"
	cpp_decl "${comment}typedef  const ${type}*   ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 268585 "CTypeNonConst"
	visibility package stereotype "typedef" explicit_base_type "GtkTreePath"
	cpp_decl "${comment}typedef ${type}*         ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 664873 "to_c_type"
	class_operation cpp_inline public return_type class_ref 268457 // CType
	nparams 1
	  param in name "item" type class_ref 268329 // CppType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} { return item.gobj(); };
"
	
	
	
	
      end

      operation 665001 "to_c_type"
	class_operation cpp_inline public return_type class_ref 268457 // CType
	nparams 1
	  param in name "item" type class_ref 268457 // CType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract} { return item; };
"
	
	
	
	
      end

      operation 665129 "to_cpp_type"
	class_operation cpp_inline public return_type class_ref 268329 // CppType
	nparams 1
	  param in name "item" type class_ref 268457 // CType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract} { return CppType(const_cast<CTypeNonConst>(item)); };
"
	
	
	
	
      end

      operation 665257 "release_c_type"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "item" type class_ref 268457 // CType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract} { gtk_tree_path_free(const_cast<CTypeNonConst>(item)); };
"
	
	
	
	
      end
    end

    class 264361 "TreeRowReference"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/treerowreference.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Typedefed as Gtk::TreeModel::RowReference.
 * This reference will keep pointing to
 * the node pointed to by the Path, so long as it exists.  It listens to all
 * signals emitted by the Model, and updates its Path appropriately.
 * @ingroup TreeView
"
      class 268969 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 264361 // TreeRowReference
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 226473 // <realization>
	  relation 226473 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 226473 // <realization>
	    b parent class_ref 264361 // TreeRowReference
	end
      end

      class 269097 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkTreeRowReference"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 665385 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 665513 "TreeRowReference"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 665641 "TreeRowReference"
	public explicit_return_type ""
	nparams 2
	  param inout name "gobject" explicit_type "GtkTreeRowReference"
	  param in name "make_a_copy" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 665769 "TreeRowReference"
	public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 264361 // TreeRowReference
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 665897 "operator ="
	public return_type class_ref 264361 // TreeRowReference
	nparams 1
	  param in name "other" type class_ref 264361 // TreeRowReference
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 666025 "~TreeRowReference"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 666153 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 264361 // TreeRowReference
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 666281 "gobj"
	cpp_inline public explicit_return_type "GtkTreeRowReference"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return gobject_; };
"
	
	
	
	
	comment "/Provides access to the underlying C instance."
      end

      operation 666409 "gobj"
	const cpp_inline public explicit_return_type "GtkTreeRowReference"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return gobject_; };
"
	
	
	
	
	comment "/Provides access to the underlying C instance."
      end

      operation 666537 "gobj_copy"
	const public explicit_return_type "GtkTreeRowReference"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Provides access to the underlying C instance. The caller is responsible for freeing it. Use when directly setting fields in structs."
      end

      attribute 207401 "gobject_"
	protected explicit_type "GtkTreeRowReference"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 666665 "TreeRowReference"
	public explicit_return_type ""
	nparams 2
	  param in name "model" explicit_type "Glib::RefPtr<TreeModel>"
	  param in name "path" type class_ref 261545 // Path
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 666793 "operator bool"
	const public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/The same as is_valid()."
      end

      operation 666921 "get_path"
	const public return_type class_ref 261545 // Path
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns a path that the row reference currently points to, or <tt>0</tt> if the
   * path pointed to is no longer valid.
   * @return A current path, or <tt>0</tt>.
   "
      end

      operation 667049 "is_valid"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns <tt>true</tt> if the %reference is non-<tt>0</tt> and refers to a current valid
   * path.
   * @return <tt>true</tt> if %reference points to a valid path.
   "
      end
    end

    class 269481 "TreeSelection"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/treeselection.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Typedefed as Gtk::TreeView::Selection.
 * This is a helper object to manage the selection for a Gtk::TreeView widget.
 *
 * It is automatically created when a new Gtk::TreeView widget is created, and
 * cannot exist independently of this widget.  The primary reason this class
 * exists is for cleanliness of code and API. That is, there is no conceptual
 * reason all these methods could not be methods on the Gtk::TreeView widget
 * instead of a separate class.
 *
 * The Gtk::TreeSelection object can be obtained from a Gtk::TreeView by
 * calling Gtk::TreeView::get_selection().  It can be manipulated to check the
 * selection status of the tree, as well as to select and deselect individual
 * rows.  Selection is done completely view-side. As a result, multiple views
 * of the same model can have completely different selections.  Additionally,
 * you cannot change the selection of a row on the model that is not currently
 * displayed by the view without expanding its parents first.
 *
 * When monitoring the selection of a view, it's important to remember that the
 * \"changed\" signal is mostly a hint. That is, it may only emit one signal when
 * a range of rows is selected. Additionally, it may on occasion emit a
 * \"changed\" signal when nothing has happened.
 *
 * @ingroup TreeView
 "
      class 269609 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 269481 // TreeSelection
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 226857 // <realization>
	  relation 226857 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 226857 // <realization>
	    b parent class_ref 269481 // TreeSelection
	end
      end

      class 269865 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "TreeSelection_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 269993 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkTreeSelection"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 270121 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkTreeSelectionClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 227241 // treeselection_class_ (<directional composition>)
	relation 227241 *-->
	  a role_name "treeselection_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 227241 // treeselection_class_ (<directional composition>)
	  b parent class_ref 269865 // CppClassType
      end

      operation 667177 "TreeSelection"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 269481 // TreeSelection
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 667305 "operator ="
	private return_type class_ref 269481 // TreeSelection
	nparams 1
	  param in name "" type class_ref 269481 // TreeSelection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 667433 "TreeSelection"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 667561 "TreeSelection"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkTreeSelection"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 667689 "~TreeSelection"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 667817 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 667945 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 668073 "gobj"
	cpp_inline public explicit_return_type "GtkTreeSelection"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTreeSelection*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 668201 "gobj"
	const cpp_inline public explicit_return_type "GtkTreeSelection"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTreeSelection*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 668329 "gobj_copy"
	public explicit_return_type "GtkTreeSelection"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs."
      end

      operation 668457 "set_mode"
	public explicit_return_type "void"
	nparams 1
	  param in name "type" type class_ref 179241 // SelectionMode
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the selection mode of the @a selection .  If the previous type was
   * Gtk::SELECTION_MULTIPLE, then the anchor is kept selected, if it was
   * previously selected.
   * @param type The selection mode.
   "
      end

      operation 668585 "get_mode"
	const public return_type class_ref 179241 // SelectionMode
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the selection mode for @a selection . See
   * set_mode().
   * @return The current selection mode.
   "
      end

      class 270249 "SlotSelect"
	visibility package stereotype "typedef" explicit_base_type "sigc::slot<bool, const Glib::RefPtr<TreeModel>&, const TreeModel::Path&, bool>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 668713 "set_select_function"
	public explicit_return_type "void"
	nparams 1
	  param in name "slot" type class_ref 270249 // SlotSelect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the selection callback slot. If set, this function is called before any node is selected or unselected,
   * giving some control over which nodes are selected.
   *
   * The select function should return true if the state of the node may be toggled, and FALSE if the state of the node
   * should be left unchanged.
   *
   * @param slot The selection function.
   "
      end

      operation 668841 "get_tree_view"
	public return_type class_ref 189993 // TreeView
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " This would be our SignalProxy_Select* data.
* Returns the tree view associated with @a selection .
   * @return A Gtk::TreeView.
   "
      end

      operation 668969 "get_tree_view"
	const public return_type class_ref 189993 // TreeView
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the tree view associated with @a selection .
   * @return A Gtk::TreeView.
   "
      end

      operation 669097 "get_model"
	public explicit_return_type "Glib::RefPtr<TreeModel>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Shortcut for get_tree_view()->get_model().
   * @return The TreeModel associated with this TreeSelection.
   "
      end

      operation 669225 "get_model"
	const public explicit_return_type "Glib::RefPtr<const TreeModel>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " convenience function, not in GTK+"
      end

      operation 669353 "get_selected"
	public return_type class_ref 301865 // iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " convenience function, not in GTK+
TODO: Add TreeModel::const_iterator get_selected() const, when we have a real const_iterator.
* Get the currently selected row.
   * @return The currently selected row.
   * @note
   * This method won't work if the selection mode is <tt>Gtk::SELECTION_MULTIPLE</tt>.
   * Use get_selected_rows() for multiple selections.
   "
      end

      operation 669481 "get_selected"
	public return_type class_ref 301865 // iterator
	nparams 1
	  param inout name "model" explicit_type "Glib::RefPtr<TreeModel>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Get the currently selected row.
   * @return The currently selected row. Or end() if no rows were selected.
   * @retval model The current TreeModel.
   * @note
   * This method won't work if the selection mode is <tt>Gtk::SELECTION_MULTIPLE</tt>.
   * Use get_selected_rows() for multiple selections.
   "
      end

      class 270377 "ListHandle_Path"
	visibility package stereotype "typedef" explicit_base_type "Glib::ListHandle<TreeModel::Path, TreePath_Traits>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 669609 "get_selected_rows"
	const public return_type class_ref 270377 // ListHandle_Path
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Creates a list of paths of all selected rows.
   * Additionally, if you are planning on modifying the model after calling this function,
   * you may want to convert the returned list into a list of GtkTreeRowReferences.
   *
   * @returns a standard container containing a Gtk::Model::Path for each selected row.
   "
      end

      operation 669737 "get_selected_rows"
	public return_type class_ref 270377 // ListHandle_Path
	nparams 1
	  param inout name "model" explicit_type "Glib::RefPtr<TreeModel>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Creates a list of paths of all selected rows.
   * Additionally, if you are planning on modifying the model after calling this function,
   * you may want to convert the returned list into a list of GtkTreeRowReferences.
   *
   * @retval model The current TreeModel.
   * @returns a standard container containing a Gtk::Model::Path for each selected row.
   "
      end

      operation 669865 "count_selected_rows"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the number of rows that have been selected in @a tree .
   * @return The number of rows selected.
   * 
   * Since: 2.2.
   "
      end

      class 270505 "SlotForeachIter"
	visibility package stereotype "typedef" explicit_base_type "sigc::slot<void, const TreeModel::iterator&>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 669993 "selected_foreach_iter"
	const public explicit_return_type "void"
	nparams 1
	  param in name "slot" type class_ref 270505 // SlotForeachIter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Calls a callback slot for each selected node.
   * Note that you cannot modify the tree or selection from within the callback function.
   * As a result, get_selected_rows() might be more useful.
   *
   * @param slot The function to call for each selected node.
   "
      end

      class 270633 "SlotForeachPath"
	visibility package stereotype "typedef" explicit_base_type "sigc::slot<void, const TreeModel::Path&>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 670121 "selected_foreach_path"
	const public explicit_return_type "void"
	nparams 1
	  param in name "slot" type class_ref 270633 // SlotForeachPath
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Calls a callback slot for each selected node.
   * Note that you cannot modify the tree or selection from within the callback function.
   * As a result, get_selected_rows() might be more useful.
   *
   * @param slot The function to call for each selected node.
   "
      end

      class 270761 "SlotForeachPathAndIter"
	visibility package stereotype "typedef" explicit_base_type "sigc::slot<void, const TreeModel::Path&, const TreeModel::iterator&>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 670249 "selected_foreach"
	const public explicit_return_type "void"
	nparams 1
	  param in name "slot" type class_ref 270761 // SlotForeachPathAndIter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Calls a callback slot for each selected node.
   * Note that you cannot modify the tree or selection from within the callback function.
   * As a result, get_selected_rows() might be more useful.
   *
   * @param slot The function to call for each selected node.
   "
      end

      operation 670377 "select"
	public explicit_return_type "void"
	nparams 1
	  param in name "path" type class_ref 261545 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Select the row at @a path .
   * @param path The Gtk::TreePath to be selected.
   "
      end

      operation 670505 "select"
	public explicit_return_type "void"
	nparams 1
	  param in name "iter" type class_ref 301865 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Selects the specified iterator.
   * @param iter The Gtk::TreeIter to be selected.
   "
      end

      operation 670633 "select"
	public explicit_return_type "void"
	nparams 1
	  param in name "row" type class_ref 264105 // Row
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Selects the specified iterator.
   * @param iter The Gtk::TreeIter to be selected.
   "
      end

      operation 670761 "select"
	public explicit_return_type "void"
	nparams 2
	  param in name "start_path" type class_ref 261545 // Path
	  param in name "end_path" type class_ref 261545 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Selects a range of nodes, determined by @a start_path  and @a end_path  inclusive.
   * @param start_path The initial node of the range.
   * @param end_path The final node of the range.
   "
      end

      operation 670889 "unselect"
	public explicit_return_type "void"
	nparams 1
	  param in name "path" type class_ref 261545 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Unselects the row at @a path .
   * @param path The Gtk::TreePath to be unselected.
   "
      end

      operation 671017 "unselect"
	public explicit_return_type "void"
	nparams 2
	  param in name "start_path" type class_ref 261545 // Path
	  param in name "end_path" type class_ref 261545 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Unselects a range of nodes, determined by @a start_path  and @a end_path 
   * inclusive.
   * 
   * Since: 2.2
   * @param start_path The initial node of the range.
   * @param end_path The initial node of the range.
   "
      end

      operation 671145 "unselect"
	public explicit_return_type "void"
	nparams 1
	  param in name "iter" type class_ref 301865 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Unselects the specified iterator.
   * @param iter The Gtk::TreeIter to be unselected.
   "
      end

      operation 671273 "is_selected"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "path" type class_ref 261545 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns <tt>true</tt> if the row pointed to by @a path  is currently selected.  If @a path 
   * does not point to a valid location, <tt>false</tt> is returned
   * @param path A Gtk::TreePath to check selection on.
   * @return <tt>true</tt> if @a path  is selected.
   "
      end

      operation 671401 "is_selected"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "iter" type class_ref 301865 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns <tt>true</tt> if the row at @a iter  is currently selected.
   * @param iter A valid Gtk::TreeIter.
   * @return <tt>true</tt>, if @a iter  is selected.
   "
      end

      operation 671529 "select_all"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Selects all the nodes.  @a selection  is must be set to Gtk::SELECTION_MULTIPLE
   * mode.
   "
      end

      operation 671657 "unselect_all"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Unselects all the nodes.
   "
      end

      operation 671785 "signal_changed"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 671913 "on_changed"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end
    end

    class 204585 "TreeSortable"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/treesortable.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
*
 * @ingroup TreeView
"
      class 270889 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 204585 // TreeSortable
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 227497 // <realization>
	  relation 227497 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 227497 // <realization>
	    b parent class_ref 204585 // TreeSortable
	end
      end

      class 271145 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "TreeSortable_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 271273 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkTreeSortable"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 271401 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkTreeSortableIface"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 227881 // treesortable_class_ (<directional composition>)
	relation 227881 *-->
	  a role_name "treesortable_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 227881 // treesortable_class_ (<directional composition>)
	  b parent class_ref 271145 // CppClassType
      end

      operation 672041 "TreeSortable"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 204585 // TreeSortable
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 672169 "operator ="
	private return_type class_ref 204585 // TreeSortable
	nparams 1
	  param in name "" type class_ref 204585 // TreeSortable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 672297 "TreeSortable"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 672425 "TreeSortable"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkTreeSortable"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " you must derive from this class"
      end

      operation 672553 "~TreeSortable"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 672681 "add_interface"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "gtype_implementer" explicit_type "GType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 672809 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 672937 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 673065 "gobj"
	cpp_inline public explicit_return_type "GtkTreeSortable"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTreeSortable*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 673193 "gobj"
	const cpp_inline public explicit_return_type "GtkTreeSortable"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTreeSortable*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject.  "
      end

      class 271529 "anonymous5"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 199593 "DEFAULT_SORT_COLUMN_ID"
	  public explicit_type ""
	  init_value " -1
  "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 673321 "get_sort_column_id"
	const public explicit_return_type "bool"
	nparams 2
	  param inout name "sort_column_id" explicit_type "int"
	  param inout name "order" type class_ref 317609 // SortType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "See GTK+ implementation.
* Fills in @a sort_column_id  and @a order  with the current sort column and the
   * order, if applicable.  If the sort column is not set, then <tt>false</tt> is returned,
   * and the values in @a sort_column_id  and @a order  are unchanged.
   * @param sort_column_id The sort column id to be filled in.
   * @param order The Gtk::SortType to be filled in.
   * @return <tt>true</tt>, if the sort column has been set.
   "
      end

      operation 673449 "set_sort_column"
	public explicit_return_type "void"
	nparams 2
	  param in name "sort_column_id" explicit_type "TreeModelColumnBase"
	  param in name "order" type class_ref 317609 // SortType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the current sort column to be @a sort_column_id .  The @a sortable  will
   * resort itself to reflect this change, after emitting a
   * GtkTreeSortable::sort_column_changed signal.  If @a sort_column_id  is
   * Gtk::TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID, then the default sort function
   * will be used, if it is set.
   * @param sort_column_id The sort column id to set.
   * @param order The sort order of the column.
   "
      end

      operation 673577 "set_sort_column"
	public explicit_return_type "void"
	nparams 2
	  param in name "sort_column_id" explicit_type "int"
	  param in name "order" type class_ref 317609 // SortType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the current sort column to be @a sort_column_id .  The @a sortable  will
   * resort itself to reflect this change, after emitting a
   * GtkTreeSortable::sort_column_changed signal.  If @a sort_column_id  is
   * Gtk::TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID, then the default sort function
   * will be used, if it is set.
   * @param sort_column_id The sort column id to set.
   * @param order The sort order of the column.
   "
      end

      operation 673705 "set_sort_column_id"
	public explicit_return_type "void"
	nparams 2
	  param in name "sort_column_id" explicit_type "TreeModelColumnBase"
	  param in name "order" type class_ref 317609 // SortType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* @deprecated Use set_sort_column() instead.
   "
      end

      operation 673833 "set_sort_column_id"
	public explicit_return_type "void"
	nparams 2
	  param in name "sort_column_id" explicit_type "int"
	  param in name "order" type class_ref 317609 // SortType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* @deprecated Use set_sort_column() instead.
   "
      end

      class 271657 "SlotCompare"
	visibility package stereotype "typedef" explicit_base_type "sigc::slot<int, const Gtk::TreeModel::iterator&, const Gtk::TreeModel::iterator&>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 673961 "set_sort_func"
	public explicit_return_type "void"
	nparams 2
	  param in name "sort_column" explicit_type "TreeModelColumnBase"
	  param in name "slot" type class_ref 271657 // SlotCompare
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the comparison function used when sorting a certain column.
   * If the current sort column is the same as @a sort_column, then the model will sort using this function.
   * @param sort_column the sort column to set the function for
   * @param slot The sorting slot callback.
   "
      end

      operation 674089 "set_sort_func"
	public explicit_return_type "void"
	nparams 2
	  param in name "sort_column_id" explicit_type "int"
	  param in name "slot" type class_ref 271657 // SlotCompare
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the comparison function used when sorting a certain column.
   * If the current sort column id is the same as @a sort_column_id, then the model will sort using this function.
   * @param sort_column_id the sort column id to set the function for
   * @param slot The sorting slot callback.
   "
      end

      operation 674217 "set_default_sort_func"
	public explicit_return_type "void"
	nparams 1
	  param in name "slot" type class_ref 271657 // SlotCompare
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the default comparison function used when sorting.
   * If the current sort column id of sortable is DEFAULT_SORT_COLUMN_ID, then the model will
   * sort using this function.  See also unset_default_sort_func().
   *
   * @param slot The sorting function
   "
      end

      operation 674345 "unset_default_sort_func"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the default comparison function used when sorting. See set_default_sort_func().
   *
   * After calling this method there will be no default comparison function. This means that once the model has been sorted,
   * it can't go back to the default state. In this case, when the current sort column id of sortable is
   * DEFAULT_SORT_COLUMN_ID, the model will be unsorted.
   "
      end

      operation 674473 "has_default_sort_func"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns <tt>true</tt> if the model has a default sort function.  This is used
   * primarily by GtkTreeViewColumns in order to determine if a model can go back
   * to the default state, or not.
   * @return <tt>true</tt>, if the model has a default sort function.
   "
      end

      operation 674601 "sort_column_changed"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Emits a GtkTreeSortable::sort_column_changed signal on
   "
      end

      operation 674729 "signal_sort_column_changed"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 674857 "get_sort_column_id_vfunc"
	const cpp_virtual protected explicit_return_type "bool"
	nparams 2
	  param inout name "sort_column_id" explicit_type "int"
	  param inout name "order" type class_ref 317609 // SortType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 674985 "set_sort_column_id_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param in name "sort_column_id" explicit_type "int"
	  param in name "order" type class_ref 317609 // SortType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 675113 "set_sort_func_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 4
	  param in name "sort_column_id" explicit_type "int"
	  param in name "func" explicit_type "GtkTreeIterCompareFunc"
	  param inout name "data" explicit_type "void"
	  param in name "destroy" explicit_type "GtkDestroyNotify"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} * ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} * ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 675241 "set_default_sort_func_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 3
	  param in name "func" explicit_type "GtkTreeIterCompareFunc"
	  param inout name "data" explicit_type "void"
	  param in name "destroy" explicit_type "GtkDestroyNotify"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} * ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 675369 "has_default_sort_func_vfunc"
	const cpp_virtual protected explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 675497 "sort_column_changed_vfunc"
	const cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 675625 "on_sort_column_changed"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end
    end

    class 271785 "TreeStore"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/treestore.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
*
 * @ingroup TreeView
 "
      classrelation 228265 // <generalisation>
	relation 228265 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 228265 // <generalisation>
	  b parent class_ref 204585 // TreeSortable
      end

      classrelation 228393 // <generalisation>
	relation 228393 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 228393 // <generalisation>
	  b parent class_ref 204713 // TreeDragSource
      end

      classrelation 228521 // <generalisation>
	relation 228521 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 228521 // <generalisation>
	  b parent class_ref 204841 // TreeDragDest
      end

      class 272041 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 271785 // TreeStore
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 228649 // <realization>
	  relation 228649 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 228649 // <realization>
	    b parent class_ref 271785 // TreeStore
	end
      end

      class 272297 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "TreeStore_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 272425 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkTreeStore"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 272553 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkTreeStoreClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 229033 // treestore_class_ (<directional composition>)
	relation 229033 *-->
	  a role_name "treestore_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 229033 // treestore_class_ (<directional composition>)
	  b parent class_ref 272297 // CppClassType
      end

      operation 675753 "TreeStore"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 271785 // TreeStore
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 675881 "operator ="
	private return_type class_ref 271785 // TreeStore
	nparams 1
	  param in name "" type class_ref 271785 // TreeStore
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 676009 "TreeStore"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 676137 "TreeStore"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkTreeStore"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 676265 "~TreeStore"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 676393 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 676521 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 676649 "gobj"
	cpp_inline public explicit_return_type "GtkTreeStore"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTreeStore*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 676777 "gobj"
	const cpp_inline public explicit_return_type "GtkTreeStore"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTreeStore*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 676905 "gobj_copy"
	public explicit_return_type "GtkTreeStore"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs."
      end

      operation 677033 "TreeStore"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "* When using this constructor, you must use set_column_types() immediately afterwards.
   * This can be useful when deriving from this class, with a fixed TreeModelColumnRecord
   * that is a member of the class.
   * There is no create() method that corresponds to this constructor, because this
   * constructor should only be used by derived classes.
   "
      end

      operation 677161 "TreeStore"
	protected explicit_return_type ""
	nparams 1
	  param in name "columns" explicit_type "TreeModelColumnRecord"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 677289 "create"
	class_operation public explicit_return_type "Glib::RefPtr<TreeStore>"
	nparams 1
	  param in name "columns" explicit_type "TreeModelColumnRecord"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Instantiate a new TreeStore.
   * @param columns The column types for this tree model.
   * @result The new TreeStore.
   "
      end

      operation 677417 "set_column_types"
	public explicit_return_type "void"
	nparams 1
	  param in name "columns" explicit_type "TreeModelColumnRecord"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 677545 "erase"
	public explicit_return_type "iterator"
	nparams 1
	  param in name "iter" explicit_type "iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Removes the given row from the list store.
   * @param iter The iterator to the row to be removed.
   * @result An iterator to the next row, or end() if there is none.
   "
      end

      operation 677673 "insert"
	public explicit_return_type "iterator"
	nparams 1
	  param in name "iter" explicit_type "iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO: Make this documentation similar to documentation for Standard C++ insert methods.
* Creates a new row before the position.
   * If iter is end() then a new row will be appended to the list.
   * The row will be empty - to fill in values, you need to dereference the returned iterator and use Row::operator[] or Row::set_value().
   * See also prepend() and append().
   *
   * @param iter An iterator to the row before which the new row will be inserted.
   * @result An iterator to the new row.
   "
      end

      operation 677801 "insert_after"
	public explicit_return_type "iterator"
	nparams 1
	  param in name "iter" explicit_type "iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Creates a new row after the position.
   * If iter is end() then a new row will be prepended to the list.
   * The row will be empty - to fill in values, you need to dereference the returned iterator and use Row::operator[] or Row::set_value().
   * See also prepend() and append().
   *
   * @param iter An iterator to the row after which the new row will be inserted.
   * @result An iterator to the new row.
   "
      end

      operation 677929 "prepend"
	public explicit_return_type "iterator"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Creates a new row at the start of the top-level.
   * The row will be empty - to fill in values, you need to dereference the returned iterator and use Row::operator[] or Row::set_value().
   * See also insert() and append().
   *
   * @result An iterator to the new row.
   "
      end

      operation 678057 "prepend"
	public explicit_return_type "iterator"
	nparams 1
	  param in name "node" explicit_type "TreeNodeChildren"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Creates a new row at the start of the row's children.
   * The row will be empty - to fill in values, you need to dereference the returned iterator and use Row::operator[] or Row::set_value().
   * See also insert() and append().
   *
   * @param node The list of the parent row's children, as returned by Gtk::TreeModel::iterator::children().
   * @result An iterator to the new row.
   "
      end

      operation 678185 "append"
	public explicit_return_type "iterator"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Creates a new row at the end of the top-level.
   * The row will be empty - to fill in values, you need to dereference the returned iterator and use Row::operator[] or Row::set_value().
   * See also insert() and prepend().
   *
   * @result An iterator to the new row.
   "
      end

      operation 678313 "append"
	public explicit_return_type "iterator"
	nparams 1
	  param in name "node" explicit_type "TreeNodeChildren"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Creates a new row at the end of the row's children.
   * The row will be empty - to fill in values, you need to dereference the returned iterator and use Row::operator[] or Row::set_value().
   * See also insert() and prepend().
   *
   * @param node The list of the parent row's children, as returned by Gtk::TreeModel::iterator::children().
   * @result An iterator to the new row.
   "
      end

      operation 678441 "iter_swap"
	public explicit_return_type "void"
	nparams 2
	  param in name "a" explicit_type "iterator"
	  param in name "b" explicit_type "iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Swaps @a a  and @a b  in the same level of @a tree_store . Note that this function
   * only works with unsorted stores.
   * 
   * Since: 2.2
   * @param a A Gtk::TreeIter.
   * @param b Another Gtk::TreeIter.
   "
      end

      operation 678569 "move"
	public explicit_return_type "void"
	nparams 2
	  param in name "source" explicit_type "iterator"
	  param in name "destination" explicit_type "iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves @a source to the position at @a destination.
   * @a source and @a destination should be at the same level.
   * Note that this function only works with unsorted stores.
   * @param source The row that should be moved.
   * @param destination The position to move to.
   "
      end

      operation 678697 "reorder"
	public explicit_return_type "void"
	nparams 2
	  param in name "node" explicit_type "TreeNodeChildren"
	  param in name "new_order" explicit_type "Glib::ArrayHandle<int>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Reorders the children of @a node to follow the order indicated by @a new_order.
   * Note that this function only works with unsorted stores.
   "
      end

      operation 678825 "clear"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Removes all rows from @a tree_store 
   "
      end

      operation 678953 "is_ancestor"
	const public explicit_return_type "bool"
	nparams 2
	  param in name "iter" explicit_type "iterator"
	  param in name "descendant" explicit_type "iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns <tt>true</tt> if @a iter  is an ancestor of @a descendant .  That is, @a iter  is the
   * parent (or grandparent or great-grandparent) of @a descendant .
   * @param iter A valid Gtk::TreeIter.
   * @param descendant A valid Gtk::TreeIter.
   * @return <tt>true</tt>, if @a iter  is an ancestor of @a descendant .
   "
      end

      operation 679081 "iter_depth"
	const public explicit_return_type "int"
	nparams 1
	  param in name "iter" explicit_type "iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the depth of @a iter .  This will be 0 for anything on the root level, 1
   * for anything down a level, etc.
   * @param iter A valid Gtk::TreeIter.
   * @return The depth of @a iter .
   "
      end

      operation 679209 "iter_is_valid"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "iter" explicit_type "iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* WARNING: This function is slow. Only use it for debugging and/or testing
   * purposes.
   * 
   * Checks if the given iter is a valid iter for this Gtk::TreeStore.
   * @param iter A Gtk::TreeIter.
   * @return <tt>true</tt> if the iter is valid, <tt>false</tt> if the iter is invalid.
   * 
   * Since: 2.2.
   "
      end

      operation 679337 "set_value_impl"
	cpp_virtual protected explicit_return_type "void"
	nparams 3
	  param in name "row" explicit_type "iterator"
	  param in name "column" explicit_type "int"
	  param in name "value" explicit_type "Glib::ValueBase"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 189993 "TreeView"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/treeview.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* @defgroup TreeView TreeView Classes
 * These classes are used with the Gtk::TreeView widget.
 
* The TreeView widget displays the model (Gtk::TreeModel) data and allows the user to interact with it.
 * The View can show all of the model's columns, or just some, and it can show them in various ways.
 * You must provide the TreeModel in the constructor, or with set_model().
 *
 * Add View columns with append_column(), append_column_editable(), insert_column(), or insert_column_editable().
 *
 * You can manipulate the selection by obtaining the @link Gtk::TreeSelection Gtk::TreeView::Selection@endlink from get_selection().
 *
 * @ingroup Widgets
 * @ingroup Containers
 * @ingroup TreeView
 "
      classrelation 229289 // <generalisation>
	relation 229289 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 229289 // <generalisation>
	  b parent class_ref 280745 // Container
      end

      class 273065 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 189993 // TreeView
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 229417 // <realization>
	  relation 229417 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 229417 // <realization>
	    b parent class_ref 189993 // TreeView
	end
      end

      class 273321 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "TreeView_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 273449 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkTreeView"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 273577 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkTreeViewClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 679593 "~TreeView"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 229801 // treeview_class_ (<directional composition>)
	relation 229801 *-->
	  a role_name "treeview_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 229801 // treeview_class_ (<directional composition>)
	  b parent class_ref 273321 // CppClassType
      end

      operation 679721 "TreeView"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 189993 // TreeView
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 679849 "operator ="
	private return_type class_ref 189993 // TreeView
	nparams 1
	  param in name "" type class_ref 189993 // TreeView
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 679977 "TreeView"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 680105 "TreeView"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkTreeView"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 680233 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 680361 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 680489 "gobj"
	cpp_inline public explicit_return_type "GtkTreeView"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTreeView*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 680617 "gobj"
	const cpp_inline public explicit_return_type "GtkTreeView"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTreeView*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 680745 "on_set_scroll_adjustments"
	cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param inout name "hadjustment" type class_ref 132521 // Adjustment
	  param inout name "vadjustment" type class_ref 132521 // Adjustment
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 680873 "on_row_activated"
	cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param in name "path" type class_ref 261545 // Path
	  param inout name "column" type class_ref 273705 // TreeViewColumn
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 681001 "on_test_expand_row"
	cpp_virtual protected explicit_return_type "bool"
	nparams 2
	  param in name "iter" type class_ref 301865 // iterator
	  param in name "path" type class_ref 261545 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 681129 "on_test_collapse_row"
	cpp_virtual protected explicit_return_type "bool"
	nparams 2
	  param in name "iter" type class_ref 301865 // iterator
	  param in name "path" type class_ref 261545 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 681257 "on_row_expanded"
	cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param in name "iter" type class_ref 301865 // iterator
	  param in name "path" type class_ref 261545 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 681385 "on_row_collapsed"
	cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param in name "iter" type class_ref 301865 // iterator
	  param in name "path" type class_ref 261545 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 681513 "on_cursor_changed"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 681641 "on_columns_changed"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      class 273833 "Column"
	visibility package stereotype "typedef" base_type class_ref 273705 // TreeViewColumn
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 229929 // <realization>
	  relation 229929 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 229929 // <realization>
	    b parent class_ref 273705 // TreeViewColumn
	end
      end

      class 273961 "Selection"
	visibility package stereotype "typedef" base_type class_ref 269481 // TreeSelection
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 230057 // <realization>
	  relation 230057 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 230057 // <realization>
	    b parent class_ref 269481 // TreeSelection
	end
      end

      operation 681769 "TreeView"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "*
     Default constructor
   "
      end

      operation 681897 "TreeView"
	public explicit_return_type ""
	nparams 1
	  param in name "model" explicit_type "Glib::RefPtr<TreeModel>"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment "*
     Constructor that binds to a TreeModel
   "
      end

      operation 682025 "get_model"
	public explicit_return_type "Glib::RefPtr<TreeModel>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the model the the Gtk::TreeView is based on.  Returns <tt>0</tt> if the
   * model is unset.
   * @return A Gtk::TreeModel, or <tt>0</tt> if none is currently being used.
   "
      end

      operation 682153 "get_model"
	const public explicit_return_type "Glib::RefPtr<const TreeModel>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the model the the Gtk::TreeView is based on.  Returns <tt>0</tt> if the
   * model is unset.
   * @return A Gtk::TreeModel, or <tt>0</tt> if none is currently being used.
   "
      end

      operation 682281 "set_model"
	public explicit_return_type "void"
	nparams 1
	  param in name "model" explicit_type "Glib::RefPtr<TreeModel>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the model for a Gtk::TreeView.  If the @a tree_view  already has a model
   * set, it will remove it before setting the new model.  If @a model  is <tt>0</tt>, then
   * it will unset the old model.
   * @param model The model.
   "
      end

      operation 682409 "get_selection"
	public explicit_return_type "Glib::RefPtr<TreeSelection>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the Gtk::TreeSelection associated with @a tree_view .
   * @return A Gtk::TreeSelection object.
   "
      end

      operation 682537 "get_selection"
	const public explicit_return_type "Glib::RefPtr<const TreeSelection>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the Gtk::TreeSelection associated with @a tree_view .
   * @return A Gtk::TreeSelection object.
   "
      end

      operation 682665 "get_hadjustment"
	public return_type class_ref 132521 // Adjustment
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the Gtk::Adjustment currently being used for the horizontal aspect.
   * @return A Gtk::Adjustment object, or <tt>0</tt> if none is currently being
   * used.
   "
      end

      operation 682793 "get_hadjustment"
	const public return_type class_ref 132521 // Adjustment
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the Gtk::Adjustment currently being used for the horizontal aspect.
   * @return A Gtk::Adjustment object, or <tt>0</tt> if none is currently being
   * used.
   "
      end

      operation 682921 "set_hadjustment"
	public explicit_return_type "void"
	nparams 1
	  param inout name "adjustment" type class_ref 132521 // Adjustment
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the Gtk::Adjustment for the current horizontal aspect. See also unset_hadjustment().
   * @param adjustment The Gtk::Adjustment to set.
   "
      end

      operation 683049 "unset_hadjustment"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* This method removes the hadjustment.
   * @see set_hadjustment().
   "
      end

      operation 683177 "get_vadjustment"
	public return_type class_ref 132521 // Adjustment
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the Gtk::Adjustment currently being used for the vertical aspect.
   * @return A Gtk::Adjustment object, or <tt>0</tt> if none is currently being
   * used.
   "
      end

      operation 683305 "get_vadjustment"
	const public return_type class_ref 132521 // Adjustment
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the Gtk::Adjustment currently being used for the vertical aspect.
   * @return A Gtk::Adjustment object, or <tt>0</tt> if none is currently being
   * used.
   "
      end

      operation 683433 "set_vadjustment"
	public explicit_return_type "void"
	nparams 1
	  param inout name "adjustment" type class_ref 132521 // Adjustment
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the Gtk::Adjustment for the current vertical aspect. See also unset_vadjustment().
   * @param adjustment The Gtk::Adjustment to set.
   "
      end

      operation 683561 "unset_vadjustment"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* This method removes the vadjustment.
   * @see set_vadjustment().
   "
      end

      operation 683689 "get_headers_visible"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns <tt>true</tt> if the headers on the @a tree_view  are visible.
   * @return Whether the headers are visible or not.
   "
      end

      operation 683817 "set_headers_visible"
	public explicit_return_type "void"
	nparams 1
	  param in name "headers_visible" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the the visibility state of the headers.
   * @param headers_visible <tt>true</tt> if the headers are visible.
   "
      end

      operation 683945 "columns_autosize"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Resizes all columns to their optimal width. Only works after the
   * treeview has been realized.
   "
      end

      operation 684073 "set_headers_clickable"
	public explicit_return_type "void"
	nparams 1
	  param in name "setting" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Allow the column title buttons to be clicked.
   * @param setting <tt>true</tt> if the columns are clickable.
   "
      end

      operation 684201 "set_rules_hint"
	public explicit_return_type "void"
	nparams 1
	  param in name "setting" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* This function tells GTK+ that the user interface for your
   * application requires users to read across tree rows and associate
   * cells with one another. By default, GTK+ will then render the tree
   * with alternating row colors. Do <em>not</em> use it
   * just because you prefer the appearance of the ruled tree; that's a
   * question for the theme. Some themes will draw tree rows in
   * alternating colors even when rules are turned off, and users who
   * prefer that appearance all the time can choose those themes. You
   * should call this function only as a <em>semantic</em>
   * hint to the theme engine that your tree makes alternating colors
   * useful from a functional standpoint (since it has lots of columns,
   * generally).
   * @param setting <tt>true</tt> if the tree requires reading across rows.
   "
      end

      operation 684329 "get_rules_hint"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the setting set by set_rules_hint().
   * @return <tt>true</tt> if rules are useful for the user of this tree.
   "
      end

      operation 684457 "append_column"
	public explicit_return_type "int"
	nparams 1
	  param inout name "column" type class_ref 273705 // TreeViewColumn
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Appends @a column  to the list of columns. If @a tree_view  has \"fixed_height\"
   * mode enbabled, then @a column  must have its \"sizing\" property set to be
   * GTK_TREE_VIEW_COLUMN_FIXED.
   * @param column The Gtk::TreeViewColumn to add.
   * @return The number of columns in @a tree_view  after appending.
   "
      end

      operation 684585 "append_column"
	stereotype "template"
	cpp_inline public explicit_return_type "int"
	nparams 2
	  param in name "title" explicit_type "Glib::ustring"
	  param in name "model_column" explicit_type "TreeModelColumn<ColumnType>"
	cpp_decl "    ${comment}template<class ColumnType>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}template<class ColumnType>
${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Appends a View column with the appropriate CellRenderer for the Model column.
   * The CellRenderer can only be created automatically for some basic
   * column types, such as Glib::ustring, int, bool, Gdk::Pixbuf. Also,
   * the default CellRenderer might not be setup exactly as needed.
   * You might prefer to create the TreeViewColumn and or CellRenderer
   * manually. You might provide a callback that converts the type into a
   * string representation with TreeViewColumn::set_cell_data_func().
   * Otherwise, if the type is not supported, at run-time no text will
   * appear in the column while the following warning will be generated repeatedly:
   * GLib-GObject-WARNING **: unable to set property `text' of type
   * `gchararray' from value of type `glibmm__CustomBoxed_t'
   * TODO: Give a more specific warning and/or do more compile-time checks.
   *
   * @param title The text to be used in the title header of this column.
   * @param model_column The column in the TreeModel that will be rendered by this View column.
   * @result The number of columns in the View after appending.
   "
      end

      operation 684713 "append_column_editable"
	stereotype "template"
	cpp_inline public explicit_return_type "int"
	nparams 2
	  param in name "title" explicit_type "Glib::ustring"
	  param in name "model_column" explicit_type "TreeModelColumn<ColumnType>"
	cpp_decl "    ${comment}template<class ColumnType>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}template<class ColumnType>
${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO: danielk suggested use of Glib::Value to simplify/improve this.
* Appends a View column with the appropriate CellRenderer for the Model
   * column.  The compiler will attempt to instantiate appropriate template
   * code to automatically store user changes in the model.  To intercept the
   * user's change and implement non-default logic, or if the compiler can't
   * instantiate appropriate code for your model type, you should use
   * append_column() and connect a signal handler to the CellRenderer.
   *
   * @param title The text to be used in the title header of this column.
   * @param model_column The column in the TreeModel that will be rendered by this View column.
   * @result The number of columns in the View after appending.
   "
      end

      operation 684841 "append_column"
	public explicit_return_type "int"
	nparams 2
	  param in name "title" explicit_type "Glib::ustring"
	  param inout name "cell" type class_ref 290473 // CellRenderer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/ Creates a View column containing the CellRenderer, and appends it."
      end

      operation 684969 "remove_column"
	public explicit_return_type "int"
	nparams 1
	  param inout name "column" type class_ref 273705 // TreeViewColumn
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Removes @a column  from @a tree_view .
   * @param column The Gtk::TreeViewColumn to remove.
   * @return The number of columns in @a tree_view  after removing.
   "
      end

      operation 685097 "remove_all_columns"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/ Removes all View columns."
      end

      operation 685225 "insert_column"
	public explicit_return_type "int"
	nparams 2
	  param inout name "column" type class_ref 273705 // TreeViewColumn
	  param in name "position" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* This inserts the @a column  into the @a tree_view  at @a position .  If @a position  is
   * -1, then the column is inserted at the end. If @a tree_view  has
   * \"fixed_height\" mode enabled, then @a column  must have its \"sizing\" property
   * set to be GTK_TREE_VIEW_COLUMN_FIXED.
   * @param column The Gtk::TreeViewColumn to be inserted.
   * @param position The position to insert @a column  in.
   * @return The number of columns in @a tree_view  after insertion.
   "
      end

      operation 685353 "insert_column"
	public explicit_return_type "int"
	nparams 3
	  param in name "title" explicit_type "Glib::ustring"
	  param inout name "cell" type class_ref 290473 // CellRenderer
	  param in name "position" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Creates a View column containing the CellRenderer, and inserts it.
   *
   * @param title The text to be used in the title header of this column.
   * @param cell The CellRenderer.
   * @param position The position at which the CellRenderer should be inserted.
   * @result The number of columns in the View after inserting.
   "
      end

      operation 685481 "insert_column"
	stereotype "template"
	cpp_inline public explicit_return_type "int"
	nparams 3
	  param in name "title" explicit_type "Glib::ustring"
	  param in name "model_column" explicit_type "TreeModelColumn<ColumnType>"
	  param in name "position" explicit_type "int"
	cpp_decl "    ${comment}template<class ColumnType>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}template<class ColumnType>
${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Inserts a View column with the appropriate CellRenderer for the Model column.
   *
   * @param title The text to be used in the title header of this column.
   * @param model_column The column in the TreeModel that will be rendered by this View column.
   * @param position The position at which the CellRenderer should be inserted.
   * @result The number of columns in the View after inserting.
   "
      end

      operation 685609 "insert_column_editable"
	stereotype "template"
	cpp_inline public explicit_return_type "int"
	nparams 3
	  param in name "title" explicit_type "Glib::ustring"
	  param in name "model_column" explicit_type "TreeModelColumn<ColumnType>"
	  param in name "position" explicit_type "int"
	cpp_decl "    ${comment}template<class ColumnType>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}template<class ColumnType>
${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Inserts a View column with the appropriate CellRenderer for the Model
   * column.  The compiler will attempt to instantiate appropriate template
   * code to automatically store user changes in the model.  To intercept the
   * user's change and implement non-default logic, or if the compiler can't
   * instantiate appropriate code for your model type, you should use
   * append_column() and connect a signal handler to the CellRenderer.
   *
   * @param title The text to be used in the title header of this column.
   * @param model_column The column in the TreeModel that will be rendered by this View column.
   * @param position The position at which the CellRenderer should be inserted.
   * @result The number of columns in the View after inserting.
   "
      end

      class 274217 "SlotCellData"
	visibility package stereotype "typedef" base_type class_ref 274089 // SlotCellData
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 230185 // <realization>
	  relation 230185 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 230185 // <realization>
	    b parent class_ref 274089 // SlotCellData
	end
      end

      operation 685737 "insert_column_with_data_func"
	public explicit_return_type "int"
	nparams 4
	  param in name "position" explicit_type "int"
	  param in name "title" explicit_type "Glib::ustring"
	  param inout name "cell" type class_ref 290473 // CellRenderer
	  param in name "slot" type class_ref 274217 // SlotCellData
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} & ${p2}, const ${t3} & ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} & ${p2}, const ${t3} & ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "*
     Inserts a new column into the TreeView with the given cell
     renderer and a SlotCellData to set cell renderer attributes
     (normally using data from the model). 

     @param position Position to insert, -1 for append
     @param title column title
     @param cell cell renderer for column
     @param slot function to set attributes of cell renderer
     @return number of columns in the TreeView after the insert
   "
      end

      operation 685865 "get_column"
	public return_type class_ref 273705 // TreeViewColumn
	nparams 1
	  param in name "n" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the Gtk::TreeViewColumn at the given position in the #tree_view.
   * @param n The position of the column, counting from 0.
   * @return The Gtk::TreeViewColumn, or <tt>0</tt> if the position is outside the
   * range of columns.
   "
      end

      operation 685993 "get_column"
	const public return_type class_ref 273705 // TreeViewColumn
	nparams 1
	  param in name "n" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the Gtk::TreeViewColumn at the given position in the #tree_view.
   * @param n The position of the column, counting from 0.
   * @return The Gtk::TreeViewColumn, or <tt>0</tt> if the position is outside the
   * range of columns.
   "
      end

      operation 686121 "get_column_cell_renderer"
	public return_type class_ref 290473 // CellRenderer
	nparams 1
	  param in name "n" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "The column index is of the view, not the model, so we do not need TreeViewColumn* get_column(TreeViewColumn& base_column).
* Gets the CellRenderer for that column.
    * You should dynamic_cast<> to the expected derived CellRenderer type.
    * This assumes that the TreeViewColumn contains only one CellRenderer.
    *
    * @param n The position of the view column.
    * @result The CellRenderer.
    "
      end

      operation 686249 "get_column_cell_renderer"
	const public return_type class_ref 290473 // CellRenderer
	nparams 1
	  param in name "n" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO: Add TreeViewColumn* get_column_cell_renderer(TreeViewColumn& base_column); and a const one.
* Gets the CellRenderer for that column.
    * You should dynamic_cast<> to the expected derived CellRenderer type.
    * This assumes that the TreeViewColumn contains only one CellRenderer.
    *
    * @param n The position of the view column.
    * @result The CellRenderer.
    "
      end

      operation 686377 "get_columns"
	public explicit_return_type "Glib::ListHandle<TreeViewColumn*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns a list of all the Gtk::TreeViewColumn s currently in @a tree_view .
   * @return A list of Gtk::TreeViewColumn s.
   "
      end

      operation 686505 "get_columns"
	const public explicit_return_type "Glib::ListHandle<const TreeViewColumn*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns a list of all the Gtk::TreeViewColumn s currently in @a tree_view .
   * @return A list of Gtk::TreeViewColumn s.
   "
      end

      operation 686633 "move_column_after"
	public explicit_return_type "void"
	nparams 2
	  param inout name "column" type class_ref 273705 // TreeViewColumn
	  param inout name "base_column" type class_ref 273705 // TreeViewColumn
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves @a column  to be after to @a base_column .  See also move_column_to_start().
   * @param column The Gtk::TreeViewColumn to be moved.
   * @param base_column The Gtk::TreeViewColumn to be moved relative to.
   "
      end

      operation 686761 "move_column_to_start"
	public explicit_return_type "void"
	nparams 1
	  param inout name "column" type class_ref 273705 // TreeViewColumn
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* This method moves column to the first position in the view.
   *
   * @param column The view column that will be moved
   "
      end

      operation 686889 "set_expander_column"
	public explicit_return_type "void"
	nparams 1
	  param inout name "column" type class_ref 273705 // TreeViewColumn
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the column to draw the expander arrow at. It must be in the TreeView.  See also reset_expander_column().
   * @param column The column to draw the expander arrow at.
   "
      end

      operation 687017 "reset_expander_column"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* This method resets the expander arrow to the default - the first visible column.
   * @see set_expander_column().  
   "
      end

      operation 687145 "get_expander_column"
	public return_type class_ref 273705 // TreeViewColumn
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the column that is the current expander column.  This
   * column has the expander arrow drawn next to it.
   * @return The expander column.
   "
      end

      operation 687273 "get_expander_column"
	const public return_type class_ref 273705 // TreeViewColumn
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the column that is the current expander column.  This
   * column has the expander arrow drawn next to it.
   * @return The expander column.
   "
      end

      class 274345 "SlotColumnDrop"
	visibility package stereotype "typedef" explicit_base_type "sigc::slot<bool, TreeView*, TreeViewColumn*,  TreeViewColumn*, TreeViewColumn*>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 687401 "set_column_drag_function"
	public explicit_return_type "void"
	nparams 1
	  param in name "slot" type class_ref 274345 // SlotColumnDrop
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets a callback slot for determining where a column may be dropped when dragged.
   * This function is called on every column pair in turn at the beginning of a column drag to determine where a
   * drop can take place. The arguments passed to the function are: the tree_view, the view Column being dragged,
   * and the two view Columns determining the drop spot. If either of the view Column arguments for the drop spot
   * are 0, then they indicate an edge.
   *
   * See unset_column_drag_function().
   *
   * @param slot A callback function to determine which columns are reorderable.
   "
      end

      operation 687529 "unset_column_drag_function"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* See set_column_drag_function(). After this method has been called, the TreeView reverts to the default behavior of
  * allowing all columns to be dropped everywhere.
  "
      end

      operation 687657 "scroll_to_point"
	public explicit_return_type "void"
	nparams 2
	  param in name "tree_x" explicit_type "int"
	  param in name "tree_y" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Scrolls the tree view such that the top-left corner of the visible
   * area is @a tree_x , @a tree_y , where @a tree_x  and @a tree_y  are specified
   * in tree window coordinates.  The @a tree_view  must be realized before
   * this function is called.  If it isn't, you probably want to be
   * using scroll_to_cell().
   * 
   * If either @a tree_x  or @a tree_y  are -1, then that direction isn't scrolled.
   * @param tree_x X coordinate of new top-left pixel of visible area, or -1.
   * @param tree_y Y coordinate of new top-left pixel of visible area, or -1.
   "
      end

      operation 687785 "scroll_to_cell"
	public explicit_return_type "void"
	nparams 4
	  param in name "path" type class_ref 261545 // Path
	  param inout name "column" type class_ref 273705 // TreeViewColumn
	  param in name "row_align" explicit_type "float"
	  param in name "col_align" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves the alignments of tree view to the position specified by @a column and @a path.
   * @a row_align determines where the row is placed, and @a col_align determines where
   * column is placed. Both are expected to be between 0.0 and 1.0. 0.0 means left/top
   * alignment, 1.0 means right/bottom alignment, 0.5 means center.
   *
   * This function only works if the model is set, and @a path is a valid row on the model.
   * If the model changes before the tree view is realized, the centered path will be
   * modified to reflect this change.
   *
   * @param path The path of the row to move to.
   * @param column The Gtk::TreeViewColumn to move horizontally to.
   * @param row_align The vertical alignment of the row specified by @a path.
   * @param col_align The horizontal alignment of the column specified by @a column.
   "
      end

      operation 687913 "scroll_to_cell"
	public explicit_return_type "void"
	nparams 2
	  param in name "path" type class_ref 261545 // Path
	  param inout name "column" type class_ref 273705 // TreeViewColumn
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves the alignments of tree view to the position specified by @a column and @a path.
   * The tree does the minimum amount of work to scroll the cell onto the screen. This means
   * that the cell will be scrolled to the edge closest to it's current position. If the cell
   * is currently visible on the screen, nothing is done.
   *
   * This function only works if the model is set, and @a path is a valid row on the model.
   * If the model changes before the tree_view is realized, the centered path will be modified
   * to reflect this change.
   *
   * @param path The path of the row to move to.
   * @param column The Gtk::TreeViewColumn to move horizontally to.
   "
      end

      operation 688041 "scroll_to_row"
	public explicit_return_type "void"
	nparams 2
	  param in name "path" type class_ref 261545 // Path
	  param in name "row_align" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves the alignments of tree view to the position specified by @a path.
   * @a row_align determines where the row is placed, and is expected to be between 0.0
   * and 1.0.  0.0 means top alignment, 1.0 means bottom alignment, 0.5 means center.
   *
   * This function only works if the model is set, and @a path is a valid row on the model.
   * If the model changes before the tree view is realized, the centered path will be
   * modified to reflect this change.
   *
   * @param path The path of the row to move to.
   * @param row_align The vertical alignment of the row specified by @a path.
   "
      end

      operation 688169 "scroll_to_row"
	public explicit_return_type "void"
	nparams 1
	  param in name "path" type class_ref 261545 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves the alignments of tree view to the position specified by @a path.
   * The tree does the minimum amount of work to scroll the row onto the screen. This means
   * that the row will be scrolled to the edge closest to it's current position. If the row
   * is currently visible on the screen, nothing is done.
   *
   * This function only works if the model is set, and @a path is a valid row on the model.
   * If the model changes before the tree view is realized, the centered path will be
   * modified to reflect this change.
   *
   * @param path The path of the row to move to.
   "
      end

      operation 688297 "scroll_to_column"
	public explicit_return_type "void"
	nparams 2
	  param inout name "column" type class_ref 273705 // TreeViewColumn
	  param in name "col_align" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves the alignments of tree view to the position specified by @a column.
   * @a col_align determines where the column is placed, and is expected to be between 0.0
   * and 1.0.  0.0 means left alignment, 1.0 means right alignment, 0.5 means center.
   *
   * This function only works if the model is set.  If the model changes before the tree
   * view is realized, the centered path will be modified to reflect this change.
   *
   * @param column The Gtk::TreeViewColumn to move horizontally to.
   * @param col_align The horizontal alignment of the column specified by @a column.
   "
      end

      operation 688425 "scroll_to_column"
	public explicit_return_type "void"
	nparams 1
	  param inout name "column" type class_ref 273705 // TreeViewColumn
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves the alignments of tree view to the position specified by @a column.
   * The tree does the minimum amount of work to scroll the column onto the screen. This means
   * that the column will be scrolled to the edge closest to it's current position. If the column
   * is currently visible on the screen, nothing is done.
   *
   * This function only works if the model is set.  If the model changes before the
   * tree view is realized, the centered path will be modified to reflect this change.
   *
   * @param column The Gtk::TreeViewColumn to move horizontally to.
   "
      end

      operation 688553 "row_activated"
	public explicit_return_type "void"
	nparams 2
	  param in name "path" type class_ref 261545 // Path
	  param inout name "column" type class_ref 273705 // TreeViewColumn
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Activates the cell determined by @a path  and @a column .
   * @param path The Gtk::TreePath to be activated.
   * @param column The Gtk::TreeViewColumn to be activated.
   "
      end

      operation 688681 "expand_all"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Recursively expands all nodes in the @a tree_view .
   "
      end

      operation 688809 "collapse_all"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Recursively collapses all visible, expanded nodes in @a tree_view .
   "
      end

      operation 688937 "expand_to_path"
	public explicit_return_type "void"
	nparams 1
	  param in name "path" type class_ref 261545 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Expands the row at @a path . This will also expand all parent rows of
   *  @a path  as necessary.
   * 
   * Since: 2.2
   * @param path Path to a row.
   "
      end

      operation 689065 "expand_row"
	public explicit_return_type "bool"
	nparams 2
	  param in name "path" type class_ref 261545 // Path
	  param in name "open_all" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Opens the row so its children are visible.
   * @param path Path to a row.
   * @param open_all Whether to recursively expand, or just expand immediate children.
   * @return <tt>true</tt> if the row existed and had children.
   "
      end

      operation 689193 "collapse_row"
	public explicit_return_type "bool"
	nparams 1
	  param in name "path" type class_ref 261545 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Collapses a row (hides its child rows, if they exist).
   * @param path Path to a row in the @a tree_view .
   * @return <tt>true</tt> if the row was collapsed.
   "
      end

      class 274473 "SlotMapping"
	visibility package stereotype "typedef" explicit_base_type "sigc::slot<void, TreeView*, const TreeModel::Path&>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 689321 "map_expanded_rows"
	public explicit_return_type "void"
	nparams 1
	  param in name "slot" type class_ref 274473 // SlotMapping
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Calls the callback slot on all expanded rows.
   * @param slot A callback function to be called.
   "
      end

      operation 689449 "row_expanded"
	public explicit_return_type "bool"
	nparams 1
	  param in name "path" type class_ref 261545 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns <tt>true</tt> if the node pointed to by @a path  is expanded in @a tree_view .
   * @param path A Gtk::TreePath to test expansion state.
   * @return <tt>true</tt> if #path is expanded.
   "
      end

      operation 689577 "set_reorderable"
	public explicit_return_type "void"
	nparams 1
	  param in name "reorderable" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* This function is a convenience function to allow you to reorder models that
   * support the Gtk::DragSourceIface and the Gtk::DragDestIface.  Both
   * Gtk::TreeStore and Gtk::ListStore support these.  If @a reorderable  is <tt>true</tt>, then
   * the user can reorder the model by dragging and dropping rows.  The
   * developer can listen to these changes by connecting to the model's
   * row_inserted and row_deleted signals.
   * 
   * This function does not give you any degree of control over the order -- any
   * reordering is allowed.  If more control is needed, you should probably
   * handle drag and drop manually.
   * @param reorderable <tt>true</tt>, if the tree can be reordered.
   "
      end

      operation 689705 "get_reorderable"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves whether the user can reorder the tree via drag-and-drop. See
   * set_reorderable().
   * @return <tt>true</tt> if the tree can be reordered.
   "
      end

      operation 689833 "set_cursor"
	public explicit_return_type "void"
	nparams 3
	  param in name "path" type class_ref 261545 // Path
	  param inout name "focus_column" type class_ref 273705 // TreeViewColumn
	  param in name "start_editing" explicit_type "bool"
	    defaultvalue " false"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO: Add set_cursor(path, ModelColumnBase&, start_editing)?
* Sets the current keyboard focus to be at @a path , and selects it.  This is
   * useful when you want to focus the user's attention on a particular row. Focus is given to the column specified.
   * Additionally, if @a start_editing  is
   * <tt>true</tt>, then editing should be started in the specified cell.
   * This function is often followed by Gtk::Widget::grab_focus( @a tree_view )
   * in order to give keyboard focus to the widget.  Please note that editing
   * can only happen when the widget is realized.
   * @param path A Gtk::TreePath.
   * @param focus_column A Gtk::TreeViewColumn.
   * @param start_editing <tt>true</tt> if the specified cell should start being edited.
   "
      end

      operation 689961 "set_cursor"
	public explicit_return_type "void"
	nparams 4
	  param in name "path" type class_ref 261545 // Path
	  param inout name "focus_column" type class_ref 273705 // TreeViewColumn
	  param inout name "focus_cell" type class_ref 290473 // CellRenderer
	  param in name "start_editing" explicit_type "bool"
	    defaultvalue " false"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the current keyboard focus to be at @a path , and selects it.  This is
   * useful when you want to focus the user's attention on a particular row.  If
   *  @a focus_column  is not <tt>0</tt>, then focus is given to the column specified by
   * it. If @a focus_column  and @a focus_cell  are not <tt>0</tt>, and @a focus_column 
   * contains 2 or more editable or activatable cells, then focus is given to
   * the cell specified by @a focus_cell . Additionally, if @a focus_column  is
   * specified, and @a start_editing  is <tt>true</tt>, then editing should be started in
   * the specified cell.  This function is often followed by
   *  @a gtk_widget_grab_focus  ( @a tree_view ) in order to give keyboard focus to the
   * widget.  Please note that editing can only happen when the widget is
   * realized.
   * 
   * Since: 2.2
   * @param path A Gtk::TreePath.
   * @param focus_column A Gtk::TreeViewColumn, or <tt>0</tt>.
   * @param focus_cell A Gtk::CellRenderer, or <tt>0</tt>.
   * @param start_editing <tt>true</tt> if the specified cell should start being edited.
   "
      end

      operation 690089 "set_cursor"
	public explicit_return_type "void"
	nparams 1
	  param in name "path" type class_ref 261545 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the current keyboard focus to be at path , and selects it.
   * This is useful when you want to focus the user's attention on a particular row.
   * This function is often followed by Gtk::widget::grab_focus(tree_view)
   * in order to give keyboard focus to the widget.
   *
   *  @param path A reference to cursor path.
   "
      end

      operation 690217 "get_cursor"
	public explicit_return_type "void"
	nparams 2
	  param inout name "path" type class_ref 261545 // Path
	  param inout name "focus_column" type class_ref 273705 // TreeViewColumn
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} * & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} * & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "*  Fills in path and focus_column with the current path and focus column.
   *
   *  @param path A reference to be filled with the current cursor path
   *  @param focus_column A reference to be filled with the current focus column
   "
      end

      operation 690345 "get_bin_window"
	public explicit_return_type "Glib::RefPtr<Gdk::Window>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " Layout information 
* Returns the window that @a tree_view  renders to.  This is used primarily to
   * compare to <tt>event->window</tt> to confirm that the event on
   *  @a tree_view  is on the right window.
   * @return A Gdk::Window, or <tt>0</tt> when @a tree_view  hasn't been realized yet.
   "
      end

      operation 690473 "get_bin_window"
	const public explicit_return_type "Glib::RefPtr<const Gdk::Window>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the window that @a tree_view  renders to.  This is used primarily to
   * compare to <tt>event->window</tt> to confirm that the event on
   *  @a tree_view  is on the right window.
   * @return A Gdk::Window, or <tt>0</tt> when @a tree_view  hasn't been realized yet.
   "
      end

      operation 690601 "get_path_at_pos"
	public explicit_return_type "bool"
	nparams 6
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param inout name "path" type class_ref 261545 // Path
	  param inout name "column" type class_ref 273705 // TreeViewColumn
	  param inout name "cell_x" explicit_type "int"
	  param inout name "cell_y" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} & ${p2}, ${t3} * & ${p3}, ${t4} & ${p4}, ${t5} & ${p5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} & ${p2}, ${t3} * & ${p3}, ${t4} & ${p4}, ${t5} & ${p5}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Finds the path at the point (x, y), relative to widget
   * coordinates. It is primarily for things like popup menus.
   *  
   * @param x The x position to be identified
   * @param y The y position to be identified
   * @param path A reference to a TreeModel::Path to be filled in
   * @param column A reference to a TreeViewColumn pointer to be filled in
   * @param cell_x A reference where the X coordinate relative to the cell
   *   can be placed
   * @param cell_y A reference where the Y coordinate relative to the cell
   *   can be placed
   * @return true if a row exists at that coordinate.
   "
      end

      operation 690729 "get_cell_area"
	public explicit_return_type "void"
	nparams 3
	  param in name "path" type class_ref 261545 // Path
	  param inout name "column" type class_ref 273705 // TreeViewColumn
	  param inout name "rect" explicit_type "Gdk::Rectangle"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Fills the bounding rectangle in tree window coordinates for the cell at the
   * row specified by @a path  and the column specified by @a column .  If @a path  points to a path not currently displayed, the @a y  and @a height  fields
   * of the rectangle will be filled with 0.  The sum of all cell rects does not cover the
   * entire tree; there are extra pixels in between rows, for example. The
   * returned rectangle is equivalent to the @a cell_area  passed to
   * Gtk::CellRenderer::render().  This function is only valid if #tree_view is
   * realized.
   * @param path A Gtk::TreePath for the row.
   * @param column A Gtk::TreeViewColumn for the column.
   * @param rect Rectangle to fill with cell rect.
   "
      end

      operation 690857 "get_background_area"
	public explicit_return_type "void"
	nparams 3
	  param in name "path" type class_ref 261545 // Path
	  param inout name "column" type class_ref 273705 // TreeViewColumn
	  param inout name "rect" explicit_type "Gdk::Rectangle"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "We ignore the fact that one of the arguments can be 0 - it does not seem useful.
* Fills the bounding rectangle in tree window coordinates for the cell at the
   * row specified by @a path  and the column specified by @a column .  The returned rectangle is equivalent to the
   *  @a background_area  passed to Gtk::CellRenderer::render().  These background
   * areas tile to cover the entire tree window (except for the area used for
   * header buttons). Contrast with the @a cell_area , returned by
   * get_cell_area(), which returns only the cell itself, excluding
   * surrounding borders and the tree expander area.
   * @param path A Gtk::TreePath for the row.
   * @param column A Gtk::TreeViewColumn for the column.
   * @param rect Rectangle to fill with cell background rect.
   "
      end

      operation 690985 "get_visible_rect"
	public explicit_return_type "void"
	nparams 1
	  param inout name "visible_rect" explicit_type "Gdk::Rectangle"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "We ignore the fact that one of the arguments can be 0 - it does not seem useful.
* Fills @a visible_rect  with the currently-visible region of the
   * buffer, in tree coordinates. Convert to widget coordinates with
   * tree_to_widget_coords(). Tree coordinates start at
   * 0,0 for row 0 of the tree, and cover the entire scrollable area of
   * the tree.
   * @param visible_rect Rectangle to fill.
   "
      end

      operation 691113 "widget_to_tree_coords"
	public explicit_return_type "void"
	nparams 4
	  param in name "wx" explicit_type "int"
	  param in name "wy" explicit_type "int"
	  param inout name "tx" explicit_type "int"
	  param inout name "ty" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} & ${p2}, ${t3} & ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} & ${p2}, ${t3} & ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Converts widget coordinates to coordinates for the
   * tree window (the full scrollable area of the tree).
   * @param wx Widget X coordinate.
   * @param wy Widget Y coordinate.
   * @param tx Return location for tree X coordinate.
   * @param ty Return location for tree Y coordinate.
   "
      end

      operation 691241 "tree_to_widget_coords"
	public explicit_return_type "void"
	nparams 4
	  param in name "tx" explicit_type "int"
	  param in name "ty" explicit_type "int"
	  param inout name "wx" explicit_type "int"
	  param inout name "wy" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} & ${p2}, ${t3} & ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} & ${p2}, ${t3} & ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Converts tree coordinates (coordinates in full scrollable area of the tree)
   * to widget coordinates.
   * @param tx Tree X coordinate.
   * @param ty Tree Y coordinate.
   * @param wx Return location for widget X coordinate.
   * @param wy Return location for widget Y coordinate.
   "
      end

      operation 691369 "enable_model_drag_source"
	public explicit_return_type "void"
	nparams 3
	  param in name "targets" explicit_type "ArrayHandle_TargetEntry"
	  param in name "start_button_mask" explicit_type "Gdk::ModifierType"
	    defaultvalue " Gdk::MODIFIER_MASK"
	  param in name "actions" explicit_type "Gdk::DragAction"
	    defaultvalue " Gdk::ACTION_COPY | Gdk::ACTION_MOVE"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " Drag-and-Drop support 
*
   * Turns the TreeView into a drag source for automatic DND.
   *
   * @param targets Standard container of targets that the drag will support.
   * @param start_button_mask Mask of allowed buttons to start drag.
   * @param actions The bitmask of possible actions for a drag from this widget.
   "
      end

      operation 691497 "enable_model_drag_source"
	public explicit_return_type "void"
	nparams 2
	  param in name "start_button_mask" explicit_type "Gdk::ModifierType"
	    defaultvalue " Gdk::MODIFIER_MASK"
	  param in name "actions" explicit_type "Gdk::DragAction"
	    defaultvalue " Gdk::ACTION_COPY | Gdk::ACTION_MOVE"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " Uses the default \"GTK_TREE_MODEL_ROW\" target, which the TreeView can handle automatically.
* Turns the TreeView into a drag source for automatic DND.
   *
   * @param start_button_mask Mask of allowed buttons to start drag.
   * @param actions The bitmask of possible actions for a drag from this widget.
   "
      end

      operation 691625 "enable_model_drag_dest"
	public explicit_return_type "void"
	nparams 2
	  param in name "targets" explicit_type "ArrayHandle_TargetEntry"
	  param in name "actions" explicit_type "Gdk::DragAction"
	    defaultvalue " Gdk::ACTION_COPY | Gdk::ACTION_MOVE"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Turns the TreeViewinto a drop destination for automatic DND.
   *
   * @param targets The table of targets that the drag will support.
   * @param actions The bitmask of possible actions for a drag from this widget.
   "
      end

      operation 691753 "enable_model_drag_dest"
	public explicit_return_type "void"
	nparams 1
	  param in name "actions" explicit_type "Gdk::DragAction"
	    defaultvalue " Gdk::ACTION_COPY | Gdk::ACTION_MOVE"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Turns the TreeView into a drop destination for automatic DND.  This uses the default
    *  \"GTK_TREE_MODEL_ROW\" target, which the TreeView can handle automatically.
    *
    * @param actions The bitmask of possible actions for a drag from this widget.
   "
      end

      operation 691881 "unset_rows_drag_source"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Undoes the effect of enable_model_drag_source()
   
* Undoes the effect of enable_model_drag_source().
   "
      end

      operation 692009 "unset_rows_drag_dest"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Undoes the effect of enable_model_drag_source()
   
* Undoes the effect of enable_model_drag_dest().
   "
      end

      operation 692137 "set_drag_dest_row"
	public explicit_return_type "void"
	nparams 2
	  param in name "path" type class_ref 261545 // Path
	  param in name "pos" type class_ref 272681 // TreeViewDropPosition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " These are useful to implement your own custom stuff. 
* Sets the row that is highlighted for feedback.
   *
   * @param path The path of the row to highlight
   * @param pos Specifies whether to drop before, after or into the row
   
* Sets the row that is highlighted for feedback.
   * @param path The path of the row to highlight, or <tt>0</tt>.
   * @param pos Specifies whether to drop before, after or into the row.
   "
      end

      operation 692265 "get_drag_dest_row"
	const public explicit_return_type "void"
	nparams 2
	  param inout name "path" type class_ref 261545 // Path
	  param inout name "pos" type class_ref 272681 // TreeViewDropPosition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets information about the row that is highlighted for feedback.
   *
   * @param path Return location for the path of the highlighted row
   * @param pos Return location for the drop position
   "
      end

      operation 692393 "get_dest_row_at_pos"
	const public explicit_return_type "bool"
	nparams 4
	  param in name "drag_x" explicit_type "int"
	  param in name "drag_y" explicit_type "int"
	  param inout name "path" type class_ref 261545 // Path
	  param inout name "pos" type class_ref 272681 // TreeViewDropPosition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} & ${p2}, ${t3} & ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} & ${p2}, ${t3} & ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Determines the destination row for a given position.
   *
   * @param drag_x The x position to determine the destination row for
   * @param drag_y The y position to determine the destination row for
   * @param path Return location for the path of the highlighted row
   * @param pos Return location for the drop position
   "
      end

      operation 692521 "create_row_drag_icon"
	public explicit_return_type "Glib::RefPtr<Gdk::Pixmap>"
	nparams 1
	  param in name "path" type class_ref 261545 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Creates a Gdk::Pixmap representation of the row at @a path .  This image is used
   * for a drag icon.
   * @param path A Gtk::TreePath in @a tree_view .
   * @return A newly-allocated pixmap of the drag icon.
   "
      end

      operation 692649 "set_enable_search"
	public explicit_return_type "void"
	nparams 1
	  param in name "enable_search" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " Interactive search 
* If @a enable_search  is set, then the user can type in text to search through
   * the tree interactively.
   * @param enable_search <tt>true</tt>, if the user can search interactively.
   "
      end

      operation 692777 "get_enable_search"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether or not the tree allows interactive searching.
   * @return Whether or not to let the user search interactively.
   "
      end

      operation 692905 "get_search_column"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the column searched on by the interactive search code.
   * @return The column the interactive search code searches in.
   "
      end

      operation 693033 "set_search_column"
	public explicit_return_type "void"
	nparams 1
	  param in name "column" explicit_type "TreeModelColumnBase"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets @a column  as the column where the interactive search code should
   * search in.  Additionally, turns on interactive searching. Note that
   *  @a column  refers to a column of the model.
   * @param column The column of the model to search in.
   "
      end

      operation 693161 "set_search_column"
	public explicit_return_type "void"
	nparams 1
	  param in name "column" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets @a column  as the column where the interactive search code should
   * search in.  Additionally, turns on interactive searching. Note that
   *  @a column  refers to a column of the model.
   * @param column The column of the model to search in.
   "
      end

      class 274601 "SlotSearchEqual"
	visibility package stereotype "typedef" explicit_base_type "sigc::slot<bool, const Glib::RefPtr<TreeModel>&, int, const Glib::ustring&, const TreeModel::iterator&>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 693289 "set_search_equal_func"
	public explicit_return_type "void"
	nparams 1
	  param in name "slot" type class_ref 274601 // SlotSearchEqual
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "SlotSearchEqual get_search_equal_func();
* Sets the compare function for the interactive search capabilities.
   *
   * @param slot The compare function to use during the search
   "
      end

      operation 693417 "signal_set_scroll_adjustments"
	public explicit_return_type "Glib::SignalProxy2< void,Adjustment*,Adjustment* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 693545 "signal_row_activated"
	public explicit_return_type "Glib::SignalProxy2< void,const TreeModel::Path&,TreeViewColumn* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 693673 "signal_test_expand_row"
	public explicit_return_type "Glib::SignalProxy2< bool,const TreeModel::iterator&,const TreeModel::Path& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 693801 "signal_test_collapse_row"
	public explicit_return_type "Glib::SignalProxy2< bool,const TreeModel::iterator&,const TreeModel::Path& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 693929 "signal_row_expanded"
	public explicit_return_type "Glib::SignalProxy2< void,const TreeModel::iterator&,const TreeModel::Path& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 694057 "signal_row_collapsed"
	public explicit_return_type "Glib::SignalProxy2< void,const TreeModel::iterator&,const TreeModel::Path& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 694185 "signal_cursor_changed"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 694313 "signal_columns_changed"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 694441 "property_model"
	public explicit_return_type "Glib::PropertyProxy< Glib::RefPtr<TreeModel> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Don't wrap these. They are keybinding signals, and their API broke for GTK+ 2.2.
* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 694569 "property_model"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly< Glib::RefPtr<TreeModel> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 694697 "property_hadjustment"
	public explicit_return_type "Glib::PropertyProxy<Adjustment*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 694825 "property_hadjustment"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Adjustment*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 694953 "property_vadjustment"
	public explicit_return_type "Glib::PropertyProxy<Adjustment*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 695081 "property_vadjustment"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Adjustment*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 695209 "property_headers_visible"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 695337 "property_headers_visible"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 695465 "property_headers_clickable"
	public explicit_return_type "Glib::PropertyProxy_WriteOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 695593 "property_headers_clickable"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 695721 "property_expander_column"
	public explicit_return_type "Glib::PropertyProxy<TreeViewColumn*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 695849 "property_expander_column"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<TreeViewColumn*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 695977 "property_reorderable"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 696105 "property_reorderable"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 696233 "property_rules_hint"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 696361 "property_rules_hint"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 696489 "property_enable_search"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 696617 "property_enable_search"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 696745 "property_search_column"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 696873 "property_search_column"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 697001 "property_fixed_height_mode"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 697129 "property_fixed_height_mode"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 697257 "_get_base_model"
	public explicit_return_type "Glib::RefPtr<Gtk::TreeModel>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/ Get the treeview's model, but actually get the child model if it's a TreeModelFilter."
      end

      operation 697385 "_auto_store_on_cellrenderer_text_edited_string"
	stereotype "template"
	friend protected explicit_return_type "void"
	nparams 4
	  param in name "path_string" explicit_type "Glib::ustring"
	  param in name "new_text" explicit_type "Glib::ustring"
	  param in name "model_column" explicit_type "int"
	  param inout name "" explicit_type "Gtk::TreeView"
	cpp_decl "    ${comment}template<class ColumnType>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}, ${t3} * ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}, ${t3} * ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 697513 "_auto_store_on_cellrenderer_text_edited_numerical"
	stereotype "template"
	friend protected explicit_return_type "void"
	nparams 4
	  param in name "path_string" explicit_type "Glib::ustring"
	  param in name "new_text" explicit_type "Glib::ustring"
	  param in name "model_column" explicit_type "int"
	  param inout name "" explicit_type "Gtk::TreeView"
	cpp_decl "    ${comment}template<class ColumnType>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}, ${t3} * ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}, ${t3} * ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 697641 "_auto_store_on_cellrenderer_toggle_edited"
	protected explicit_return_type "void"
	nparams 2
	  param in name "path_string" explicit_type "Glib::ustring"
	  param in name "model_column" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 697769 "TreeView_Private::_connect_auto_store_editable_signal_handler"
	stereotype "template"
	friend protected explicit_return_type "void"
	nparams 3
	  param inout name "" type class_ref 189993 // TreeView
	  param inout name "" type class_ref 290473 // CellRenderer
	  param in name "" explicit_type "TreeModelColumn<ColumnType>"
	cpp_decl "    ${comment}template<class ColumnType>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}, ${t1} * ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 273705 "TreeViewColumn"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/treeviewcolumn.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Typedefed as Gtk::TreeView::Column.
 * This is a visible column in a Gtk::TreeView widget. It determines the geometry, type.
 *
 * @ingroup TreeView
"
      class 274089 "SlotCellData"
	visibility package stereotype "typedef" explicit_base_type "sigc::slot<void, CellRenderer*, const Gtk::TreeModel::iterator&>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 275369 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 273705 // TreeViewColumn
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 230825 // <realization>
	  relation 230825 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 230825 // <realization>
	    b parent class_ref 273705 // TreeViewColumn
	end
      end

      class 275625 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "TreeViewColumn_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 275753 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkTreeViewColumn"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 275881 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkTreeViewColumnClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 698537 "~TreeViewColumn"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 231209 // treeviewcolumn_class_ (<directional composition>)
	relation 231209 *-->
	  a role_name "treeviewcolumn_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 231209 // treeviewcolumn_class_ (<directional composition>)
	  b parent class_ref 275625 // CppClassType
      end

      operation 698665 "TreeViewColumn"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 273705 // TreeViewColumn
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 698793 "operator ="
	private return_type class_ref 273705 // TreeViewColumn
	nparams 1
	  param in name "" type class_ref 273705 // TreeViewColumn
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 698921 "TreeViewColumn"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 699049 "TreeViewColumn"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkTreeViewColumn"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 699177 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 699305 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 699433 "gobj"
	cpp_inline public explicit_return_type "GtkTreeViewColumn"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTreeViewColumn*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 699561 "gobj"
	const cpp_inline public explicit_return_type "GtkTreeViewColumn"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkTreeViewColumn*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 699689 "on_clicked"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      class 276009 "Column"
	visibility package stereotype "typedef" base_type class_ref 273705 // TreeViewColumn
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 231337 // <realization>
	  relation 231337 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 231337 // <realization>
	    b parent class_ref 273705 // TreeViewColumn
	end
      end

      operation 699817 "TreeViewColumn"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 699945 "TreeViewColumn"
	public explicit_return_type ""
	nparams 1
	  param in name "title" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 700073 "TreeViewColumn"
	public explicit_return_type ""
	nparams 2
	  param in name "title" explicit_type "Glib::ustring"
	  param inout name "cell" type class_ref 290473 // CellRenderer
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 700201 "TreeViewColumn"
	stereotype "template"
	public explicit_return_type ""
	nparams 2
	  param in name "title" explicit_type "Glib::ustring"
	  param in name "column" explicit_type "TreeModelColumn<T_ModelColumnType>"
	cpp_decl "    ${comment}template<class T_ModelColumnType>
  ${inline}${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}template<class T_ModelColumnType>
${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}
:
  Glib::ObjectBase(0), // not (yet) a custom class
  Gtk::Object(Glib::ConstructParams(class_init_(), \"title\", title.c_str(), (char*) 0))
${throw}{
${body}}
"
	
	
	
	
	comment "* Create a default view column for the given model column type.
   "
      end

      operation 700329 "pack_start"
	public explicit_return_type "void"
	nparams 2
	  param inout name "cell" type class_ref 290473 // CellRenderer
	  param in name "expand" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Packs the @a cell  into the beginning of the column. If @a expand  is <tt>false</tt>, then
   * the @a cell  is allocated no more space than it needs. Any unused space is divided
   * evenly between cells for which @a expand  is <tt>true</tt>.
   * @param cell The Gtk::CellRenderer.
   * @param expand <tt>true</tt> if @a cell  is to be given extra space allocated to @a tree_column .
   "
      end

      operation 700457 "pack_end"
	public explicit_return_type "void"
	nparams 2
	  param inout name "cell" type class_ref 290473 // CellRenderer
	  param in name "expand" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Adds the @a cell  to end of the column. If @a expand  is <tt>false</tt>, then the @a cell 
   * is allocated no more space than it needs. Any unused space is divided
   * evenly between cells for which @a expand  is <tt>true</tt>.
   * @param cell The Gtk::CellRenderer.
   * @param expand <tt>true</tt> if @a cell  is to be given extra space allocated to @a tree_column .
   "
      end

      operation 700585 "pack_start"
	stereotype "template"
	public explicit_return_type "void"
	nparams 2
	  param in name "column" explicit_type "TreeModelColumn<T_ModelColumnType>"
	  param in name "expand" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}template<class T_ModelColumnType>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}template<class T_ModelColumnType>
${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Creates an appropriate CellRenderer for the @a column, and packs that cell into the beginning of the column.
   * If @a expand  is <tt>false</tt>, then
   * the cell is allocated no more space than it needs. Any unused space is divided
   * evenly between cells for which @a expand is <tt>true</tt>.
   *
   * You can use get_first_cell_renderer() or get_cell_renderers() to access the generated CellRenderer.
   *
   * @param column The model column that will be rendered by the view cell.
   * @param expand <tt>true</tt> if the cell is to be given extra space allocated to the view column.
   "
      end

      operation 700713 "pack_end"
	stereotype "template"
	public explicit_return_type "void"
	nparams 2
	  param in name "column" explicit_type "TreeModelColumn<T_ModelColumnType>"
	  param in name "expand" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}template<class T_ModelColumnType>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}template<class T_ModelColumnType>
${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Creates an appropriate CellRenderer for the @a column, and packs that cell at the end of the column.
   * If @a expand  is <tt>false</tt>, then
   * the cell is allocated no more space than it needs. Any unused space is divided
   * evenly between cells for which @a expand is <tt>true</tt>.
   *
   * You can use get_first_cell_renderer() or get_cell_renderers() to access the generated CellRenderer.
   *
   * @param column The model column that will be rendered by the view cell.
   * @param expand <tt>true</tt> if the cell is to be given extra space allocated to the view column.
   "
      end

      operation 700841 "clear"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Unsets all the mappings on all renderers on the @a tree_column .
   "
      end

      operation 700969 "get_first_cell_renderer"
	public return_type class_ref 290473 // CellRenderer
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the CellRenderer for the column.
    * You should dynamic_cast<> to the expected derived CellRenderer type.
    * This assumes that the TreeViewColumn contains only one CellRenderer.
    "
      end

      operation 701097 "get_first_cell_renderer"
	const public return_type class_ref 290473 // CellRenderer
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the CellRenderer for the column.
    * You should dynamic_cast<> to the expected derived CellRenderer type.
    * This assumes that the TreeViewColumn contains only one CellRenderer.
    "
      end

      operation 701225 "get_cell_renderers"
	public explicit_return_type "Glib::ListHandle<CellRenderer*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns a list of all the cell renderers in the column,
   * in no particular order.
   * @return A list of Gtk::CellRenderers.
   "
      end

      operation 701353 "get_cell_renderers"
	const public explicit_return_type "Glib::ListHandle<const CellRenderer*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns a list of all the cell renderers in the column,
   * in no particular order.
   * @return A list of Gtk::CellRenderers.
   "
      end

      operation 701481 "add_attribute"
	public explicit_return_type "void"
	nparams 3
	  param inout name "cell_renderer" type class_ref 290473 // CellRenderer
	  param in name "attribute" explicit_type "Glib::ustring"
	  param in name "column" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Adds an attribute mapping to the list in @a tree_column .  The @a column  is the
   * column of the model to get a value from, and the @a attribute  is the
   * parameter on @a cell_renderer  to be set from the value. So for example
   * if column 2 of the model contains strings, you could have the
   * \"text\" attribute of a Gtk::CellRendererText get its values from
   * column 2.
   * @param cell_renderer The Gtk::CellRenderer to set attributes on.
   * @param attribute An attribute on the renderer.
   * @param column The column position on the model to get the attribute from.
   "
      end

      operation 701609 "add_attribute"
	public explicit_return_type "void"
	nparams 2
	  param in name "property" explicit_type "Glib::PropertyProxy_Base"
	  param in name "column" explicit_type "TreeModelColumnBase"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 701737 "set_renderer"
	public explicit_return_type "void"
	nparams 2
	  param inout name "renderer" explicit_type "Gtk::CellRenderer"
	  param in name "column" explicit_type "TreeModelColumnBase"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Associate a view CellRenderer with a model column, so that the CellRenderer renders the data in the model column.
   *
   * @param renderer The view cell renderer which will render the model column.
   * @param column The model column to be renderered by this view.
   "
      end

      operation 701865 "set_cell_data_func"
	public explicit_return_type "void"
	nparams 2
	  param inout name "cell_renderer" type class_ref 290473 // CellRenderer
	  param in name "slot" type class_ref 274089 // SlotCellData
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the slot callback to use for the column.
   * This function is used instead of the standard attributes mapping for setting the column value, and should set the
   * value of the column's cell renderer as appropriate.
   *
   * See also unset_cell_data_func().
   *
   * @param cell_renderer A Gtk::CellRenderer
   * @param slot The callback slot to use.
   "
      end

      operation 701993 "unset_cell_data_func"
	public explicit_return_type "void"
	nparams 1
	  param inout name "cell_renderer" type class_ref 290473 // CellRenderer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Removes a previously set callback slot. See set_cell_data_func().
   "
      end

      operation 702121 "clear_attributes"
	public explicit_return_type "void"
	nparams 1
	  param inout name "cell_renderer" type class_ref 290473 // CellRenderer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Clears all existing attributes previously set with
   * set_attributes().
   * @param cell_renderer A Gtk::CellRenderer to clear the attribute mapping on.
   "
      end

      operation 702249 "set_spacing"
	public explicit_return_type "void"
	nparams 1
	  param in name "spacing" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the spacing field of @a tree_column , which is the number of pixels to
   * place between cell renderers packed into it.
   * @param spacing Distance between cell renderers in pixels.
   "
      end

      operation 702377 "get_spacing"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the spacing of @a tree_column .
   * @return The spacing of @a tree_column .
   "
      end

      operation 702505 "set_visible"
	public explicit_return_type "void"
	nparams 1
	  param in name "visible" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the visibility of @a tree_column .
   * @param visible <tt>true</tt> if the @a tree_column  is visible.
   "
      end

      operation 702633 "get_visible"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns <tt>true</tt> if @a tree_column  is visible.
   * @return Whether the column is visible or not.  If it is visible, then
   * the tree will show the column.
   "
      end

      operation 702761 "set_resizable"
	public explicit_return_type "void"
	nparams 1
	  param in name "resizable" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* If @a resizable  is <tt>true</tt>, then the user can explicitly resize the column by
   * grabbing the outer edge of the column button.  If resizable is <tt>true</tt> and
   * sizing mode of the column is Gtk::TREE_VIEW_COLUMN_AUTOSIZE, then the sizing
   * mode is changed to Gtk::TREE_VIEW_COLUMN_GROW_ONLY.
   * @param resizable <tt>true</tt>, if the column can be resized.
   "
      end

      operation 702889 "get_resizable"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns <tt>true</tt> if the @a tree_column  can be resized by the end user.
   * @return <tt>true</tt>, if the @a tree_column  can be resized.
   "
      end

      operation 703017 "set_sizing"
	public explicit_return_type "void"
	nparams 1
	  param in name "type" explicit_type "TreeViewColumnSizing"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the growth behavior of @a tree_column  to @a type .
   * @param type The Gtk::TreeViewColumnSizing.
   "
      end

      operation 703145 "get_sizing"
	public explicit_return_type "TreeViewColumnSizing"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the current type of @a tree_column .
   * @return The type of @a tree_column .
   "
      end

      operation 703273 "get_width"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the current size of @a tree_column  in pixels.
   * @return The current width of @a tree_column .
   "
      end

      operation 703401 "get_fixed_width"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the fixed width of the column.  This value is only meaning may not be
   * the actual width of the column on the screen, just what is requested.
   * @return The fixed width of the column.
   "
      end

      operation 703529 "set_fixed_width"
	public explicit_return_type "void"
	nparams 1
	  param in name "fixed_width" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the size of the column in pixels.  This is meaningful only if the sizing
   * type is Gtk::TREE_VIEW_COLUMN_FIXED.  The size of the column is clamped to
   * the min/max width for the column.  Please note that the min/max width of the
   * column doesn't actually affect the \"fixed_width\" property of the widget, just
   * the actual size when displayed.
   * @param fixed_width The size to set @a tree_column  to. Must be greater than 0.
   "
      end

      operation 703657 "set_min_width"
	public explicit_return_type "void"
	nparams 1
	  param in name "min_width" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the minimum width of the @a tree_column .  If @a min_width  is -1, then the
   * minimum width is unset.
   * @param min_width The minimum width of the column in pixels, or -1.
   "
      end

      operation 703785 "get_min_width"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the minimum width in pixels of the @a tree_column , or -1 if no minimum
   * width is set.
   * @return The minimum width of the @a tree_column .
   "
      end

      operation 703913 "set_max_width"
	public explicit_return_type "void"
	nparams 1
	  param in name "max_width" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the maximum width of the @a tree_column .  If @a max_width  is -1, then the
   * maximum width is unset.  Note, the column can actually be wider than max
   * width if it's the last column in a view.  In this case, the column expands to
   * fill any extra space.
   * @param max_width The maximum width of the column in pixels, or -1.
   "
      end

      operation 704041 "get_max_width"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the maximum width in pixels of the @a tree_column , or -1 if no maximum
   * width is set.
   * @return The maximum width of the @a tree_column .
   "
      end

      operation 704169 "clicked"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Emits the \"clicked\" signal on the column.  This function will only work if
   *  @a tree_column  is clickable.
   "
      end

      operation 704297 "set_title"
	public explicit_return_type "void"
	nparams 1
	  param in name "title" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the title of the @a tree_column .  If a custom widget has been set, then
   * this value is ignored.
   * @param title The title of the @a tree_column .
   "
      end

      operation 704425 "get_title"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the title of the widget.
   * @return The title of the column. This string should not be
   * modified or freed.
   "
      end

      operation 704553 "set_expand"
	public explicit_return_type "void"
	nparams 1
	  param in name "expand" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the column to take available extra space.  This space is shared equally
   * amongst all columns that have the expand set to <tt>true</tt>.  If no column has this
   * option set, then the last column gets all extra space.  By default, every
   * column is created with this <tt>false</tt>.
   * 
   * Since: 2.4
   "
      end

      operation 704681 "get_expand"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Return <tt>true</tt> if the column expands to take any available space.
   * @return <tt>true</tt>, if the column expands
   * 
   * Since: 2.4.
   "
      end

      operation 704809 "set_clickable"
	public explicit_return_type "void"
	nparams 1
	  param in name "clickable" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the header to be active if @a active  is <tt>true</tt>.  When the header is active,
   * then it can take keyboard focus, and can be clicked.
   * @param clickable <tt>true</tt> if the header is active.
   "
      end

      operation 704937 "get_clickable"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns <tt>true</tt> if the user can click on the header for the column.
   * @return <tt>true</tt> if user can click the column header.
   "
      end

      operation 705065 "set_widget"
	public explicit_return_type "void"
	nparams 1
	  param inout name "widget" explicit_type "Gtk::Widget"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the widget in the header to be @a widget .  If widget is <tt>0</tt>, then the
   * header button is set with a Gtk::Label set to the title of @a tree_column .
   * @param widget A child Gtk::Widget, or <tt>0</tt>.
   "
      end

      operation 705193 "get_widget"
	public return_type class_ref 130089 // Widget
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the Gtk::Widget in the button on the column header.  If a custom
   * widget has not been set then <tt>0</tt> is returned.
   * @return The Gtk::Widget in the column header, or <tt>0</tt>.
   "
      end

      operation 705321 "get_widget"
	const public return_type class_ref 130089 // Widget
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the Gtk::Widget in the button on the column header.  If a custom
   * widget has not been set then <tt>0</tt> is returned.
   * @return The Gtk::Widget in the column header, or <tt>0</tt>.
   "
      end

      operation 705449 "set_alignment"
	public explicit_return_type "void"
	nparams 1
	  param in name "xalign" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the alignment of the title or custom widget inside the column header.
   * The alignment determines its location inside the button -- 0.0 for left, 0.5
   * for center, 1.0 for right.
   * @param xalign The alignment, which is between [0.0 and 1.0] inclusive.
   "
      end

      operation 705577 "set_alignment"
	public explicit_return_type "void"
	nparams 1
	  param in name "xalign" type class_ref 134697 // AlignmentEnum
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the alignment of the title or custom widget inside the column header.
   * The alignment determines its location inside the button -- 0.0 for left, 0.5
   * for center, 1.0 for right.
   * @param xalign The alignment, which is between [0.0 and 1.0] inclusive.
   "
      end

      operation 705705 "get_alignment"
	const public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the current x alignment of @a tree_column .  This value can range
   * between 0.0 and 1.0.
   * @return The current alignent of @a tree_column .
   "
      end

      operation 705833 "set_reorderable"
	public explicit_return_type "void"
	nparams 1
	  param in name "reorderable" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* If @a reorderable  is <tt>true</tt>, then the column can be reordered by the end user
   * dragging the header.
   * @param reorderable <tt>true</tt>, if the column can be reordered.
   "
      end

      operation 705961 "get_reorderable"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns <tt>true</tt> if the @a tree_column  can be reordered by the user.
   * @return <tt>true</tt> if the @a tree_column  can be reordered by the user.
   "
      end

      operation 706089 "set_sort_column"
	public explicit_return_type "void"
	nparams 1
	  param in name "sort_column_id" explicit_type "TreeModelColumnBase"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the logical @a sort_column_id  that this column sorts on when this column 
   * is selected for sorting.  Doing so makes the column header clickable.
   * @param sort_column_id The @a sort_column_id  of the model to sort on.
   "
      end

      operation 706217 "set_sort_column"
	public explicit_return_type "void"
	nparams 1
	  param in name "sort_column_id" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the logical @a sort_column_id  that this column sorts on when this column 
   * is selected for sorting.  Doing so makes the column header clickable.
   * @param sort_column_id The @a sort_column_id  of the model to sort on.
   "
      end

      operation 706345 "set_sort_column_id"
	public explicit_return_type "void"
	nparams 1
	  param in name "sort_column_id" explicit_type "TreeModelColumnBase"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* @deprecated Use set_sort_column() instead.
   "
      end

      operation 706473 "set_sort_column_id"
	public explicit_return_type "void"
	nparams 1
	  param in name "sort_column_id" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* @deprecated Use set_sort_column() instead.
   "
      end

      operation 706601 "get_sort_column_id"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the logical @a sort_column_id  that the model sorts on when this
   * column is selected for sorting.
   * See set_sort_column_id().
   * @return The current @a sort_column_id  for this column, or -1 if
   * this column can't be used for sorting.
   "
      end

      operation 706729 "set_sort_indicator"
	public explicit_return_type "void"
	nparams 1
	  param in name "setting" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Call this function with a @a setting  of <tt>true</tt> to display an arrow in
   * the header button indicating the column is sorted. Call
   * set_sort_order() to change the direction of
   * the arrow.
   * @param setting <tt>true</tt> to display an indicator that the column is sorted.
   "
      end

      operation 706857 "get_sort_indicator"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the value set by set_sort_indicator().
   * @return Whether the sort indicator arrow is displayed.
   "
      end

      operation 706985 "set_sort_order"
	public explicit_return_type "void"
	nparams 1
	  param in name "order" type class_ref 317609 // SortType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Changes the appearance of the sort indicator. 
   * 
   * This <em>does not</em> actually sort the model.  Use
   * set_sort_column_id() if you want automatic sorting
   * support.  This function is primarily for custom sorting behavior, and should
   * be used in conjunction with gtk_tree_sortable_set_sort_column() to do
   * that. For custom models, the mechanism will vary. 
   * 
   * The sort indicator changes direction to indicate normal sort or reverse sort.
   * Note that you must have the sort indicator enabled to see anything when 
   * calling this function; see set_sort_indicator().
   * @param order Sort order that the sort indicator should indicate.
   "
      end

      operation 707113 "get_sort_order"
	const public return_type class_ref 317609 // SortType
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the value set by set_sort_order().
   * @return The sort order the sort indicator is indicating.
   "
      end

      operation 707241 "cell_set_cell_data"
	public explicit_return_type "void"
	nparams 4
	  param in name "tree_model" explicit_type "Glib::RefPtr<TreeModel>"
	  param in name "iter" type class_ref 301865 // iterator
	  param in name "is_expander" explicit_type "bool"
	  param in name "is_expanded" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the cell renderer based on the @a tree_model  and @a iter .  That is, for
   * every attribute mapping in @a tree_column , it will get a value from the set
   * column on the @a iter , and use that value to set the attribute on the cell
   * renderer.  This is used primarily by the Gtk::TreeView.
   * @param tree_model The Gtk::TreeModel to to get the cell renderers attributes from.
   * @param iter The Gtk::TreeIter to to get the cell renderer's attributes from.
   * @param is_expander <tt>true</tt>, if the row has children.
   * @param is_expanded <tt>true</tt>, if the row has visible children.
   "
      end

      operation 707369 "cell_get_size"
	const public explicit_return_type "void"
	nparams 5
	  param inout name "cell_area" explicit_type "Gdk::Rectangle"
	  param inout name "x_offset" explicit_type "int"
	  param inout name "y_offset" explicit_type "int"
	  param inout name "width" explicit_type "int"
	  param inout name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}, ${t3} & ${p3}, ${t4} & ${p4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}, ${t3} & ${p3}, ${t4} & ${p4}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Obtains the width and height needed to render the column.  This is used
   * primarily by the Gtk::TreeView.
   * @param cell_area The area a cell in the column will be allocated.
   * @param x_offset Location to return x offset of a cell relative to @a cell_area .
   * @param y_offset Location to return y offset of a cell relative to @a cell_area .
   * @param width Location to return width needed to render a cell.
   * @param height Location to return height needed to render a cell.
   "
      end

      operation 707497 "cell_is_visible"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns <tt>true</tt> if any of the cells packed into the @a tree_column  are visible.
   * For this to be meaningful, you must first initialize the cells with
   * cell_set_cell_data()
   * @return <tt>true</tt>, if any of the cells packed into the @a tree_column  are currently visible.
   "
      end

      operation 707625 "focus_cell"
	public explicit_return_type "void"
	nparams 1
	  param inout name "cell" type class_ref 290473 // CellRenderer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the current keyboard focus to be at @a cell , if the column contains
   * 2 or more editable and activatable cells.
   * 
   * Since: 2.2
   * @param cell A Gtk::CellRenderer.
   "
      end

      operation 707753 "get_cell_position"
	const public explicit_return_type "bool"
	nparams 3
	  param in name "cell_renderer" type class_ref 290473 // CellRenderer
	  param inout name "start_pos" explicit_type "int"
	  param inout name "width" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Obtains the horizontal position and size of a cell in a column. If the
   * cell is not found in the column, @a start_pos  and @a width  are not changed and
   * <tt>false</tt> is returned.
   * @param cell_renderer A Gtk::CellRenderer.
   * @param start_pos Return location for the horizontal position of @a cell  within
   *  @a tree_column .
   * @param width Return location for the width of @a cell .
   * @return <tt>true</tt> if @a cell  belongs to @a tree_column .
   "
      end

      operation 707881 "signal_clicked"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 708009 "property_visible"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 708137 "property_visible"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 708265 "property_width"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 708393 "property_sizing"
	public explicit_return_type "Glib::PropertyProxy<TreeViewColumnSizing>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 708521 "property_sizing"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<TreeViewColumnSizing>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 708649 "property_fixed_width"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 708777 "property_fixed_width"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 708905 "property_min_width"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 709033 "property_min_width"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 709161 "property_max_width"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 709289 "property_max_width"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 709417 "property_title"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 709545 "property_title"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 709673 "property_expand"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 709801 "property_expand"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 709929 "property_clickable"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 710057 "property_clickable"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 710185 "property_widget"
	public explicit_return_type "Glib::PropertyProxy<Widget*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 710313 "property_widget"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Widget*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 710441 "property_alignment"
	public explicit_return_type "Glib::PropertyProxy<float>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 710569 "property_alignment"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<float>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 710697 "property_reorderable"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 710825 "property_reorderable"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 710953 "property_sort_indicator"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 711081 "property_sort_indicator"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 711209 "property_sort_order"
	public explicit_return_type "Glib::PropertyProxy<SortType>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 711337 "property_sort_order"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<SortType>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 711465 "class_init_"
	class_operation private explicit_return_type "Glib::Class"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " Only necessary because of the templated ctor, see below."
      end
    end

    class 272681 "TreeViewDropPosition"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace Gtk
* @addtogroup gtkmmEnums Enums and Flags 
*
 * @ingroup gtkmmEnums
 "
      attribute 207529 "TREE_VIEW_DROP_BEFORE"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 207657 "TREE_VIEW_DROP_AFTER"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 207785 "TREE_VIEW_DROP_INTO_OR_BEFORE"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 207913 "TREE_VIEW_DROP_INTO_OR_AFTER"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 181033 "UpdateType"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 "
      attribute 193705 "UPDATE_CONTINUOUS"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 193833 "UPDATE_DISCONTINUOUS"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 193961 "UPDATE_DELAYED"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 276521 "UIManager"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/uimanager.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 276649 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 276521 // UIManager
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 231721 // <realization>
	  relation 231721 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 231721 // <realization>
	    b parent class_ref 276521 // UIManager
	end
      end

      class 276905 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "UIManager_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 277033 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkUIManager"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 277161 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkUIManagerClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 232105 // uimanager_class_ (<directional composition>)
	relation 232105 *-->
	  a role_name "uimanager_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 232105 // uimanager_class_ (<directional composition>)
	  b parent class_ref 276905 // CppClassType
      end

      operation 711721 "UIManager"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 276521 // UIManager
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 711849 "operator ="
	private return_type class_ref 276521 // UIManager
	nparams 1
	  param in name "" type class_ref 276521 // UIManager
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 711977 "UIManager"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 712105 "UIManager"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkUIManager"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 712233 "~UIManager"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 712361 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 712489 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 712617 "gobj"
	cpp_inline public explicit_return_type "GtkUIManager"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkUIManager*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 712745 "gobj"
	const cpp_inline public explicit_return_type "GtkUIManager"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkUIManager*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 712873 "gobj_copy"
	public explicit_return_type "GtkUIManager"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs."
      end

      operation 713001 "UIManager"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 713129 "create"
	class_operation public explicit_return_type "Glib::RefPtr<UIManager>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 713257 "set_add_tearoffs"
	public explicit_return_type "void"
	nparams 1
	  param in name "add_tearoffs" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the \"add_tearoffs\" property, which controls whether menus 
   * generated by this Gtk::UIManager will have tearoff menu items. 
   * 
   * Note that this only affects regular menus. Generated popup 
   * menus never have tearoff menu items.
   * 
   * Since: 2.4
   * @param add_tearoffs Whether tearoff menu items are added.
   "
      end

      operation 713385 "get_add_tearoffs"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether menus generated by this Gtk::UIManager
   * will have tearoff menu items.
   * @return Whether tearoff menu items are added
   * 
   * Since: 2.4.
   "
      end

      operation 713513 "insert_action_group"
	public explicit_return_type "void"
	nparams 2
	  param in name "action_group" explicit_type "Glib::RefPtr<ActionGroup>"
	  param in name "pos" explicit_type "int"
	    defaultvalue " 0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Inserts an action group into the list of action groups associated 
   * with @a self . Actions in earlier groups hide actions with the same 
   * name in later groups. 
   * 
   * Since: 2.4
   * @param action_group The action group to be inserted.
   * @param pos The position at which the group will be inserted.
   "
      end

      operation 713641 "remove_action_group"
	public explicit_return_type "void"
	nparams 1
	  param in name "action_group" explicit_type "Glib::RefPtr<ActionGroup>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Removes an action group from the list of action groups associated 
   * with @a self .
   * 
   * Since: 2.4
   * @param action_group The action group to be removed.
   "
      end

      operation 713769 "get_action_groups"
	public explicit_return_type "Glib::ListHandle< Glib::RefPtr<ActionGroup> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the list of action groups associated with @a self .
   * @return A G::List of action groups. The list is owned by GTK+ 
   * and should not be modified.
   * 
   * Since: 2.4.
   "
      end

      operation 713897 "get_action_groups"
	const public explicit_return_type "Glib::ListHandle< Glib::RefPtr<const ActionGroup> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the list of action groups associated with @a self .
   * @return A G::List of action groups. The list is owned by GTK+ 
   * and should not be modified.
   * 
   * Since: 2.4.
   "
      end

      operation 714025 "get_accel_group"
	public explicit_return_type "Glib::RefPtr<AccelGroup>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the Gtk::AccelGroup associated with @a self .
   * @return The Gtk::AccelGroup.
   * 
   * Since: 2.4.
   "
      end

      operation 714153 "get_accel_group"
	const public explicit_return_type "Glib::RefPtr<const AccelGroup>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the Gtk::AccelGroup associated with @a self .
   * @return The Gtk::AccelGroup.
   * 
   * Since: 2.4.
   "
      end

      operation 714281 "get_widget"
	public return_type class_ref 130089 // Widget
	nparams 1
	  param in name "path" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Looks up a widget by following a path. 
   * The path consists of the names specified in the XML description of the UI. 
   * separated by '/'. Elements which don't have a name or action attribute in 
   * the XML (e.g. &lt;popup&gt;) can be addressed by their XML element name 
   * (e.g. \"popup\"). The root element (\"/ui\") can be omitted in the path.
   * @param path A path.
   * @return The widget found by following the path, or <tt>0</tt> if no widget
   * was found.
   * 
   * Since: 2.4.
   "
      end

      operation 714409 "get_widget"
	const public return_type class_ref 130089 // Widget
	nparams 1
	  param in name "path" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Looks up a widget by following a path. 
   * The path consists of the names specified in the XML description of the UI. 
   * separated by '/'. Elements which don't have a name or action attribute in 
   * the XML (e.g. &lt;popup&gt;) can be addressed by their XML element name 
   * (e.g. \"popup\"). The root element (\"/ui\") can be omitted in the path.
   * @param path A path.
   * @return The widget found by following the path, or <tt>0</tt> if no widget
   * was found.
   * 
   * Since: 2.4.
   "
      end

      operation 714537 "get_toplevels"
	public explicit_return_type "Glib::SListHandle<Widget*>"
	nparams 1
	  param in name "types" explicit_type "UIManagerItemType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Obtains a list of all toplevel widgets of the requested types.
   * @param types Specifies the types of toplevel widgets to include. Allowed
   * types are Gtk::UI_MANAGER_MENUBAR, Gtk::UI_MANAGER_TOOLBAR and
   * Gtk::UI_MANAGER_POPUP.
   * @return A newly-allocated of all toplevel widgets of the requested 
   * types. 
   * 
   * Since: 2.4.
   "
      end

      operation 714665 "get_toplevels"
	const public explicit_return_type "Glib::SListHandle<const Widget*>"
	nparams 1
	  param in name "types" explicit_type "UIManagerItemType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Obtains a list of all toplevel widgets of the requested types.
   * @param types Specifies the types of toplevel widgets to include. Allowed
   * types are Gtk::UI_MANAGER_MENUBAR, Gtk::UI_MANAGER_TOOLBAR and
   * Gtk::UI_MANAGER_POPUP.
   * @return A newly-allocated of all toplevel widgets of the requested 
   * types. 
   * 
   * Since: 2.4.
   "
      end

      operation 714793 "get_action"
	public explicit_return_type "Glib::RefPtr<Action>"
	nparams 1
	  param in name "path" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Looks up an action by following a path. See gtk_ui_manager_get_widget()
   * for more information about paths.
   * @param path A path.
   * @return The action whose proxy widget is found by following the path, 
   * or <tt>0</tt> if no widget was found.
   * 
   * Since: 2.4.
   "
      end

      operation 714921 "get_action"
	const public explicit_return_type "Glib::RefPtr<const Action>"
	nparams 1
	  param in name "path" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Looks up an action by following a path. See gtk_ui_manager_get_widget()
   * for more information about paths.
   * @param path A path.
   * @return The action whose proxy widget is found by following the path, 
   * or <tt>0</tt> if no widget was found.
   * 
   * Since: 2.4.
   "
      end

      class 277289 "ui_merge_id"
	visibility package stereotype "typedef" explicit_base_type "guint"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 715049 "add_ui_from_string"
	public return_type class_ref 277289 // ui_merge_id
	nparams 1
	  param in name "buffer" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Parses a string containing a UI definition and
   * merges it with the current contents. An enclosing &lt;ui&gt;
   * element is added if it is missing.
   *
   * @param buffer the string to parse
   * @result  The merge id for the merged UI. The merge id can be used to unmerge the UI with remove_ui(). If an error occurred, the return value is 0.
   * @throws exception
   * Since: 2.4
   "
      end

      operation 715177 "add_ui_from_file"
	public return_type class_ref 277289 // ui_merge_id
	nparams 1
	  param in name "filename" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Parses a file containing a UI definition and 
   * merges it with the current contents of @a self .
   * @param filename The name of the file to parse.
   * @return The merge id for the merged UI. The merge id can be used
   * to unmerge the UI with gtk_ui_manager_remove_ui(). If an error occurred,
   * the return value is 0.
   * 
   * Since: 2.4.
   "
      end

      operation 715305 "add_ui"
	public explicit_return_type "void"
	nparams 6
	  param in name "merge_id" type class_ref 277289 // ui_merge_id
	  param in name "path" explicit_type "Glib::ustring"
	  param in name "name" explicit_type "Glib::ustring"
	  param in name "action" explicit_type "Glib::ustring"
	  param in name "type" explicit_type "UIManagerItemType"
	    defaultvalue " Gtk::UI_MANAGER_AUTO"
	  param in name "top" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO: Is top=true a good default?
* Adds a UI element to the current contents of @a self .
   * 
   * If @a type  is Gtk::UI_MANAGER_AUTO, GTK+ inserts a menuitem, toolitem or
   * separator if such an element can be inserted at the place determined by
   *  @a path . Otherwise @a type  must indicate an element that can be inserted at
   * the place determined by @a path .
   * 
   *  @a see  add_ui_separator().
   * 
   * Since: 2.4
   * @param merge_id The merge id for the merged UI, see gtk_ui_manager_new_merge_id().
   * @param path A path.
   * @param name The name for the added UI element.
   * @param action The name of the action to be proxied, if this is not a separator.
   * @param type The type of UI element to add.
   * @param top If <tt>true</tt>, the UI element is added before its siblings, otherwise it
   * is added after its siblings.
   "
      end

      operation 715433 "add_ui_separator"
	public explicit_return_type "void"
	nparams 5
	  param in name "merge_id" type class_ref 277289 // ui_merge_id
	  param in name "path" explicit_type "Glib::ustring"
	  param in name "name" explicit_type "Glib::ustring"
	    defaultvalue " \"\""
	  param in name "type" explicit_type "UIManagerItemType"
	    defaultvalue " Gtk::UI_MANAGER_AUTO"
	  param in name "top" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Adds a separator UI element to the current contents.
   *
   * If @a type  is Gtk::UI_MANAGER_AUTO, GTK+ inserts a menuitem, toolitem or
   * separator if such an element can be inserted at the place determined by
   *  @a path . Otherwise @a type  must indicate an element that can be inserted at
   * the place determined by @a path.
   *
   * @see add_ui().
   *
   * Since: 2.4
   * @param merge_id The merge id for the merged UI, see gtk_ui_manager_new_merge_id().
   * @param path A path.
   * @param name The name for the added UI element.
   * @param type The type of UI element to add.
   * @param top If <tt>true</tt>, the UI element is added before its siblings, otherwise it
   * is added after its siblings.
   "
      end

      operation 715561 "remove_ui"
	public explicit_return_type "void"
	nparams 1
	  param in name "merge_id" type class_ref 277289 // ui_merge_id
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Unmerges the part of @a self &lt;!-- --&gt;s content identified by @a merge_id .
   * 
   * Since: 2.4
   * @param merge_id A merge id as returned by gtk_ui_manager_add_ui_from_string().
   "
      end

      operation 715689 "get_ui"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Creates a UI definition of the merged UI.
   * @return A newly allocated string containing an XML representation of 
   * the merged UI.
   * 
   * Since: 2.4.
   "
      end

      operation 715817 "ensure_update"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Makes sure that all pending updates to the UI have been completed.
   * 
   * This may occasionally be necessary, since Gtk::UIManager updates the 
   * UI in an idle function. A typical example where this function is
   * useful is to enforce that the menubar and toolbar have been added to 
   * the main window before showing it:
   * @code
   * 
   * gtk_container_add (GTK_CONTAINER (window), vbox); 
   * g_signal_connect (merge, \"add_widget\", 
   * G_CALLBACK (add_widget), vbox);
   * gtk_ui_manager_add_ui_from_file (merge, \"my-menus\");
   * gtk_ui_manager_add_ui_from_file (merge, \"my-toolbars\");
   * gtk_ui_manager_ensure_update (merge);  
   * gtk_widget_show (window);
   * 
   * @endcode
   * 
   * Since: 2.4
   "
      end

      operation 715945 "new_merge_id"
	public return_type class_ref 277289 // ui_merge_id
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns an unused merge id, suitable for use with 
   * gtk_ui_manager_add_ui().
   * @return An unused merge id.
   * 
   * Since: 2.4.
   "
      end

      operation 716073 "signal_add_widget"
	public explicit_return_type "Glib::SignalProxy1< void,Widget* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 716201 "signal_actions_changed"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 716329 "signal_connect_proxy"
	public explicit_return_type "Glib::SignalProxy2< void,const Glib::RefPtr<Action>&,Widget* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 716457 "signal_disconnect_proxy"
	public explicit_return_type "Glib::SignalProxy2< void,const Glib::RefPtr<Action>&,Widget* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 716585 "signal_pre_activate"
	public explicit_return_type "Glib::SignalProxy1< void,const Glib::RefPtr<Action>& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 716713 "signal_post_activate"
	public explicit_return_type "Glib::SignalProxy1< void,const Glib::RefPtr<Action>& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 716841 "property_add_tearoffs"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 716969 "property_add_tearoffs"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 717097 "property_ui"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 717225 "on_add_widget"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "widget" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 717353 "on_actions_changed"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 316329 "Visibility"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 "
      attribute 194089 "VISIBILITY_NONE"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 194217 "VISIBILITY_PARTIAL"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 194345 "VISIBILITY_FULL"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 287913 "VBox"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/box.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Vertical Box for laying widgets in a vertical row.
 *
 * You should create these objects, but it is more confortable to pass
 * around pointers of Gtk::Box. All the methods that do anything are in
 * class Gtk::Box and this allows you to later change the direction of the
 * box, when there's no dependencies to HBox and VBox classes.
 *
 * @ingroup Widgets
 * @ingroup Containers
 "
      classrelation 136105 // <generalisation>
	relation 136105 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 136105 // <generalisation>
	  b parent class_ref 287145 // Box
      end

      class 288041 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 287913 // VBox
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 235177 // <realization>
	  relation 235177 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 235177 // <realization>
	    b parent class_ref 287913 // VBox
	end
      end

      class 140201 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "VBox_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 140329 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkVBox"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 140457 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkVBoxClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 801577 "~VBox"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 136617 // vbox_class_ (<directional composition>)
	relation 136617 *-->
	  a role_name "vbox_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 136617 // vbox_class_ (<directional composition>)
	  b parent class_ref 140201 // CppClassType
      end

      operation 801705 "VBox"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 287913 // VBox
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 801833 "operator ="
	private return_type class_ref 287913 // VBox
	nparams 1
	  param in name "" type class_ref 287913 // VBox
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 801961 "VBox"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 802089 "VBox"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkVBox"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 802217 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 802345 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 802473 "gobj"
	cpp_inline public explicit_return_type "GtkVBox"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkVBox*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 802601 "gobj"
	const cpp_inline public explicit_return_type "GtkVBox"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkVBox*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 802729 "VBox"
	public explicit_return_type ""
	nparams 2
	  param in name "homogeneous" explicit_type "bool"
	    defaultvalue " false"
	  param in name "spacing" explicit_type "int"
	    defaultvalue " 0"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::
* Creates a new vertical box.
   * @param homogeneous Whether each widget in the VBox should have the same
   * height.  If set, a PACK_SHRINK argument to pack_start() or pack_end() is
   * ignored.
   * @param spacing Determines the space in pixels between child widgets.
   "
      end
    end

    class 143273 "VButtonBox"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/buttonbox.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* A container for arranging buttons vertically.
 *
 * A button box should be used to provide a consistent layout of buttons
 * throughout your application. There is one default layout and a default spacing
 * value that are persistant across all Gtk::VButtonBox widgets. 
 *
 * The layout/spacing can then be altered by the programmer, or if desired,
 * by the user to alter the 'feel' of a program to a small degree. 
 *
 * @ingroup Widgets
 * @ingroup Containers
 "
      classrelation 138665 // <generalisation>
	relation 138665 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 138665 // <generalisation>
	  b parent class_ref 142377 // ButtonBox
      end

      class 143401 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 143273 // VButtonBox
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 138793 // <realization>
	  relation 138793 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 138793 // <realization>
	    b parent class_ref 143273 // VButtonBox
	end
      end

      class 143657 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "VButtonBox_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 143785 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkVButtonBox"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 143913 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkVButtonBoxClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 813481 "~VButtonBox"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 139177 // vbuttonbox_class_ (<directional composition>)
	relation 139177 *-->
	  a role_name "vbuttonbox_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 139177 // vbuttonbox_class_ (<directional composition>)
	  b parent class_ref 143657 // CppClassType
      end

      operation 813609 "VButtonBox"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 143273 // VButtonBox
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 813737 "operator ="
	private return_type class_ref 143273 // VButtonBox
	nparams 1
	  param in name "" type class_ref 143273 // VButtonBox
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 813865 "VButtonBox"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 813993 "VButtonBox"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkVButtonBox"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 814121 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 814249 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 814377 "gobj"
	cpp_inline public explicit_return_type "GtkVButtonBox"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkVButtonBox*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 814505 "gobj"
	const cpp_inline public explicit_return_type "GtkVButtonBox"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkVButtonBox*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 814633 "VButtonBox"
	public explicit_return_type ""
	nparams 2
	  param in name "layout" type class_ref 143145 // ButtonBoxStyle
	    defaultvalue " BUTTONBOX_DEFAULT_STYLE"
	  param in name "spacing" explicit_type "int"
	    defaultvalue " BUTTONBOX_DEFAULT"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end
    end

    class 277417 "Viewport"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/viewport.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* An adapter which makes widgets scrollable.
 * 
 * @ingroup Widgets
 * @ingroup Containers
 "
      classrelation 232233 // <generalisation>
	relation 232233 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 232233 // <generalisation>
	  b parent class_ref 281385 // Bin
      end

      class 277545 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 277417 // Viewport
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 232361 // <realization>
	  relation 232361 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 232361 // <realization>
	    b parent class_ref 277417 // Viewport
	end
      end

      class 277801 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Viewport_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 277929 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkViewport"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 278057 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkViewportClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 717481 "~Viewport"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 232745 // viewport_class_ (<directional composition>)
	relation 232745 *-->
	  a role_name "viewport_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 232745 // viewport_class_ (<directional composition>)
	  b parent class_ref 277801 // CppClassType
      end

      operation 717609 "Viewport"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 277417 // Viewport
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 717737 "operator ="
	private return_type class_ref 277417 // Viewport
	nparams 1
	  param in name "" type class_ref 277417 // Viewport
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 717865 "Viewport"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 717993 "Viewport"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkViewport"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 718121 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 718249 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 718377 "gobj"
	cpp_inline public explicit_return_type "GtkViewport"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkViewport*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 718505 "gobj"
	const cpp_inline public explicit_return_type "GtkViewport"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkViewport*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 718633 "on_set_scroll_adjustments"
	cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param inout name "hadjustment" explicit_type "Gtk::Adjustment"
	  param inout name "vadjustment" explicit_type "Gtk::Adjustment"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 718761 "Viewport"
	public explicit_return_type ""
	nparams 2
	  param inout name "hadjustment" type class_ref 132521 // Adjustment
	  param inout name "vadjustment" type class_ref 132521 // Adjustment
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 718889 "get_hadjustment"
	public explicit_return_type "Gtk::Adjustment"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the horizontal adjustment of the viewport.
   * @return The horizontal adjustment of @a viewport .
   "
      end

      operation 719017 "get_hadjustment"
	const public explicit_return_type "Gtk::Adjustment"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the horizontal adjustment of the viewport.
   * @return The horizontal adjustment of @a viewport .
   "
      end

      operation 719145 "get_vadjustment"
	public explicit_return_type "Gtk::Adjustment"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the vertical adjustment of the viewport.
   * @return The vertical adjustment of @a viewport .
   "
      end

      operation 719273 "get_vadjustment"
	const public explicit_return_type "Gtk::Adjustment"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the vertical adjustment of the viewport.
   * @return The vertical adjustment of @a viewport .
   "
      end

      operation 719401 "set_hadjustment"
	public explicit_return_type "void"
	nparams 1
	  param inout name "adjustment" explicit_type "Gtk::Adjustment"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the horizontal adjustment of the viewport.
   * @param adjustment A Gtk::Adjustment.
   "
      end

      operation 719529 "set_hadjustment"
	public explicit_return_type "void"
	nparams 1
	  param inout name "adjustment" explicit_type "Gtk::Adjustment"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the horizontal adjustment of the viewport.
   * @param adjustment A Gtk::Adjustment.
   "
      end

      operation 719657 "set_vadjustment"
	public explicit_return_type "void"
	nparams 1
	  param inout name "adjustment" explicit_type "Gtk::Adjustment"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the vertical adjustment of the viewport.
   * @param adjustment A Gtk::Adjustment.
   "
      end

      operation 719785 "set_vadjustment"
	public explicit_return_type "void"
	nparams 1
	  param inout name "adjustment" explicit_type "Gtk::Adjustment"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the vertical adjustment of the viewport.
   * @param adjustment A Gtk::Adjustment.
   "
      end

      operation 719913 "set_shadow_type"
	public explicit_return_type "void"
	nparams 1
	  param in name "type" type class_ref 284329 // ShadowType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the shadow type of the viewport.
   * @param type The new shadow type.
   "
      end

      operation 720041 "get_shadow_type"
	const public return_type class_ref 284329 // ShadowType
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the shadow type of the Gtk::Viewport. See
   * set_shadow_type().
   * @return The shadow type.
   "
      end

      operation 720169 "signal_set_scroll_adjustments"
	public explicit_return_type "Glib::SignalProxy2< void,Gtk::Adjustment*,Gtk::Adjustment* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 720297 "property_hadjustment"
	public explicit_return_type "Glib::PropertyProxy<Gtk::Adjustment*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 720425 "property_hadjustment"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Gtk::Adjustment*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 720553 "property_vadjustment"
	public explicit_return_type "Glib::PropertyProxy<Gtk::Adjustment*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 720681 "property_vadjustment"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Gtk::Adjustment*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 720809 "property_shadow_type"
	public explicit_return_type "Glib::PropertyProxy<ShadowType>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 720937 "property_shadow_type"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<ShadowType>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end
    end

    class 216617 "VPaned"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/paned.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * The Gtk::VPaned widget is a container widget with two children arranged
 * horizontally. The division between the two panes is adjustable by the
 * user by dragging a handle. See Gtk::Paned for details. 
 *
 * @ingroup Widgets
 "
      classrelation 188969 // <generalisation>
	relation 188969 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 188969 // <generalisation>
	  b parent class_ref 215081 // Paned
      end

      class 216745 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 216617 // VPaned
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 189097 // <realization>
	  relation 189097 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 189097 // <realization>
	    b parent class_ref 216617 // VPaned
	end
      end

      class 217001 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "VPaned_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 217129 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkVPaned"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 217257 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkVPanedClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 432041 "~VPaned"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 189481 // vpaned_class_ (<directional composition>)
	relation 189481 *-->
	  a role_name "vpaned_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 189481 // vpaned_class_ (<directional composition>)
	  b parent class_ref 217001 // CppClassType
      end

      operation 432169 "VPaned"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 216617 // VPaned
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 432297 "operator ="
	private return_type class_ref 216617 // VPaned
	nparams 1
	  param in name "" type class_ref 216617 // VPaned
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 432425 "VPaned"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 432553 "VPaned"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkVPaned"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 432681 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 432809 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 432937 "gobj"
	cpp_inline public explicit_return_type "GtkVPaned"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkVPaned*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 433065 "gobj"
	const cpp_inline public explicit_return_type "GtkVPaned"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkVPaned*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 433193 "VPaned"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end
    end

    class 226217 "VRuler"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/ruler.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Vertical Ruler
 *
 * @ingroup Widgets
 "
      classrelation 196265 // <generalisation>
	relation 196265 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 196265 // <generalisation>
	  b parent class_ref 225449 // Ruler
      end

      class 226345 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 226217 // VRuler
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 196393 // <realization>
	  relation 196393 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 196393 // <realization>
	    b parent class_ref 226217 // VRuler
	end
      end

      class 226601 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "VRuler_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 226729 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkVRuler"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 226857 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkVRulerClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 463657 "~VRuler"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 196777 // vruler_class_ (<directional composition>)
	relation 196777 *-->
	  a role_name "vruler_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 196777 // vruler_class_ (<directional composition>)
	  b parent class_ref 226601 // CppClassType
      end

      operation 463785 "VRuler"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 226217 // VRuler
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 463913 "operator ="
	private return_type class_ref 226217 // VRuler
	nparams 1
	  param in name "" type class_ref 226217 // VRuler
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 464041 "VRuler"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 464169 "VRuler"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkVRuler"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 464297 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 464425 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 464553 "gobj"
	cpp_inline public explicit_return_type "GtkVRuler"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkVRuler*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 464681 "gobj"
	const cpp_inline public explicit_return_type "GtkVRuler"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkVRuler*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 464809 "VRuler"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end
    end

    class 228521 "VScale"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/scale.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* A vertical slider for selecting values.
 * 
 * The Gtk::VScale widget is used to allow the user to select a value using a
 * vertical slider. See the Gtk::Scale documentation for more information
 * on how to use a Gtk::VScale.
 *
 * @ingroup Widgets
 "
      classrelation 198185 // <generalisation>
	relation 198185 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 198185 // <generalisation>
	  b parent class_ref 227753 // Scale
      end

      class 228649 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 228521 // VScale
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 198313 // <realization>
	  relation 198313 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 198313 // <realization>
	    b parent class_ref 228521 // VScale
	end
      end

      class 228905 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "VScale_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 229033 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkVScale"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 229161 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkVScaleClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 469929 "~VScale"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 198697 // vscale_class_ (<directional composition>)
	relation 198697 *-->
	  a role_name "vscale_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 198697 // vscale_class_ (<directional composition>)
	  b parent class_ref 228905 // CppClassType
      end

      operation 470057 "VScale"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 228521 // VScale
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 470185 "operator ="
	private return_type class_ref 228521 // VScale
	nparams 1
	  param in name "" type class_ref 228521 // VScale
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 470313 "VScale"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 470441 "VScale"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkVScale"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 470569 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 470697 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 470825 "gobj"
	cpp_inline public explicit_return_type "GtkVScale"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkVScale*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 470953 "gobj"
	const cpp_inline public explicit_return_type "GtkVScale"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkVScale*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 471081 "VScale"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 471209 "VScale"
	public explicit_return_type ""
	nparams 3
	  param in name "min" explicit_type "double"
	  param in name "max" explicit_type "double"
	  param in name "step" explicit_type "double"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throw}{
${body}}
"
	
	
	
	
	comment "*
  * Construct a VScale with the given minimum and maximum. The step size is the
  * distance the slider moves when the arrow keys are used to adjust the scale
  * value.
  "
      end

      operation 471337 "VScale"
	public explicit_return_type ""
	nparams 1
	  param inout name "adjustment" type class_ref 132521 // Adjustment
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end
    end

    class 282537 "VScrollbar"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/scrollbar.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::
* A vertical scrollbar.
 *
 * The Gtk::VScrollbar widget is a widget arranged vertically creating a
 * scrollbar. See Gtk::Scrollbar for details on scrollbars.
 *
 * A Gtk::Adjustment may may be passed to the constructor  to handle the
 * adjustment of the scrollbar. If not specified, one will be created for
 * you. See Gtk::Adjustment for details.
 *
 * @ingroup Widgets
 "
      classrelation 200105 // <generalisation>
	relation 200105 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 200105 // <generalisation>
	  b parent class_ref 230057 // Scrollbar
      end

      class 230825 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 282537 // VScrollbar
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 200233 // <realization>
	  relation 200233 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 200233 // <realization>
	    b parent class_ref 282537 // VScrollbar
	end
      end

      class 231081 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "VScrollbar_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 231209 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkVScrollbar"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 231337 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkVScrollbarClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 474153 "~VScrollbar"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 200617 // vscrollbar_class_ (<directional composition>)
	relation 200617 *-->
	  a role_name "vscrollbar_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 200617 // vscrollbar_class_ (<directional composition>)
	  b parent class_ref 231081 // CppClassType
      end

      operation 474281 "VScrollbar"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 282537 // VScrollbar
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 474409 "operator ="
	private return_type class_ref 282537 // VScrollbar
	nparams 1
	  param in name "" type class_ref 282537 // VScrollbar
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 474537 "VScrollbar"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 474665 "VScrollbar"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkVScrollbar"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 474793 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 474921 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 475049 "gobj"
	cpp_inline public explicit_return_type "GtkVScrollbar"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkVScrollbar*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 475177 "gobj"
	const cpp_inline public explicit_return_type "GtkVScrollbar"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkVScrollbar*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 475305 "VScrollbar"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 475433 "VScrollbar"
	public explicit_return_type ""
	nparams 1
	  param inout name "gtkadjustment" type class_ref 132521 // Adjustment
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end
    end

    class 234153 "VSeparator"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/separator.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Vertical line widget.
 * Filler widget used to separate widgets with a visible line.
 * This widget has no window and receives no configuration events.
 * It should be considered a leaf widget.
 * @ingroup Widgets
 "
      classrelation 203049 // <generalisation>
	relation 203049 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 203049 // <generalisation>
	  b parent class_ref 233385 // Separator
      end

      class 234281 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 234153 // VSeparator
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 203177 // <realization>
	  relation 203177 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 203177 // <realization>
	    b parent class_ref 234153 // VSeparator
	end
      end

      class 234537 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "VSeparator_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 234665 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkVSeparator"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 234793 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkVSeparatorClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 487465 "~VSeparator"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 203561 // vseparator_class_ (<directional composition>)
	relation 203561 *-->
	  a role_name "vseparator_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 203561 // vseparator_class_ (<directional composition>)
	  b parent class_ref 234537 // CppClassType
      end

      operation 487593 "VSeparator"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 234153 // VSeparator
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 487721 "operator ="
	private return_type class_ref 234153 // VSeparator
	nparams 1
	  param in name "" type class_ref 234153 // VSeparator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 487849 "VSeparator"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 487977 "VSeparator"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkVSeparator"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 488105 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 488233 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 488361 "gobj"
	cpp_inline public explicit_return_type "GtkVSeparator"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkVSeparator*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 488489 "gobj"
	const cpp_inline public explicit_return_type "GtkVSeparator"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkVSeparator*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 488617 "VSeparator"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end
    end

    class 130089 "Widget"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/widget.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* @defgroup Widgets Widgets
 
* Abstract Widget (Base class for all widgets)
 *
 * As the base class of all widgets this contains all of the properties
 * and methods common to all widgets.  It is an abstract class that
 * can not be instantiated.
 *
 * Important part of widgets are the *_event signals and virtual methods
 * that every widget have. Those are events coming directly from gdk and
 * thus also from XLib. By overriding those virtual methods you can
 * trap everything a widget can ever do.
 * In order to capture events from a widget, the event mask must
 * first be set with ().
 *
 * Only widgets with a Gdk::Window on the server side are allowed to
 * capture events.  Widgets in the Gtk::Misc group for example lack
 * a Gdk::Window.
 "
      classrelation 233257 // <generalisation>
	relation 233257 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 233257 // <generalisation>
	  b parent class_ref 132649 // Object
      end

      class 279593 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 130089 // Widget
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 233513 // <realization>
	  relation 233513 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 233513 // <realization>
	    b parent class_ref 130089 // Widget
	end
      end

      class 279849 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Widget_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 279977 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkWidget"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 280105 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkWidgetClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 721449 "~Widget"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 233897 // widget_class_ (<directional composition>)
	relation 233897 *-->
	  a role_name "widget_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 233897 // widget_class_ (<directional composition>)
	  b parent class_ref 279849 // CppClassType
      end

      operation 721577 "Widget"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 721705 "operator ="
	private return_type class_ref 130089 // Widget
	nparams 1
	  param in name "" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 721833 "Widget"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 721961 "Widget"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkWidget"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 722089 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 722217 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 722345 "gobj"
	cpp_inline public explicit_return_type "GtkWidget"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkWidget*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 722473 "gobj"
	const cpp_inline public explicit_return_type "GtkWidget"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkWidget*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 722601 "on_show"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 722729 "on_hide"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 722857 "on_map"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 722985 "on_unmap"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 723113 "on_realize"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 723241 "on_unrealize"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 723369 "on_size_request"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "requisition" explicit_type "Requisition"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 723497 "on_size_allocate"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "allocation" explicit_type "Allocation"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 723625 "on_state_changed"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "previous_state" explicit_type "Gtk::StateType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 723753 "on_parent_changed"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "previous_parent" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 723881 "on_hierarchy_changed"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "previous_toplevel" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 724009 "on_style_changed"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "previous_style" explicit_type "Glib::RefPtr<Style>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 724137 "on_direction_changed"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "direction" type class_ref 280233 // TextDirection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 724265 "on_grab_notify"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "was_grabbed" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 724393 "on_child_notify"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "pspec" explicit_type "GParamSpec"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 724521 "on_mnemonic_activate"
	cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param in name "group_cycling" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 724649 "on_grab_focus"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 724777 "on_focus"
	cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param in name "direction" type class_ref 280361 // DirectionType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 724905 "on_event"
	cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param inout name "event" explicit_type "GdkEvent"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 725033 "on_button_press_event"
	cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param inout name "event" explicit_type "GdkEventButton"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 725161 "on_button_release_event"
	cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param inout name "event" explicit_type "GdkEventButton"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 725289 "on_scroll_event"
	cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param inout name "event" explicit_type "GdkEventScroll"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 725417 "on_motion_notify_event"
	cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param inout name "event" explicit_type "GdkEventMotion"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 725545 "on_delete_event"
	cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param inout name "event" explicit_type "GdkEventAny"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 725673 "on_expose_event"
	cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param inout name "event" explicit_type "GdkEventExpose"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 725801 "on_key_press_event"
	cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param inout name "event" explicit_type "GdkEventKey"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 725929 "on_key_release_event"
	cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param inout name "event" explicit_type "GdkEventKey"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 726057 "on_enter_notify_event"
	cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param inout name "event" explicit_type "GdkEventCrossing"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 726185 "on_leave_notify_event"
	cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param inout name "event" explicit_type "GdkEventCrossing"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 726313 "on_configure_event"
	cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param inout name "event" explicit_type "GdkEventConfigure"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 726441 "on_focus_in_event"
	cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param inout name "event" explicit_type "GdkEventFocus"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 726569 "on_focus_out_event"
	cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param inout name "event" explicit_type "GdkEventFocus"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 726697 "on_map_event"
	cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param inout name "event" explicit_type "GdkEventAny"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 726825 "on_unmap_event"
	cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param inout name "event" explicit_type "GdkEventAny"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 726953 "on_property_notify_event"
	cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param inout name "event" explicit_type "GdkEventProperty"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 727081 "on_selection_clear_event"
	cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param inout name "event" explicit_type "GdkEventSelection"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 727209 "on_selection_request_event"
	cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param inout name "event" explicit_type "GdkEventSelection"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 727337 "on_selection_notify_event"
	cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param inout name "event" explicit_type "GdkEventSelection"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 727465 "on_proximity_in_event"
	cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param inout name "event" explicit_type "GdkEventProximity"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 727593 "on_proximity_out_event"
	cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param inout name "event" explicit_type "GdkEventProximity"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 727721 "on_visibility_notify_event"
	cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param inout name "event" explicit_type "GdkEventVisibility"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 727849 "on_client_event"
	cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param inout name "event" explicit_type "GdkEventClient"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 727977 "on_no_expose_event"
	cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param inout name "event" explicit_type "GdkEventAny"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 728105 "on_window_state_event"
	cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param inout name "event" explicit_type "GdkEventWindowState"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 728233 "on_selection_get"
	cpp_virtual protected explicit_return_type "void"
	nparams 3
	  param inout name "selection_data" type class_ref 280489 // SelectionData
	  param in name "info" explicit_type "guint"
	  param in name "time" explicit_type "guint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 728361 "on_selection_received"
	cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param in name "selection_data" type class_ref 280489 // SelectionData
	  param in name "time" explicit_type "guint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 728489 "on_drag_begin"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "context" explicit_type "Glib::RefPtr<Gdk::DragContext>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 728617 "on_drag_end"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "context" explicit_type "Glib::RefPtr<Gdk::DragContext>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 728745 "on_drag_data_get"
	cpp_virtual protected explicit_return_type "void"
	nparams 4
	  param in name "context" explicit_type "Glib::RefPtr<Gdk::DragContext>"
	  param inout name "selection_data" type class_ref 280489 // SelectionData
	  param in name "info" explicit_type "guint"
	  param in name "time" explicit_type "guint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 728873 "on_drag_data_delete"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "context" explicit_type "Glib::RefPtr<Gdk::DragContext>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 729001 "on_drag_leave"
	cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param in name "context" explicit_type "Glib::RefPtr<Gdk::DragContext>"
	  param in name "time" explicit_type "guint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 729129 "on_drag_motion"
	cpp_virtual protected explicit_return_type "bool"
	nparams 4
	  param in name "context" explicit_type "Glib::RefPtr<Gdk::DragContext>"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "time" explicit_type "guint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 729257 "on_drag_drop"
	cpp_virtual protected explicit_return_type "bool"
	nparams 4
	  param in name "context" explicit_type "Glib::RefPtr<Gdk::DragContext>"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "time" explicit_type "guint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 729385 "on_drag_data_received"
	cpp_virtual protected explicit_return_type "void"
	nparams 6
	  param in name "context" explicit_type "Glib::RefPtr<Gdk::DragContext>"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "selection_data" type class_ref 280489 // SelectionData
	  param in name "info" explicit_type "guint"
	  param in name "time" explicit_type "guint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 729513 "on_get_accessible"
	cpp_virtual protected explicit_return_type "Glib::RefPtr<Atk::Object>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 729641 "on_screen_changed"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "previous_screen" explicit_type "Glib::RefPtr<Gdk::Screen>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      classrelation 234025 // <dependency>
	relation 234025 -_->
	  stereotype "friend"
	  a default
	    cpp default "${type}"
	    classrelation_ref 234025 // <dependency>
	  b parent class_ref 206377 // Main
      end

      operation 729769 "set_scroll_adjustments"
	public explicit_return_type "bool"
	nparams 2
	  param inout name "hadjustment" type class_ref 132521 // Adjustment
	  param inout name "vadjustment" type class_ref 132521 // Adjustment
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* For widgets that support scrolling, sets the scroll adjustments and
   * returns <tt>true</tt>.  For widgets that don't support scrolling, does
   * nothing and returns <tt>false</tt>. Widgets that don't support scrolling
   * can be scrolled by placing them in a Gtk::Viewport, which does
   * support scrolling.
   * @param hadjustment An adjustment for horizontal scrolling, or <tt>0</tt>.
   * @param vadjustment An adjustment for vertical scrolling, or <tt>0</tt>.
   * @return <tt>true</tt> if the widget supports scrolling.
   "
      end

      operation 729897 "show"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Flags a widget to be displayed. Any widget that isn't shown will
   * not appear on the screen. If you want to show all the widgets in a
   * container, it's easier to call show_all() on the
   * container, instead of individually showing the widgets.
   * 
   * Remember that you have to show the containers containing a widget,
   * in addition to the widget itself, before it will appear onscreen.
   * 
   * When a toplevel container is shown, it is immediately realized and
   * mapped; other shown widgets are realized and mapped when their
   * toplevel container is realized and mapped.
   "
      end

      operation 730025 "show_now"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Shows a widget. If the widget is an unmapped toplevel widget
   * (i.e. a Gtk::Window that has not yet been shown), enter the main
   * loop and wait for the window to actually be mapped. Be careful;
   * because the main loop is running, anything can happen during
   * this function.
   "
      end

      operation 730153 "hide"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Reverses the effects of show(), causing the widget to be
   * hidden (invisible to the user).
   "
      end

      operation 730281 "show_all"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Recursively shows a widget, and any child widgets (if the widget is
   * a container).
   "
      end

      operation 730409 "hide_all"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Recursively hides a widget and any child widgets.
   "
      end

      operation 730537 "queue_draw"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " QUEUE DRAWS 
* Equivalent to calling queue_draw_area() for the
   * entire area of a widget.
   "
      end

      operation 730665 "queue_draw_area"
	public explicit_return_type "void"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Invalidates the rectangular area of @a widget  defined by @a x , @a y ,
   *  @a width  and @a height  by calling gdk_window_invalidate_rect() on the
   * widget's window and all its child windows.  Once the main loop
   * becomes idle (after the current batch of events has been processed,
   * roughly), the window will receive expose events for the union of
   * all regions that have been invalidated.
   * 
   * Normally you would only use this function in widget
   * implementations. You might also use it, or
   * gdk_window_invalidate_rect() directly, to schedule a redraw of a
   * Gtk::DrawingArea or some portion thereof.
   * 
   * Frequently you can just call gdk_window_invalidate_rect() or
   * gdk_window_invalidate_region() instead of this function. Those
   * functions will invalidate only a single window, instead of the
   * widget and all its children.
   * 
   * The advantage of adding to the invalidated region compared to
   * simply drawing immediately is efficiency; using an invalid region
   * ensures that you only have to redraw one time.
   * @param x X coordinate of upper-left corner of rectangle to redraw.
   * @param y Y coordinate of upper-left corner of rectangle to redraw.
   * @param width Width of region to draw.
   * @param height Height of region to draw.
   "
      end

      operation 730793 "queue_resize"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* This function is only for use in widget implementations.
   * Flags a widget to have its size renegotiated; should
   * be called when a widget for some reason has a new size request.
   * For example, when you change the text in a Gtk::Label, Gtk::Label
   * queues a resize to ensure there's enough space for the new text.
   "
      end

      operation 730921 "size_request"
	public explicit_return_type "void"
	nparams 1
	  param in name "requisition" explicit_type "Requisition"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* This function is typically used when implementing a Gtk::Container
   * subclass.  Obtains the preferred size of a widget. The container
   * uses this information to arrange its child widgets and decide what
   * size allocations to give them with size_allocate().
   * 
   * You can also call this function from an application, with some
   * caveats. Most notably, getting a size request requires the widget
   * to be associated with a screen, because font information may be
   * needed. Multihead-aware applications should keep this in mind.
   * 
   * Also remember that the size request is not necessarily the size
   * a widget will actually be allocated.
   * 
   * See also get_child_requisition().
   * @param requisition A Gtk::Requisition to be filled in.
   "
      end

      operation 731049 "size_allocate"
	public explicit_return_type "void"
	nparams 1
	  param in name "allocation" explicit_type "Allocation"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* This function is only used by Gtk::Container subclasses, to assign a size
   * and position to their child widgets.
   * @param allocation Position and size to be allocated to @a widget .
   "
      end

      operation 731177 "add_accelerator"
	public explicit_return_type "void"
	nparams 5
	  param in name "accel_signal" explicit_type "Glib::ustring"
	  param in name "accel_group" explicit_type "Glib::RefPtr<AccelGroup>"
	  param in name "accel_key" explicit_type "guint"
	  param in name "accel_mods" explicit_type "Gdk::ModifierType"
	  param in name "accel_flags" type class_ref 280617 // AccelFlags
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Installs an accelerator for this @a widget  in @a accel_group  that causes
   *  @a accel_signal  to be emitted if the accelerator is activated.
   * The @a accel_group  needs to be added to the widget's toplevel via
   * Gtk::Window::add_accel_group(), and the signal must be of type G::RUN_ACTION.
   * Accelerators added through this function are not user changeable during
   * runtime. If you want to support accelerators that can be changed by the
   * user, use gtk_accel_map_add_entry() and set_accel_path() or
   * Gtk::MenuItem::set_accel_path() instead.
   * @param accel_signal Widget signal to emit on accelerator activation.
   * @param accel_group Accel group for this widget, added to its toplevel.
   * @param accel_key GDK keyval of the accelerator.
   * @param accel_mods Modifier key combination of the accelerator.
   * @param accel_flags Flag accelerators, e.g. Gtk::ACCEL_VISIBLE.
   "
      end

      operation 731305 "remove_accelerator"
	public explicit_return_type "bool"
	nparams 3
	  param in name "accel_group" explicit_type "Glib::RefPtr<AccelGroup>"
	  param in name "accel_key" explicit_type "guint"
	  param in name "accel_mods" explicit_type "Gdk::ModifierType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Removes an accelerator from @a widget , previously installed with
   * add_accelerator().
   * @param accel_group Accel group for this widget.
   * @param accel_key GDK keyval of the accelerator.
   * @param accel_mods Modifier key combination of the accelerator.
   * @return Whether an accelerator was installed and could be removed.
   "
      end

      operation 731433 "set_accel_path"
	public explicit_return_type "void"
	nparams 2
	  param in name "accel_path" explicit_type "Glib::ustring"
	  param in name "accel_group" explicit_type "Glib::RefPtr<AccelGroup>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Given an accelerator group, @a accel_group , and an accelerator path,
   *  @a accel_path , sets up an accelerator in @a accel_group  so whenever the
   * key binding that is defined for @a accel_path  is pressed, @a widget 
   * will be activated.  This removes any accelerators (for any
   * accelerator group) installed by previous calls to
   * set_accel_path(). Associating accelerators with
   * paths allows them to be modified by the user and the modifications
   * to be saved for future use. (See gtk_accel_map_save().)
   * 
   * This function is a low level function that would most likely
   * be used by a menu creation system like Gtk::ItemFactory. If you
   * use Gtk::ItemFactory, setting up accelerator paths will be done
   * automatically.
   * 
   * Even when you you aren't using Gtk::ItemFactory, if you only want to
   * set up accelerators on menu items Gtk::MenuItem::set_accel_path()
   * provides a somewhat more convenient interface.
   * @param accel_path Path used to look up the the accelerator.
   * @param accel_group A Gtk::AccelGroup.
   "
      end

      operation 731561 "mnemonic_activate"
	public explicit_return_type "bool"
	nparams 1
	  param in name "group_cycling" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "GList* gtk_widget_list_accel_closures();
TODO: Or maybe it is useless: gboolean gtk_widget_can_activate_accel(GtkWidget *widget, guint signal_id)"
      end

      operation 731689 "event"
	public explicit_return_type "bool"
	nparams 1
	  param inout name "event" explicit_type "GdkEvent"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO: Use C++ type
* Rarely-used function. This function is used to emit
   * the event signals on a widget (those signals should never
   * be emitted without using this function to do so).
   * If you want to synthesize an event though, don't use this function;
   * instead, use gtk_main_do_event() so the event will behave as if
   * it were in the event queue. Don't synthesize expose events; instead,
   * use gdk_window_invalidate_rect() to invalidate a region of the
   * window.
   * @param event A Gdk::Event.
   * @return Return from the event signal emission (<tt>true</tt> if the event was handled).
   "
      end

      operation 731817 "send_expose"
	public explicit_return_type "int"
	nparams 1
	  param inout name "event" explicit_type "GdkEvent"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Very rarely-used function. This function is used to emit
   * an expose event signals on a widget. This function is not
   * normally used directly. The only time it is used is when
   * propagating an expose event to a child NO_WINDOW widget, and
   * that is normally done using Gtk::Container::propagate_expose().
   * 
   * If you want to force an area of a window to be redrawn, 
   * use gdk_window_invalidate_rect() or gdk_window_invalidate_region().
   * To cause the redraw to be done immediately, follow that call
   * with a call to gdk_window_process_updates().
   * @param event A expose Gdk::Event.
   * @return Return from the event signal emission (<tt>true</tt> if the event was handled).
   "
      end

      operation 731945 "activate"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* For widgets that can be \"activated\" (buttons, menu items, etc.)
   * this function activates them. Activation is what happens when you
   * press Enter on a widget during key navigation. If @a widget  isn't 
   * activatable, the function returns <tt>false</tt>.
   * @return <tt>true</tt> if the widget was activatable.
   "
      end

      operation 732073 "reparent"
	public explicit_return_type "void"
	nparams 1
	  param inout name "new_parent" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Moves a widget from one Gtk::Container to another, handling reference
   * count issues to avoid destroying the widget.
   * @param new_parent A Gtk::Container to move the widget into.
   "
      end

      operation 732201 "intersect"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "area" explicit_type "Gdk::Rectangle"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 732329 "intersect"
	const public explicit_return_type "bool"
	nparams 2
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param inout name "intersection" explicit_type "Gdk::Rectangle"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Computes the intersection of a @a widget 's area and @a area , storing
   * the intersection in @a intersection , and returns <tt>true</tt> if there was
   * an intersection.  @a intersection  may be <tt>0</tt> if you're only
   * interested in whether there was an intersection.
   * @param area A rectangle.
   * @param intersection Rectangle to store intersection of @a widget  and @a area .
   * @return <tt>true</tt> if there was an intersection.
   "
      end

      operation 732457 "region_intersect"
	const public explicit_return_type "Gdk::Region"
	nparams 1
	  param in name "region" explicit_type "Gdk::Region"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Computes the intersection of a @a widget 's area and @a region , returning
   * the intersection. The result may be empty, use gdk_region_empty() to
   * check.
   * @param region A Gdk::Region, in the same coordinate system as 
   *  @a widget -&gt;allocation. That is, relative to @a widget -&gt;window
   * for NO_WINDOW widgets; relative to the parent window
   * of @a widget -&gt;window for widgets with their own window.
   * @return A newly allocated region holding the intersection of @a widget 
   * and @a region . The coordinates of the return value are
   * relative to @a widget -&gt;window for NO_WINDOW widgets, and
   * relative to the parent window of @a widget -&gt;window for
   * widgets with their own window.
   "
      end

      operation 732585 "freeze_child_notify"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Stops emission of \"child-notify\" signals on @a widget . The signals are
   * queued until thaw_child_notify() is called on @a widget . 
   * 
   * This is the analogue of Glib::object_freeze_notify() for child properties.
   "
      end

      operation 732713 "child_notify"
	public explicit_return_type "void"
	nparams 1
	  param in name "child_property" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Emits a \"child-notify\" signal for the 
   * child property @a child_property  
   * on @a widget .
   * 
   * This is the analogue of Glib::object_notify() for child properties.
   * @param child_property The name of a child property installed on the 
   * class of @a widget &lt;!-- --&gt;'s parent.
   "
      end

      operation 732841 "thaw_child_notify"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Reverts the effect of a previous call to freeze_child_notify().
   * This causes all queued \"child-notify\" signals on @a widget  to be emitted.
   "
      end

      operation 732969 "is_focus"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Determines if the widget is the focus widget within its
   * toplevel. (This does not mean that the HAS_FOCUS flag is
   * necessarily set; HAS_FOCUS will only be set if the
   * toplevel widget additionally has the global input focus.)
   * @return <tt>true</tt> if the widget is the focus widget.
   "
      end

      operation 733097 "grab_focus"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Causes @a widget  to have the keyboard focus for the Gtk::Window it's
   * inside. @a widget  must be a focusable widget, such as a Gtk::Entry;
   * something like Gtk::Frame won't work. (More precisely, it must have the
   * Gtk::CAN_FOCUS flag set.)
   "
      end

      operation 733225 "grab_default"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Causes @a widget  to become the default widget. @a widget  must have the
   * Gtk::CAN_DEFAULT flag set; typically you have to set this flag
   * yourself by calling <tt>GTK_WIDGET_SET_FLAGS ( @a widget ,
   * GTK_CAN_DEFAULT)</tt>.  The default widget is activated when the user
   * presses Enter in a window.  Default widgets must be activatable,
   * that is, activate() should affect them.
   "
      end

      operation 733353 "add_modal_grab"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Block events to everything else than this widget and its children. This
   * way you can get modal behaviour (usually not recommended). One practical
   * example could be when implementing a key-binding widget that needs
   * exclusive access to the key combination that the user presses next.
   *
   * Calls to add_modal_grab should be paired with calls to remove_modal_grab.
   "
      end

      operation 733481 "remove_modal_grab"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Remove the modal grab of the widget in case it was previously grabbed.
   "
      end

      operation 733609 "get_current_modal_grab"
	class_operation public return_type class_ref 130089 // Widget
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieve the widget which is currently grabbing all events.
   "
      end

      operation 733737 "set_name"
	public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Widgets can be named, which allows you to refer to them from a
   * gtkrc file. You can apply a style to widgets with a particular name
   * in the gtkrc file. See the documentation for gtkrc files (on the
   * same page as the docs for Gtk::RcStyle).
   * 
   * Note that widget names are separated by periods in paths (see 
   * path()), so names with embedded periods may cause confusion.
   * @param name Name for the widget.
   "
      end

      operation 733865 "unset_name"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 733993 "get_name"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the name of a widget. See set_name() for the
   * significance of widget names.
   * @return Name of the widget. This string is owned by GTK+ and
   * should not be modified or freed.
   "
      end

      operation 734121 "set_state"
	public explicit_return_type "void"
	nparams 1
	  param in name "state" explicit_type "Gtk::StateType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* This function is for use in widget implementations. Sets the state
   * of a widget (insensitive, prelighted, etc.) Usually you should set
   * the state using wrapper functions such as set_sensitive().
   * @param state New state for @a widget .
   "
      end

      operation 734249 "set_sensitive"
	public explicit_return_type "void"
	nparams 1
	  param in name "sensitive" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the sensitivity of a widget. A widget is sensitive if the user
   * can interact with it. Insensitive widgets are \"grayed out\" and the
   * user can't interact with them. Insensitive widgets are known as
   * \"inactive\", \"disabled\", or \"ghosted\" in some other toolkits.
   * @param sensitive <tt>true</tt> to make the widget sensitive.
   "
      end

      operation 734377 "set_app_paintable"
	public explicit_return_type "void"
	nparams 1
	  param in name "app_paintable" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 734505 "set_double_buffered"
	public explicit_return_type "void"
	nparams 1
	  param in name "double_buffered" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Widgets are double buffered by default; you can use this function
   * to turn off the buffering. \"Double buffered\" simply means that
   * gdk_window_begin_paint_region() and gdk_window_end_paint() are called
   * automatically around expose events sent to the
   * widget. gdk_window_begin_paint() diverts all drawing to a widget's
   * window to an offscreen buffer, and gdk_window_end_paint() draws the
   * buffer to the screen. The result is that users see the window
   * update in one smooth step, and don't see individual graphics
   * primitives being rendered.
   * 
   * In very simple terms, double buffered widgets don't flicker,
   * so you would only use this function to turn off double buffering
   * if you had special needs and really knew what you were doing.
   * @param double_buffered <tt>true</tt> to double-buffer a widget.
   "
      end

      operation 734633 "set_redraw_on_allocate"
	public explicit_return_type "void"
	nparams 1
	  param in name "redraw_on_allocate" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets whether a when a widgets size allocation changes, the entire
   * widget is queued for drawing. By default, this setting is <tt>true</tt> and
   * the entire widget is redrawn on every size change. If your widget
   * leaves the upper left unchanged when made bigger, turning this
   * setting on will improve performance.
   * 
   * Note that for NO_WINDOW widgets setting this flag to <tt>false</tt> turns
   * off all allocation on resizing: the widget will not even redraw if
   * its position changes; this is to allow containers that don't draw
   * anything to avoid excess invalidations. If you set this flag on a
   * NO_WINDOW widget that <em>does</em> draw on @a widget -&gt;window, 
   * you are responsible for invalidating both the old and new allocation 
   * of the widget when the widget is moved and responsible for invalidating
   * regions newly when the widget increases size.
   * @param redraw_on_allocate If <tt>true</tt>, the entire widget will be redrawn
   * when it is allocated to a new size. Otherwise, only the
   * new portion of the widget will be redrawn.
   "
      end

      operation 734761 "set_child_visible"
	public explicit_return_type "void"
	nparams 1
	  param in name "is_visible" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets whether @a widget  should be mapped along with its when its parent
   * is mapped and @a widget  has been shown with show(). 
   * 
   * The child visibility can be set for widget before it is added to
   * a container with set_parent(), to avoid mapping
   * children unnecessary before immediately unmapping them. However
   * it will be reset to its default state of <tt>true</tt> when the widget
   * is removed from a container.
   * 
   * Note that changing the child visibility of a widget does not
   * queue a resize on the widget. Most of the time, the size of
   * a widget is computed from all visible children, whether or
   * not they are mapped. If this is not the case, the container
   * can queue a resize itself.
   * 
   * This function is only useful for container implementations and
   * never should be called by an application.
   * @param is_visible If <tt>true</tt>, @a widget  should be mapped along with its parent.
   "
      end

      operation 734889 "get_child_visible"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the value set with set_child_visible().
   * If you feel a need to use this function, your code probably
   * needs reorganization. 
   * 
   * This function is only useful for container implementations and
   * never should be called by an application.
   * @return <tt>true</tt> if the widget is mapped with the parent.
   "
      end

      operation 735017 "get_parent"
	public return_type class_ref 280745 // Container
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the parent container of @a widget .
   * @return The parent container of @a widget , or <tt>0</tt>.
   "
      end

      operation 735145 "get_parent"
	const public return_type class_ref 280745 // Container
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the parent container of @a widget .
   * @return The parent container of @a widget , or <tt>0</tt>.
   "
      end

      operation 735273 "get_parent_window"
	public explicit_return_type "Glib::RefPtr<Gdk::Window>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets @a widget 's parent window.
   * @return The parent window of @a widget .
   "
      end

      operation 735401 "get_parent_window"
	const public explicit_return_type "Glib::RefPtr<const Gdk::Window>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets @a widget 's parent window.
   * @return The parent window of @a widget .
   "
      end

      operation 735529 "set_parent_window"
	public explicit_return_type "void"
	nparams 1
	  param in name "parent_window" explicit_type "Glib::RefPtr<const Gdk::Window>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets a non default parent window for @a widget .
   * @param parent_window The new parent window.
   "
      end

      operation 735657 "child_focus"
	public explicit_return_type "bool"
	nparams 1
	  param in name "direction" type class_ref 280361 // DirectionType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* This function is used by custom widget implementations; if you're
   * writing an app, you'd use grab_focus() to move the focus
   * to a particular widget, and Gtk::Container::set_focus_chain() to
   * change the focus tab order. So you may want to investigate those
   * functions instead.
   * 
   * child_focus() is called by containers as the user moves
   * around the window using keyboard shortcuts. @a direction  indicates
   * what kind of motion is taking place (up, down, left, right, tab
   * forward, tab backward).  child_focus() invokes the
   * \"focus\" signal on Gtk::Widget; widgets override the default handler
   * for this signal in order to implement appropriate focus behavior.
   * 
   * The \"focus\" default handler for a widget should return <tt>true</tt> if
   * moving in @a direction  left the focus on a focusable location inside
   * that widget, and <tt>false</tt> if moving in @a direction  moved the focus
   * outside the widget. If returning <tt>true</tt>, widgets normally
   * call grab_focus() to place the focus accordingly;
   * if returning <tt>false</tt>, they don't modify the current focus location.
   * 
   * This function replaces gtk_container_focus() from GTK+ 1.2.  It was
   * necessary to check that the child was visible, sensitive, and
   * focusable before calling
   * gtk_container_focus(). child_focus() returns <tt>false</tt> if
   * the widget is not currently in a focusable state, so there's no
   * need for those checks.
   * @param direction Direction of focus movement.
   * @return <tt>true</tt> if focus ended up inside @a widget .
   "
      end

      operation 735785 "set_size_request"
	public explicit_return_type "void"
	nparams 2
	  param in name "width" explicit_type "int"
	    defaultvalue " -1"
	  param in name "height" explicit_type "int"
	    defaultvalue " -1"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the minimum size of a widget; that is, the widget's size
   * request will be @a width  by @a height . You can use this function to
   * force a widget to be either larger or smaller than it normally
   * would be.
   * 
   * In most cases, Gtk::Window::set_default_size() is a better choice for
   * toplevel windows than this function; setting the default size will
   * still allow users to shrink the window. Setting the size request
   * will force them to leave the window at least as large as the size
   * request. When dealing with window sizes,
   * Gtk::Window::set_geometry_hints() can be a useful function as well.
   * 
   * Note the inherent danger of setting any fixed size - themes,
   * translations into other languages, different fonts, and user action
   * can all change the appropriate size for a given widget. So, it's
   * basically impossible to hardcode a size that will always be
   * correct.
   * 
   * The size request of a widget is the smallest size a widget can
   * accept while still functioning well and drawing itself correctly.
   * However in some strange cases a widget may be allocated less than
   * its requested size, and in many cases a widget may be allocated more
   * space than it requested.
   * 
   * If the size request in a given direction is -1 (unset), then
   * the \"natural\" size request of the widget will be used instead.
   * 
   * Widgets can't actually be allocated a size less than 1 by 1, but
   * you can pass 0,0 to this function to mean \"as small as possible.\"
   * @param width Width @a widget  should request, or -1 to unset.
   * @param height Height @a widget  should request, or -1 to unset.
   "
      end

      operation 735913 "get_size_request"
	const public explicit_return_type "void"
	nparams 2
	  param inout name "width" explicit_type "int"
	  param inout name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the size request that was explicitly set for the widget using
   * set_size_request().  A value of -1 stored in @a width  or
   *  @a height  indicates that that dimension has not been set explicitly
   * and the natural requisition of the widget will be used intead. See
   * set_size_request(). To get the size a widget will
   * actually use, call size_request() instead of
   * this function.
   * @param width Return location for width, or <tt>0</tt>.
   * @param height Return location for height, or <tt>0</tt>.
   "
      end

      operation 736041 "set_events"
	public explicit_return_type "void"
	nparams 1
	  param in name "events" explicit_type "Gdk::EventMask"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the event mask (see Gdk::EventMask) for a widget. The event
   * mask determines which events a widget will receive. Keep in mind
   * that different widgets have different default event masks, and by
   * changing the event mask you may disrupt a widget's functionality,
   * so be careful. This function must be called while a widget is
   * unrealized. Consider add_events() for widgets that are
   * already realized, or if you want to preserve the existing event
   * mask. This function can't be used with Gtk::NO_WINDOW widgets;
   * to get events on those widgets, place them inside a Gtk::EventBox
   * and receive events on the event box.
   * @param events Event mask.
   "
      end

      operation 736169 "add_events"
	public explicit_return_type "void"
	nparams 1
	  param in name "events" explicit_type "Gdk::EventMask"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Adds the events in the bitfield @a events  to the event mask for
   *  @a widget . See set_events() for details.
   * @param events An event mask, see Gdk::EventMask.
   "
      end

      operation 736297 "set_extension_events"
	public explicit_return_type "void"
	nparams 1
	  param in name "mode" explicit_type "Gdk::ExtensionMode"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the extension events mask to @a mode . See Gdk::ExtensionMode
   * and gdk_input_set_extension_events().
   * @param mode Bitfield of extension events to receive.
   "
      end

      operation 736425 "get_extension_events"
	const public explicit_return_type "Gdk::ExtensionMode"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the extension events the widget will receive; see
   * gdk_input_set_extension_events().
   * @return Extension events for @a widget .
   "
      end

      operation 736553 "get_toplevel"
	public return_type class_ref 280745 // Container
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* This function returns the topmost widget in the container hierarchy
   *  @a widget  is a part of. If @a widget  has no parent widgets, it will be
   * returned as the topmost widget. No reference will be added to the
   * returned widget; it should not be unreferenced.
   * 
   * Note the difference in behavior vs. get_ancestor();
   * <tt>gtk_widget_get_ancestor (widget, GTK_TYPE_WINDOW)</tt> 
   * would return
   * <tt>0</tt> if @a widget  wasn't inside a toplevel window, and if the
   * window was inside a Gtk::Window-derived widget which was in turn
   * inside the toplevel Gtk::Window. While the second case may
   * seem unlikely, it actually happens when a Gtk::Plug is embedded
   * inside a Gtk::Socket within the same application.
   * 
   * To reliably find the toplevel Gtk::Window, use
   * get_toplevel() and check if the T::OPLEVEL flags
   * is set on the result.
   * @code
   * GtkWidget *toplevel = gtk_widget_get_toplevel (widget);
   * if (GTK_WIDGET_TOPLEVEL (toplevel))
   * {
   * [ Perform action on toplevel. ]
   * }
   * @endcode
   * @return The topmost ancestor of @a widget , or @a widget  itself if there's no ancestor.
   "
      end

      operation 736681 "get_toplevel"
	const public return_type class_ref 280745 // Container
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* This function returns the topmost widget in the container hierarchy
   *  @a widget  is a part of. If @a widget  has no parent widgets, it will be
   * returned as the topmost widget. No reference will be added to the
   * returned widget; it should not be unreferenced.
   * 
   * Note the difference in behavior vs. get_ancestor();
   * <tt>gtk_widget_get_ancestor (widget, GTK_TYPE_WINDOW)</tt> 
   * would return
   * <tt>0</tt> if @a widget  wasn't inside a toplevel window, and if the
   * window was inside a Gtk::Window-derived widget which was in turn
   * inside the toplevel Gtk::Window. While the second case may
   * seem unlikely, it actually happens when a Gtk::Plug is embedded
   * inside a Gtk::Socket within the same application.
   * 
   * To reliably find the toplevel Gtk::Window, use
   * get_toplevel() and check if the T::OPLEVEL flags
   * is set on the result.
   * @code
   * GtkWidget *toplevel = gtk_widget_get_toplevel (widget);
   * if (GTK_WIDGET_TOPLEVEL (toplevel))
   * {
   * [ Perform action on toplevel. ]
   * }
   * @endcode
   * @return The topmost ancestor of @a widget , or @a widget  itself if there's no ancestor.
   "
      end

      operation 736809 "get_ancestor"
	public return_type class_ref 130089 // Widget
	nparams 1
	  param in name "widget_type" explicit_type "GType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the first ancestor of @a widget  with type @a widget_type . For example,
   * <tt>gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)</tt> gets the 
   * first Gtk::Box that's
   * an ancestor of @a widget . No reference will be added to the returned widget;
   * it should not be unreferenced. See note about checking for a toplevel
   * Gtk::Window in the docs for get_toplevel().
   * 
   * Note that unlike is_ancestor(), get_ancestor() 
   * considers @a widget  to be an ancestor of itself.
   * @param widget_type Ancestor type.
   * @return The ancestor widget, or <tt>0</tt> if not found.
   "
      end

      operation 736937 "get_ancestor"
	const public return_type class_ref 130089 // Widget
	nparams 1
	  param in name "widget_type" explicit_type "GType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the first ancestor of @a widget  with type @a widget_type . For example,
   * <tt>gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)</tt> gets the 
   * first Gtk::Box that's
   * an ancestor of @a widget . No reference will be added to the returned widget;
   * it should not be unreferenced. See note about checking for a toplevel
   * Gtk::Window in the docs for get_toplevel().
   * 
   * Note that unlike is_ancestor(), get_ancestor() 
   * considers @a widget  to be an ancestor of itself.
   * @param widget_type Ancestor type.
   * @return The ancestor widget, or <tt>0</tt> if not found.
   "
      end

      operation 737065 "get_colormap"
	public explicit_return_type "Glib::RefPtr<Gdk::Colormap>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the colormap that will be used to render @a widget . No reference will
   * be added to the returned colormap; it should not be unreferenced.
   * @return The colormap used by @a widget .
   "
      end

      operation 737193 "get_visual"
	public explicit_return_type "Glib::RefPtr<Gdk::Visual>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the visual that will be used to render @a widget .
   * @return The visual for @a widget .
   "
      end

      operation 737321 "get_screen"
	public explicit_return_type "Glib::RefPtr<Gdk::Screen>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Get the Gdk::Screen from the toplevel window associated with
   * this widget. This function can only be called after the widget
   * has been added to a widget hierarchy with a Gtk::Window
   * at the top.
   * 
   * In general, you should only create screen specific
   * resources when a widget has been realized, and you should
   * free those resources when the widget is unrealized.
   * @return The Gdk::Screen for the toplevel for this widget.
   * 
   * Since: 2.2.
   "
      end

      operation 737449 "get_screen"
	const public explicit_return_type "Glib::RefPtr<const Gdk::Screen>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Get the Gdk::Screen from the toplevel window associated with
   * this widget. This function can only be called after the widget
   * has been added to a widget hierarchy with a Gtk::Window
   * at the top.
   * 
   * In general, you should only create screen specific
   * resources when a widget has been realized, and you should
   * free those resources when the widget is unrealized.
   * @return The Gdk::Screen for the toplevel for this widget.
   * 
   * Since: 2.2.
   "
      end

      operation 737577 "has_screen"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Checks whether there is a Gdk::Screen is associated with
   * this widget. All toplevel widgets have an associated
   * screen, and all widgets added into a heirarchy with a toplevel
   * window at the top.
   * @return <tt>true</tt> if there is a Gdk::Screen associcated
   * with the widget.
   * 
   * Since: 2.2.
   "
      end

      operation 737705 "get_display"
	public explicit_return_type "Glib::RefPtr<Gdk::Display>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Get the Gdk::Display for the toplevel window associated with
   * this widget. This function can only be called after the widget
   * has been added to a widget hierarchy with a Gtk::Window at the top.
   * 
   * In general, you should only create display specific
   * resources when a widget has been realized, and you should
   * free those resources when the widget is unrealized.
   * @return The Gdk::Display for the toplevel for this widget.
   * 
   * Since: 2.2.
   "
      end

      operation 737833 "get_display"
	const public explicit_return_type "Glib::RefPtr<const Gdk::Display>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Get the Gdk::Display for the toplevel window associated with
   * this widget. This function can only be called after the widget
   * has been added to a widget hierarchy with a Gtk::Window at the top.
   * 
   * In general, you should only create display specific
   * resources when a widget has been realized, and you should
   * free those resources when the widget is unrealized.
   * @return The Gdk::Display for the toplevel for this widget.
   * 
   * Since: 2.2.
   "
      end

      operation 737961 "get_root_window"
	public explicit_return_type "Glib::RefPtr<Gdk::Window>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Get the root window where this widget is located. This function can
   * only be called after the widget has been added to a widget
   * heirarchy with Gtk::Window at the top.
   * 
   * The root window is useful for such purposes as creating a popup
   * Gdk::Window associated with the window. In general, you should only
   * create display specific resources when a widget has been realized,
   * and you should free those resources when the widget is unrealized.
   * @return The Gdk::Window root window for the toplevel for this widget.
   * 
   * Since: 2.2.
   "
      end

      operation 738089 "get_root_window"
	const public explicit_return_type "Glib::RefPtr<const Gdk::Window>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Get the root window where this widget is located. This function can
   * only be called after the widget has been added to a widget
   * heirarchy with Gtk::Window at the top.
   * 
   * The root window is useful for such purposes as creating a popup
   * Gdk::Window associated with the window. In general, you should only
   * create display specific resources when a widget has been realized,
   * and you should free those resources when the widget is unrealized.
   * @return The Gdk::Window root window for the toplevel for this widget.
   * 
   * Since: 2.2.
   "
      end

      operation 738217 "get_settings"
	public explicit_return_type "Glib::RefPtr<Settings>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the settings object holding the settings (global property
   * settings, RC file information, etc) used for this widget.
   * 
   * Note that this function can only be called when the Gtk::Widget
   * is attached to a toplevel, since the settings object is specific
   * to a particular Gdk::Screen.
   * @return The relevant Gtk::Settings object.
   "
      end

      operation 738345 "get_clipboard"
	public explicit_return_type "Glib::RefPtr<Clipboard>"
	nparams 1
	  param in name "selection" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the clipboard object for the given selection to
   * be used with @a widget . @a widget  must have a Gdk::Display
   * associated with it, so must be attached to a toplevel
   * window.
   * @param selection A Gdk::Atom which identifies the clipboard
   * to use. Gdk::SELECTION_CLIPBOARD gives the
   * default clipboard. Another common value
   * is Gdk::SELECTION_PRIMARY, which gives
   * the primary X selection.
   * @return The appropriate clipboard object. If no
   * clipboard already exists, a new one will
   * be created. Once a clipboard object has
   * been created, it is persistent for all time.
   * 
   * Since: 2.2.
   "
      end

      operation 738473 "get_clipboard"
	const public explicit_return_type "Glib::RefPtr<const Clipboard>"
	nparams 1
	  param in name "selection" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the clipboard object for the given selection to
   * be used with @a widget . @a widget  must have a Gdk::Display
   * associated with it, so must be attached to a toplevel
   * window.
   * @param selection A Gdk::Atom which identifies the clipboard
   * to use. Gdk::SELECTION_CLIPBOARD gives the
   * default clipboard. Another common value
   * is Gdk::SELECTION_PRIMARY, which gives
   * the primary X selection.
   * @return The appropriate clipboard object. If no
   * clipboard already exists, a new one will
   * be created. Once a clipboard object has
   * been created, it is persistent for all time.
   * 
   * Since: 2.2.
   "
      end

      operation 738601 "get_accessible"
	public explicit_return_type "Glib::RefPtr<Atk::Object>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO: This probably needs a special conversion to do an extra ref (take_copy=true) for the returned instance:"
      end

      operation 738729 "set_colormap"
	public explicit_return_type "void"
	nparams 1
	  param in name "colormap" explicit_type "Glib::RefPtr<const Gdk::Colormap>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the colormap for the widget to the given value. Widget must not
   * have been previously realized. This probably should only be used
   * from an <tt>init()</tt> function (i.e. from the constructor 
   * for the widget).
   * @param colormap A colormap.
   "
      end

      operation 738857 "get_events"
	const public explicit_return_type "Gdk::EventMask"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the event mask for the widget (a bitfield containing flags
   * from the Gdk::EventMask enumeration). These are the events that the widget
   * will receive.
   * @return Event mask for @a widget .
   "
      end

      operation 738985 "get_pointer"
	const public explicit_return_type "void"
	nparams 2
	  param inout name "x" explicit_type "int"
	  param inout name "y" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Obtains the location of the mouse pointer in widget coordinates.
   * Widget coordinates are a bit odd; for historical reasons, they are
   * defined as @a widget -&gt;window coordinates for widgets that are not
   * Gtk::NO_WINDOW widgets, and are relative to @a widget -&gt;allocation.x,
   *  @a widget -&gt;allocation.y for widgets that are Gtk::NO_WINDOW widgets.
   * @param x Return location for the X coordinate, or <tt>0</tt>.
   * @param y Return location for the Y coordinate, or <tt>0</tt>.
   "
      end

      operation 739113 "is_ancestor"
	const public explicit_return_type "bool"
	nparams 1
	  param inout name "ancestor" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Determines whether @a widget  is somewhere inside @a ancestor , possibly with
   * intermediate containers.
   * @param ancestor Another Gtk::Widget.
   * @return <tt>true</tt> if @a ancestor  contains @a widget  as a child, grandchild, great grandchild, etc.
   "
      end

      operation 739241 "translate_coordinates"
	public explicit_return_type "bool"
	nparams 5
	  param inout name "dest_widget" type class_ref 130089 // Widget
	  param in name "src_x" explicit_type "int"
	  param in name "src_y" explicit_type "int"
	  param inout name "dest_x" explicit_type "int"
	  param inout name "dest_y" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} & ${p3}, ${t4} & ${p4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} & ${p3}, ${t4} & ${p4}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Translate coordinates relative to @a src_widget 's allocation to coordinates
   * relative to @a dest_widget 's allocations. In order to perform this
   * operation, both widgets must be realized, and must share a common
   * toplevel.
   * @param dest_widget A Gtk::Widget.
   * @param src_x X position relative to @a src_widget .
   * @param src_y Y position relative to @a src_widget .
   * @param dest_x Location to store X position relative to @a dest_widget .
   * @param dest_y Location to store Y position relative to @a dest_widget .
   * @return <tt>false</tt> if either widget was not realized, or there
   * was no common ancestor. In this case, nothing is stored in
   * * @a dest_x  and * @a dest_y . Otherwise <tt>true</tt>.
   "
      end

      operation 739369 "set_style"
	public explicit_return_type "void"
	nparams 1
	  param in name "style" explicit_type "Glib::RefPtr<Style>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " STYLE 
* Sets the Gtk::Style for a widget ( @a widget -&gt;style). You probably don't
   * want to use this function; it interacts badly with themes, because
   * themes work by replacing the Gtk::Style. Instead, use
   * modify_style().
   * @param style A Gtk::Style.
   "
      end

      operation 739497 "unset_style"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 739625 "ensure_style"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Ensures that @a widget  has a style ( @a widget -&gt;style). Not a very useful
   * function; most of the time, if you want the style, the widget is
   * realized, and realized widgets are guaranteed to have a style
   * already.
   "
      end

      operation 739753 "get_style"
	public explicit_return_type "Glib::RefPtr<Style>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Simply an accessor function that returns @a widget -&gt;style.
   * @return The widget's Gtk::Style.
   "
      end

      operation 739881 "get_style"
	const public explicit_return_type "Glib::RefPtr<const Style>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Simply an accessor function that returns @a widget -&gt;style.
   * @return The widget's Gtk::Style.
   "
      end

      operation 740009 "modify_style"
	public explicit_return_type "void"
	nparams 1
	  param in name "style" explicit_type "Glib::RefPtr<RcStyle>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Modifies style values on the widget. Modifications made using this
   * technique take precedence over style values set via an RC file,
   * however, they will be overriden if a style is explicitely set on
   * the widget using set_style(). The Gtk::RcStyle structure
   * is designed so each field can either be set or unset, so it is
   * possible, using this function, to modify some style values and
   * leave the others unchanged.
   * 
   * Note that modifications made with this function are not cumulative
   * with previous calls to modify_style() or with such
   * functions as modify_fg(). If you wish to retain
   * previous values, you must first call get_modifier_style(),
   * make your modifications to the returned style, then call
   * modify_style() with that style. On the other hand,
   * if you first call modify_style(), subsequent calls
   * to such functions modify_fg() will have a cumulative
   * effect with the initial modifications.
   * @param style The Gtk::RcStyle holding the style modifications.
   "
      end

      operation 740137 "get_modifier_style"
	public explicit_return_type "Glib::RefPtr<RcStyle>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the current modifier style for the widget. (As set by
   * modify_style().) If no style has previously set, a new
   * Gtk::RcStyle will be created with all values unset, and set as the
   * modifier style for the widget. If you make changes to this rc
   * style, you must call modify_style(), passing in the
   * returned rc style, to make sure that your changes take effect.
   * 
   * Caution: passing the style back to modify_style() will
   * normally end up destroying it, because modify_style() copies
   * the passed-in style and sets the copy as the new modifier style,
   * thus dropping any reference to the old modifier style. Add a reference
   * to the modifier style if you want to keep it alive.
   * @return The modifier style for the widget. This rc style is
   * owned by the widget. If you want to keep a pointer to value this
   * around, you must add a refcount using Gtk::RcStyle::ref().
   "
      end

      operation 740265 "get_modifier_style"
	const public explicit_return_type "Glib::RefPtr<const RcStyle>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the current modifier style for the widget. (As set by
   * modify_style().) If no style has previously set, a new
   * Gtk::RcStyle will be created with all values unset, and set as the
   * modifier style for the widget. If you make changes to this rc
   * style, you must call modify_style(), passing in the
   * returned rc style, to make sure that your changes take effect.
   * 
   * Caution: passing the style back to modify_style() will
   * normally end up destroying it, because modify_style() copies
   * the passed-in style and sets the copy as the new modifier style,
   * thus dropping any reference to the old modifier style. Add a reference
   * to the modifier style if you want to keep it alive.
   * @return The modifier style for the widget. This rc style is
   * owned by the widget. If you want to keep a pointer to value this
   * around, you must add a refcount using Gtk::RcStyle::ref().
   "
      end

      operation 740393 "modify_fg"
	public explicit_return_type "void"
	nparams 2
	  param in name "state" type class_ref 179881 // StateType
	  param in name "color" explicit_type "Gdk::Color"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " we need custom documentation because modify_* can take a NULL pointer
 (which we wrap with unset_*)
* Sets the foreground color for a widget in a particular state.
   * All other style values are left untouched. See also modify_style() and
   * unset_fg().
   *
   * @param state The state for which to set the foreground color.
   * @param color The color to assign (does not need to be allocated).
   
* Sets the foreground color for a widget in a particular state.  All
   * other style values are left untouched. See also
   * modify_style().
   * @param state The state for which to set the foreground color.
   * @param color The color to assign (does not need to be allocated).
   "
      end

      operation 740521 "modify_bg"
	public explicit_return_type "void"
	nparams 2
	  param in name "state" type class_ref 179881 // StateType
	  param in name "color" explicit_type "Gdk::Color"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the background color for a widget in a particular state.
   * All other style values are left untouched. See also modify_style() and
   * unset_bg().
   *
   * @param state The state for which to set the background color.
   * @param color The color to assign (does not need to be allocated).
   
* Sets the background color for a widget in a particular state.  All
   * other style values are left untouched. See also
   * modify_style().
   * @param state The state for which to set the background color.
   * @param color The color to assign (does not need to be allocated).
   "
      end

      operation 740649 "modify_bg_pixmap"
	public explicit_return_type "void"
	nparams 2
	  param in name "state" type class_ref 179881 // StateType
	  param in name "pixmap_name" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " TODO: Document this, and perhaps add unset_bg_pixmap"
      end

      operation 740777 "modify_text"
	public explicit_return_type "void"
	nparams 2
	  param in name "state" type class_ref 179881 // StateType
	  param in name "color" explicit_type "Gdk::Color"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the text color for a widget in a particular state.
   * All other style values are left untouched. The text color is the
   * foreground color used along with the base color (see modify_base() ) for
   * widgets such as Gtk::Entry and Gtk::TextView. See also modify_style() and
   * unset_text().
   *
   * @param state The state for which to set the text color.
   * @param color The color to assign (does not need to be allocated).
   
* Sets the text color for a widget in a particular state.  All other
   * style values are left untouched. The text color is the foreground
   * color used along with the base color (see modify_base())
   * for widgets such as Gtk::Entry and Gtk::TextView. See also
   * modify_style().
   * @param state The state for which to set the text color.
   * @param color The color to assign (does not need to be allocated).
   "
      end

      operation 740905 "modify_base"
	public explicit_return_type "void"
	nparams 2
	  param in name "state" type class_ref 179881 // StateType
	  param in name "color" explicit_type "Gdk::Color"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the base color for a widget in a particular state.
   * All other style values are left untouched. The base color is the
   * background color used along with the text color (see modify_text() ) for
   * widgets such as Gtk::Entry and Gtk::TextView. See also modify_style() and
   * unset_base().
   *
   * @param state The state for which to set the text color.
   * @param color The color to assign (does not need to be allocated).
   
* Sets the base color for a widget in a particular state.
   * All other style values are left untouched. The base color
   * is the background color used along with the text color
   * (see modify_text()) for widgets such as Gtk::Entry
   * and Gtk::TextView. See also modify_style().
   * @param state The state for which to set the base color.
   * @param color The color to assign (does not need to be allocated).
   "
      end

      operation 741033 "modify_font"
	public explicit_return_type "void"
	nparams 1
	  param in name "font_desc" explicit_type "Pango::FontDescription"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the font to use for a widget.
   * All other style values are left untouched. See also modify_style() and
   * unset_font().
   
* Sets the font to use for a widget.  All other style values are left
   * untouched. See also modify_style().
   * @param font_desc The font description to use.
   "
      end

      operation 741161 "unset_fg"
	public explicit_return_type "void"
	nparams 1
	  param in name "state" type class_ref 179881 // StateType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Undo the effect of previous calls to modify_fg() for a particular state.
   * All other style values are left untouched. See also modify_style().
   "
      end

      operation 741289 "unset_bg"
	public explicit_return_type "void"
	nparams 1
	  param in name "state" type class_ref 179881 // StateType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Undo the effect of previous calls to modify_bg() for a particular state.
   * All other style values are left untouched. See also modify_style().
   "
      end

      operation 741417 "unset_text"
	public explicit_return_type "void"
	nparams 1
	  param in name "state" type class_ref 179881 // StateType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Undo the effect of previous calls to modify_text() for a particular state.
   * All other style values are left untouched. See also modify_style().
   "
      end

      operation 741545 "unset_base"
	public explicit_return_type "void"
	nparams 1
	  param in name "state" type class_ref 179881 // StateType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Undo the effect of previous calls to modify_base() for a particular state.
   * All other style values are left untouched. See also modify_style().
   "
      end

      operation 741673 "unset_font"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Undo the effect of previous calls to modify_font() for a particular state.
   * All other style values are left untouched. See also modify_style().
   "
      end

      operation 741801 "get_style_property"
	stereotype "template"
	const public explicit_return_type "void"
	nparams 2
	  param in name "the_property_name" explicit_type "Glib::ustring"
	  param inout name "value" explicit_type "PropertyType"
	cpp_decl "    ${comment}template<class PropertyType>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//The parameter name is \"the_property_name\" to avoid a warning because there is a method with the \"property_name\" name.

${comment}template<class PropertyType>
${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "The parameter name is \"the_property_name\" to avoid a warning because there is a method with the \"property_name\" name."
      end

      operation 741929 "create_pango_context"
	public explicit_return_type "Glib::RefPtr<Pango::Context>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Creates a new Pango::Context with the appropriate colormap,
   * font description, and base direction for drawing text for
   * this widget. See also get_pango_context().
   * @return The new Pango::Context.
   "
      end

      operation 742057 "get_pango_context"
	public explicit_return_type "Glib::RefPtr<Pango::Context>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets a Pango::Context with the appropriate colormap, font description
   * and base direction for this widget. Unlike the context returned
   * by create_pango_context(), this context is owned by
   * the widget (it can be used until the screen for the widget changes
   * or the widget is removed from its toplevel), and will be updated to
   * match any changes to the widget's attributes.
   * 
   * If you create and keep a Pango::Layout using this context, you must
   * deal with changes to the context by calling pango_layout_context_changed()
   * on the layout in response to the ::style-set and ::direction-changed signals
   * for the widget.
   * @return The Pango::Context for the widget.
   "
      end

      operation 742185 "create_pango_layout"
	public explicit_return_type "Glib::RefPtr<Pango::Layout>"
	nparams 1
	  param in name "text" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Creates a new Pango::Layout with the appropriate colormap,
   * font description, and base direction for drawing text for
   * this widget.
   * 
   * If you keep a Pango::Layout created in this way around, in order
   * notify the layout of changes to the base direction or font of this
   * widget, you must call pango_layout_context_changed() in response to
   * the ::style-set and ::direction-changed signals for the widget.
   * @param text Text to set on the layout (can be <tt>0</tt>).
   * @return The new Pango::Layout.
   "
      end

      operation 742313 "render_icon"
	public explicit_return_type "Glib::RefPtr<Gdk::Pixbuf>"
	nparams 3
	  param in name "stock_id" type class_ref 130985 // StockID
	  param in name "size" type class_ref 131241 // IconSize
	  param in name "detail" explicit_type "Glib::ustring"
	    defaultvalue " Glib::ustring()"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* A convenience function that uses the theme engine and RC file
   * settings for @a widget  to look up @a stock_id  and render it to
   * a pixbuf. @a stock_id  should be a stock icon ID such as
   * Gtk::STOCK_OPEN or Gtk::STOCK_OK. @a size  should be a size
   * such as Gtk::ICON_SIZE_MENU. @a detail  should be a string that
   * identifies the widget or code doing the rendering, so that
   * theme engines can special-case rendering for that widget or code.
   * 
   * The pixels in the returned Gdk::Pixbuf are shared with the rest of
   * the application and should not be modified. The pixbuf should be freed
   * after use with Glib::object_unref().
   * @param stock_id A stock ID.
   * @param size A stock size.
   * @param detail Render detail to pass to theme engine.
   * @return A new pixbuf, or <tt>0</tt> if the stock ID wasn't known.
   "
      end

      operation 742441 "set_composite_name"
	public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets a widgets composite name. The widget must be
   * a composite child of its parent; see push_composite_child().
   * @param name The name to set.
   "
      end

      operation 742569 "unset_composite_name"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 742697 "get_composite_name"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Obtains the composite name of a widget.
   * @return The composite name of @a widget , or <tt>0</tt> if @a widget  is not
   * a composite child. The string should not be freed when it is no 
   * longer needed.
   "
      end

      operation 742825 "reset_rc_styles"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 742953 "push_colormap"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "cmap" explicit_type "Glib::RefPtr<const Gdk::Colormap>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " PUSH/POP - these are used to create widgets.  Hidden arguments to override the defaults.
* Pushes @a cmap  onto a global stack of colormaps; the topmost
   * colormap on the stack will be used to create all widgets.
   * Remove @a cmap  with pop_colormap(). There's little
   * reason to use this function.
   * @param cmap A Gdk::Colormap.
   "
      end

      operation 743081 "pop_colormap"
	class_operation public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Removes a colormap pushed with push_colormap().
   "
      end

      operation 743209 "push_composite_child"
	class_operation public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Makes all newly-created widgets as composite children until
   * the corresponding pop_composite_child() call.
   * 
   * A composite child is a child that's an implementation detail of the
   * container it's inside and should not be visible to people using the
   * container. Composite children aren't treated differently by GTK (but
   * see Gtk::Container::foreach() vs. Gtk::Container::forall()), but e.g. GUI 
   * builders might want to treat them in a different way.
   * 
   * Here is a simple example:
   * @code
   * gtk_widget_push_composite_child (&lt;!-- --&gt;);
   * scrolled_window->hscrollbar = gtk_hscrollbar_new (hadjustment);
   * gtk_widget_set_composite_name (scrolled_window->hscrollbar, \"hscrollbar\");
   * gtk_widget_pop_composite_child (&lt;!-- --&gt;);
   * gtk_widget_set_parent (scrolled_window->hscrollbar, 
   * GTK_WIDGET (scrolled_window));
   * g_object_ref (scrolled_window->hscrollbar);
   * @endcode
   "
      end

      operation 743337 "pop_composite_child"
	class_operation public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Cancels the effect of a previous call to push_composite_child().
   "
      end

      operation 743465 "set_default_colormap"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "colormap" explicit_type "Glib::RefPtr<const Gdk::Colormap>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " DEFAULTS 
* Sets the default colormap to use when creating widgets.
   * push_colormap() is a better function to use if
   * you only want to affect a few widgets, rather than all widgets.
   * @param colormap A Gdk::Colormap.
   "
      end

      operation 743593 "get_default_style"
	class_operation public explicit_return_type "Glib::RefPtr<Style>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the default style used by all widgets initially.
   * @return The default style. This Gtk::Style object is owned by GTK+ and
   * should not be modified or freed.
   "
      end

      operation 743721 "get_default_colormap"
	class_operation public explicit_return_type "Glib::RefPtr<Gdk::Colormap>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Obtains the default colormap used to create widgets.
   * @return Default widget colormap.
   "
      end

      operation 743849 "get_default_visual"
	class_operation public explicit_return_type "Glib::RefPtr<Gdk::Visual>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Obtains the visual of the default colormap. Not really useful;
   * used to be useful before gdk_colormap_get_visual() existed.
   * @return Visual of the default colormap.
   "
      end

      operation 743977 "set_direction"
	public explicit_return_type "void"
	nparams 1
	  param in name "dir" type class_ref 280233 // TextDirection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " Directionality of Text 
* Sets the reading direction on a particular widget. This direction
   * controls the primary direction for widgets containing text,
   * and also the direction in which the children of a container are
   * packed. The ability to set the direction is present in order
   * so that correct localization into languages with right-to-left
   * reading directions can be done. Generally, applications will
   * let the default reading direction present, except for containers
   * where the containers are arranged in an order that is explicitely
   * visual rather than logical (such as buttons for text justification).
   * 
   * If the direction is set to Gtk::TEXT_DIR_NONE, then the value
   * set by set_default_direction() will be used.
   * @param dir The new direction.
   "
      end

      operation 744105 "get_direction"
	public return_type class_ref 280233 // TextDirection
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the reading direction for a particular widget. See
   * set_direction().
   * @return The reading direction for the widget.
   "
      end

      operation 744233 "set_default_direction"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "dir" type class_ref 280233 // TextDirection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the default reading direction for widgets where the
   * direction has not been explicitly set by set_direction().
   * @param dir The new default direction. This cannot be
   * Gtk::TEXT_DIR_NONE.
   "
      end

      operation 744361 "get_default_direction"
	class_operation public return_type class_ref 280233 // TextDirection
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Obtains the current default reading direction. See
   * set_default_direction().
   * @return The current default direction.
   "
      end

      operation 744489 "shape_combine_mask"
	public explicit_return_type "void"
	nparams 3
	  param in name "shape_mask" explicit_type "Glib::RefPtr<const Gdk::Bitmap>"
	  param in name "offset_x" explicit_type "int"
	  param in name "offset_y" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " Shape masking 
* Sets a shape for this widget's GDK window. This allows for
   * transparent windows etc., see gdk_window_shape_combine_mask()
   * for more information.
   * @param shape_mask Shape to be added.
   * @param offset_x X position of shape mask with respect to @a window .
   * @param offset_y Y position of shape mask with respect to @a window .
   "
      end

      operation 744617 "unset_shape_combine_mask"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 744745 "reset_shapes"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " must be realized 
* Recursively resets the shape on this widget and its descendants.
   "
      end

      operation 744873 "path"
	public explicit_return_type "void"
	nparams 2
	  param inout name "path" explicit_type "Glib::ustring"
	  param inout name "path_reversed" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " Paths 
/ Compute a widget's path of the form \"GtkWindow.MyLabel\""
      end

      operation 745001 "class_path"
	public explicit_return_type "void"
	nparams 2
	  param inout name "path" explicit_type "Glib::ustring"
	  param inout name "path_reversed" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 745129 "list_mnemonic_labels"
	public explicit_return_type "Glib::ListHandle<Widget*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns a newly allocated list of the widgets, normally labels, for 
   * which this widget is a the target of a mnemonic (see for example, 
   * Gtk::Label::set_mnemonic_widget()).
   * 
   * The widgets in the list are not individually referenced. If you
   * want to iterate through the list and perform actions involving
   * callbacks that might destroy the widgets, you
   * <em>must</em> call <tt>g_list_foreach (result,
   * (GFunc)g_object_ref, <tt>0</tt>)</tt> first, and then unref all the
   * widgets afterwards.
   * @return The list of mnemonic labels; free this list
   * with Glib::list_free() when you are done with it.
   * 
   * Since: 2.4.
   "
      end

      operation 745257 "list_mnemonic_labels"
	const public explicit_return_type "Glib::ListHandle<const Widget*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns a newly allocated list of the widgets, normally labels, for 
   * which this widget is a the target of a mnemonic (see for example, 
   * Gtk::Label::set_mnemonic_widget()).
   * 
   * The widgets in the list are not individually referenced. If you
   * want to iterate through the list and perform actions involving
   * callbacks that might destroy the widgets, you
   * <em>must</em> call <tt>g_list_foreach (result,
   * (GFunc)g_object_ref, <tt>0</tt>)</tt> first, and then unref all the
   * widgets afterwards.
   * @return The list of mnemonic labels; free this list
   * with Glib::list_free() when you are done with it.
   * 
   * Since: 2.4.
   "
      end

      operation 745385 "add_mnemonic_label"
	public explicit_return_type "void"
	nparams 1
	  param inout name "label" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Adds a widget to the list of mnemonic labels for
   * this widget. (See list_mnemonic_labels()). Note the
   * list of mnemonic labels for the widget is cleared when the
   * widget is destroyed, so the caller must make sure to update
   * it's internal state at this point as well, by using a connection
   * to the ::destroy signal or a weak notifier.
   * 
   * Since: 2.4
   * @param label A Gtk::Widget that acts as a mnemonic label for @a widget .
   "
      end

      operation 745513 "remove_mnemonic_label"
	public explicit_return_type "void"
	nparams 1
	  param inout name "label" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Removes a widget from the list of mnemonic labels for
   * this widget. (See list_mnemonic_labels()). The widget
   * must have previously been added to the list with
   * add_mnemonic_label().
   * 
   * Since: 2.4
   * @param label A Gtk::Widget that was previously set as a mnemnic label for
   *  @a widget  with add_mnemonic_label().
   "
      end

      operation 745641 "drag_get_data"
	public explicit_return_type "void"
	nparams 3
	  param in name "context" explicit_type "Glib::RefPtr<Gdk::DragContext>"
	  param inout name "target" explicit_type "Glib::ustring"
	  param in name "time" explicit_type "guint32"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO: Should drag_get_data() be const?"
      end

      operation 745769 "drag_highlight"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 745897 "drag_unhighlight"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 746025 "drag_dest_set"
	public explicit_return_type "void"
	nparams 2
	  param in name "flags" type class_ref 278185 // DestDefaults
	    defaultvalue " DestDefaults(0)"
	  param in name "actions" explicit_type "Gdk::DragAction"
	    defaultvalue " Gdk::DragAction(0)"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 746153 "drag_dest_set"
	public explicit_return_type "void"
	nparams 3
	  param in name "targets" explicit_type "ArrayHandle_TargetEntry"
	  param in name "flags" type class_ref 278185 // DestDefaults
	    defaultvalue " DEST_DEFAULT_ALL"
	  param in name "actions" explicit_type "Gdk::DragAction"
	    defaultvalue " Gdk::ACTION_COPY"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 746281 "drag_dest_set_proxy"
	public explicit_return_type "void"
	nparams 3
	  param in name "proxy_window" explicit_type "Glib::RefPtr<Gdk::Window>"
	  param in name "protocol" explicit_type "Gdk::DragProtocol"
	  param in name "use_coordinates" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 746409 "drag_dest_unset"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 746537 "drag_dest_find_target"
	const public explicit_return_type "Glib::ustring"
	nparams 2
	  param in name "context" explicit_type "Glib::RefPtr<Gdk::DragContext>"
	  param in name "target_list" explicit_type "Glib::RefPtr<TargetList>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Looks for a match between @a context -&gt;targets and the
   *  @a dest_target_list , returning the first matching target, otherwise
   * returning Gdk::NONE. @a dest_target_list  should usually be the return
   * value from gtk_drag_dest_get_target_list(), but some widgets may
   * have different valid targets for different parts of the widget; in
   * that case, they will have to implement a drag_motion handler that
   * passes the correct target list to this function.
   * @param context Drag context.
   * @param target_list List of droppable targets.
   * @return First target that the source offers and the dest can accept, or Gdk::NONE.
   "
      end

      operation 746665 "drag_dest_find_target"
	const public explicit_return_type "Glib::ustring"
	nparams 1
	  param in name "context" explicit_type "Glib::RefPtr<Gdk::DragContext>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 746793 "drag_dest_get_target_list"
	public explicit_return_type "Glib::RefPtr<TargetList>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the list of targets this widget can accept from
   * drag-and-drop.
   * @return The Gtk::TargetList, or <tt>0</tt> if none.
   "
      end

      operation 746921 "drag_dest_get_target_list"
	const public explicit_return_type "Glib::RefPtr<const TargetList>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the list of targets this widget can accept from
   * drag-and-drop.
   * @return The Gtk::TargetList, or <tt>0</tt> if none.
   "
      end

      operation 747049 "drag_dest_set_target_list"
	public explicit_return_type "void"
	nparams 1
	  param in name "target_list" explicit_type "Glib::RefPtr<TargetList>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the target types that this widget can accept from drag-and-drop.
   * The widget must first be made into a drag destination with
   * gtk_drag_dest_set().
   * @param target_list List of droppable targets, or <tt>0</tt> for none.
   "
      end

      operation 747177 "drag_source_set"
	public explicit_return_type "void"
	nparams 3
	  param in name "targets" explicit_type "ArrayHandle_TargetEntry"
	  param in name "start_button_mask" explicit_type "Gdk::ModifierType"
	    defaultvalue " Gdk::MODIFIER_MASK"
	  param in name "actions" explicit_type "Gdk::DragAction"
	    defaultvalue " Gdk::ACTION_COPY"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 747305 "drag_source_unset"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 747433 "drag_source_set_icon"
	public explicit_return_type "void"
	nparams 3
	  param in name "colormap" explicit_type "Glib::RefPtr<Gdk::Colormap>"
	  param in name "pixmap" explicit_type "Glib::RefPtr<Gdk::Pixmap>"
	  param in name "mask" explicit_type "Glib::RefPtr<Gdk::Bitmap>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the icon that will be used for drags from a particular widget
   * from a pixmap/mask. GTK+ retains references for the arguments, and 
   * will release them when they are no longer needed.
   * Use gtk_drag_source_set_icon_pixbuf() instead.
   * @param colormap The colormap of the icon.
   * @param pixmap The image data for the icon.
   * @param mask The transparency mask for an image.
   "
      end

      operation 747561 "drag_source_set_icon"
	public explicit_return_type "void"
	nparams 1
	  param in name "pixbuf" explicit_type "Glib::RefPtr<Gdk::Pixbuf>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the icon that will be used for drags from a particular widget
   * from a Gdk::Pixbuf. GTK+ retains a reference for @a pixbuf  and will 
   * release it when it is no longer needed.
   * @param pixbuf The Gdk::Pixbuf for the drag icon.
   "
      end

      operation 747689 "drag_source_set_icon"
	public explicit_return_type "void"
	nparams 1
	  param in name "stock_id" type class_ref 130985 // StockID
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the icon that will be used for drags from a particular source
   * to a stock icon.
   * @param stock_id The ID of the stock icon to use.
   "
      end

      operation 747817 "drag_begin"
	public explicit_return_type "Glib::RefPtr<Gdk::DragContext>"
	nparams 4
	  param in name "targets" explicit_type "Glib::RefPtr<TargetList>"
	  param in name "actions" explicit_type "Gdk::DragAction"
	  param in name "button" explicit_type "int"
	  param inout name "event" explicit_type "GdkEvent"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} * ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} * ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Initiates a drag on the source side. The function
   * only needs to be used when the application is
   * starting drags itself, and is not needed when
   * gtk_drag_source_set() is used.
   * @param targets The targets (data formats) in which the
   * source can provide the data.
   * @param actions A bitmask of the allowed drag actions for this drag.
   * @param button The button the user clicked to start the drag.
   * @param event The event that triggered the start of the drag.
   * @return The context for this drag.
   "
      end

      operation 747945 "drag_check_threshold"
	public explicit_return_type "bool"
	nparams 4
	  param in name "start_x" explicit_type "int"
	  param in name "start_y" explicit_type "int"
	  param in name "current_x" explicit_type "int"
	  param in name "current_y" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Checks to see if a mouse drag starting at ( @a start_x , @a start_y ) and ending
   * at ( @a current_x , @a current_y ) has passed the GTK+ drag threshold, and thus
   * should trigger the beginning of a drag-and-drop operation.
   * @param start_x X coordinate of start of drag.
   * @param start_y Y coordinate of start of drag.
   * @param current_x Current X coordinate.
   * @param current_y Current Y coordinate.
   * @return <tt>true</tt> if the drag threshold has been passed.
   "
      end

      operation 748073 "drag_get_source_widget"
	class_operation public return_type class_ref 130089 // Widget
	nparams 1
	  param in name "context" explicit_type "Glib::RefPtr<Gdk::DragContext>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "These should be a method of Gdk::DragContext, but gdkmm can't depend on gtkmm."
      end

      operation 748201 "drag_set_as_icon"
	public explicit_return_type "void"
	nparams 3
	  param in name "context" explicit_type "Glib::RefPtr<Gdk::DragContext>"
	  param in name "hot_x" explicit_type "int"
	  param in name "hot_y" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 748329 "queue_resize_no_redraw"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* This function works like queue_resize(), except that the
   * widget is not invalidated.
   * 
   * Since: 2.4
   "
      end

      operation 748457 "get_no_show_all"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the current value of the \"no_show_all\" property, which determines
   * whether calls to show_all() and hide_all() 
   * will affect this widget.
   * @return The current value of the \"no_show_all\" property.
   * 
   * Since: 2.4.
   "
      end

      operation 748585 "set_no_show_all"
	public explicit_return_type "void"
	nparams 1
	  param in name "no_show_all" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the \"no_show_all\" property, which determines whether calls to 
   * show_all() and hide_all() will affect this widget. 
   * 
   * This is mostly for use in constructing widget hierarchies with externally
   * controlled visibility, see Gtk::UIManager.
   * 
   * Since: 2.4
   * @param no_show_all The new value for the \"no_show_all\" property.
   "
      end

      operation 748713 "draw_insertion_cursor"
	public explicit_return_type "void"
	nparams 6
	  param in name "drawable" explicit_type "Glib::RefPtr<Gdk::Drawable>"
	  param in name "area" explicit_type "Gdk::Rectangle"
	  param in name "location" explicit_type "Gdk::Rectangle"
	  param in name "is_primary" explicit_type "bool"
	  param in name "direction" type class_ref 280233 // TextDirection
	  param in name "draw_arrow" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 748841 "is_toplevel"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " FLAGS 
: Returns property {flags.toplevel}."
      end

      operation 748969 "has_no_window"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment ": Returns property {flags.nowindow}."
      end

      operation 749097 "is_realized"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment ": Returns property {flags.realized}."
      end

      operation 749225 "is_mapped"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment ": Returns property {flags.mapped}."
      end

      operation 749353 "is_visible"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment ": Returns property {flags.visible}."
      end

      operation 749481 "is_drawable"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment ": Returns if the widget is ready to be drawn to.
 Checks to see if the widget is both visible and mapped which
 makes it possible to perform drawing commands on."
      end

      operation 749609 "sensitive"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment ": Returns property {flags.sensitive}. You might want to check
 is_sensitive instead."
      end

      operation 749737 "parent_sensitive"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 749865 "is_sensitive"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 749993 "can_focus"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 750121 "has_focus"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 750249 "can_default"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 750377 "has_default"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 750505 "has_grab"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 750633 "rc_style"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 750761 "is_composite_child"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 750889 "app_paintable"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 751017 "receives_default"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 751145 "double_buffered"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 751273 "get_flags"
	const public return_type class_ref 278569 // WidgetFlags
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 751401 "set_flags"
	public explicit_return_type "void"
	nparams 1
	  param in name "flags" type class_ref 278569 // WidgetFlags
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 751529 "unset_flags"
	public explicit_return_type "void"
	nparams 1
	  param in name "flags" type class_ref 278569 // WidgetFlags
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 751657 "get_width"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 751785 "get_height"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 751913 "get_state"
	const public explicit_return_type "Gtk::StateType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 752041 "get_saved_state"
	const public explicit_return_type "Gtk::StateType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 752169 "get_requisition"
	const public explicit_return_type "Requisition"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 752297 "get_allocation"
	const public explicit_return_type "Allocation"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 752425 "get_window"
	public explicit_return_type "Glib::RefPtr<Gdk::Window>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 752553 "get_window"
	const public explicit_return_type "Glib::RefPtr<const Gdk::Window>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 752681 "signal_show"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 752809 "signal_hide"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 752937 "signal_map"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment ": Emitted on mapping of a widget to the screen.
- See {flags.mapped}."
      end

      operation 753065 "signal_unmap"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "- See {flags.mapped}."
      end

      operation 753193 "signal_realize"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment ": Emitted on realization of a widget.
- See {flags.realized}.  This is also responsible for
- setting {flags.realized} when it is done.  Therefore, 
- when overriding the impl method, you should call the 
- default realize method."
      end

      operation 753321 "signal_unrealize"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "- See {flags.realized}.  This should not be called by the user.
__WRAP(meth|sig|impl,void unrealize_(),gtk_widget_unrealize,\"unrealize\")"
      end

      operation 753449 "signal_size_request"
	public explicit_return_type "Glib::SignalProxy1< void,Requisition* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 753577 "signal_size_allocate"
	public explicit_return_type "Glib::SignalProxy1< void,Allocation& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 753705 "signal_state_changed"
	public explicit_return_type "Glib::SignalProxy1< void,Gtk::StateType >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " Changed signals -- inform widget of internal changes.
 We rename parent_set => parent_changed 
  and      style_set  => style_changed 
  to avoid confusion with set_parent and set_style.
: Informs objects that their state has changed.
- The old state is passed as the argument."
      end

      operation 753833 "signal_parent_changed"
	public explicit_return_type "Glib::SignalProxy1< void,Widget* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment ": Informs objects that their parent changed.
- The widget passed is the former parent, which may be 0 if 
- there was no parent. (was parent_set in GTK+)"
      end

      operation 753961 "signal_hierarchy_changed"
	public explicit_return_type "Glib::SignalProxy1< void,Widget* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 754089 "signal_style_changed"
	public explicit_return_type "Glib::SignalProxy1< void,const Glib::RefPtr<Style>& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment ": Informs objects that their style has been changed.
- The former style is passed as the argument. (was style_set in gtk+)"
      end

      operation 754217 "signal_direction_changed"
	public explicit_return_type "Glib::SignalProxy1< void,TextDirection >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 754345 "signal_grab_notify"
	public explicit_return_type "Glib::SignalProxy1< void,bool >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 754473 "signal_child_notify"
	public explicit_return_type "Glib::SignalProxy1< void,GParamSpec* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 754601 "signal_mnemonic_activate"
	public explicit_return_type "Glib::SignalProxy1< bool,bool >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "_WRAP_SIGNAL(void add_accelerator(guint, GtkAccelGroup*, guint accel_key, Gdk::ModifierType, AccelFlags), \"add-accelerator\")
_WRAP_SIGNAL(void remove_accelerator(GtkAccelGroup* accel_group, guint, Gdk::ModifierType), \"remove-accelerator\")"
      end

      operation 754729 "signal_grab_focus"
	public explicit_return_type "Glib::SignalProxy0< void >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 754857 "signal_focus"
	public explicit_return_type "Glib::SignalProxy1< bool,DirectionType >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 754985 "signal_event"
	public explicit_return_type "Glib::SignalProxy1< bool,GdkEvent* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 755113 "signal_event_after"
	public explicit_return_type "Glib::SignalProxy1< void,GdkEvent* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 755241 "signal_button_press_event"
	public explicit_return_type "Glib::SignalProxy1< bool,GdkEventButton* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment ": Event triggered by user pressing button."
      end

      operation 755369 "signal_button_release_event"
	public explicit_return_type "Glib::SignalProxy1< bool,GdkEventButton* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment ": Event triggered by user releasing button."
      end

      operation 755497 "signal_scroll_event"
	public explicit_return_type "Glib::SignalProxy1< bool,GdkEventScroll* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 755625 "signal_motion_notify_event"
	public explicit_return_type "Glib::SignalProxy1< bool,GdkEventMotion* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment ": Event triggered by user moving pointer."
      end

      operation 755753 "signal_delete_event"
	public explicit_return_type "Glib::SignalProxy1< bool,GdkEventAny* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment ": Event triggered by window being closed."
      end

      operation 755881 "signal_expose_event"
	public explicit_return_type "Glib::SignalProxy1< bool,GdkEventExpose* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment ": Event triggered by window requiring a refresh.
- Expose events cover a rectangular area that was covered
- or obscured by another window.  That area is now exposed
- and thus is needs to be redrawn.  
-
- If the application is not capable of redrawing sections
- it should watch the count field and only draw on the last
- even indicated.  This is important for things such as 
- Gtk::DrawingArea. "
      end

      operation 756009 "signal_key_press_event"
	public explicit_return_type "Glib::SignalProxy1< bool,GdkEventKey* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment ": Event triggered by a key press will widget has focus."
      end

      operation 756137 "signal_key_release_event"
	public explicit_return_type "Glib::SignalProxy1< bool,GdkEventKey* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment ": Event triggered by a key release will widget has focus."
      end

      operation 756265 "signal_enter_notify_event"
	public explicit_return_type "Glib::SignalProxy1< bool,GdkEventCrossing* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment ": Event triggered by pointer entering widget area."
      end

      operation 756393 "signal_leave_notify_event"
	public explicit_return_type "Glib::SignalProxy1< bool,GdkEventCrossing* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment ": Event triggered by pointer leaving widget area."
      end

      operation 756521 "signal_configure_event"
	public explicit_return_type "Glib::SignalProxy1< bool,GdkEventConfigure* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment ": Event triggered by a window resizing."
      end

      operation 756649 "signal_focus_in_event"
	public explicit_return_type "Glib::SignalProxy1< bool,GdkEventFocus* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 756777 "signal_focus_out_event"
	public explicit_return_type "Glib::SignalProxy1< bool,GdkEventFocus* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 756905 "signal_map_event"
	public explicit_return_type "Glib::SignalProxy1< bool,GdkEventAny* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 757033 "signal_unmap_event"
	public explicit_return_type "Glib::SignalProxy1< bool,GdkEventAny* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 757161 "signal_property_notify_event"
	public explicit_return_type "Glib::SignalProxy1< bool,GdkEventProperty* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 757289 "signal_selection_clear_event"
	public explicit_return_type "Glib::SignalProxy1< bool,GdkEventSelection* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 757417 "signal_selection_request_event"
	public explicit_return_type "Glib::SignalProxy1< bool,GdkEventSelection* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 757545 "signal_selection_notify_event"
	public explicit_return_type "Glib::SignalProxy1< bool,GdkEventSelection* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 757673 "signal_proximity_in_event"
	public explicit_return_type "Glib::SignalProxy1< bool,GdkEventProximity* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 757801 "signal_proximity_out_event"
	public explicit_return_type "Glib::SignalProxy1< bool,GdkEventProximity* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 757929 "signal_visibility_notify_event"
	public explicit_return_type "Glib::SignalProxy1< bool,GdkEventVisibility* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 758057 "signal_client_event"
	public explicit_return_type "Glib::SignalProxy1< bool,GdkEventClient* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 758185 "signal_no_expose_event"
	public explicit_return_type "Glib::SignalProxy1< bool,GdkEventAny* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 758313 "signal_window_state_event"
	public explicit_return_type "Glib::SignalProxy1< bool,GdkEventWindowState* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 758441 "signal_selection_get"
	public explicit_return_type "Glib::SignalProxy3< void,SelectionData&,guint,guint >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "We use the optional custom_c_callback parameter with _WRAP_SIGNAL() for some of these,
so that we can write special code to wrap the non-const SelectioData& output parameters:"
      end

      operation 758569 "signal_selection_received"
	public explicit_return_type "Glib::SignalProxy2< void,const SelectionData&,guint >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 758697 "signal_drag_begin"
	public explicit_return_type "Glib::SignalProxy1< void,const Glib::RefPtr<Gdk::DragContext>& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 758825 "signal_drag_end"
	public explicit_return_type "Glib::SignalProxy1< void,const Glib::RefPtr<Gdk::DragContext>& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 758953 "signal_drag_data_get"
	public explicit_return_type "Glib::SignalProxy4< void,const Glib::RefPtr<Gdk::DragContext>&,SelectionData&,guint,guint >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 759081 "signal_drag_data_delete"
	public explicit_return_type "Glib::SignalProxy1< void,const Glib::RefPtr<Gdk::DragContext>& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 759209 "signal_drag_leave"
	public explicit_return_type "Glib::SignalProxy2< void,const Glib::RefPtr<Gdk::DragContext>&,guint >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 759337 "signal_drag_motion"
	public explicit_return_type "Glib::SignalProxy4< bool,const Glib::RefPtr<Gdk::DragContext>&,int,int,guint >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 759465 "signal_drag_drop"
	public explicit_return_type "Glib::SignalProxy4< bool,const Glib::RefPtr<Gdk::DragContext>&,int,int,guint >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 759593 "signal_drag_data_received"
	public explicit_return_type "Glib::SignalProxy6< void,const Glib::RefPtr<Gdk::DragContext>&,int,int,const SelectionData&,guint,guint >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 759721 "signal_get_accessible"
	public explicit_return_type "Glib::SignalProxy0< Glib::RefPtr<Atk::Object> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "accessibility signals:"
      end

      operation 759849 "signal_screen_changed"
	public explicit_return_type "Glib::SignalProxy1< void,const Glib::RefPtr<Gdk::Screen>& >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 759977 "property_name"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "TODO: The signal_id is very C-like here:                                                                          
_WRAP_SIGNAL(bool can_activate_accel(guint signal_id), \"can_activate_accel\")
Keybinding signals:
* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 760105 "property_name"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 760233 "property_parent"
	public explicit_return_type "Glib::PropertyProxy<Container*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 760361 "property_parent"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Container*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 760489 "property_width_request"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 760617 "property_width_request"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 760745 "property_height_request"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 760873 "property_height_request"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 761001 "property_visible"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 761129 "property_visible"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 761257 "property_sensitive"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 761385 "property_sensitive"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 761513 "property_app_paintable"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 761641 "property_app_paintable"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 761769 "property_can_focus"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 761897 "property_can_focus"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 762025 "property_has_focus"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 762153 "property_has_focus"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 762281 "property_can_default"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 762409 "property_can_default"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 762537 "property_has_default"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 762665 "property_has_default"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 762793 "property_receives_default"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 762921 "property_receives_default"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 763049 "property_composite_child"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 763177 "property_style"
	public explicit_return_type "Glib::PropertyProxy< Glib::RefPtr<Style> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 763305 "property_style"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Style> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 763433 "property_events"
	public explicit_return_type "Glib::PropertyProxy<Gdk::EventMask>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 763561 "property_events"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Gdk::EventMask>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 763689 "property_extension_events"
	public explicit_return_type "Glib::PropertyProxy<Gdk::ExtensionMode>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 763817 "property_extension_events"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Gdk::ExtensionMode>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 763945 "dispatch_child_properties_changed_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param in name "p1" explicit_type "guint"
	  param inout name "p2" explicit_type "GParamSpec"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} * * ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * * ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "comment in GTK+ header: \"seldomly overidden\""
      end

      operation 764073 "show_all_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 764201 "hide_all_vfunc"
	cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 764329 "get_accessible_vfunc"
	cpp_virtual protected explicit_return_type "Glib::RefPtr<Atk::Object>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 764457 "Widget"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 764585 "map"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* This function is only for use in widget implementations. Causes
   * a widget to be mapped if it isn't already.
   "
      end

      operation 764713 "unmap"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* This function is only for use in widget implementations. Causes
   * a widget to be unmapped if it's currently mapped.
   "
      end

      operation 764841 "realize"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Creates the GDK (windowing system) resources associated with a
   * widget.  For example, @a widget -&gt;window will be created when a widget
   * is realized.  Normally realization happens implicitly; if you show
   * a widget and all its parent containers, then the widget will be
   * realized and mapped automatically.
   * 
   * Realizing a widget requires all
   * the widget's parent widgets to be realized; calling
   * realize() realizes the widget's parents in addition to
   *  @a widget  itself. If a widget is not yet inside a toplevel window
   * when you realize it, bad things will happen.
   * 
   * This function is primarily used in widget implementations, and
   * isn't very useful otherwise. Many times when you think you might
   * need it, a better approach is to connect to a signal that will be
   * called after the widget is realized automatically, such as
   * \"expose_event\". Or simply Glib::signal_connect_after() to the
   * \"realize\" signal.
   "
      end

      operation 764969 "unrealize"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* This function is only useful in widget implementations.
   * Causes a widget to be unrealized (frees all GDK resources
   * associated with the widget, such as @a widget -&gt;window).
   "
      end

      operation 765097 "set_parent"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "parent" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* This function is useful only when implementing subclasses of Gtk::Container.
   * Sets the container as the parent of @a widget , and takes care of
   * some details such as updating the state and style of the child
   * to reflect its new location. The opposite function is
   * unparent().
   * @param parent Parent container.
   "
      end

      operation 765225 "unparent"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* This function is only for use in widget implementations.
   * Should be called by implementations of the remove method
   * on Gtk::Container, to dissociate a child from the container.
   "
      end

      operation 765353 "get_child_requisition"
	const protected explicit_return_type "void"
	nparams 1
	  param inout name "requisition" explicit_type "Requisition"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* This function is only for use in widget implementations. Obtains
   *  @a widget -&gt;requisition, unless someone has forced a particular
   * geometry on the widget (e.g. with set_usize()), in which
   * case it returns that geometry instead of the widget's requisition.
   * 
   * This function differs from size_request() in that
   * it retrieves the last size request value from @a widget -&gt;requisition,
   * while size_request() actually calls the \"size_request\" method
   * on @a widget  to compute the size request and fill in @a widget -&gt;requisition,
   * and only then returns @a widget -&gt;requisition.
   * 
   * Because this function does not call the \"size_request\" method, it
   * can only be used when you know that @a widget -&gt;requisition is
   * up-to-date, that is, size_request() has been called
   * since the last time a resize was queued. In general, only container
   * implementations have this information; applications should use
   * size_request().
   * @param requisition A Gtk::Requisition to be filled in.
   "
      end

      operation 765481 "get_style_property_value"
	const protected explicit_return_type "void"
	nparams 2
	  param in name "the_property_name" explicit_type "Glib::ustring"
	  param inout name "value" explicit_type "Glib::ValueBase"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "The parameter name is \"the_property_name\" to avoid a warning because there is a method with the \"property_name\" name.
* Gets the value of a style property of @a widget .
   * @param the_property_name The name of a style property.
   * @param value Location to return the property value.
   "
      end

      operation 765609 "realize_if_needed"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 765737 "set_allocation"
	protected explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "Allocation"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 765865 "set_window"
	protected explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "Glib::RefPtr<Gdk::Window>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end
    end

    class 278569 "WidgetFlags"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 * @par Bitwise operators:
 * <tt>%WidgetFlags operator|(WidgetFlags, WidgetFlags)</tt><br>
 * <tt>%WidgetFlags operator&(WidgetFlags, WidgetFlags)</tt><br>
 * <tt>%WidgetFlags operator^(WidgetFlags, WidgetFlags)</tt><br>
 * <tt>%WidgetFlags operator~(WidgetFlags)</tt><br>
 * <tt>%WidgetFlags& operator|=(WidgetFlags&, WidgetFlags)</tt><br>
 * <tt>%WidgetFlags& operator&=(WidgetFlags&, WidgetFlags)</tt><br>
 * <tt>%WidgetFlags& operator^=(WidgetFlags&, WidgetFlags)</tt><br>
 "
      attribute 210217 "TOPLEVEL"
	public explicit_type ""
	init_value " 1 << 4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 210345 "NO_WINDOW"
	public explicit_type ""
	init_value " 1 << 5"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 210473 "REALIZED"
	public explicit_type ""
	init_value " 1 << 6"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 210601 "MAPPED"
	public explicit_type ""
	init_value " 1 << 7"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 210729 "VISIBLE"
	public explicit_type ""
	init_value " 1 << 8"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 210857 "SENSITIVE"
	public explicit_type ""
	init_value " 1 << 9"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 170281 "PARENT_SENSITIVE"
	public explicit_type ""
	init_value " 1 << 10"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 170409 "CAN_FOCUS"
	public explicit_type ""
	init_value " 1 << 11"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 210985 "HAS_FOCUS"
	public explicit_type ""
	init_value " 1 << 12"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 211113 "CAN_DEFAULT"
	public explicit_type ""
	init_value " 1 << 13"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 211241 "HAS_DEFAULT"
	public explicit_type ""
	init_value " 1 << 14"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 211369 "HAS_GRAB"
	public explicit_type ""
	init_value " 1 << 15"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 211497 "RC_STYLE"
	public explicit_type ""
	init_value " 1 << 16"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 211625 "COMPOSITE_CHILD"
	public explicit_type ""
	init_value " 1 << 17"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 211753 "NO_REPARENT"
	public explicit_type ""
	init_value " 1 << 18"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 211881 "APP_PAINTABLE"
	public explicit_type ""
	init_value " 1 << 19"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 212009 "RECEIVES_DEFAULT"
	public explicit_type ""
	init_value " 1 << 20"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 212137 "DOUBLE_BUFFERED"
	public explicit_type ""
	init_value " 1 << 21"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 212265 "NO_SHOW_ALL"
	public explicit_type ""
	init_value " 1 << 22
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 278953 "WidgetHelpType"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 "
      attribute 212393 "WIDGET_HELP_TOOLTIP"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 212521 "WIDGET_HELP_WHATS_THIS"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 281129 "Window"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/window.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Toplevel Window
 * This represents all widgets which are physical windows controlled
 * by the window manager.
 *
 * The window will be hidden when the window manager's close button is clicked. Override on_delete_event() to stop this.
 *
 * Gtk::manage() has no effect on Windows because they have no parent Containers.
 * @ingroup Widgets
 "
      classrelation 244905 // <generalisation>
	relation 244905 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 244905 // <generalisation>
	  b parent class_ref 281385 // Bin
      end

      class 306089 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 281129 // Window
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 245033 // <realization>
	  relation 245033 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 245033 // <realization>
	    b parent class_ref 281129 // Window
	end
      end

      class 306217 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "Window_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 306345 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkWindow"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 306473 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkWindowClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 885417 "~Window"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      classrelation 245161 // window_class_ (<directional composition>)
	relation 245161 *-->
	  a role_name "window_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 245161 // window_class_ (<directional composition>)
	  b parent class_ref 306217 // CppClassType
      end

      operation 885545 "Window"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 281129 // Window
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 885673 "operator ="
	private return_type class_ref 281129 // Window
	nparams 1
	  param in name "" type class_ref 281129 // Window
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 885801 "Window"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 885929 "Window"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkWindow"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 886057 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 886185 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 886313 "gobj"
	cpp_inline public explicit_return_type "GtkWindow"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkWindow*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 886441 "gobj"
	const cpp_inline public explicit_return_type "GtkWindow"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkWindow*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GtkObject."
      end

      operation 886569 "on_set_focus"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "focus" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "C++ methods used to invoke GTK+ virtual functions:
GTK+ Virtual Functions (override these to change behaviour):
Default Signal Handlers::"
      end

      operation 886697 "on_frame_event"
	cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param inout name "event" explicit_type "GdkEvent"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 886825 "Window"
	public explicit_return_type ""
	nparams 1
	  param in name "type" type class_ref 306601 // WindowType
	    defaultvalue " WINDOW_TOPLEVEL"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 886953 "property_title"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 887081 "property_title"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 887209 "property_allow_shrink"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 887337 "property_allow_shrink"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 887465 "property_allow_grow"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 887593 "property_allow_grow"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 887721 "property_resizable"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 887849 "property_resizable"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 887977 "property_modal"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 888105 "property_modal"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 888233 "property_window_position"
	public explicit_return_type "Glib::PropertyProxy<WindowPosition>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 888361 "property_window_position"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<WindowPosition>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 888489 "property_default_width"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 888617 "property_default_width"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 888745 "property_default_height"
	public explicit_return_type "Glib::PropertyProxy<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 888873 "property_default_height"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<int>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 889001 "property_destroy_with_parent"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 889129 "property_destroy_with_parent"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 889257 "property_icon"
	public explicit_return_type "Glib::PropertyProxy< Glib::RefPtr<Gdk::Pixbuf> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 889385 "property_icon"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gdk::Pixbuf> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 889513 "property_screen"
	public explicit_return_type "Glib::PropertyProxy< Glib::RefPtr<Gdk::Screen> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 889641 "property_screen"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gdk::Screen> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 889769 "property_is_active"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 889897 "property_has_toplevel_focus"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 890025 "property_type_hint"
	public explicit_return_type "Glib::PropertyProxy<GdkWindowTypeHint>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 890153 "property_type_hint"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<GdkWindowTypeHint>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 890281 "property_skip_taskbar_hint"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 890409 "property_skip_taskbar_hint"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 890537 "property_skip_pager_hint"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 890665 "property_skip_pager_hint"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 890793 "property_role"
	public explicit_return_type "Glib::PropertyProxy<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 890921 "property_role"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Glib::ustring>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 891049 "property_decorated"
	public explicit_return_type "Glib::PropertyProxy<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 891177 "property_decorated"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<bool>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 891305 "property_gravity"
	public explicit_return_type "Glib::PropertyProxy<Gdk::Gravity>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 891433 "property_gravity"
	const public explicit_return_type "Glib::PropertyProxy_ReadOnly<Gdk::Gravity>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   "
      end

      operation 891561 "is_toplevel"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 891689 "is_dialog"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 891817 "is_popup"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 891945 "get_window_type"
	const public return_type class_ref 306601 // WindowType
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 892073 "get_frame"
	public explicit_return_type "Glib::RefPtr<Gdk::Window>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment ": This is special to the GTK+ linux-fb port."
      end

      operation 892201 "get_frame"
	const public explicit_return_type "Glib::RefPtr<const Gdk::Window>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 892329 "signal_set_focus"
	public explicit_return_type "Glib::SignalProxy1< void,Widget* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 892457 "signal_frame_event"
	public explicit_return_type "Glib::SignalProxy1< bool,GdkEvent* >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 892585 "set_title"
	public explicit_return_type "void"
	nparams 1
	  param in name "title" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "Keybinding signals:
* Sets the title of the Gtk::Window. The title of a window will be
   * displayed in its title bar; on the X&nbsp;%Window System, the title bar
   * is rendered by the window
   * manager, so exactly how the title appears to users may vary
   * according to a user's exact configuration. The title should help a
   * user distinguish this window from other windows they may have
   * open. A good title might include the application name and current
   * document filename, for example.
   * @param title Title of the window.
   "
      end

      operation 892713 "get_title"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the title of the window. See set_title().
   * @return The title of the window, or <tt>0</tt> if none has
   * been set explicitely. The returned string is owned by the widget
   * and must not be modified or freed.
   "
      end

      operation 892841 "set_wmclass"
	public explicit_return_type "void"
	nparams 2
	  param in name "wmclass_name" explicit_type "Glib::ustring"
	  param in name "wmclass_class" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Don't use this function. It sets the X&nbsp;%Window System \"class\" and
   * \"name\" hints for a window.  According to the ICCCM, you should
   * always set these to the same value for all windows in an
   * application, and GTK+ sets them to that value by default, so calling
   * this function is sort of pointless. However, you may want to call
   * set_role() on each window in your application, for the
   * benefit of the session manager. Setting the role allows the window
   * manager to restore window positions when loading a saved session.
   * @param wmclass_name Window name hint.
   * @param wmclass_class Window class hint.
   "
      end

      operation 892969 "set_role"
	public explicit_return_type "void"
	nparams 1
	  param in name "role" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* This function is only useful on X11, not with other GTK+ targets.
   * 
   * In combination with the window title, the window role allows a
   * window manager to identify \"the
   * same\" window when an application is restarted. So for example you
   * might set the \"toolbox\" role on your app's toolbox window, so that
   * when the user restarts their session, the window manager can put
   * the toolbox back in the same place.
   * 
   * If a window already has a unique title, you don't need to set the
   * role, since the WM can use the title to identify the window when
   * restoring the session.
   * @param role Unique identifier for the window to be used when restoring a session.
   "
      end

      operation 893097 "get_role"
	const public explicit_return_type "Glib::ustring"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment ": Returns the role of the window.
- See {set_role()} for further explanation.
* Returns the role of the window. See set_role() for
   * further explanation.
   * @return The role of the window if set, or <tt>0</tt>. The
   * returned is owned by the widget and must not be modified
   * or freed.
   "
      end

      operation 893225 "add_accel_group"
	public explicit_return_type "void"
	nparams 1
	  param in name "accel_group" explicit_type "Glib::RefPtr<AccelGroup>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Associate @a accel_group  with @a window , such that calling
   * gtk_accel_groups_activate() on @a window  will activate accelerators
   * in @a accel_group .
   * @param accel_group A Gtk::AccelGroup.
   "
      end

      operation 893353 "remove_accel_group"
	public explicit_return_type "void"
	nparams 1
	  param in name "accel_group" explicit_type "Glib::RefPtr<AccelGroup>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Reverses the effects of add_accel_group().
   * @param accel_group A Gtk::AccelGroup.
   "
      end

      operation 893481 "set_position"
	public explicit_return_type "void"
	nparams 1
	  param in name "position" type class_ref 181801 // WindowPosition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets a position constraint for this window. If the old or new
   * constraint is Gtk::WIN_POS_CENTER_ALWAYS, this will also cause
   * the window to be repositioned to satisfy the new constraint.
   * @param position A position constraint.
   "
      end

      operation 893609 "activate_focus"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Activates the current focused widget within the window.
   * @return <tt>true</tt> if a widget got activated.
   "
      end

      operation 893737 "set_focus"
	public explicit_return_type "void"
	nparams 1
	  param inout name "focus" explicit_type "Gtk::Widget"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* If @a focus  is not the current focus widget, and is focusable, sets
   * it as the focus widget for the window. To set the focus to a particular
   * widget in the toplevel, it is usually more convenient to use
   * Gtk::Widget::grab_focus() instead of this function.
   * @param focus Widget to be the new focus widget.
   "
      end

      operation 893865 "unset_focus"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 893993 "get_focus"
	public return_type class_ref 130089 // Widget
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the current focused widget within the window.
   * Note that this is the widget that would have the focus
   * if the toplevel window focused; if the toplevel window
   * is not focused then  <tt>GTK_WIDGET_HAS_FOCUS (widget)</tt> will
   * not be <tt>true</tt> for the widget.
   * @return The currently focused widget, or <tt>0</tt> if there is none.
   "
      end

      operation 894121 "get_focus"
	const public return_type class_ref 130089 // Widget
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the current focused widget within the window.
   * Note that this is the widget that would have the focus
   * if the toplevel window focused; if the toplevel window
   * is not focused then  <tt>GTK_WIDGET_HAS_FOCUS (widget)</tt> will
   * not be <tt>true</tt> for the widget.
   * @return The currently focused widget, or <tt>0</tt> if there is none.
   "
      end

      operation 894249 "set_default"
	public explicit_return_type "void"
	nparams 1
	  param inout name "default_widget" explicit_type "Gtk::Widget"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* The default widget is the widget that's activated when the user
   * presses Enter in a dialog (for example). This function sets the default widget for a Gtk::Window. When setting
   * (rather than unsetting) the default widget it's generally easier to
   * call Gtk::Widget::grab_focus() on the widget. Before making a widget
   * the default widget, you must set the Gtk::CAN_DEFAULT flag on the
   * widget you'd like to make the default using GTK_WIDGET_SET_FLAGS().
   * @param default_widget Widget to be the default.
   "
      end

      operation 894377 "unset_default"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 894505 "activate_default"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Activates the default widget for the window, unless the current 
   * focused widget has been configured to receive the default action 
   * (see Gtk::RECEIVES_DEFAULT in Gtk::WidgetFlags), in which case the
   * focused widget is activated.
   * @return <tt>true</tt> if a widget got activated.
   "
      end

      operation 894633 "set_transient_for"
	public explicit_return_type "void"
	nparams 1
	  param inout name "parent" type class_ref 281129 // Window
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Dialog windows should be set transient for the main application
   * window they were spawned from. This allows window managers to e.g. keep the
   * dialog on top of the main window, or center the dialog over the
   * main window. Gtk::Dialog::new_with_buttons() and other convenience
   * functions in GTK+ will sometimes call
   * set_transient_for() on your behalf.
   * 
   * On Windows, this function will and put the child window
   * on top of the parent, much as the window manager would have
   * done on X.
   * @param parent Parent window.
   "
      end

      operation 894761 "get_transient_for"
	public return_type class_ref 281129 // Window
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Fetches the transient parent for this window. See
   * set_transient_for().
   * @return The transient parent for this window, or <tt>0</tt>
   * if no transient parent has been set.
   "
      end

      operation 894889 "get_transient_for"
	const public return_type class_ref 281129 // Window
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Fetches the transient parent for this window. See
   * set_transient_for().
   * @return The transient parent for this window, or <tt>0</tt>
   * if no transient parent has been set.
   "
      end

      operation 895017 "set_type_hint"
	public explicit_return_type "void"
	nparams 1
	  param in name "hint" explicit_type "Gdk::WindowTypeHint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* By setting the type hint for the window, you allow the window
   * manager to decorate and handle the window in a way which is
   * suitable to the function of the window in your application.
   * 
   * This function should be called before the window becomes visible.
   * 
   * Gtk::Dialog::new_with_buttons() and other convenience functions in GTK+
   * will sometimes call set_type_hint() on your behalf.
   * @param hint The window type.
   "
      end

      operation 895145 "get_type_hint"
	const public explicit_return_type "Gdk::WindowTypeHint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the type hint for this window. See set_type_hint().
   * @return The type hint for @a window .
   "
      end

      operation 895273 "set_skip_taskbar_hint"
	public explicit_return_type "void"
	nparams 1
	  param in name "setting" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Windows may set a hint asking the desktop environment not to display
   * the window in the task bar. This function sets this hint.
   * 
   * Since: 2.2
   * @param setting <tt>true</tt> to keep this window from appearing in the task bar.
   "
      end

      operation 895401 "get_skip_taskbar_hint"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the value set by set_skip_taskbar_hint()
   * @return <tt>true</tt> if window shouldn't be in taskbar
   * 
   * Since: 2.2.
   "
      end

      operation 895529 "set_skip_pager_hint"
	public explicit_return_type "void"
	nparams 1
	  param in name "setting" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Windows may set a hint asking the desktop environment not to display
   * the window in the pager. This function sets this hint.
   * (A \"pager\" is any desktop navigation tool such as a workspace
   * switcher that displays a thumbnail representation of the windows
   * on the screen.)
   * 
   * Since: 2.2
   * @param setting <tt>true</tt> to keep this window from appearing in the pager.
   "
      end

      operation 895657 "get_skip_pager_hint"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the value set by set_skip_pager_hint().
   * @return <tt>true</tt> if window shouldn't be in pager
   * 
   * Since: 2.2.
   "
      end

      operation 895785 "get_destroy_with_parent"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "_WRAP_METHOD(void set_destroy_with_parent(bool setting = true), gtk_window_set_destroy_with_parent)
 I don't that that this is ever a good thing for C++.murrayc.
* Returns whether the window will be destroyed with its transient parent. See
   * set_destroy_with_parent().
   * @return <tt>true</tt> if the window will be destroyed with its transient parent.
   "
      end

      operation 895913 "set_resizable"
	public explicit_return_type "void"
	nparams 1
	  param in name "resizable" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment " I don't that that this is ever a good thing for C++.murrayc.
* Sets whether the user can resize a window. Windows are user resizable
   * by default.
   * @param resizable <tt>true</tt> if the user can resize this window.
   "
      end

      operation 896041 "get_resizable"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the value set by set_resizable().
   * @return <tt>true</tt> if the user can resize the window.
   "
      end

      operation 896169 "set_gravity"
	public explicit_return_type "void"
	nparams 1
	  param in name "gravity" explicit_type "Gdk::Gravity"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Window gravity defines the meaning of coordinates passed to
   * move(). See move() and Gdk::Gravity for
   * more details.
   * 
   * The default window gravity is Gdk::GRAVITY_NORTH_WEST which will
   * typically \"do what you mean.\"
   * @param gravity Window gravity.
   "
      end

      operation 896297 "get_gravity"
	const public explicit_return_type "Gdk::Gravity"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the value set by set_gravity().
   * @return Window gravity.
   "
      end

      operation 896425 "set_geometry_hints"
	public explicit_return_type "void"
	nparams 3
	  param inout name "geometry_widget" type class_ref 130089 // Widget
	  param in name "geometry" explicit_type "Gdk::Geometry"
	  param in name "geom_mask" explicit_type "Gdk::WindowHints"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* This function sets up hints about how a window can be resized by
   * the user.  You can set a minimum and maximum size; allowed resize
   * increments (e.g. for xterm, you can only resize by the size of a
   * character); aspect ratios; and more. See the Gdk::Geometry struct.
   * @param geometry_widget Widget the geometry hints will be applied to.
   * @param geometry Struct containing geometry information.
   * @param geom_mask Mask indicating which struct fields should be paid attention to.
   "
      end

      operation 896553 "set_screen"
	public explicit_return_type "void"
	nparams 1
	  param in name "screen" explicit_type "Glib::RefPtr<Gdk::Screen>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the Gdk::Screen where the @a window  is displayed; if
   * the window is already mapped, it will be unmapped, and
   * then remapped on the new screen.
   * 
   * Since: 2.2
   * @param screen A Gdk::Screen.
   "
      end

      operation 896681 "get_screen"
	public explicit_return_type "Glib::RefPtr<Gdk::Screen>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the Gdk::Screen associated with @a window .
   * @return A Gdk::Screen.
   * 
   * Since: 2.2.
   "
      end

      operation 896809 "get_screen"
	const public explicit_return_type "Glib::RefPtr<const Gdk::Screen>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the Gdk::Screen associated with @a window .
   * @return A Gdk::Screen.
   * 
   * Since: 2.2.
   "
      end

      operation 896937 "set_has_frame"
	public explicit_return_type "void"
	nparams 1
	  param in name "setting" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* (Note: this is a special-purpose function for the framebuffer port,
   * that causes GTK+ to draw its own window border. For most applications,
   * you want set_decorated() instead, which tells the window
   * manager whether to draw the window border.)
   * 
   * If this function is called on a window with setting of <tt>true</tt>, before
   * it is realized or showed, it will have a \"frame\" window around
   *  @a window -&gt;window, accessible in @a window -&gt;frame. Using the signal 
   * frame_event you can receive all events targeted at the frame.
   * 
   * This function is used by the linux-fb port to implement managed
   * windows, but it could concievably be used by X-programs that
   * want to do their own window decorations.
   * @param setting A boolean.
   "
      end

      operation 897065 "get_has_frame"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Accessor for whether the window has a frame window exterior to
   *  @a window -&gt;window. Gets the value set by set_has_frame().
   * @return <tt>true</tt> if a frame has been added to the window
   * via set_has_frame().
   "
      end

      operation 897193 "set_frame_dimensions"
	public explicit_return_type "void"
	nparams 4
	  param in name "left" explicit_type "int"
	  param in name "top" explicit_type "int"
	  param in name "right" explicit_type "int"
	  param in name "bottom" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* (Note: this is a special-purpose function intended for the framebuffer
   * port; see set_has_frame(). It will have no effect on the
   * window border drawn by the window manager, which is the normal
   * case when using the X&nbsp;%Window system.)
   * 
   * For windows with frames (see set_has_frame()) this function
   * can be used to change the size of the frame border.
   * @param left The width of the left border.
   * @param top The height of the top border.
   * @param right The width of the right border.
   * @param bottom The height of the bottom border.
   "
      end

      operation 897321 "get_frame_dimensions"
	const public explicit_return_type "void"
	nparams 4
	  param inout name "left" explicit_type "int"
	  param inout name "top" explicit_type "int"
	  param inout name "right" explicit_type "int"
	  param inout name "bottom" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}, ${t3} & ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}, ${t2} & ${p2}, ${t3} & ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* (Note: this is a special-purpose function intended for the
   * framebuffer port; see set_has_frame(). It will not
   * return the size of the window border drawn by the window manager, which is the normal
   * case when using a windowing system.  See
   * gdk_window_get_frame_extents() to get the standard window border
   * extents.)
   * 
   * Retrieves the dimensions of the frame window for this toplevel.
   * See set_has_frame(), set_frame_dimensions().
   * @param left Location to store the width of the frame at the left.
   * @param top Location to store the height of the frame at the top.
   * @param right Location to store the width of the frame at the returns.
   * @param bottom Location to store the height of the frame at the bottom.
   "
      end

      operation 897449 "set_decorated"
	public explicit_return_type "void"
	nparams 1
	  param in name "setting" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* By default, windows are decorated with a title bar, resize
   * controls, etc.  Some window
   * managers allow GTK+ to disable these decorations, creating a
   * borderless window. If you set the decorated property to <tt>false</tt>
   * using this function, GTK+ will do its best to convince the window
   * manager not to decorate the window. Depending on the system, this
   * function may not have any effect when called on a window that is
   * already visible, so you should call it before calling gtk_window_show().
   * 
   * On Windows, this function always works, since there's no window manager
   * policy involved.
   * @param setting <tt>true</tt> to decorate the window.
   "
      end

      operation 897577 "get_decorated"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether the window has been set to have decorations
   * such as a title bar via set_decorated().
   * @return <tt>true</tt> if the window has been set to have decorations.
   "
      end

      operation 897705 "get_icon_list"
	public explicit_return_type "Glib::ListHandle< Glib::RefPtr<Gdk::Pixbuf> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the list of icons set by set_icon_list().
   * The list is copied, but the reference count on each
   * member won't be incremented.
   * @return Copy of window's icon list.
   "
      end

      operation 897833 "get_icon_list"
	const public explicit_return_type "Glib::ListHandle< Glib::RefPtr<const Gdk::Pixbuf> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Retrieves the list of icons set by set_icon_list().
   * The list is copied, but the reference count on each
   * member won't be incremented.
   * @return Copy of window's icon list.
   "
      end

      operation 897961 "set_icon_list"
	public explicit_return_type "void"
	nparams 1
	  param in name "list" explicit_type "Glib::ListHandle< Glib::RefPtr<Gdk::Pixbuf> >"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets up the icon representing a Gtk::Window. The icon is used when
   * the window is minimized (also known as iconified).  Some window
   * managers or desktop environments may also place it in the window
   * frame, or display it in other contexts.
   * 
   * set_icon_list() allows you to pass in the same icon in
   * several hand-drawn sizes. The list should contain the natural sizes
   * your icon is available in; that is, don't scale the image before
   * passing it to GTK+. Scaling is postponed until the last minute,
   * when the desired final size is known, to allow best quality.
   * 
   * By passing several sizes, you may improve the final image quality
   * of the icon, by reducing or eliminating automatic image scaling.
   * 
   * Recommended sizes to provide: 16x16, 32x32, 48x48 at minimum, and
   * larger images (64x64, 128x128) if you have them.
   * 
   * See also set_default_icon_list() to set the icon
   * for all windows in your application in one go.
   * 
   * Note that transient windows (those who have been set transient for another
   * window using set_transient_for()) will inherit their
   * icon from their transient parent. So there's no need to explicitly
   * set the icon on transient windows.
   * @param list List of Gdk::Pixbuf.
   "
      end

      operation 898089 "set_icon"
	public explicit_return_type "void"
	nparams 1
	  param in name "icon" explicit_type "Glib::RefPtr<Gdk::Pixbuf>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets up the icon representing a Gtk::Window. This icon is used when
   * the window is minimized (also known as iconified).  Some window
   * managers or desktop environments may also place it in the window
   * frame, or display it in other contexts.
   * 
   * The icon should be provided in whatever size it was naturally
   * drawn; that is, don't scale the image before passing it to
   * GTK+. Scaling is postponed until the last minute, when the desired
   * final size is known, to allow best quality.
   * 
   * If you have your icon hand-drawn in multiple sizes, use
   * set_icon_list(). Then the best size will be used.
   * 
   * This function is equivalent to calling set_icon_list()
   * with a 1-element list.
   * 
   * See also set_default_icon_list() to set the icon
   * for all windows in your application in one go.
   * @param icon Icon image, or <tt>0</tt>.
   "
      end

      operation 898217 "set_icon_from_file"
	public explicit_return_type "bool"
	nparams 1
	  param in name "filename" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the icon for the window.
   * 
   * This function is equivalent to calling set_icon()
   * with a pixbuf created by loading the image from @a filename .
   * @param filename Location of icon file.
   * @return <tt>true</tt> if setting the icon succeeded.
   * 
   * Since: 2.2.
   "
      end

      operation 898345 "get_icon"
	public explicit_return_type "Glib::RefPtr<Gdk::Pixbuf>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the value set by set_icon() (or if you've
   * called set_icon_list(), gets the first icon in
   * the icon list).
   * @return Icon for window.
   "
      end

      operation 898473 "get_icon"
	const public explicit_return_type "Glib::RefPtr<const Gdk::Pixbuf>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the value set by set_icon() (or if you've
   * called set_icon_list(), gets the first icon in
   * the icon list).
   * @return Icon for window.
   "
      end

      operation 898601 "set_default_icon_list"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "list" explicit_type "Glib::ListHandle< Glib::RefPtr<Gdk::Pixbuf> >"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets an icon list to be used as fallback for windows that haven't
   * had set_icon_list() called on them to set up a
   * window-specific icon list. This function allows you to set up the
   * icon for all windows in your app at once.
   * 
   * See set_icon_list() for more details.
   * @param list A list of Gdk::Pixbuf.
   "
      end

      operation 898729 "get_default_icon_list"
	class_operation public explicit_return_type "Glib::ListHandle< Glib::RefPtr<Gdk::Pixbuf> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the value set by Gtk::Window::set_default_icon_list().
   * @return Copy of default icon list.
   "
      end

      operation 898857 "set_default_icon_from_file"
	class_operation public explicit_return_type "bool"
	nparams 1
	  param in name "filename" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets an icon to be used as fallback for windows that haven't
   * had set_icon_list() called on them from a file
   * on disk. Warns on failure if @a err  is <tt>0</tt>.
   * @param filename Location of icon file.
   * @return <tt>true</tt> if setting the icon succeeded.
   * 
   * Since: 2.2.
   "
      end

      operation 898985 "set_auto_startup_notification"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "setting" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* By default, after showing the first Gtk::Window for each Gdk::Screen,
   * GTK+ calls gdk_screen_notify_startup_complete().  Call this
   * function to disable the automatic startup notification. You might
   * do this if your first window is a splash screen, and you want to
   * delay notification until after your real main window has been
   * shown, for example.
   * 
   * In that example, you would disable startup notification
   * temporarily, show your splash screen, then re-enable it so that
   * showing the main window would automatically result in notification.
   * 
   * Since: 2.2
   * @param setting <tt>true</tt> to automatically do startup notification.
   "
      end

      operation 899113 "set_modal"
	public explicit_return_type "void"
	nparams 1
	  param in name "modal" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets a window modal or non-modal. Modal windows prevent interaction
   * with other windows in the same application. To keep modal dialogs
   * on top of main application windows, use
   * set_transient_for() to make the dialog transient for the
   * parent; most window managers
   * will then disallow lowering the dialog below the parent.
   * @param modal Whether the window is modal.
   "
      end

      operation 899241 "get_modal"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns whether the window is modal. See set_modal().
   * @return <tt>true</tt> if the window is set to be modal and
   * establishes a grab when shown.
   "
      end

      operation 899369 "list_toplevels"
	class_operation public explicit_return_type "Glib::ListHandle<Window*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns a list of all existing toplevel windows. The widgets
   * in the list are not individually referenced. If you want
   * to iterate through the list and perform actions involving
   * callbacks that might destroy the widgets, you <em>must</em> call
   * <tt>g_list_foreach (result, (GFunc)g_object_ref, <tt>0</tt>)</tt> first, and
   * then unref all the widgets afterwards.
   * @return List of toplevel widgets.
   "
      end

      operation 899497 "add_mnemonic"
	public explicit_return_type "void"
	nparams 2
	  param in name "keyval" explicit_type "guint"
	  param inout name "target" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Adds a mnemonic to this window.
   * @param keyval The mnemonic.
   * @param target The widget that gets activated by the mnemonic.
   "
      end

      operation 899625 "remove_mnemonic"
	public explicit_return_type "void"
	nparams 2
	  param in name "keyval" explicit_type "guint"
	  param inout name "target" type class_ref 130089 // Widget
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Removes a mnemonic from this window.
   * @param keyval The mnemonic.
   * @param target The widget that gets activated by the mnemonic.
   "
      end

      operation 899753 "mnemonic_activate"
	public explicit_return_type "bool"
	nparams 2
	  param in name "keyval" explicit_type "guint"
	  param in name "modifier" explicit_type "Gdk::ModifierType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Activates the targets associated with the mnemonic.
   * @param keyval The mnemonic.
   * @param modifier The modifiers.
   * @return <tt>true</tt> if the activation is done.
   "
      end

      operation 899881 "set_mnemonic_modifier"
	public explicit_return_type "void"
	nparams 1
	  param in name "modifier" explicit_type "Gdk::ModifierType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the mnemonic modifier for this window.
   * @param modifier The modifier mask used to activate
   * mnemonics on this window.
   "
      end

      operation 900009 "get_mnemonic_modifier"
	public explicit_return_type "Gdk::ModifierType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns the mnemonic modifier for this window. See
   * set_mnemonic_modifier().
   * @return The modifier mask used to activate
   * mnemonics on this window.
   "
      end

      operation 900137 "present"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Presents a window to the user. This may mean raising the window
   * in the stacking order, deiconifying it, moving it to the current
   * desktop, and/or giving it the keyboard focus, possibly dependent
   * on the user's platform, window manager, and preferences.
   * 
   * If @a window  is hidden, this function calls Gtk::Widget::show()
   * as well.
   * 
   * This function should be used when the user tries to open a window
   * that's already open. Say for example the preferences dialog is
   * currently open, and the user chooses Preferences from the menu
   * a second time; use present() to move the already-open dialog
   * where the user can see it.
   "
      end

      operation 900265 "iconify"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Asks to iconify (i.e.\\ minimize) the specified @a window . Note that
   * you shouldn't assume the window is definitely iconified afterward,
   * because other entities (e.g. the user or window manager) could deiconify it
   * again, or there may not be a window manager in which case
   * iconification isn't possible, etc. But normally the window will end
   * up iconified. Just don't write code that crashes if not.
   * 
   * It's permitted to call this function before showing a window,
   * in which case the window will be iconified before it ever appears
   * onscreen.
   * 
   * You can track iconification via the \"window_state_event\" signal
   * on Gtk::Widget.
   "
      end

      operation 900393 "deiconify"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Asks to deiconify (i.e.\\ unminimize) the specified @a window . Note
   * that you shouldn't assume the window is definitely deiconified
   * afterward, because other entities (e.g. the user or window manager) could iconify it
   * again before your code which assumes deiconification gets to run.
   * 
   * You can track iconification via the \"window_state_event\" signal
   * on Gtk::Widget.
   "
      end

      operation 900521 "stick"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Asks to stick @a window , which means that it will appear on all user
   * desktops. Note that you shouldn't assume the window is definitely
   * stuck afterward, because other entities (e.g. the user or window manager) could unstick it
   * again, and some window managers do not support sticking
   * windows. But normally the window will end up stuck. Just don't
   * write code that crashes if not.
   * 
   * It's permitted to call this function before showing a window.
   * 
   * You can track stickiness via the \"window_state_event\" signal
   * on Gtk::Widget.
   "
      end

      operation 900649 "unstick"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Asks to unstick @a window , which means that it will appear on only
   * one of the user's desktops. Note that you shouldn't assume the
   * window is definitely unstuck afterward, because other entities
   * (e.g. the user or window
   * manager) could stick it again. But normally the window will
   * end up stuck. Just don't write code that crashes if not.
   * 
   * You can track stickiness via the \"window_state_event\" signal
   * on Gtk::Widget.
   "
      end

      operation 900777 "maximize"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Asks to maximize @a window , so that it becomes full-screen. Note that
   * you shouldn't assume the window is definitely maximized afterward,
   * because other entities (e.g. the user or window manager) could unmaximize it
   * again, and not all window managers support maximization. But
   * normally the window will end up maximized. Just don't write code
   * that crashes if not.
   * 
   * It's permitted to call this function before showing a window,
   * in which case the window will be maximized when it appears onscreen
   * initially.
   * 
   * You can track maximization via the \"window_state_event\" signal
   * on Gtk::Widget.
   "
      end

      operation 900905 "unmaximize"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Asks to unmaximize @a window . Note that you shouldn't assume the
   * window is definitely unmaximized afterward, because other entities
   * (e.g. the user or window
   * manager) could maximize it again, and not all window
   * managers honor requests to unmaximize. But normally the window will
   * end up unmaximized. Just don't write code that crashes if not.
   * 
   * You can track maximization via the \"window_state_event\" signal
   * on Gtk::Widget.
   "
      end

      operation 901033 "fullscreen"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Asks to place @a window  in the fullscreen state. Note that you
   * shouldn't assume the window is definitely full screen afterward,
   * because other entities (e.g. the user or window manager) could unfullscreen it
   * again, and not all window managers honor requests to fullscreen
   * windows. But normally the window will end up fullscreen. Just
   * don't write code that crashes if not.
   * 
   * You can track the fullscreen state via the \"window_state_event\" signal
   * on Gtk::Widget.
   * 
   * Since: 2.2
   "
      end

      operation 901161 "unfullscreen"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Asks to toggle off the fullscreen state for @a window . Note that you
   * shouldn't assume the window is definitely not full screen
   * afterward, because other entities (e.g. the user or window manager) could fullscreen it
   * again, and not all window managers honor requests to unfullscreen
   * windows. But normally the window will end up restored to its normal
   * state. Just don't write code that crashes if not.
   * 
   * You can track the fullscreen state via the \"window_state_event\" signal
   * on Gtk::Widget.
   * 
   * Since: 2.2
   "
      end

      operation 901289 "begin_resize_drag"
	public explicit_return_type "void"
	nparams 5
	  param in name "edge" explicit_type "Gdk::WindowEdge"
	  param in name "button" explicit_type "int"
	  param in name "root_x" explicit_type "int"
	  param in name "root_y" explicit_type "int"
	  param in name "timestamp" explicit_type "guint32"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Starts resizing a window. This function is used if an application
   * has window resizing controls. When GDK can support it, the resize
   * will be done using the standard mechanism for the window manager or windowing
   * system. Otherwise, GDK will try to emulate window resizing,
   * potentially not all that well, depending on the windowing system.
   * @param button Mouse button that initiated the drag.
   * @param edge Position of the resize control.
   * @param root_x X position where the user clicked to initiate the drag, in root window coordinates.
   * @param root_y Y position where the user clicked to initiate the drag.
   * @param timestamp Timestamp from the click event that initiated the drag.
   "
      end

      operation 901417 "begin_move_drag"
	public explicit_return_type "void"
	nparams 4
	  param in name "button" explicit_type "int"
	  param in name "root_x" explicit_type "int"
	  param in name "root_y" explicit_type "int"
	  param in name "timestamp" explicit_type "guint32"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Starts moving a window. This function is used if an application has
   * window movement grips. When GDK can support it, the window movement
   * will be done using the standard mechanism for the window manager or windowing
   * system. Otherwise, GDK will try to emulate window movement,
   * potentially not all that well, depending on the windowing system.
   * @param button Mouse button that initiated the drag.
   * @param root_x X position where the user clicked to initiate the drag, in root window coordinates.
   * @param root_y Y position where the user clicked to initiate the drag.
   * @param timestamp Timestamp from the click event that initiated the drag.
   "
      end

      operation 901545 "set_default_size"
	public explicit_return_type "void"
	nparams 2
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets the default size of a window. If the window's \"natural\" size
   * (its size request) is larger than the default, the default will be
   * ignored. More generally, if the default size does not obey the
   * geometry hints for the window (set_geometry_hints() can
   * be used to set these explicitly), the default size will be clamped
   * to the nearest permitted size.
   * 
   * Unlike Gtk::Widget::set_size_request(), which sets a size request for
   * a widget and thus would keep users from shrinking the window, this
   * function only sets the initial size, just as if the user had
   * resized the window themselves. Users can still shrink the window
   * again as they normally would. Setting a default size of -1 means to
   * use the \"natural\" default size (the size request of the window).
   * 
   * For more control over a window's initial size and how resizing works,
   * investigate set_geometry_hints().
   * 
   * For some uses, resize() is a more appropriate function.
   * resize() changes the current size of the window, rather
   * than the size to be used on initial display. resize() always
   * affects the window itself, not the geometry widget.
   * 
   * The default size of a window only affects the first time a window is
   * shown; if a window is hidden and re-shown, it will remember the size
   * it had prior to hiding, rather than using the default size.
   * 
   * Windows can't actually be 0x0 in size, they must be at least 1x1, but
   * passing 0 for @a width  and @a height  is OK, resulting in a 1x1 default size.
   * @param width Width in pixels, or -1 to unset the default width.
   * @param height Height in pixels, or -1 to unset the default height.
   "
      end

      operation 901673 "get_default_size"
	const public explicit_return_type "void"
	nparams 2
	  param inout name "width" explicit_type "int"
	  param inout name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Gets the default size of the window. A value of -1 for the width or
   * height indicates that a default size has not been explicitly set
   * for that dimension, so the \"natural\" size of the window will be
   * used.
   * @param width Location to store the default width.
   * @param height Location to store the default height.
   "
      end

      operation 901801 "resize"
	public explicit_return_type "void"
	nparams 2
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Resizes the window as if the user had done so, obeying geometry
   * constraints. The default geometry constraint is that windows may
   * not be smaller than their size request; to override this
   * constraint, call Gtk::Widget::set_size_request() to set the window's
   * request to a smaller value.
   * 
   * If resize() is called before showing a window for the
   * first time, it overrides any default size set with
   * set_default_size().
   * 
   * Windows may not be resized smaller than 1 by 1 pixels.
   * @param width Width in pixels to resize the window to.
   * @param height Height in pixels to resize the window to.
   "
      end

      operation 901929 "get_size"
	const public explicit_return_type "void"
	nparams 2
	  param inout name "width" explicit_type "int"
	  param inout name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Obtains the current size of @a window . If @a window  is not onscreen,
   * it returns the size GTK+ will suggest to the window manager for the initial window
   * size (but this is not reliably the same as the size the window
   * manager will actually select). The size obtained by
   * get_size() is the last size received in a
   * Gdk::EventConfigure, that is, GTK+ uses its locally-stored size,
   * rather than querying the X server for the size. As a result, if you
   * call resize() then immediately call
   * get_size(), the size won't have taken effect yet. After
   * the window manager processes the resize request, GTK+ receives
   * notification that the size has changed via a configure event, and
   * the size of the window gets updated.
   * 
   * @note Nearly any use of this function creates a race condition,
   * because the size of the window may change between the time that you
   * get the size and the time that you perform some action assuming
   * that size is the current size. To avoid race conditions, connect to
   * \"configure_event\" on the window and adjust your size-dependent
   * state to match the size delivered in the Gdk::EventConfigure.
   * 
   * @note The returned size does <em>not</em> include the
   * size of the window manager decorations (aka the window frame or
   * border). Those are not drawn by GTK+ and GTK+ has no reliable
   * method of determining their size.
   * 
   * @note If you are getting a window size in order to position
   * the window onscreen, there may be a better way. The preferred
   * way is to simply set the window's semantic type with
   * set_type_hint(), which allows the window manager to
   * e.g. center dialogs. Also, if you set the transient parent of
   * dialogs with set_transient_for() window managers
   * will often center the dialog over its parent window. It's
   * much preferred to let the window manager handle these
   * things rather than doing it yourself, because all apps will
   * behave consistently and according to user prefs if the window
   * manager handles it. Also, the window manager can take the size
   * of the window decorations/border into account, while your
   * application cannot.
   * 
   * In any case, if you insist on application-specified window
   * positioning, there's <em>still</em> a better way than
   * doing it yourself - set_position() will frequently
   * handle the details for you.
   * @param width Return location for width.
   * @param height Return location for height.
   "
      end

      operation 902057 "move"
	public explicit_return_type "void"
	nparams 2
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Asks the window manager to move
   *  @a window  to the given position.  %Window managers are free to ignore
   * this; most window managers ignore requests for initial window
   * positions (instead using a user-defined placement algorithm) and
   * honor requests after the window has already been shown.
   * 
   * @note the position is the position of the gravity-determined
   * reference point for the window. The gravity determines two things:
   * first, the location of the reference point in root window
   * coordinates; and second, which point on the window is positioned at
   * the reference point.
   * 
   * By default the gravity is Gdk::GRAVITY_NORTH_WEST, so the reference
   * point is simply the @a x , @a y  supplied to move(). The
   * top-left corner of the window decorations (aka window frame or
   * border) will be placed at @a x , @a y .  Therefore, to position a window
   * at the top left of the screen, you want to use the default gravity
   * (which is Gdk::GRAVITY_NORTH_WEST) and move the window to 0,0.
   * 
   * To position a window at the bottom right corner of the screen, you
   * would set Gdk::GRAVITY_SOUTH_EAST, which means that the reference
   * point is at @a x  + the window width and @a y  + the window height, and
   * the bottom-right corner of the window border will be placed at that
   * reference point. So, to place a window in the bottom right corner
   * you would first set gravity to south east, then write:
   * <tt>gtk_window_move (window, gdk_screen_width() - window_width,
   * gdk_screen_height() - window_height)</tt>.
   * 
   * The Extended Window Manager Hints specification at 
   * http://www.freedesktop.org/standards/wm-spec.html has a 
   * nice table of gravities in the \"implementation notes\" section.
   * 
   * The get_position() documentation may also be relevant.
   * @param x X coordinate to move window to.
   * @param y Y coordinate to move window to.
   "
      end

      operation 902185 "get_position"
	const public explicit_return_type "void"
	nparams 2
	  param inout name "root_x" explicit_type "int"
	  param inout name "root_y" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* This function returns the position you need to pass to
   * move() to keep @a window  in its current position.  This
   * means that the meaning of the returned value varies with window
   * gravity. See move() for more details.
   * 
   * If you haven't changed the window gravity, its gravity will be
   * Gdk::GRAVITY_NORTH_WEST. This means that get_position()
   * gets the position of the top-left corner of the window manager
   * frame for the window. move() sets the position of this
   * same top-left corner.
   * 
   * get_position() is not 100% reliable because the X&nbsp;%Window System
   * does not specify a way to obtain the geometry of the
   * decorations placed on a window by the window manager.
   * Thus GTK+ is using a \"best guess\" that works with most
   * window managers.
   * 
   * Moreover, nearly all window managers are historically broken with
   * respect to their handling of window gravity. So moving a window to
   * its current position as returned by get_position() tends
   * to result in moving the window slightly. %Window managers are
   * slowly getting better over time.
   * 
   * If a window has gravity Gdk::GRAVITY_STATIC the window manager
   * frame is not relevant, and thus get_position() will
   * always produce accurate results. However you can't use static
   * gravity to do things like place a window in a corner of the screen,
   * because static gravity ignores the window manager decorations.
   * 
   * If you are saving and restoring your application's window
   * positions, you should know that it's impossible for applications to
   * do this without getting it somewhat wrong because applications do
   * not have sufficient knowledge of window manager state. The Correct
   * Mechanism is to support the session management protocol (see the
   * \"GnomeClient\" object in the GNOME libraries for example) and allow
   * the window manager to save your window sizes and positions.
   * @param root_x Return location for X coordinate of gravity-determined reference point.
   * @param root_y Return location for Y coordinate of gravity-determined reference point.
   "
      end

      operation 902313 "parse_geometry"
	public explicit_return_type "bool"
	nparams 1
	  param in name "geometry" explicit_type "Glib::ustring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Parses a standard X&nbsp;%Window System geometry string - see the
   * manual page for X (type 'man X') for details on this.
   * parse_geometry() does work on all GTK+ ports
   * including Win32 but is primarily intended for an X environment.
   * 
   * If either a size or a position can be extracted from the
   * geometry string, parse_geometry() returns <tt>true</tt>
   * and calls set_default_size() and/or move()
   * to resize/move the window.
   * 
   * If parse_geometry() returns <tt>true</tt>, it will also
   * set the Gdk::HINT_USER_POS and/or Gdk::HINT_USER_SIZE hints
   * indicating to the window manager that the size/position of
   * the window was user-specified. This causes most window
   * managers to honor the geometry.
   * 
   * Note that for parse_geometry() to work as expected, it has
   * to be called when the window has its \"final\" size, i.e. after calling
   * Gtk::Widget::show_all() on the contents and set_geometry_hints()
   * on the window.
   * 
   * @code
   * int
   * main (int argc, char *argv[])
   * {
   * GtkWidget *window, vbox;
   * GdkGeometry size_hints;
   * 
   * gtk_init (&amp;argc, &amp;argv);
   * 
   * window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
   * vbox = gtk_vbox_new (<tt>false</tt>, 0);
   * 
   * gtk_container_add (GTK_CONTAINER (window), vbox);
   * fill_with_content (vbox);
   * gtk_widget_show_all (vbox);
   * 
   * size_hints = {
   * 100, 50, 0, 0, 100, 50, 10, 10, 0.0, 0.0, GDK_GRAVITY_NORTH_WEST  
   * };
   * 
   * gtk_window_set_geometry_hints (GTK_WINDOW (window),
   * window,
   * &amp;size_hints,
   * GDK_HINT_MIN_SIZE | 
   * GDK_HINT_BASE_SIZE | 
   * GDK_HINT_RESIZE_INC);
   * 
   * if (argc &gt; 1)
   * {
   * if (!gtk_window_parse_geometry (GTK_WINDOW (window), argv[1]))
   * fprintf (stderr, \"Failed to parse '&percnt;s'<tt>\\\\n</tt>\", argv[1]);
   * }
   * 
   * gtk_widget_show_all (window);
   * gtk_main();
   * 
   * return 0;
   * }
   * @endcode
   * @param geometry Geometry string.
   * @return <tt>true</tt> if string was parsed successfully.
   "
      end

      operation 902441 "reshow_with_initial_size"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Hides @a window , then reshows it, resetting the
   * default size and position of the window. Used
   * by GUI builders only.
   "
      end

      operation 902569 "set_default_icon"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "icon" explicit_type "Glib::RefPtr<Gdk::Pixbuf>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Sets an icon to be used as fallback for windows that haven't
   * had set_icon() called on them from a pixbuf.
   * 
   * Since: 2.4
   * @param icon The icon.
   "
      end

      operation 902697 "set_keep_above"
	public explicit_return_type "void"
	nparams 1
	  param in name "setting" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Asks to keep @a window  above, so that it stays on top. Note that
   * you shouldn't assume the window is definitely above afterward,
   * because other entities (e.g. the user or window manager) could not keep it above,
   * and not all window managers support keeping windows above. But
   * normally the window will end kept above. Just don't write code
   * that crashes if not.
   * 
   * It's permitted to call this function before showing a window,
   * in which case the window will be kept above when it appears onscreen
   * initially.
   * 
   * You can track the above state via the \"window_state_event\" signal
   * on Gtk::Widget.
   * 
   * Note that, according to the Extended Window Manager Hints
   * specification, the above state is mainly meant for user preferences and should not be used 
   * by applications e.g. for drawing attention to their dialogs.
   * 
   * Since: 2.4
   * @param setting Whether to keep @a window  above other windows.
   "
      end

      operation 902825 "set_keep_below"
	public explicit_return_type "void"
	nparams 1
	  param in name "setting" explicit_type "bool"
	    defaultvalue " true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Asks to keep @a window  below, so that it stays in bottom. Note that
   * you shouldn't assume the window is definitely below afterward,
   * because other entities (e.g. the user or window manager) could not keep it below,
   * and not all window managers support putting windows below. But
   * normally the window will be kept below. Just don't write code
   * that crashes if not.
   * 
   * It's permitted to call this function before showing a window,
   * in which case the window will be kept below when it appears onscreen
   * initially.
   * 
   * You can track the below state via the \"window_state_event\" signal
   * on Gtk::Widget.
   * 
   * Note that, according to the Extended Window Manager Hints
   * specification, the above state is mainly meant for user preferences and should not be used 
   * by applications e.g. for drawing attention to their dialogs.
   * 
   * Since: 2.4
   * @param setting Whether to keep @a window  below other windows.
   "
      end

      operation 902953 "get_accel_group"
	public explicit_return_type "Glib::RefPtr<AccelGroup>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Returns a default accel group for this window
   * This is a gtkmm-specific function.  This accel group can not
   * be removed.
   "
      end

      operation 903081 "raise"
	cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Brings the window to the front.
   * This is just a more obvious convenience wrapper for get_window()->raise().
   "
      end

      operation 903209 "set_manage"
	cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Overriden to warn that it doesn't make sense to use Gtk::manage() on this class because it has no parent container."
      end

      operation 903337 "destroy_"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "See comments in the implementations:"
      end

      operation 903465 "_destroy_c_instance"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      classrelation 245289 // accel_group_ (<directional composition>)
	relation 245289 *-->
	  stereotype "Glib::RefPtr"
	  a role_name "accel_group_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};"
	    classrelation_ref 245289 // accel_group_ (<directional composition>)
	  b parent class_ref 182953 // AccelGroup
      end
    end

    class 318505 "WindowGroup"
      visibility package 
      cpp_external cpp_decl "${name}
#include <gtkmm/windowgroup.h>
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 318633 "CppObjectType"
	visibility package stereotype "typedef" base_type class_ref 318505 // WindowGroup
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 250281 // <realization>
	  relation 250281 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 250281 // <realization>
	    b parent class_ref 318505 // WindowGroup
	end
      end

      class 318761 "CppClassType"
	visibility package stereotype "typedef" explicit_base_type "WindowGroup_Class"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 318889 "BaseObjectType"
	visibility package stereotype "typedef" explicit_base_type "GtkWindowGroup"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 319017 "BaseClassType"
	visibility package stereotype "typedef" explicit_base_type "GtkWindowGroupClass"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 250409 // windowgroup_class_ (<directional composition>)
	relation 250409 *-->
	  a role_name "windowgroup_class_" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 250409 // windowgroup_class_ (<directional composition>)
	  b parent class_ref 318761 // CppClassType
      end

      operation 962217 "WindowGroup"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 318505 // WindowGroup
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
	comment " noncopyable"
      end

      operation 962345 "operator ="
	private return_type class_ref 318505 // WindowGroup
	nparams 1
	  param in name "" type class_ref 318505 // WindowGroup
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 962473 "WindowGroup"
	protected explicit_return_type ""
	nparams 1
	  param in name "construct_params" explicit_type "Glib::ConstructParams"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 962601 "WindowGroup"
	protected explicit_return_type ""
	nparams 1
	  param inout name "castitem" explicit_type "GtkWindowGroup"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 962729 "~WindowGroup"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 962857 "get_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 962985 "get_base_type"
	class_operation public explicit_return_type "GType"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 963113 "gobj"
	cpp_inline public explicit_return_type "GtkWindowGroup"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkWindowGroup*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 963241 "gobj"
	const cpp_inline public explicit_return_type "GtkWindowGroup"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return reinterpret_cast<GtkWindowGroup*>(gobject_); };
"
	
	
	
	
	comment "/Provides access to the underlying C GObject."
      end

      operation 963369 "gobj_copy"
	public explicit_return_type "GtkWindowGroup"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "/Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs."
      end

      operation 963497 "WindowGroup"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
${body}}
"
	
	
	
	
      end

      operation 963625 "create"
	class_operation public explicit_return_type "Glib::RefPtr<WindowGroup>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
      end

      operation 963753 "add_window"
	public explicit_return_type "void"
	nparams 1
	  param inout name "window" type class_ref 281129 // Window
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Adds a window to a Gtk::WindowGroup.
   * @param window The Gtk::Window to add.
   "
      end

      operation 963881 "remove_window"
	public explicit_return_type "void"
	nparams 1
	  param inout name "window" type class_ref 281129 // Window
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
${body}}
"
	
	
	
	
	comment "* Removes a window from a Gtk::WindowGroup.
   * @param window The Gtk::Window to remove.
   "
      end
    end

    class 181801 "WindowPosition"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 "
      attribute 194473 "WIN_POS_NONE"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 194601 "WIN_POS_CENTER"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 194729 "WIN_POS_MOUSE"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 194857 "WIN_POS_CENTER_ALWAYS"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 194985 "WIN_POS_CENTER_ON_PARENT"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 306601 "WindowType"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 "
      attribute 195113 "WINDOW_TOPLEVEL"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 195241 "WINDOW_POPUP"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 317225 "WrapMode"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @ingroup gtkmmEnums
 "
      attribute 195369 "WRAP_NONE"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 195497 "WRAP_CHAR"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 195625 "WRAP_WORD"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 195753 "WRAP_WORD_CHAR"
	public explicit_type ""
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end
  end

  deploymentview 133929 "dummy view"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default
    artifact 153641 "gtkmm"
      stereotype "source"
      associated_classes
	class_ref 280617 // AccelFlags
	class_ref 182953 // AccelGroup
	class_ref 129065 // AccelKey
	class_ref 129193 // AccelLabel
	class_ref 130217 // Action
	class_ref 131753 // ActionGroup
	class_ref 132521 // Adjustment
	class_ref 134697 // AlignmentEnum
	class_ref 282793 // Alignment
	class_ref 308265 // AnchorType
	class_ref 283689 // Arrow
	class_ref 284201 // ArrowType
	class_ref 284457 // AspectFrame
	class_ref 308905 // AttachOptions
	class_ref 281385 // Bin
	class_ref 287145 // Box
	class_ref 286761 // BoxList
	class_ref 281001 // BuiltinIconSize
	class_ref 242601 // BuiltinStockID
	class_ref 142377 // ButtonBox
	class_ref 143145 // ButtonBoxStyle
	class_ref 141353 // Button
	class_ref 210601 // ButtonsType
	class_ref 144809 // CalendarDisplayOptions
	class_ref 288425 // Calendar
	class_ref 289065 // CellEditable
	class_ref 289833 // CellLayout
	class_ref 290473 // CellRenderer
	class_ref 291753 // CellRendererMode
	class_ref 292137 // CellRendererPixbuf
	class_ref 291369 // CellRendererState
	class_ref 150185 // CellRendererText
	class_ref 292777 // CellRendererToggle
	class_ref 293417 // CheckButton
	class_ref 294185 // CheckMenuItem
	class_ref 286121 // Child
	class_ref 153385 // Clipboard
	class_ref 295081 // ColorButton
	class_ref 296489 // ColorSelectionDialog
	class_ref 295721 // ColorSelection
	class_ref 302249 // ComboBoxEntry
	class_ref 302889 // ComboBoxEntryText
	class_ref 301225 // ComboBox
	class_ref 303273 // ComboBoxText
	class_ref 298921 // ComboDropDown
	class_ref 297769 // ComboDropDownItem
	class_ref 298537 // ComboDropDownList
	class_ref 299817 // Combo
	class_ref 280745 // Container
	class_ref 313001 // CornerType
	class_ref 303657 // Curve
	class_ref 304425 // CurveType
	class_ref 309801 // DeleteType
	class_ref 278185 // DestDefaults
	class_ref 296617 // Dialog
	class_ref 280361 // DirectionType
	class_ref 303785 // DrawingArea
	class_ref 300585 // Editable
	class_ref 307241 // EntryCompletion
	class_ref 300457 // Entry
	class_ref 183593 // EventBox
	class_ref 184361 // Expander
	class_ref 310441 // ExpanderStyle
	class_ref 185129 // FileChooserAction
	class_ref 186409 // FileChooserDialog
	class_ref 185513 // FileChooser
	class_ref 187177 // FileChooserWidget
	class_ref 187945 // FileFilterFlags
	class_ref 186281 // FileFilter
	class_ref 189225 // FileSelection
	class_ref 190249 // Fixed
	class_ref 191017 // FontButton
	class_ref 192681 // FontSelectionDialog
	class_ref 191785 // FontSelection
	class_ref 284585 // Frame
	class_ref 305065 // GammaCurve
	class_ref 194217 // HandleBox
	class_ref 140585 // HBox
	class_ref 144041 // HButtonBox
	class_ref 215849 // HPaned
	class_ref 226985 // HRuler
	class_ref 229289 // HScale
	class_ref 282409 // HScrollbar
	class_ref 234921 // HSeparator
	class_ref 194985 // IconFactory
	class_ref 195881 // IconInfo
	class_ref 197673 // IconLookupFlags
	class_ref 195753 // IconSet
	class_ref 131241 // IconSize
	class_ref 196777 // IconSource
	class_ref 197801 // IconThemeError
	class_ref 197929 // IconTheme
	class_ref 131113 // Image
	class_ref 199721 // ImageMenuItem
	class_ref 198697 // ImageType
	class_ref 200489 // InputDialog
	class_ref 201513 // Invisible
	class_ref 202281 // Item
	class_ref 203817 // Justification
	class_ref 206121 // KeySnooperSig
	class_ref 129321 // Label
	class_ref 318249 // Layout
	class_ref 204457 // ListStore
	class_ref 206377 // Main
	class_ref 207657 // MenuBar
	class_ref 311593 // MenuDirectionType
	class_ref 203689 // Menu
	class_ref 131369 // MenuItem
	class_ref 209065 // MenuList
	class_ref 206633 // MenuShell
	class_ref 210985 // MessageDialog
	class_ref 210217 // MessageType
	class_ref 311977 // MetricType
	class_ref 183465 // Misc
	class_ref 312361 // MovementStep
	class_ref 326953 // Notebook
	class_ref 212393 // NotebookTab
	class_ref 132649 // Object
	class_ref 190121 // OptionMenu
	class_ref 281513 // Orientation
	class_ref 285993 // PackOptions
	class_ref 286377 // PackType
	class_ref 213289 // Page
	class_ref 212777 // PageIterator
	class_ref 215081 // Paned
	class_ref 313641 // PathPriorityType
	class_ref 314025 // PathType
	class_ref 217385 // Plug
	class_ref 314409 // PolicyType
	class_ref 314793 // PositionType
	class_ref 218921 // ProgressBar
	class_ref 218537 // ProgressBarOrientation
	class_ref 218153 // ProgressBarStyle
	class_ref 205865 // QuitSig
	class_ref 219689 // RadioAction
	class_ref 192553 // RadioButton
	class_ref 220585 // RadioButtonGroup
	class_ref 221609 // RadioMenuItem
	class_ref 221737 // RadioToolButton
	class_ref 282281 // Range
	class_ref 224169 // RcFlags
	class_ref 225321 // RC
	class_ref 224553 // RcStyle
	class_ref 142121 // ReliefStyle
	class_ref 285737 // ResizeMode
	class_ref 305705 // ResponseType
	class_ref 225449 // Ruler
	class_ref 205609 // RunSig
	class_ref 227753 // Scale
	class_ref 230057 // Scrollbar
	class_ref 201385 // ScrolledWindow
	class_ref 282665 // ScrollType
	class_ref 280489 // SelectionData
	class_ref 233257 // SelectionData_WithoutOwnership
	class_ref 179241 // SelectionMode
	class_ref 233385 // Separator
	class_ref 235689 // SeparatorMenuItem
	class_ref 236457 // SeparatorToolItem
	class_ref 237225 // Settings
	class_ref 284329 // ShadowType
	class_ref 274729 // SignalProxy_CellData
	class_ref 238377 // SizeGroup
	class_ref 237993 // SizeGroupMode
	class_ref 239145 // Socket
	class_ref 317609 // SortType
	class_ref 240809 // SpinButton
	class_ref 239913 // SpinButtonUpdatePolicy
	class_ref 240297 // SpinType
	class_ref 179881 // StateType
	class_ref 241577 // Statusbar
	class_ref 130985 // StockID
	class_ref 242729 // StockID_Traits
	class_ref 243497 // StockItem
	class_ref 243881 // Style
	class_ref 201257 // Table
	class_ref 244649 // TableList
	class_ref 245801 // TargetEntry
	class_ref 245929 // TargetEntry_Traits
	class_ref 315817 // TargetFlags
	class_ref 246441 // TargetList
	class_ref 246825 // TearoffMenuItem
	class_ref 247593 // TextAttributes
	class_ref 248233 // TextBuffer
	class_ref 250025 // TextChildAnchor
	class_ref 280233 // TextDirection
	class_ref 249001 // TextIter
	class_ref 249769 // TextMark
	class_ref 250921 // TextSearchFlags
	class_ref 249257 // TextTag
	class_ref 249513 // TextTagTable
	class_ref 255017 // TextView
	class_ref 254633 // TextWindowType
	class_ref 255785 // ToggleAction
	class_ref 293545 // ToggleButton
	class_ref 222633 // ToggleToolButton
	class_ref 258089 // Toolbar
	class_ref 281641 // ToolbarStyle
	class_ref 257321 // ToolButton
	class_ref 131497 // ToolItem
	class_ref 258857 // Tooltips
	class_ref 204841 // TreeDragDest
	class_ref 204713 // TreeDragSource
	class_ref 265001 // TreeModelFilter
	class_ref 262569 // TreeModelFlags
	class_ref 302121 // TreeModel
	class_ref 266025 // TreeModelSort
	class_ref 264233 // TreePath
	class_ref 268201 // TreePath_Traits
	class_ref 264361 // TreeRowReference
	class_ref 269481 // TreeSelection
	class_ref 204585 // TreeSortable
	class_ref 271785 // TreeStore
	class_ref 273705 // TreeViewColumn
	class_ref 272681 // TreeViewDropPosition
	class_ref 189993 // TreeView
	class_ref 276521 // UIManager
	class_ref 181033 // UpdateType
	class_ref 287913 // VBox
	class_ref 143273 // VButtonBox
	class_ref 277417 // Viewport
	class_ref 316329 // Visibility
	class_ref 216617 // VPaned
	class_ref 226217 // VRuler
	class_ref 228521 // VScale
	class_ref 282537 // VScrollbar
	class_ref 234153 // VSeparator
	class_ref 278569 // WidgetFlags
	class_ref 130089 // Widget
	class_ref 278953 // WidgetHelpType
	class_ref 281129 // Window
	class_ref 318505 // WindowGroup
	class_ref 181801 // WindowPosition
	class_ref 306601 // WindowType
	class_ref 317225 // WrapMode
      end
    end
  end
end
