format 61
"//utility" // /compchem/utility:://utility
  revision 32
  modified_by 41 "finnerty"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  stereotype "library"
  cpp_h_dir "utility"
  cpp_src_dir "../src/utility"
  cpp_namespace "utility"
  classview 129577 "framework"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    associated_deployment_view deploymentview_ref 131369 // framework
    classdiagram 129577 "framework classes"
      draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    class 419113 "contract_error"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A Design-by-contract violation exception. The contracts
supported are: always, require, ensure, invariant and check.
The violation severity follows the order listed above. One of 
the template parameters specifies what the maximum test
level will be."
      classrelation 128298 // <dependency>
	relation 128298 -_->
	  a default
	    cpp default "#include in header"
	    classrelation_ref 128298 // <dependency>
	  b parent class_ref 416553 // basic_ostream
      end

      classrelation 128426 // <dependency>
	relation 128426 -_->
	  a default
	    cpp default "#include in header"
	    classrelation_ref 128426 // <dependency>
	  b parent class_ref 421673 // c_streambuf
      end

      classrelation 128042 // <generalisation>
	relation 128042 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 128042 // <generalisation>
	  b parent class_ref 128042 // exception
      end

      classrelation 403497 // <dependency>
	relation 394537 -_->
	  a package
	    comment "Used for ensuring clean-up of backtrace data."
	    cpp default "#include in header"
	    classrelation_ref 403497 // <dependency>
	  b parent class_ref 416425 // free_ptr
      end

      class 419241 "contracts"
	visibility public stereotype "enum"
	cpp_decl "${comment}enum {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}enum ${name} {
${items}};
"
	explicit_switch_type ""
	
	comment "ID values for the contract types"
	attribute 322089 "always"
	  public explicit_type ""
	  init_value "= 0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "An 'always' contract is a utility contract for error conditions that must always
be tested.  It is not really a "
	end

	attribute 322217 "require"
	  public explicit_type ""
	  init_value "= 1"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "A require contract is one that must be met on entry into a method. It's
purpose is to guard the state of an object from invalid input."
	end

	attribute 321833 "ensure"
	  public explicit_type ""
	  init_value "= 2"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "An ensure contract is tested on exiting a function.  Its purpose is 
to ensure that a method's result is within some tolerance.Throws
std::domain_error"
	end

	attribute 322345 "invariant"
	  public explicit_type ""
	  init_value "= 3"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "An invariant contract is used on function entry and exit to
make sure that the object is in a valid state."
	end

	attribute 321961 "check"
	  public explicit_type ""
	  init_value "= 4"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "A check contract is used to check that methods and the programming
logic leading up to the check have operated as expected and contracted.

For example:
T *p = new T;
COMPCHEM_CHECK(NULL != p, \"New should never return a null pointer!\");"
	end

	attribute 329001 "max_level"
	  public explicit_type ""
	  init_value "= 5"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "The maximum reporting level (0-4).  For which errors
are reported."
	end

	attribute 328873 "s_size"
	  public explicit_type ""
	  init_value "= 4000"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "The buffer size."
	end
      end

      class 420393 "buffer_type_t"
	visibility public stereotype "typedef" base_type class_ref 417705 // streambuf
	nactuals 3
	actual class class_ref 417705 // streambuf
	  rank 0 explicit_value "char"
	actual class class_ref 417705 // streambuf
	  rank 1 explicit_value "s_size"
	actual class class_ref 417705 // streambuf
	  rank 2 explicit_value "std::char_traits< char >"
	cpp_decl "${comment}typedef streambuf < char, s_size, std::char_traits < char > > ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	classrelation 392489 // <realization>
	  relation 383529 -_-|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 392489 // <realization>
	    b parent class_ref 417705 // streambuf
	end
      end

      attribute 128170 "level"
	const_attribute public explicit_type "uint"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The contract error level."
      end

      attribute 128042 "m_what"
	private explicit_type "char"
	multiplicity "s_size"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The error message"
      end

      operation 1338921 "contract_error"
	cpp_inline public explicit_return_type ""
	nparams 8
	  param in name "a_msg1" explicit_type "string"
	  param in name "a_msg2" explicit_type "char"
	  param in name "a_level" explicit_type "uint"
	  param in name "a_filename" explicit_type "char"
	  param in name "a_line" explicit_type "int"
	  param in name "a_fn_name" explicit_type "char"
	  param in name "a_backtrace" explicit_type "any"
	    defaultvalue "NULL"
	  param in name "a_backsz" explicit_type "int"
	    defaultvalue "0"
	nexceptions 1
	  explicit_exception ""
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} * ${p1}, ${t2} ${p2}, const ${t3} * ${p3}, ${t4} ${p4}, const ${t5} * ${p5}, ${t6} const * ${p6}=NULL, ${t7} ${p7}=0${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} * ${p1}, ${t2} ${p2}, const ${t3} * ${p3}, ${t4} ${p4}, const ${t5} * ${p5}, ${t6} const * ${p6}, ${t7} ${p7}${)}${const}${volatile}${throw}${staticnl}
: std::exception ()
, level (${p2})
, m_what ()
{
  ${body}
}
"
	
	
	
	
	comment "Create a contract exception with a formatted output. Primarily designed to 
operate with the Design-by-Contract macros. This class doesn't allocate 
memory from the heap."
      end

      operation 128298 "~contract_error"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile} throw ()
{}
"
	
	
	
	
      end

      operation 128042 "what"
	const public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_what;
}
"
	
	
	
	
	comment "The error message"
      end
    end

    class 421673 "c_streambuf"
      visibility private 
      nformals 2
      formal name "charT" type "class" explicit_default_value ""
        explicit_extends ""
      formal name "traits" type "class" explicit_default_value "std::char_traits <charT> SPACE"
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}: public std::basic_streambuf< charT, traits > {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Use a preallocated char* stream buffer for reading and writing.  This is to facilitate
writing into a preexisting char* or char[].

Derived from newsgroup post by Dietmar Kuehl. <http://www.dietmar-kuehl.de/>"
      attribute 325033 "m_buf"
	private explicit_type "charT"
	multiplicity "1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The buffer pointer"
      end

      operation 1342505 "begin"
	stereotype "const"
	const public explicit_return_type "charT"
	nparams 0
	nexceptions 1
	  explicit_exception ""
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->pbase ();
}
"
	
	
	
	
	comment "The beginning of the buffer. Note that (begin, end] represents
everything that has been written to the buffer, not just what is
available to read NOR the entire buffer.

\\post result /= nul or result = end
\\post result = &buffer used to make streambuf"
      end

      operation 1342633 "end"
	stereotype "const"
	const public explicit_return_type "charT"
	nparams 0
	nexceptions 1
	  explicit_exception ""
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->pptr ();
}
"
	
	
	
	
	comment "The one-past-end iterator. Note that (begin, end] represents
everything that has been written to the buffer, not just what is
available to read NOR the entire buffer.

\\post result /= nul or result = begin = nul"
      end

      operation 1340841 "operator="
	private return_type class_ref 421673 // c_streambuf
	nparams 1
	  param in name "source" type class_ref 421673 // c_streambuf
	nexceptions 1
	  explicit_exception ""
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "No Copy"
      end

      operation 1340969 "c_streambuf"
	public explicit_return_type ""
	nparams 2
	  param inout name "a_buf" explicit_type "charT"
	  param in name "a_sz" explicit_type "uint"
	nexceptions 1
	  explicit_exception ""
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${volatile}${throw}
: m_buf(${p0})
{
  this->reset (${p0}, ${p1});
}
"
	
	
	
	
	comment "Construct a stream buffer object that uses the given char*.  This
assumes that the buffer is empty.

\\post begin = a_buf"
      end

      operation 1341097 "c_streambuf"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 421673 // c_streambuf
	nexceptions 1
	  explicit_exception ""
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
: m_buf (${p0}.m_buf)
{
  this->reset (${p0}.m_buf, ${p0}.epptr () - ${p0}.m_buf);
}
"
	
	
	
	
	comment "Share the internal buffer instances.

\\post begin = source.begin and end = source.end"
      end

      operation 1341225 "~c_streambuf"
	public explicit_return_type ""
	nparams 0
	nexceptions 1
	  explicit_exception ""
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}
{}
"
	
	
	
	
      end

      operation 1340457 "reset"
	public explicit_return_type "void"
	nparams 2
	  param inout name "a_buf" explicit_type "charT"
	  param in name "a_sz" explicit_type "uint"
	nexceptions 1
	  explicit_exception ""
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract}
{
  if (${p0} != this->m_buf)
  {
    this->m_buf = ${p0};
  }
  this->setg(this->m_buf, this->m_buf, this->m_buf);
  this->setp(this->m_buf, this->m_buf + ${p1} - 1); // Leave last char as nul
  traits::assign (this->m_buf, ${p1}, 0);
}
"
	
	
	
	
	comment "Resets the buffer pointers to adjust internal pointer to a
new buffer.

\\post begin = a_buf"
      end

      operation 1341609 "underflow"
	public explicit_return_type "traits::int_type"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}typename ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  const char* const l_egptr (this->egptr ());
  char* const l_pptr (this->pptr ());
  char* const l_gptr (this->gptr ());
  char* const l_eback (this->eback ());
  if (l_egptr < l_pptr)
  {
    this->setg (l_eback, l_gptr, l_pptr);
  }
  return (l_gptr < l_pptr)? *l_gptr: traits::eof ();
}
"
	
	
	
	
	comment "Synchronise I and O pointers"
      end

      operation 1341737 "uflow"
	public explicit_return_type "traits::int_type"
	nparams 0
	nexceptions 1
	  explicit_exception ""
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}typename ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  typename ${type} Result = this->underflow ();
  if (Result != traits::eof ())
  {
    this->gbump (1);
  }
  return Result;
}
"
	
	
	
	
	comment "Synchronise I and O pointers"
      end
    end

    class 422825 "const_c_streambuf"
      visibility private 
      nformals 2
      formal name "charT" type "class" explicit_default_value ""
        explicit_extends ""
      formal name "traits" type "class" explicit_default_value "std::char_traits < charT > SPACE"
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}: public std::basic_streambuf< charT, traits > {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A preallocated const char* stream buffer for reading. This is to facilitate
reading from a preexisting char* or char[].

Derived from newsgroup post by Dietmar Kuehl. <http://www.dietmar-kuehl.de/>"
      attribute 326185 "m_buf"
	const_attribute private explicit_type "charT"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The buffer pointer"
      end

      operation 1343785 "begin"
	stereotype "const"
	const public explicit_return_type "charT"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->m_buf;
}
"
	
	
	
	
	comment "The beginning of the buffer. Note that (begin, end] represents
everything that has been written to the buffer, not just what is
available to read NOR the entire buffer."
      end

      operation 1343913 "end"
	stereotype "const"
	const public explicit_return_type "charT"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->egptr ();
}
"
	
	
	
	
	comment "The one-past-end iterator. Note that (begin, end] represents
everything that has been written to the buffer, not just what is
available to read NOR the entire buffer."
      end

      operation 1344041 "operator="
	private return_type class_ref 422825 // const_c_streambuf
	nparams 1
	  param in name "source" type class_ref 422825 // const_c_streambuf
	nexceptions 1
	  explicit_exception ""
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "No Copy"
      end

      operation 1344169 "const_c_streambuf"
	public explicit_return_type ""
	nparams 2
	  param inout name "a_buf" explicit_type "charT"
	  param in name "a_sz" explicit_type "uint"
	nexceptions 1
	  explicit_exception ""
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${volatile}${throw}
: m_buf(${p0})
{
  charT * l_tmp = const_cast< charT * >(this->m_buf);
  this->setg(l_tmp, l_tmp, l_tmp + ${p1});
}"
	
	
	
	
	comment "Construct a stream buffer object that uses the given char*.  This
assumes that the buffer contains a_sz x charT of data."
      end

      operation 1344297 "const_c_streambuf"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 422825 // const_c_streambuf
	nexceptions 1
	  explicit_exception ""
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
: m_buf (${p0}.m_buf)
{
  this->setg (${p0}.m_buf, ${p0}.gptr (), ${p0}.egptr ());
}"
	
	
	
	
	comment "Share the internal buffer instances."
      end

      operation 1344425 "~const_c_streambuf"
	public explicit_return_type ""
	nparams 0
	nexceptions 1
	  explicit_exception ""
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}
{}
"
	
	
	
	
      end
    end

    class 416425 "free_ptr"
      visibility package 
      nformals 1
      formal name "T_ptr" type "class" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 317609 "m_ptr"
	private explicit_type "T_ptr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The to-be-free pointer"
      end

      operation 1326889 "free_ptr"
	public explicit_return_type ""
	nparams 1
	  param inout name "a_ptr" explicit_type "T_ptr"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}=T_ptr(0)${)}${volatile}${throw}
: m_ptr(${p0})
{}
"
	
	
	
	
	comment "Capture a pointer to memory allocated by \"C\" malloc and friends"
      end

      operation 1327145 "free_ptr"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 416425 // free_ptr
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}${)}${volatile}${throw}
: m_ptr (${p0}.m_ptr)
{
  ${p0}.m_ptr = T_ptr(0);
}
"
	
	
	
	
	comment "Transfer ownership."
      end

      operation 1327017 "~free_ptr"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}
{
  reset();
}
"
	
	
	
	
	comment "Free the held pointer"
      end

      operation 1327401 "get"
	public explicit_return_type "T_ptr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_ptr;
}
"
	
	
	
	
	comment "Get the pointer"
      end

      operation 1327529 "operator="
	public return_type class_ref 416425 // free_ptr
	nparams 1
	  param in name "source" explicit_type "T_ptr"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  reset (${p0});
  return *this;
}
"
	
	
	
	
	comment "Capture"
      end

      operation 1327273 "operator="
	public return_type class_ref 416425 // free_ptr
	nparams 1
	  param in name "source" type class_ref 416425 // free_ptr
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract}
{
  reset (${p0}.m_ptr);
  ${p0}.m_ptr = T_ptr(0);
  return *this;
}
"
	
	
	
	
	comment "Transfer ownership."
      end

      operation 1327657 "reset"
	public explicit_return_type "void"
	nparams 1
	  param in name "source" explicit_type "T_ptr"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}=T_ptr(0)${)}${const}${volatile}${throw}${abstract}
{
  if (${p0} != m_ptr)
  {
    if (m_ptr != T_ptr(0))
    {
      free (${p0});
    }
    m_ptr = ${p0};
  }
}
"
	
	
	
	
      end
    end

    class 450217 "auto_free"
      visibility package 
      nformals 2
      formal name "T_ptr" type "class" explicit_default_value ""
        explicit_extends ""
      formal name "T_del_type" type "class" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Free ptr using an arbitrary delete function."
      class 450345 "delete_function"
	visibility package stereotype "typedef" explicit_base_type "T_del_type"
	cpp_decl "${comment}typedef void (*${name})(${type});
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	comment "The type signature of the delete function"
      end

      attribute 356777 "m_delete"
	private type class_ref 450345 // delete_function
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The function to delete object with."
      end

      attribute 356649 "m_ptr"
	private explicit_type "T_ptr"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The to-be-free pointer"
      end

      operation 1430185 "auto_free"
	public explicit_return_type ""
	nparams 2
	  param inout name "a_ptr" explicit_type "T_ptr"
	  param in name "a_fn" type class_ref 450345 // delete_function
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${volatile} throw()
: m_ptr(${p0})
, m_delete (${p1})
{}
"
	
	
	
	
	comment "Capture a pointer to allocated memory that you want freed using a_fn"
      end

      operation 1431081 "auto_free"
	public explicit_return_type ""
	nparams 1
	  param in name "a_fn" type class_ref 450345 // delete_function
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${)}${volatile} throw()
: m_ptr(T_ptr (0))
, m_delete (${p0})
{}
"
	
	
	
	
	comment "Set up an object to delete memory using a_fn"
      end

      operation 1430313 "auto_free"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 450217 // auto_free
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}${)}${volatile}${throw}
: m_ptr (${p0}.m_ptr)
, m_delete (${p0}.m_delete)
{
  ${p0}.m_ptr = T_ptr(0);
}
"
	
	
	
	
	comment "Transfer ownership."
      end

      operation 1430441 "~auto_free"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}
{
  reset();
}
"
	
	
	
	
	comment "Free the held pointer"
      end

      operation 1430569 "get"
	public explicit_return_type "T_ptr"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_ptr;
}
"
	
	
	
	
	comment "Get the pointer"
      end

      operation 1430697 "operator="
	public return_type class_ref 450217 // auto_free
	nparams 1
	  param in name "source" explicit_type "T_ptr"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  reset (${p0});
  return *this;
}
"
	
	
	
	
	comment "Capture raw pointer, freeing any held resource"
      end

      operation 1430825 "operator="
	public return_type class_ref 450217 // auto_free
	nparams 1
	  param in name "source" type class_ref 450217 // auto_free
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract}
{
  swap (${p0});
  ${p0}.reset ();
  return *this;
}
"
	
	
	
	
	comment "Transfer ownership."
      end

      operation 1430953 "reset"
	public explicit_return_type "void"
	nparams 1
	  param in name "source" explicit_type "T_ptr"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}=T_ptr(0)${)}${const}${volatile}${throw}${abstract}
{
  if (${p0} != m_ptr)
  {
    if (m_ptr != T_ptr(0) and m_delete != delete_function (0))
    {
      (*m_delete) (m_ptr);
    }
    m_ptr = ${p0};
  }
}
"
	
	
	
	
      end

      operation 1616297 "swap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 450217 // auto_free
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile} throw()${abstract}
{
  T_ptr l_tmp1 (m_ptr);
  m_ptr = ${p0}.m_ptr;
  ${p0}.m_ptr = l_tmp1;
  delete_function l_tmp2 (m_delete);
  m_delete = ${p0}.m_delete;
  ${p0}.m_delete = l_tmp2;
}"
	
	
	
	
	comment "No-throw swap"
      end
    end

    class 361385 "filesystem"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 1182761 "standardize"
	class_operation public return_type class_ref 361513 // path
	nparams 1
	  param in name "a_path" type class_ref 361513 // path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Standardise a_path to be complete and normalized."
      end

      operation 1178025 "relative_path"
	class_operation public return_type class_ref 361513 // path
	nparams 2
	  param in name "a_base" type class_ref 361513 // path
	  param in name "a_leafer" type class_ref 361513 // path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Attempt to create a relative path from a_base to a_leafer.  If this 
is not possible a_leafer is returned unaltered.  The relative path is
constructed relative to the whole of a_base.  If either paths are
not complete, then they are made \"complete\" by prepending initial_path ()
and normalizing."
      end
    end

    class 470185 "program_options"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
{
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Manage the program configuration.

The standard operation is:

* .. program initialisation ..
** call helper::get_helper ()... and add options

* .. program main after initialisation ..
** if not helper::empty() # otherwise skip options
*** call helper::get_helper().process_options (argc, arv, ??)
*** call helper::reset ()
* .. rest of program ..

"
      class 470441 "option_result_anonymous"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name}
{
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl "${comment}${visibility}final class ${name} {
${items}}
"
	python_2_2 python_decl "class ${name}:
${docstring}${members}
"
	idl_decl "${comment}enum ${name} {
${items}};
"
	explicit_switch_type ""
	
	comment "The set of return values from the option parsing methods."
	attribute 371753 "CCHEM_PARSE_DEFAULT"
	  public explicit_type "parse_flags"
	  init_value "= 0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Only pass the command line."
	end

	attribute 371497 "CCHEM_PARSE_CONFIG_FILE"
	  public explicit_type "parse_flags"
	  init_value "= 1"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Parse the default configuration file (if not empty). This
does not affect configuration files that are set on the 
command line as these will always be processed."
	end

	attribute 371625 "CCHEM_PARSE_ENVIRONMENT"
	  public explicit_type "parse_flags"
	  init_value "= 2"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Parse the environment for options."
	end

	attribute 371881 "CCHEM_PARSE_ALL"
	  public explicit_type "parse_flags"
	  init_value "= 3"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Parse the command line, config file and environment."
	end

	attribute 370857 "CCHEM_PARSE_SUCCESS"
	  public type class_ref 470441 // option_result_anonymous
	  init_value "= 0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Indicate that option processing has completed successfully."
	end

	attribute 370985 "CCHEM_PARSE_HELP"
	  public type class_ref 470441 // option_result_anonymous
	  init_value "= 1"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Indicate that the user request the help description. This
indicates the program should terminate but without an
error indication."
	end

	attribute 371113 "CCHEM_PARSE_ERROR"
	  public type class_ref 470441 // option_result_anonymous
	  init_value "= 2"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Indicate there was an error processing the options. This
normally also prints the help message but indicates the
program should terminate with an error condition."
	end
      end

      attribute 371369 "m_conf_filename"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The main configuration file name."
      end

      attribute 371241 "m_env_prefix"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The environment variable prefix"
      end

      classrelation 467625 // m_hidden (<directional composition>)
	relation 456745 *-->
	  a role_name "m_hidden" multiplicity "1" private
	    comment "The \"hidden\" options."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 467625 // m_hidden (<directional composition>)
	  b parent class_ref 350761 // options_description
      end

      attribute 425641 "m_position"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl "${comment}${self}${name} = ${value}
"
	idl_decl ""
	comment "The option name for the positional arguments."
      end

      classrelation 467497 // m_public (<directional composition>)
	relation 456617 *-->
	  a role_name "m_public" multiplicity "1" private
	    comment "The public options"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 467497 // m_public (<directional composition>)
	  b parent class_ref 350761 // options_description
      end

      attribute 424489 "m_worker"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The current worker."
      end

      classrelation 467369 // s_helper (<directional composition>)
	relation 456489 *-->
	  stereotype "auto_ptr"
	  a role_name "s_helper" multiplicity "*" class_relation private
	    comment "The Singleton helpers."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 467369 // s_helper (<directional composition>)
	  b parent class_ref 470185 // program_options
      end

      operation 1494313 "config_filename"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_conf_filename;
}
"
	
	
	
	
	comment "Get the name of the configuration file to process."
      end

      operation 1494569 "config_filename"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_str" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  m_conf_filename.swap (${p0});
}
"
	
	
	
	
	comment "Set the name of the configuration file to process."
      end

      operation 1612329 "current_worker"
	stereotype "get"
	public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_worker;
}
"
	
	
	
	
	comment "The Id of the current program user.  Generally this is set in the 
configuration file or is identical to the current users login name."
      end

      operation 1490089 "empty"
	class_operation public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return (NULL == s_helper.get ());
}

"
	
	
	
	
	comment "Are there no options set? This will be true after calling reset."
      end

      operation 1494441 "environment_prefix"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_env_prefix;
}
"
	
	
	
	
	comment "Get the environment variable prefix."
      end

      operation 1494697 "environment_prefix"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_str" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  m_env_prefix.swap (${p0});
}
"
	
	
	
	
	comment "Set the environment variable prefix."
      end

      operation 1619113 "have_positional_option"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return not m_position.empty ();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Do we have a positional option set?"
      end

      operation 1619241 "help_message"
	public explicit_return_type "void"
	nparams 2
	  param in name "a_help" explicit_type "bool"
	  param inout name "a_log" explicit_type "ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Print the help/usage message.  If a_help is true then
print the more complete help message, otherwise the
shorter usage message"
      end

      operation 1489577 "helper"
	class_operation public return_type class_ref 470185 // program_options
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  if (NULL == s_helper.get ()) { s_helper.reset (new ${class}); }
  return *(s_helper.get ());
}
"
	
	
	
	
	comment "Return the helper Singleton. Will create the Singleton if it is not created 
already.

You should test whether it is empty() before calling this method when 
processing the options.  Once all options are processed you can call
reset."
      end

      operation 1489705 "hidden_options"
	public return_type class_ref 350761 // options_description
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile} throw()${abstract}
{
  return m_hidden;
}
"
	
	
	
	
	comment "The set of hidden option descriptions. Hidden options are
shown in the help but not the usage message and can not be set
via the command-line."
      end

      operation 1488937 "operator="
	private return_type class_ref 470185 // program_options
	nparams 1
	  param in name "source" type class_ref 470185 // program_options
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "no copy"
      end

      operation 1618985 "positional_option"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_opt_name" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} &${p0}${)}${const}${volatile}${throw}${abstract}
{
  @{require}(not have_positional_option (), \"You can only set one positional argument\");
  @{require}(not ${p0}.empty (), \"The positional argument must not be an empty string\");
  @{require}(NULL != public_options ().find_nothrow (${p0}, true), \"Positional option must already be a public option.\")
  m_position = ${p0};
}
"
	
	
	
	
	comment "Set a_opt_name to be used for all 'positional' arguments
(arguments without preceding options).  It can only be set
once and must be an existing public option.

Note this system is limited to the common case of one 
positional argument that may be used an unlimited number 
of times.

\\pre not have_positional_option
\\pre not a_opt_name.empty 
\\pre public_options ().has (a_opt_name)
\\post have_positional_option"
      end

      operation 1490473 "process_options"
	public explicit_return_type "int"
	nparams 4
	  param in name "a_argc" explicit_type "int"
	  param in name "a_argv" explicit_type "char"
	  param out name "a_log" explicit_type "ostream"
	    defaultvalue "std::cout"
	  param in name "a_flags" explicit_type "uint"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1}** ${p1}, ${t2} & ${p2}, ${t3} ${p3} = 0${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1}** ${p1}, ${t2} & ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "All-in-one processing. Will parse the command line, configuration file and 
environment in that order depending on a_flags, default is command line only.

\\param a_argc The length of the C zstring array argv.
\\param a_argv The C zstring array of command line arguments.
\\param a_log  The stream to write help/error messages to.
\\param a_flags Set of flags saying which parsers to use. 
\\return 0 = success, 1 = help requested, 2 = error."
      end

      operation 1610665 "process_options"
	public explicit_return_type "int"
	nparams 3
	  param in name "a_argv" explicit_type "string"
	  param out name "a_log" explicit_type "ostream"
	    defaultvalue "std::cout"
	  param in name "a_flags" explicit_type "uint"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}std::vector< ${t0} > &${p0}, ${t1} & ${p1}, ${t2} ${p2} = 0${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}std::vector< ${t0} > &${p0}, ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "All-in-one processing. Will parse the command line, configuration file and 
environment in that order depending on a_flags, default is command line only.

\\param a_argv A vector of command line arguments.
\\param a_log  The stream to write help/error messages to.
\\param a_flags Set of flags saying which parsers to use. 
\\return 0 = success, 1 = help requested, 2 = error."
      end

      operation 1610537 "process_options_priv"
	private explicit_return_type "int"
	nparams 3
	  param inout name "a_map" type class_ref 423977 // variables_map
	  param out name "a_log" explicit_type "ostream"
	    defaultvalue "std::cout"
	  param in name "a_flags" explicit_type "uint"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "All-in-one processing implemenation. This part of the process_options 
functions parses the config file and the environment

\\param a_argc The length of the C zstring array argv.
\\param a_argv The C zstring array of command line arguments.
\\param a_log  The stream to write help/error messages to.
\\param a_flags Set of flags saying which parsers to use. 
\\return 0 = success, 1 = help requested, 2 = error."
      end

      operation 1488553 "program_options"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} 
${body}
"
	
	
	
	
	comment "Ctor only for Singleton"
      end

      operation 1488681 "~program_options"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} 
{}
"
	
	
	
	
      end

      operation 1488809 "program_options"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 470185 // program_options
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	
	
	
	
	comment "no copy"
      end

      operation 1489449 "public_options"
	public return_type class_ref 350761 // options_description
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_public;
}
"
	
	
	
	
	comment "The set of public option descriptions."
      end

      operation 1489833 "reset"
	class_operation public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  s_helper.reset ();
  @{ensure}(${class}::empty (), \"Program options not empty after a reset.\");
}
"
	
	
	
	
	comment "Once configuration processing is complete, this can be used to 
release the allocated memory.

\\post empty = true"
      end
    end

    class 417705 "streambuf"
      visibility private 
      nformals 3
      formal name "charT" type "class" explicit_default_value ""
        explicit_extends ""
      formal name "s_size" type "int" explicit_default_value ""
        explicit_extends ""
      formal name "traits" type "class" explicit_default_value "std::char_traits <charT> SPACE"
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}: public std::basic_streambuf< charT, traits > {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A fixed-length stream buffer

Derived from newsgroup post by Dietmar Kuehl. <http://www.dietmar-kuehl.de/>"
      attribute 320553 "m_buf"
	private explicit_type "charT"
	multiplicity "s_size"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The buffer"
      end

      operation 1342377 "begin"
	stereotype "const"
	const public explicit_return_type "charT"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->pbase ();
}
"
	
	
	
	
	comment "The beginning of the buffer. Note that (begin, end] represents
everything that has been written to the buffer, not just what is
available to read NOR the entire buffer.

\\post result /= nul"
      end

      operation 1335465 "clear"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception ""
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  this->setg(this->m_buf, this->m_buf, this->m_buf);
  this->setp(this->m_buf, this->m_buf + s_size - 1); // Leave last char as nul
  traits::assign (this->m_buf, s_size, 0);
}"
	
	
	
	
	comment "Resets the buffer pointers. May not zero buffer."
      end

      operation 1335593 "data"
	const public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_buf;
}
"
	
	
	
	
	comment "Get pointer to buffer"
      end

      operation 1341993 "end"
	stereotype "const"
	const public explicit_return_type "charT"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return this->pptr ();
}
"
	
	
	
	
	comment "The one-past-end iterator. Note that (begin, end] represents
everything that has been written to the buffer, not just what is
available to read NOR the entire buffer."
      end

      operation 1335721 "max_size"
	class_operation public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  explicit_exception ""
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return s_size;
}
"
	
	
	
	
	comment "The maximum buffer size

max_size == s_size"
      end

      operation 1334825 "operator="
	private return_type class_ref 417705 // streambuf
	nparams 1
	  param in name "source" type class_ref 417705 // streambuf
	nexceptions 1
	  explicit_exception ""
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "No Copy"
      end

      operation 1334441 "streambuf"
	public explicit_return_type ""
	nparams 0
	nexceptions 1
	  explicit_exception ""
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}
: m_buf()
{
  this->clear ();
}
"
	
	
	
	
      end

      operation 1334697 "streambuf"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 417705 // streambuf
	nexceptions 1
	  explicit_exception ""
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
: m_buf ()
{
  this->setg(this->m_buf, this->m_buf, this->m_buf);
  this->setp(this->m_buf, this->m_buf + s_size - 1); // Leave last char as nul
  const typename traits::off_type l_out_off (std::min (${p0}.pptr () - ${p0}.m_buf, s_size - 1));
  const typename traits::off_type l_in_off (std::min (${p0}.gptr () - ${p0}.m_buf, s_size - 1));
  traits::copy (this->m_buf, ${p0}.m_buf, l_out_off);
  traits::assign (this->m_buf + l_out_off, s_size - l_out_off, 0);
  pbump (l_out_off);
  gbump (l_in_off);
}"
	
	
	
	
	comment "Copy source into self.  "
      end

      operation 1334569 "~streambuf"
	public explicit_return_type ""
	nparams 0
	nexceptions 1
	  explicit_exception ""
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}
{}
"
	
	
	
	
      end

      operation 1334953 "str"
	const public explicit_return_type "std::basic_string< charT, traits >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return std::string(this->pbase(), this->pptr());
}
"
	
	
	
	
	comment "Convert to string"
      end

      operation 1593769 "underflow"
	public explicit_return_type "traits::int_type"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}typename ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  const char* const l_egptr (this->egptr ());
  char* const l_pptr (this->pptr ());
  char* const l_gptr (this->gptr ());
  char* const l_eback (this->eback ());
  if (l_egptr < l_pptr)
  {
    this->setg (l_eback, l_gptr, l_pptr);
  }
  return (l_gptr < l_pptr)? *l_gptr: traits::eof ();
}
"
	
	
	
	
	comment "Synchronise I and O pointers"
      end

      operation 1335977 "uflow"
	public explicit_return_type "traits::int_type"
	nparams 0
	nexceptions 1
	  explicit_exception ""
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}typename ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  typename ${type} Result = this->underflow ();
  if (Result != traits::eof ())
  {
    this->gbump (1);
  }
  return Result;
}
"
	
	
	
	
	comment "Synchronise I and O pointers"
      end
    end

    class 496681 "time_stamp"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
{
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class allows monitoring of the progress of an application. At construction
it prints a message and starts recording the time. Every call to log prints
the total elapsed time and the elapsed time since the last call to log."
      attribute 407209 "m_label"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The time stamp's label."
      end

      attribute 407721 "m_last"
	private type class_ref 496937 // timer
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The last time a time_stamp output function was called."
      end

      attribute 407081 "m_os"
	private explicit_type "ostream"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The output stream to use."
      end

      attribute 407593 "m_start"
	private type class_ref 496937 // timer
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The total elapsed time."
      end

      operation 1585065 "log"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_msg" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0}& ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0}& ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Copy a_msg to the log stream along with the current timer values."
      end

      operation 1584553 "time_stamp"
	public explicit_return_type ""
	nparams 3
	  param in name "a_label" explicit_type "string"
	  param in name "a_start_msg" explicit_type "string"
	  param inout name "a_os" explicit_type "ostream"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0}& ${p0}, const ${t1}& ${p1}, ${t2} & ${p2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0}& ${p0}, const ${t1}& ${p1}, ${t2} & ${p2}${)}${volatile}${throw} 
${body}
"
	
	
	
	
	comment "Initialise a time stamp object with a_label.  Copy a_start_msg to a_os."
      end

      operation 1584681 "~time_stamp"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} 
{
  log (\"End of timer.\");
}
"
	
	
	
	
      end

      operation 1584809 "time_stamp"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 496681 // time_stamp
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	
	
	
	
	comment "no copy"
      end

      operation 1584937 "operator="
	private return_type class_ref 496681 // time_stamp
	nparams 1
	  param in name "source" type class_ref 496681 // time_stamp
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "no assign"
      end
    end
  end

  deploymentview 131369 "framework"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 157993 "utility"
      stereotype "library"
      associated_artifacts
	artifact_ref 157609 // filesystem
	artifact_ref 252841 // program_options
	artifact_ref 230313 // filesystem
	artifact_ref 245033 // time_stamp
	artifact_ref 224041 // program_options
      end
    end

    artifact 192553 "contract_error"
      stereotype "source"
      cpp_h "#ifndef @{PREFIX}${NAME}_HPP
#define @{PREFIX}${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
#ifdef HAVE_BACKTRACE
#include <execinfo.h>
#endif
${declarations}
${namespace_start}
${definition}
${namespace_end}

// Attempt to provide a meaningful function name on systems that support it.
// This paragraph attempts to use the GNC gcc or standard C names before
// falling back to nothing.  If a better choice is known you can predefine
// this macro.
#ifndef COMPCHEM_FUNCTION_NAME
# if defined __cplusplus && __GNUC_PREREQ(2, 6)
#   define COMPCHEM_FUNCTION_NAME __PRETTY_FUNCTION__
# else
#  if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#   define COMPCHEM_FUNCTION_NAME __func__
#  else
#   define COMPCHEM_FUNCTION_NAME ((const char *) 0)
#  endif
# endif
#endif

/// Macro to test for error conditions.  This macro is used to test
/// for conditions that must always be met but are outside the
/// programmes control. An example might be testing the returned value
/// of malloc() where a nul pointer is rare (these days) but possible.
///
/// This macro prints an error message and calls std::abort() to end the program
#ifdef HAVE_BACKTRACE
#define COMPCHEM_TEST(LVL, X, Y) {\\
  if (LVL <= ::utility::contract_error::max_level and !(X)) { \\
    void * TRACE[20];                                            \\
    const int l_sz = backtrace (&TRACE[0], 20);                  \\
    throw ::utility::contract_error (Y, __STRING(X), LVL, __FILE__, __LINE__, COMPCHEM_FUNCTION_NAME, &TRACE[0], l_sz);\\
  }\\
}
#else
#define COMPCHEM_TEST(LVL, X, Y) {\\
  if (LVL <= ::utility::contract_error::contract_error::max_level and !(X)) {\\
    throw ::utility::contract_error (Y, __STRING(X), LVL, __FILE__, __LINE__, COMPCHEM_FUNCTION_NAME, NULL, 0);\\
  }\\
}
#endif

#define COMPCHEM_ALWAYS(X,Y) COMPCHEM_TEST(::utility::contract_error::always,(X),(Y))

#ifndef DbC_LEVEL
#define DbC_LEVEL 4
#endif

/// Macro to test for required conditions or preconditions. These are
/// conditions that must be met before a method starts.
#if defined (NO_DbC) || DbC_LEVEL < 1 
#define REQUIRE(X, Y)
#define COMPCHEM_REQUIRE(X, Y)
#else
#define REQUIRE(X,Y) COMPCHEM_TEST(::utility::contract_error::require,(X),(Y))
#define COMPCHEM_REQUIRE(X,Y) COMPCHEM_TEST(::utility::contract_error::require,(X),(Y))
#endif

/// Macro to test check conditions. This tests conditions that the
/// programmer thinks should be true based on the preceding logic.
#if defined (NO_DbC) || DbC_LEVEL < 4 
#define CHECK(X, Y)
#define COMPCHEM_CHECK(X, Y)
#else
#define CHECK(X,Y) COMPCHEM_TEST(::utility::contract_error::check,(X),(Y))
#define COMPCHEM_CHECK(X,Y) COMPCHEM_TEST(::utility::contract_error::check,(X),(Y))
#endif

/// Macro to test for ensured conditions or postconditions. These are
/// conditions that the method should ensure are met at the end of a
/// method.
#if defined (NO_DbC) || DbC_LEVEL < 2 
#define ENSURE(X, Y)
#define COMPCHEM_ENSURE(X, Y)
#else
#define ENSURE(X,Y) COMPCHEM_TEST(::utility::contract_error::ensure,(X),(Y))
#define COMPCHEM_ENSURE(X,Y) COMPCHEM_TEST(::utility::contract_error::ensure,(X),(Y))
#endif
/// Helper macro for ENSURE, allows definition of `old' values at
/// start of method that can be used by ENSURE. For example it might
/// be used to define an int that stores the size of a container,
/// which is compared to the size of a container after the method to
/// see if items have been successfully added/removed etc.
#if defined (NO_DbC) || DbC_LEVEL < 2 
#define ENSURE_OLD(X)
#define COMPCHEM_ENSURE_OLD(X)
#else
#define ENSURE_OLD(X) X
#define COMPCHEM_ENSURE_OLD(X) X
#endif
/// Macro to test invariant conditions. These conditions are ones that
/// should always be met by an object. They should be tested at the
/// entry of all methods. They should also be tested at the exit of
/// any non-const method.
#if defined (NO_DbC) || DbC_LEVEL < 3
#define INVARIANT(X, Y)
#define COMPCHEM_INVARIANT(X, Y)
#else
#define INVARIANT(X,Y) COMPCHEM_TEST(::utility::contract_error::invariant,(X),(Y))
#define COMPCHEM_INVARIANT(X,Y) COMPCHEM_TEST(::utility::contract_error::invariant,(X),(Y))
#endif

#endif
"
      associated_classes
	class_ref 419113 // contract_error
      end
    end

    artifact 157609 "filesystem"
      stereotype "source"
      cpp_h "#ifndef ${NAME}_HPP
#define ${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
// Manual includes
#include <boost/filesystem/operations.hpp>
//-
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 361385 // filesystem
      end
    end

    artifact 194857 "free_ptr"
      stereotype "source"
      cpp_h "#ifndef @{PREFIX}${NAME}_HPP
#define @{PREFIX}${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 416425 // free_ptr
	class_ref 450217 // auto_free
      end
    end

    artifact 153257 "framework"
      stereotype "source"
      cpp_h "#ifndef @{PREFIX}${NAME}_HPP
#define @{PREFIX}${NAME}_HPP

// ------------------------------------------------------------
// This file contains helpful free functions in the framework namespace.
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
${declarations}
${namespace_start}

/// \\brief Ensure a nul character at end of buffer.
///
/// After copying a_copy characters to a_bf ensure that a_bf is nul terminated by
/// setting a nul at position a_copy or a_size - 1 which ever is smaller.
inline void nul_terminate (char* a_bf, unsigned long a_size, unsigned long a_copy) {
 *(a_bf + ((a_size > a_copy)?a_copy:a_size - 1)) = '\\0'; }

/// \\brief Is first argument in the inclusive range of second and third argument?
///
/// Result implies arg2 <= arg1 <= arg3
template < typename t_number >
inline bool in_irange (t_number a1, t_number a2, t_number a3) {
  return a2 <= a1 && a1 <= a3; }

/// \\brief Is first argument in the exclusive range of second and third argument?
///
/// Result implies arg2 < arg1 < arg3
template < typename t_number >
inline bool in_xrange (t_number a1, t_number a2, t_number a3) {
  return a2 < a1 && a1 < a3; }

${namespace_end}
#endif
"
      associated_classes
      end
      comment "This file contains helpful free functions in the framework namespace."
    end

    artifact 224041 "program_options"
      stereotype "source"
      cpp_h "#ifndef @{PREFIX}${NAME}_HPP
#define @{PREFIX}${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
// Manual includes
#include <boost/filesystem/operations.hpp>
#include <boost/program_options/parsers.hpp>
#include <boost/program_options/variables_map.hpp>
#ifdef HAVE_UNISTD_H
#include \"utility/filesystem_properties.hpp\"
#endif
// -
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 470185 // program_options
      end
    end

    artifact 191273 "streambuf"
      stereotype "source"
      cpp_h "#ifndef @{PREFIX}${NAME}_HPP
#define @{PREFIX}${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
// Manual includes
#include <streambuf>
// -
#ifndef SPACE
#define SPACE 
#endif
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      associated_classes
	class_ref 422825 // const_c_streambuf
	class_ref 421673 // c_streambuf
	class_ref 417705 // streambuf
      end
    end

    artifact 245033 "time_stamp"
      stereotype "source"
      cpp_h "#ifndef @{PREFIX}${NAME}_HPP
#define @{PREFIX}${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 496681 // time_stamp
      end
    end
  end
end
