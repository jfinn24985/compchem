format 61
"cchem"
  revision 91
  modified_by 41 "finnerty"
  cpp_root_dir "/scratch/finnerty/compchem/include/"
  python_root_dir "/scratch/finnerty/compchem/pythonlib/"


  
  // class settings
  default_attribute_visibility private default_relation_visibility private default_operation_visibility public
  //class diagram settings
  draw_all_relations yes hide_attributes no hide_operations no show_members_full_definition no show_members_visibility no show_members_stereotype no show_members_multiplicity no show_members_initialization no member_max_width 127 show_parameter_dir yes show_parameter_name yes package_name_in_tab no class_drawing_mode natural drawing_language uml show_context_mode no auto_label_position yes show_infonote no shadow yes show_stereotype_properties no
  //use case diagram settings
  package_name_in_tab no show_context no auto_label_position yes draw_all_relations yes class_drawing_mode actor shadow yes show_stereotype_properties no
  //sequence diagram settings
  show_full_operations_definition no write_horizontally yes class_drawing_mode natural drawing_language uml draw_all_relations yes shadow yes show_stereotype_properties no
  //collaboration diagram settings
  show_full_operations_definition no show_hierarchical_rank no write_horizontally yes drawing_language uml package_name_in_tab no show_context no draw_all_relations yes shadow yes show_stereotype_properties no
  //object diagram settings
   write_horizontally yes package_name_in_tab no show_context no auto_label_position yes draw_all_relations yes shadow yes show_stereotype_properties no
  //component diagram settings
  package_name_in_tab no show_context no auto_label_position yes draw_all_relations yes shadow yes
  draw_component_as_icon no show_component_req_prov no show_component_rea no show_stereotype_properties no
  //deployment diagram settings
  package_name_in_tab no show_context no write_horizontally yes auto_label_position yes draw_all_relations yes shadow yes
  draw_component_as_icon no show_component_req_prov no show_component_rea no show_stereotype_properties no
  //state diagram settings
  package_name_in_tab no show_context no auto_label_position yes write_trans_label_horizontally yes show_trans_definition no draw_all_relations yes shadow yes
  show_activities yes region_horizontally yes drawing_language uml show_stereotype_properties no
  //activity diagram settings
  package_name_in_tab no show_context no show_opaque_action_definition no auto_label_position yes write_flow_label_horizontally no draw_all_relations yes shadow yes
  show_infonote yes drawing_language uml show_stereotype_properties no
  
  class_color yellow duration_color transparent continuation_color gray note_color blue fragment_color transparent subject_color transparent usecase_color yellow package_color transparent component_color green artifact_color green deploymentnode_color gray state_color yellow stateaction_color transparent activity_color transparent activityregion_color transparent activityaction_color transparent parameterpin_color white 
  font_size 11
  diagram_format A4

  mark_for_import
  
  ncouples 22
  key "check-in-cmd" value "ci -u %file"
  key "check-out-cmd" value "co -l %file"
  key "html dir" value "/home/finnerty/Office/Projects/compchem/documentation/"
  key "set_utf8" value "purpletree::dom::set_utf8"
  key "get_utf8" value "purpletree::dom::get_utf8"
  key "datapublicid" value "http://www.purpletree.net.au/compchem/datascheme/V1.0.0/"
  key "datasystemid" value "/home/finnerty/Office/Projects/compchem/schema/datascheme.dtd"
  key "PREFIX" value "COMPCHEM_"
  key "require" value "COMPCHEM_REQUIRE"
  key "ensure_old" value "COMPCHEM_ENSURE_OLD"
  key "ensure" value "COMPCHEM_ENSURE"
  key "always" value "COMPCHEM_ALWAYS"
  key "xmlstr2str" value "COMPCHEM_XML_STR"
  key "c2xmlstr" value "COMPCHEM_CHAR_XML"
  key "xml_text_name" value "COMPCHEM_XML_TEXT_NAME"
  key "xml_comment_name" value "COMPCHEM_XML_COMMENT_NAME"
  key "xml_pi_name" value "COMPCHEM_XML_PI_NAME"
  key "butter style" value "boost"
  key "butter base" value ".."
  key "butter type" value "shared"
  key "butter build-dir" value "build"
  key "function_attrib" value "__attribute__"
  comment "= Compchem Project =

Assumptions (Current version):

- Single threaded code: There has been minimal consideration to make the code 
multi-thread safe.
- Local: All URIs are assumed to be simple, local filenames. Note that currently
reading other URI schemes is OK it is writing back that is not implemented.

== Data System ==

This component represents the managed data set.

=== Data Scheme ===

This sub-component defines how the data set is logically organised. 
This structure is used as the form of exchange between the data 
system, suppliers and consumers.

+ Designed as a structured tree with XML elements to allow multi-
file and cross-referenced XML files as the data source.  (06/2007)



=== Data Source ===

This sub-component defines how the data is stored.  The initial
system uses a XML files directly in the data scheme form.  Later 
versions may implement this in another way, such as a database.

+ Nothing needed; system uses XML files directly. (06/2007)



== Supplier ==

The supplier components provide mechanisms for external data to be
imported into the data system.  This can use references to objects
that remain external to the system or cached information derived from
these objects.

+ A plugin filter system. Initially contains a set of filters for 
Gaussian output files.  (10/2007)
 + Allow filter configuration and the ability to pass arguments
to the filter.
 + Filter that interprets (name:regular expression) pairs for simple
generic filters.
 + Filter that allows interpreted (python?) filter definitions for
more complex generic filters.



== Report ==

The supplier components provide mechanisms for the data system to
be queried for the generation of reports.  The initial version uses
XSLT stlyesheets directly on the XML files of the data system.


== Chemistry ==

This contains chemistry specific components such as the periodic
table. 


== Framework ==

This component contains mainly external types that are used for
building the system.


== Applications ==

The current version of the compchem project represents a series of 
data definitions and a range of applications to manipulate the data 
system.  


=== Data checker ===

This application verifies and, if possible, repairs XML files that
conform to the data scheme definition.

+ Verifies and repairs inter-file links.  Can be used after manipulating
the directory tree containing the XML data files. (08/2007)


=== Newcalc ===

This application provides a mechanism to generate a set of shell 
script files.  The mechanism is general, with the example implementation
being for creating gaussian input files.

+ Uses XMT for GUI and X resource database for template. (11/2007)
+ XML for template, separate GUI and processing application.



=== Experiment ===

This application provides a mechanism for using the data system as
a laboratory notebook.  It can interface with the newcalc and filter
system to provide a complete workbench for performing computational
chemistry.

+ Workbench for managing newcalc and filter (semi-independent of 
data system).


=== Filter ===

This is a set of applications for managing raw data files.  The 
primary function is to provide a mechanism for importing data into
the data system.  However, many filters are useful independently of
the system.  The main application is the tool for importing data into
the data system.  Where appropriate wrapper applications are also
created that allow direct use of a single filter. 

+ Separate GUI and filter application, (semi-independent of data 
system).

== 24 May 2008 ==

Look at all operations as a transformation of the compchem database.
Then the \"server\" needs an understanding the database schema and 
recieves the 'transformation' requests from the components.  

Additionally the GUI may be implemented in an existing external 
tool such as eclipse? gabedit?...

1 June 2008

In this concept the program scans the database looking for the insertion 
position of the new data.  The program could just use a xml reader for
this.  Note that the program may have to modify existing files.  What it
might do is use the xml reader to parse the file, writing an equivalent 
copy into memory.  If the file is not edited, this memory file can be 
discarded.  If I have my logic right, there need be only one memory file
open at a time.

The new filters need to be able to right their results directly. They
should be given a stream in to which they write their results.  The
filter should put a filter-id at the top level of the results.  Filters
that collect several independent data sets (eg gaussian archive) can
put in several top-level nodes. The idea of a result node 
may require redesigning the DTD.
"
  package_ref 152105 // Docs

  package_ref 128297 // /compchem/chemistry

  package_ref 132777 // /compchem/data_access

  package_ref 131113 // /compchem/data_scheme

  package_ref 133289 // /compchem/programs

  package_ref 131625 // /compchem/report

  package_ref 131241 // /compchem/supplier

  package_ref 137257 // /compchem/utility

  package_ref 148393 // /xmlreader

  package_ref 131497 // External Components
end
