class project
!!!1425833.cpp!!!	add_child(in a_name : string, inout a_label : string) : basic_datum
basic_datum * Result (NULL);
if (data_access::names::experiment_name () == a_name)
{
  m_activities.push_back (new experiment (*this, a_label));
  Result = &(m_activities.back ());
}
else if (data_access::names::info_name () == a_name)
{
  COMPCHEM_ALWAYS (not has_information (), "Can not more than one info object here");
  m_info.reset (new info (*this, a_label));
  Result = m_info.get ();
}
else if (data_access::names::compound_ref_name () == a_name)
{
  m_imports.push_back (new compound_ref (*this, a_label));
  Result = &(m_imports.back ());
}
else
{
  const bool bad_child_name (false);
  COMPCHEM_ALWAYS (bad_child_name, serial_name() + " class has no child with name " + a_name);
}
append_child (*Result);
return *Result;
!!!1533609.cpp!!!	add_compound_ref(in a_label : string) : compound_ref
m_imports.push_back (new compound_ref (*this, a_label));
// add before any experiment
if (empty_experiment ())
{
  append_child (m_imports.back ());
}
else
{
  insert_child (m_activities.front (), m_imports.back ());
}
return m_imports.back ();
!!!1425705.cpp!!!	add_info(in a_label : string) : info
COMPCHEM_REQUIRE (not has_information (), "Can not more than one info object here");
m_info.reset (new info (*this, a_label));
// First
if (not m_activities.empty ())
{
  insert_child (m_activities.front (), *(m_info.get ()));
}
else
{
  append_child (*(m_info.get ()));
}
return *(m_info.get ());
!!!1415721.cpp!!!	add_experiment(in a_label : string) : experiment
m_activities.push_back (new experiment (*this, a_label));
// Always last
append_child (m_activities.back ());
return m_activities.back ();
!!!1677225.cpp!!!	connect(in a_uri : string) : void
m_document = data_access::manager::server().connect (*this, a_uri, false);
!!!1557673.cpp!!!	find_experiment(in a_label : string) : experiment_iterator
return std::find_if (m_activities.begin (), m_activities.end (), boost::bind (std::equal_to< std::string >(), boost::bind (&experiment::reference, _1), a_label));
!!!1557801.cpp!!!	find_experiment(in a_label : string) : const_experiment_iterator
return std::find_if (m_activities.begin (), m_activities.end (), boost::bind (std::equal_to< std::string >(), boost::bind (&experiment::reference, _1), a_label));
!!!1416105.cpp!!!	get_attribute(in a_name : string, out a_value : string) : bool
bool Result (false);
if (data_access::names::label_name () == a_name)
{
  a_value.assign (m_label);
  Result = true;
}
else if (data_access::names::outcome_name () == a_name)
{
  if (not m_outcomes.empty ())
  {
    a_value.assign (m_outcomes);
    Result = true;
  }
}
else if (data_access::names::worker_name () == a_name)
{
  if (not m_workers.empty ())
  {
    a_value.assign (m_workers);
    Result = true;
  }
}
return Result;
!!!1498153.cpp!!!	make_src(in a_path : path) : void
m_document = data_access::manager::server().connect (*this, a_path.string (), true);
!!!1683497.cpp!!!	remove_priv(inout a_datum : experiment) : void
COMPCHEM_REQUIRE (&(a_datum.parent ()) == this, "attempt to remove an object that is not a child of this object.");
bool object_is_child (false);
for (experiment_iterator l_f = begin_experiment (); l_f != end_experiment (); ++l_f)
{
  if (&(*l_f) == &a_datum)
  {
    m_activities.erase (l_f);
    object_is_child = true;
    break;
  }
}
COMPCHEM_ENSURE (true == object_is_child, "child object not found in child list");
!!!1683241.cpp!!!	remove_priv(inout a_datum : compound_ref) : void
COMPCHEM_REQUIRE (&(a_datum.section ()) == this, "attempt to remove an object that is not a child of this object.");
bool object_is_child (false);
for (compound_ref_iterator l_f = begin_compound_ref (); l_f != end_compound_ref (); ++l_f)
{
  if (&(*l_f) == &a_datum)
  {
    m_imports.erase (l_f);
    object_is_child = true;
    break;
  }
}
COMPCHEM_ENSURE (true == object_is_child, "child object not found in child list");
!!!1415977.cpp!!!	set_attribute(in a_name : string, in a_value : string) : void
if (data_access::names::worker_name () == a_name)
{
  m_workers.swap (a_value);
}
else if (data_access::names::outcome_name () == a_name)
{
  m_outcomes.swap (a_value);
}
else if (data_access::names::label_name () == a_name)
{
  if (m_label.empty ())
  {
    m_label.swap (a_value);
    if (is_src () and data_scheme_helper::helper ().target_project () == a_value)
    {
      m_document->read ();
    }
  }
  else
  {
    COMPCHEM_ALWAYS (m_label == a_value, serial_name () + " object labels cannot be changed once set.");
  }
}
else if (data_access::names::href_name () == a_name) 
{
  COMPCHEM_ALWAYS (a_value == m_document->uri () or a_value == m_document->uri_path (),
                    serial_name () + " object URI attribute cannot be changed after construction");
}
else
{
  const bool bad_attribute_name (false);
  COMPCHEM_ALWAYS (bad_attribute_name, serial_name () + " objects do not have an attribute named " + a_name);
}

!!!1663401.cpp!!!	virt_remove_child(inout a_datum : basic_datum) : void
// info?,compound-ref*,experiment*
COMPCHEM_ALWAYS (not empty_compound_ref () or not empty_experiment () or has_information ()
                 , "attempt to remove child from empty object");
if (has_information () and m_info.get () == a_datum)
{
  m_info.reset ();
}
else
{
  bool object_is_my_child (false);
  if (not empty_experiment ())
  {
    experiment * l_tmp (dynamic_cast< experiment * >(a_datum));
    if (NULL != l_tmp)
    {
      object_is_my_child = true;
      remove_priv (*l_tmp);
    }
  }
  if (not object_is_my_child and not empty_compound_ref ())
  {
    compound_ref * l_tmp (dynamic_cast< compound_ref * >(a_datum));
    if (NULL != l_tmp)
    {
      object_is_my_child = true;
      remove_priv (*l_tmp);
    }
  }
  COMPCHEM_ALWAYS (true == object_is_my_child, "attempt to remove non-child object");
}
!!!1449257.cpp!!!	write() : void
if (m_document->is_open ())
{
  m_document->write ();
}
