class project
!!!1425833.cpp!!!	add_child(in a_name : string, in a_label : string) : basic_datum
basic_datum * Result (NULL);
if (data_access::names::experiment_name () == a_name)
{
  Result = &(add_experiment (a_label));
}
else if (data_access::names::info_name () == a_name)
{
  Result = &(add_info (a_label));
}
else if (data_access::names::compound_ref_name () == a_name)
{
  Result = &(add_compound_ref (a_label));
}
else
{
  const bool bad_child_name (false);
  COMPCHEM_ALWAYS (bad_child_name, serial_name() + " class has no child with name " + a_name);
}
return *Result;
!!!1533609.cpp!!!	add_compound_ref(in a_label : string) : compound_ref
m_imports.push_back (new compound_ref (*this, a_label));
// add before any experiment
if (empty_experiment ())
{
  append_child (m_imports.back ());
}
else
{
  insert_child (m_activities.front (), m_imports.back ());
}
return m_imports.back ();
!!!1425705.cpp!!!	add_info(in a_label : string) : info
m_info.reset (new info (*this, a_label));
// First
if (not m_activities.empty ())
{
  insert_child (m_activities.front (), *(m_info.get ()));
}
else
{
  append_child (*(m_info.get ()));
}
return *(m_info.get ());
!!!1415721.cpp!!!	add_experiment(in a_label : string) : experiment
m_activities.push_back (new experiment (*this, a_label));
// Always last
append_child (m_activities.back ());
return m_activities.back ();
!!!1557673.cpp!!!	find_experiment(in a_label : string) : experiment_iterator
return std::find_if (m_activities.begin (), m_activities.end (), boost::bind (std::equal_to< std::string >(), boost::bind (&experiment::reference, _1), a_label));
!!!1557801.cpp!!!	find_experiment(in a_label : string) : const_experiment_iterator
return std::find_if (m_activities.begin (), m_activities.end (), boost::bind (std::equal_to< std::string >(), boost::bind (&experiment::reference, _1), a_label));
!!!1416105.cpp!!!	get_attribute(in a_name : string, out a_value : string) : bool
bool Result (false);
if (data_access::names::label_name () == a_name)
{
  a_value.assign (m_label);
  Result = true;
}
else if (data_access::names::outcome_name () == a_name)
{
  if (not m_outcomes.empty ())
  {
    a_value.assign (m_outcomes);
    Result = true;
  }
}
else if (data_access::names::worker_name () == a_name)
{
  if (not m_workers.empty ())
  {
    a_value.assign (m_workers);
    Result = true;
  }
}
return Result;
!!!1498153.cpp!!!	make_src(in a_path : path) : void
m_document = data_access::manager::server().connect (*this, a_path.string (), true);
!!!1422121.cpp!!!	project(inout a_program : program, in a_label : string, in a_is_src : bool)
if (a_is_src)
{
  m_document = data_access::manager::server().connect (*this, a_label, false);
}
else
{
  m_label.assign (a_label);
}
!!!1415977.cpp!!!	set_attribute(in a_name : string, in a_value : string) : void
if (data_access::names::worker_name () == a_name)
{
  m_workers.swap (a_value);
}
else if (data_access::names::outcome_name () == a_name)
{
  m_outcomes.swap (a_value);
}
else if (data_access::names::label_name () == a_name)
{
  if (m_label.empty ())
  {
    m_label.swap (a_value);
    if (is_src () and data_scheme_helper::helper ().target_project () == a_value)
    {
      m_document->read ();
    }
  }
  else
  {
    COMPCHEM_ALWAYS (m_label == a_value, serial_name () + " object labels cannot be changed once set.");
  }
}
else if (data_access::names::href_name () == a_name) 
{
  COMPCHEM_ALWAYS (a_value == m_document->uri () or a_value == m_document->uri_path (),
                    serial_name () + " object URI attribute cannot be changed after construction");
}
else
{
  const bool bad_attribute_name (false);
  COMPCHEM_ALWAYS (bad_attribute_name, serial_name () + " objects do not have an attribute named " + a_name);
}

!!!1449257.cpp!!!	write() : void
if (m_document->is_open ())
{
  m_document->write ();
}
!!!1663401.cpp!!!	virt_remove_child(inout a_datum : basic_datum) : void
// info?,compound-ref*,experiment*
COMPCHEM_ALWAYS (not empty_compound_ref () or not empty_experiment () or has_information ()
                 , "attempt to remove non-child object");
// a_datum should be an info object!
struct helper__
{
  static bool compare_ptr1 (compound_ref &a_iter, basic_datum* a_item)
  {
    return &(a_iter) == a_item;
  }
  static bool compare_ptr2 (experiment &a_iter, basic_datum* a_item)
  {
    return &(a_iter) == a_item;
  }
};
if (m_info.get () == a_datum)
{
  m_info.reset ();
}
else
{
  compound_ref_iterator l_f (std::find_if (begin_compound_ref (), end_compound_ref (), boost::bind(helper__::compare_ptr1, _1, a_datum)));
  if (l_f != end_compound_ref ())
  {
    m_imports.erase (l_f);
  }
  else
  {
    experiment_iterator l_i (std::find_if (begin_experiment (), end_experiment (), boost::bind(helper__::compare_ptr2, _1, a_datum)));
    COMPCHEM_ALWAYS (l_i != end_experiment (), "attempt to remove non-child object");
    m_activities.erase (l_i);
  }
}
