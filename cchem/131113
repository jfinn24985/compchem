format 61
"/compchem/data_scheme" // /compchem/data_scheme
  revision 220
  modified_by 41 "finnerty"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  stereotype "framework"
  cpp_h_dir "data_scheme"
  cpp_src_dir "../src/data_scheme"
  cpp_namespace "data_scheme"
  ncouples 1
  key "PREFIX" value "COMPCHEM_DATA_SCHEME_"
  comment "The key concept for types in this package is that they represent information that exists in some data store.

This package contains classes that define the main structure of the data. All components that directly manipulate the internal representation of the data will do so through these classes.

** NON-PARALLEL: Assumes only one database will be openned at a time. **"
  usecaseview 130985 "data_scheme"
    //use case diagram settings
    package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    usecase 131369 "create_memo"
      //use case diagram settings
      package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
      //sequence diagram settings
      show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
      //collaboration diagram settings
      show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
      //object diagram settings
       write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
      //state diagram settings
      package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
      show_activities default region_horizontally default drawing_language default show_stereotype_properties default
      //activity diagram settings
      package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
      show_infonote default drawing_language default show_stereotype_properties default
      comment "If the worker_credential object allows it, create a new result object for the current experiment object."
      collaborationdiagram 132009 "Add Result v5"
	show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations no shadow default show_stereotype_properties default
	size A4
      end
    end

    usecase 130217 "create_project"
      //use case diagram settings
      package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
      //sequence diagram settings
      show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
      //collaboration diagram settings
      show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
      //object diagram settings
       write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
      //state diagram settings
      package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
      show_activities default region_horizontally default drawing_language default show_stereotype_properties default
      //activity diagram settings
      package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
      show_infonote default drawing_language default show_stereotype_properties default
      comment "If the worker_credential object allows it, a new project object can be created in a program."
      collaborationdiagram 130345 "Add Mechanism v5"
	show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations no shadow default show_stereotype_properties default
	size A4
      end

      collaborationdiagram 130601 "Add Project v5"
	show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations no shadow default show_stereotype_properties default
	size A4
      end

      collaborationdiagram 133289 "Add View v5"
	show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations no shadow default show_stereotype_properties default
	size A4
      end

      collaborationdiagram 130985 "Add Worker v5"
	show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations no shadow default show_stereotype_properties default
	comment "Create a new worker, edit attributes and add to database.

The edit phase here is different to the \"Edit Worker\" use case in that the new worker object has no database context information.  This means that the worker object (a) uses a program object in get_record() and (b) does not check for EDIT_WORKER permission in store() because it knows that it must have been created with ADD_WORKER permission.

Note: The user is shown testing for adequate permission, this avoids a permission_exception later."
	size A4
      end
    end

    usecase 131113 "create_experiment"
      //use case diagram settings
      package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
      //sequence diagram settings
      show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
      //collaboration diagram settings
      show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
      //object diagram settings
       write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
      //state diagram settings
      package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
      show_activities default region_horizontally default drawing_language default show_stereotype_properties default
      //activity diagram settings
      package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
      show_infonote default drawing_language default show_stereotype_properties default
      comment "If the worker_credential object allows it, create a new experiment object for the current project object."
      collaborationdiagram 131369 "Add View Memo v5"
	show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations no shadow default show_stereotype_properties default
	size A4
      end

      collaborationdiagram 131625 "Add Experiment v5"
	show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations no shadow default show_stereotype_properties default
	comment "Create a new experiment, edit base attributes and add to database.

The edit phase here is different to the \"Edit Experiment\" use case in that the new worker object has no database context information.  This means that the worker object (a) uses a program object in get_record() and (b) does not check for EDIT_EXPERIMENT permission in store() because it knows that it must have been created with ADD_EXPERIMENT permission.

Note: The user is shown checking the credential object for adequate permission, the worker class will also check this in the constructor and throw an exception if this fails.  Thus what is shown is the correct sequence to avoid an exception."
	size A4
      end
    end

    usecase 131241 "change_experiment_content"
      //use case diagram settings
      package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
      //sequence diagram settings
      show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
      //collaboration diagram settings
      show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
      //object diagram settings
       write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
      //state diagram settings
      package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
      show_activities default region_horizontally default drawing_language default show_stereotype_properties default
      //activity diagram settings
      package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
      show_infonote default drawing_language default show_stereotype_properties default
      comment "If the worker_credential object allows it, open and possibly change an experiment object in the current project object."
      collaborationdiagram 131753 "Edit Experiment v5"
	show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations no shadow default show_stereotype_properties default
	comment "The choose_experiment causes the list of experiments to be displayed.  The user selects the experiment of interest from this list.  The select experiment is then displayed.  The edited properties of the experiment are then commited to permanent storage."
	size A4
      end

      collaborationdiagram 132137 "Edit Result v5"
	show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations no shadow default show_stereotype_properties default
	size A4
      end

      collaborationdiagram 131881 "Finalise Experiment v5"
	show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations no shadow default show_stereotype_properties default
	size A4
      end
    end

    usecase 130089 "change_program_content"
      //use case diagram settings
      package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
      //sequence diagram settings
      show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
      //collaboration diagram settings
      show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
      //object diagram settings
       write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
      //state diagram settings
      package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
      show_activities default region_horizontally default drawing_language default show_stereotype_properties default
      //activity diagram settings
      package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
      show_infonote default drawing_language default show_stereotype_properties default
      comment "If the worker_credential object allows it, an existing mechanism object can be changed and sent to a site. That a site_session object exists for the site is implied by the fact the mechanism object was obtained somehow."
      collaborationdiagram 130473 "Edit Mechanism v5"
	show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations no shadow default show_stereotype_properties default
	comment "This shows the steps in modifying a mechanism. (The  restricted object is actually part of mech_factory)"
	size A4
      end

      collaborationdiagram 131113 "Edit Worker v5"
	show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations no shadow default show_stereotype_properties default
	comment "Edit an existing worker and store to database.

The edit phase here is different to the \"Add Worker\" use case in that the worker object has its database context information and uses itself in the get_reocrd() call.  The worker object will also check for EDIT_WORKER permission in store().

Note: The user is shown checking the credential object for adequate permission, the worker class will also check this in the store() method and throw an exception if this fails.  Thus what is shown is the correct sequence to avoid an exception."
	size A4
      end
    end

    usecase 130345 "change_project_content"
      //use case diagram settings
      package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
      //sequence diagram settings
      show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
      //collaboration diagram settings
      show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
      //object diagram settings
       write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
      //state diagram settings
      package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
      show_activities default region_horizontally default drawing_language default show_stereotype_properties default
      //activity diagram settings
      package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
      show_infonote default drawing_language default show_stereotype_properties default
      comment "If the worker_credential object allows it, an existing project object can be changed.  Editing in the sense used in this use-case refers to administrative level editing, such as adding workers and assigning access rights."
      collaborationdiagram 131497 "Edit View Memo v5"
	show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations no shadow default show_stereotype_properties default
	size A4
      end

      collaborationdiagram 130729 "Edit Project v5"
	show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations no shadow default show_stereotype_properties default
	comment "In this use case only attributes of the project object are being edited,  adding content such as adding experiments and views is handled in other use cases."
	size A4
      end

      collaborationdiagram 130857 "Finalise Project v5"
	show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations no shadow default show_stereotype_properties default
	size A4
      end
    end

    usecase 135465 "edit_object"
      //use case diagram settings
      package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
      //sequence diagram settings
      show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
      //collaboration diagram settings
      show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
      //object diagram settings
       write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
      //state diagram settings
      package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
      show_activities default region_horizontally default drawing_language default show_stereotype_properties default
      //activity diagram settings
      package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
      show_infonote default drawing_language default show_stereotype_properties default
    end
  end

  componentview 128553 "data_scheme"
    //component diagram settings
    package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  end

  classview 133161 "data_scheme"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    associated_deployment_view deploymentview_ref 131113 // data_scheme
    comment "Types related to the second version of the XML document schema.

(src) indicates that these types will be bound to a xml_src object somehow...
 
DONE:
basic_datum	****
basic_text	****
comment		****
compound	****
datum		****
experiment	****
filter		****
formula		****
identity		****
info		****
mechanism	****
memo		**** (src)
processing_in..	****
program		**** (src)
project		**** (src)
proxy (XML doc)	-
proxy-helper	-
worker		****
settings		****
text		****"
    classdiagram 171561 "Inheritance"
      draw_all_relations default hide_attributes yes hide_operations yes show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    classdiagram 134953 "data_scheme Associations"
      draw_all_relations default hide_attributes yes hide_operations yes show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_infonote default shadow default show_stereotype_properties default
      size A4
    end

    sequencediagram 172713 "add_child"
      show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
      overlapping_bars size A4
    end

    class 432681 "basic_datum"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit}
{
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class is the base class for all data_scheme components. It
defines methods used by the system to read from and write to XML
documents.

It's purpose is to provide the abstract interface to allow an XML Reader
and a data factory object to parse an XML document into basic_datum 
derived objects. Additionally, the interface should allow different derived
types to provide for scanning and querying of the XML document.

Its second function is to handle all text related elements (XML Text,
Comment and PI elements) directly.  It uses virt_[add|remove]_text
methods to inform descendents when these elements are added or
removed. For simply replace all XML Text elements you can use 
set_text, for finer control you need to play with iterators."
      class 443689 "const_iterator"
	visibility package stereotype "typedef" explicit_base_type "basic_datum"
	cpp_decl "${comment}typedef std::vector< ${type} * >::${name} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	comment "Iterator type for the ordered list of children."
      end

      class 443817 "iterator"
	visibility package stereotype "typedef" explicit_base_type "basic_datum"
	cpp_decl "${comment}typedef std::vector< ${type} * >::${name} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	comment "Iterator type for the ordered list of children."
      end

      attribute 342569 "m_base_elements"
	private explicit_type "basic_text"
	multiplicity "*"
	stereotype "ptr_vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The basic textual elements in this datum.  These elements are
often textual elements that appears in the XML document but 
do not form part of the logical document structure. (eg 
whitespace, comments and PIs)"
      end

      attribute 342441 "m_children"
	private explicit_type "basic_datum"
	multiplicity "*"
	stereotype "vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type} *> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The list of children in document order.  This is includes the logical
objects and XML elements such as comments, whitespace etc."
      end

      operation 1386921 "add_child"
	cpp_virtual public explicit_return_type "basic_datum"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param inout name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0}& ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  @{always}(false, \"Can not add children to a this object\");
  // Dummy return value.
  return *this;
}
"
	
	
	
	
	comment "add_child creates a new object corresponding to a_name and appends it
to the list of children.

Note: add_child always appends objects to list. It should therefore only be 
used by deserialisation classes.

throw is a_name is not a valid child.
base-class action is to throw an error!

\\post a_label.empty

\\return /= NULL"
      end

      operation 1427113 "add_comment"
	public explicit_return_type "basic_datum"
	nparams 1
	  param in name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  return ${name}_swallow (${p0});
}
"
	
	
	
	
	comment "Create a comment child of this node and append to child list. Throw an error if no 
children are allowed.  Returns a reference to the new child object.

\\return /= NULL
\\final"
      end

      operation 1669033 "add_comment_swallow"
	cpp_virtual public explicit_return_type "basic_datum"
	nparams 1
	  param inout name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Create a comment object and append to child list.  Swallow 
a_value. Throw an error if no children are allowed.  Returns a 
reference to the new child object.

Swallows text!
\\post a_value.empty

\\return /= NULL"
      end

      operation 1669161 "add_pi"
	public explicit_return_type "basic_datum"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param in name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract}
{
  return ${name}_swallow (${p0}, ${p1});
}
"
	
	
	
	
	comment "Create a processing_instruction and append it to list of children. Throw 
an error if no children are allowed.  Returns a reference to the new child 
object.

\\return /= NULL
\\final"
      end

      operation 1427241 "add_pi_swallow"
	cpp_virtual public explicit_return_type "basic_datum"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param inout name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Create a processing_instruction and append it to list of children. Throw 
an error if no children are allowed.  Returns a reference to the new child 
object. Swallows a_value text!

\\post a_value.empty

\\return /= NULL"
      end

      operation 1426985 "add_text"
	public explicit_return_type "basic_datum"
	nparams 1
	  param in name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  return ${name}_swallow (${p0});
}
"
	
	
	
	
	comment "Create a text object and append it to list of children. Throw 
an error if no children are allowed.  Returns a reference to the new child 
object.

\\return /= NULL
\\final"
      end

      operation 1668905 "add_text_swallow"
	cpp_virtual public explicit_return_type "basic_datum"
	nparams 1
	  param in name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Create a text object and append it to list of children. Throw 
an error if no children are allowed.  Returns a reference to the new child 
object. Swallows a_value text!

\\post a_value.empty

\\return /= NULL"
      end

      operation 1454377 "append_child"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "a_new" explicit_type "basic_datum"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract}
{
  m_children.push_back (&${p0});
}
"
	
	
	
	
	comment "This method is used to append a_new ptr to the list of children.  "
      end

      operation 1395113 "basic_datum"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} 
: m_base_elements ()
, m_children ()
{}
"
	
	
	
	
      end

      operation 1395369 "basic_datum"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" explicit_type "basic_datum"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	
	
	
	
	comment "no copy"
      end

      operation 1395241 "~basic_datum"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile} throw ();
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile} throw () 
{}
"
	
	
	
	
      end

      operation 1394345 "begin"
	stereotype "const"
	const public return_type class_ref 443689 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_children.begin ();
}
"
	
	
	
	
	comment "The first child element of this datum"
      end

      operation 1394601 "begin"
	public return_type class_ref 443817 // iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_children.begin ();
}
"
	
	
	
	
	comment "The first child element of this datum"
      end

      operation 1451817 "empty"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_children.${name} ();
}
"
	
	
	
	
	comment "Does this datum have any children?"
      end

      operation 1394473 "end"
	stereotype "const"
	const public return_type class_ref 443689 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_children.end ();
}
"
	
	
	
	
	comment "The first child element of this datum"
      end

      operation 1394729 "end"
	public return_type class_ref 443817 // iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_children.end ();
}
"
	
	
	
	
	comment "The first child element of this datum"
      end

      operation 1662121 "erase"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "a_item" type class_ref 443817 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract}
{
  m_children.erase (${p0});
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Remove a_item from child list.  This is called automatically in 
basic_datum::remove."
      end

      operation 1453993 "find"
	stereotype "const"
	const public return_type class_ref 443689 // const_iterator
	nparams 1
	  param in name "a_ptr" explicit_type "basic_datum"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} *const ${p0}${)}${const}${volatile}${throw}${abstract}
{
  return std::find (begin (), end (), ${p0});
}
"
	
	
	
	
	comment "Return an iterator to the given child ptr or end() if not found."
      end

      operation 1454121 "find"
	public return_type class_ref 443817 // iterator
	nparams 1
	  param in name "a_ptr" explicit_type "basic_datum"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} *const ${p0}${)}${const}${volatile}${throw}${abstract}
{
  return std::find (begin (), end (), ${p0});
}
"
	
	
	
	
	comment "Return an iterator to the given child ptr or end() if not found."
      end

      operation 1389737 "get_attribute"
	const cpp_virtual public explicit_return_type "bool"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param out name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  return false;
}
"
	
	
	
	
	comment "Get attribute value. If the object has an attribute value corresponding to 
a_name then it is placed in a_value and true is returned. Otherwise false
is returned and a_value is unchanged.

\\post return=false implies a_value.pre === a_value.post"
      end

      operation 1389609 "insert_child"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "a_pre" explicit_type "iterator"
	  param inout name "a_new" explicit_type "basic_datum"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract}
{
  m_children.insert (${p0}, &${p1});
}
"
	
	
	
	
	comment "This method is used to add a_new ptr to the list of 
children after a_pre.  During deserialisation this is
handled automatically by the add_child method.  Therefore
this is only necessary when a derived classes creates
a new object internally.

\\pre (untested) a_pre in [begin (), end ()]"
      end

      operation 1454505 "insert_child"
	protected explicit_return_type "void"
	nparams 2
	  param in name "a_pre" explicit_type "basic_datum"
	  param inout name "a_new" explicit_type "basic_datum"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract}
{
  m_children.insert (find (&${p0}), &${p1});
}
"
	
	
	
	
	comment "This method is used to add a_new ptr to the list of 
children after a_pre.  During deserialisation this is
handled automatically by the add_child method.  Therefore
this is only necessary when a derived classes creates
a new object internally.

\\pre (untested) a_pre in [begin (), end ()]"
      end

      operation 1395497 "operator="
	private explicit_return_type "basic_datum"
	nparams 1
	  param in name "source" explicit_type "basic_datum"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "no assign"
      end

      operation 1397929 "remove"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_item" type class_ref 443817 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Remove the given iterator from the children list.  

If the removed object was owned by the basic_datum base class object 
then virt_remove_text will be called.

\\pre (unchecked) a_item in [begin, end)
\\post a_item is invalid."
      end

      operation 1371433 "serial_name"
	abstract const cpp_virtual public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "The XML element definition for this datum."
      end

      operation 1365673 "set_attribute"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param in name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "Write an attribute.  Throw an error if arguments are incorrect or if no 
attributes are allowed.

This does not guarrantee that the following will hold
a.set_attribute (\"A\", \"B\") -> \"B\" = a.get_attribute (\"A\")
in the case where \"A\" is a key_attribute and is read-only.
Currently in this case the attempt to set the attribute may
be silently ignored. (TODO: should not be silent, should 
test that \"B\" is equal to current value or throw.)"
      end

      operation 1475625 "size"
	const public explicit_return_type "uint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_children.${name} ();
}
"
	
	
	
	
      end

      operation 1661993 "virt_remove_child"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 432681 // basic_datum
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  const bool have_no_children (false);
  @{always}(have_no_children, \"This type can have no children.\");
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Called when an object of a derived class will be removed.

throw exception if a_datum is not a child of derived class."
      end

      operation 1374377 "visit"
	abstract const cpp_virtual public explicit_return_type "void"
	nparams 1
	  param inout name "a_visitor" type class_ref 435241 // visitor
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end
    end

    class 435369 "basic_text"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
{
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This represents character data elements it can be interspersed with other elements.

This is an abstract base class of XML textual elements"
      classrelation 429225 // <generalisation>
	relation 418857 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 429225 // <generalisation>
	  b parent class_ref 432681 // basic_datum
      end

      attribute 341289 "the_content"
	public explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The text string."
      end

      attribute 341161 "m_parent"
	private explicit_type "basic_datum"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Our parent."
      end

      operation 1660201 "add_comment_swallow"
	public explicit_return_type "basic_datum"
	nparams 1
	  param inout name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  @{always}(false, \"Can not add comments to a basic_text objects\");
  // Dummy return value.
  return *this;
}
"
	
	
	
	
	comment "add_comment is an error for basic_text. 

default action is to throw an error!

\\return /= NULL"
      end

      operation 1660329 "add_pi_swallow"
	public explicit_return_type "basic_datum"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param inout name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  @{always}(false, \"Can not add processing instructions to a basic_text objects\");
  // Dummy return value.
  return *this;
}
"
	
	
	
	
	comment "add_comment is an error for basic_text. 

default action is to throw an error!

\\return /= NULL"
      end

      operation 1660457 "add_text_swallow"
	public explicit_return_type "basic_datum"
	nparams 1
	  param in name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  @{always}(false, \"Can not add text object to a basic_text objects\");
  // Dummy return value.
  return *this;
}
"
	
	
	
	
	comment "add_comment is an error for basic_text. 

default action is to throw an error!

\\return /= NULL"
      end

      operation 1668649 "basic_text"
	public explicit_return_type ""
	nparams 2
	  param inout name "a_parent" explicit_type "basic_datum"
	  param in name "a_content" explicit_type "string"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${volatile}${throw}
: basic_datum ()
, the_content ()
, m_parent (${p0})
{
  the_content.swap (${p1});
}
"
	
	
	
	
	comment "Create a text element (copy version, copies text)"
      end

      operation 1387689 "~basic_text"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile} throw ()
{}"
	
	
	
	
      end

      operation 1387817 "basic_text"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" explicit_type "basic_text"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	
	
	
	
	comment "no copy"
      end

      operation 1387945 "operator="
	private explicit_return_type "basic_text"
	nparams 1
	  param in name "source" explicit_type "basic_text"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "no assign"
      end

      operation 1387177 "parent"
	const public explicit_return_type "basic_datum"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_parent;
}
"
	
	
	
	
	comment "Return a pointer to the parent object. Text objects always have parents."
      end

      operation 1526825 "set_attribute"
	cpp_virtual public explicit_return_type "void"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param in name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  @{always}(false, \"Text classes have no settable attributes\");
}
"
	
	
	
	
	comment "Throw an error as text objects have no attributes."
      end

    end

    class 443433 "comment"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
{
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This represents character data elements it can be interspersed 
with other elements."
      classrelation 430889 // <generalisation>
	relation 420521 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 430889 // <generalisation>
	  b parent class_ref 435369 // basic_text
      end

      operation 1392681 "comment"
	public explicit_return_type ""
	nparams 2
	  param inout name "a_parent" explicit_type "basic_datum"
	  param inout name "a_content" explicit_type "string"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${volatile}${throw}
: basic_text (${p0}, ${p1})
{}
"
	
	
	
	
	comment "Create a text element.

Swallows content!
\\post a_content.empty"
      end

      operation 1392937 "comment"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" explicit_type "comment"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	
	
	
	
	comment "no copy"
      end

      operation 1392809 "~comment"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile} throw ()
{}"
	
	
	
	
      end

      operation 1392297 "operator="
	private explicit_return_type "comment"
	nparams 1
	  param in name "source" explicit_type "comment"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "no assign"
      end

      operation 1392169 "serial_name"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return data_access::names::comment_type ();
}
"
	
	
	
	
	comment "The XML element definition for this datum."
      end

      operation 1449513 "visit"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "a_visitor" explicit_type "visitor"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${p0}.on_visit (*this);
}
"
	
	
	
	
      end
    end

    class 356009 "compound"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      ncouples 1
      key "base_class" value "basic_datum"
      comment "A base-type for 'compound' type objects"
      class 441641 "formula_iterator"
	visibility package stereotype "typedef" explicit_base_type "formula"
	cpp_decl "${comment}typedef boost::ptr_vector< ${type} >::iterator ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	comment "Iterator for formula list."
      end

      class 441769 "const_formula_iterator"
	visibility package stereotype "typedef" explicit_base_type "formula"
	cpp_decl "${comment}typedef boost::ptr_vector< ${type} >::const_iterator ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	comment "Const iterator for formula list."
      end

      class 441897 "identity_iterator"
	visibility package stereotype "typedef" explicit_base_type "identity"
	cpp_decl "${comment}typedef boost::ptr_vector< ${type} >::iterator ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	comment "Iterator for formula list."
      end

      class 442025 "const_identity_iterator"
	visibility package stereotype "typedef" explicit_base_type "identity"
	cpp_decl "${comment}typedef boost::ptr_vector< ${type} >::const_iterator ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	comment "Const iterator for formula list."
      end

      classrelation 422825 // <generalisation>
	relation 412585 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 422825 // <generalisation>
	  b parent class_ref 432681 // basic_datum
      end

      attribute 339369 "m_categories"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The category list"
      end

      classrelation 323753 // m_identity (<directional composition>)
	relation 315305 *-->
	  stereotype "ptr_vector"
	  a role_name "m_identity" multiplicity "*" private
	    comment "The identities of this compound"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 323753 // m_identity (<directional composition>)
	  b parent class_ref 356393 // identity
      end

      classrelation 427689 // m_info (<directional composition>)
	relation 417449 *-->
	  stereotype "auto_ptr"
	  a role_name "m_info" multiplicity "*" private
	    comment "The (possible) information node for this compound."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 427689 // m_info (<directional composition>)
	  b parent class_ref 354601 // info
      end

      classrelation 299561 // m_instances (<composition>)
	relation 293289 *---
	  stereotype "ptr_vector"
	  a role_name "m_instances" multiplicity "*" private
	    comment "List of formulae this compound has"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 299561 // m_instances (<composition>)
	  b role_name "m_moiety" multiplicity "1" private
	    comment "The compound this formula is a member of (parent)"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	    classrelation_ref 300201 // m_moiety (<composition>)
      end

      attribute 339497 "m_label"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The compound label."
      end

      classrelation 427817 // <composition>
	relation_ref 311977 // <composition>
      end

      operation 1383721 "add_child"
	public explicit_return_type "basic_datum"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param inout name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Create a basic_datum child of this node with the type tagname a_name.
Throw an error not an allowed child.  Returns a reference to the new 
child object."
      end

      operation 1182889 "add_formula"
	public explicit_return_type "formula"
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Create and insert a formula element. Return a pointer to the created formula.

\\pre find_formula(a_label) = end_formula
\\post return /= nul"
      end

      operation 1383593 "add_identity"
	public explicit_return_type "identity"
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Create and insert a identity element. Return a pointer to the created formula.

\\pre find_identity(a_label) = end_identity
\\post return /= nul"
      end

      operation 1113129 "add_info"
	public explicit_return_type "info"
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  @{require}(not has_information (), \"Attempt to add a second info object.\");
  ${body}
}
"
	
	
	
	
	comment "Create and add an information object. Return the object.

\\pre not has_information
\\post return /= nul"
      end

      operation 1131945 "categories"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_categories;
}
"
	
	
	
	
	comment "A space delimited set of category IDs that allow formulae 
to be grouped in meaningful ways.  Order is not
important, though priority can be flagged by ending an ID 
with the \":\" and a number (lower number is higher priority).  
For example if you are studying a reaction with several
steps you would identify each step with an ID, and if you 
are making a comparison across substituents then they 
could be IDed.  It would then be possible for a report to
generate a table of reaction v. substituent."
      end

      operation 1132073 "add_category_label"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_cat_set" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0}& ${p0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0}& ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  data_access::names::list_add (m_categories, ${p0});
}"
	
	
	
	
	comment "A space delimited set of category IDs that allow formulae to be grouped in meaningful ways.  Order is not
important, though priority can be flagged by ending an ID with the \":\" and a number (lower
number is higher priority).  For example if you are studying a reaction with several
steps you would identify each step with an ID, and if you are making a comparison across
substituents then they could be IDed.  It would then be possible for a report to
generate a table of reaction v. substituent."
      end

      operation 1142185 "begin_formula"
	public return_type class_ref 441641 // formula_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_instances.begin ();
}
"
	
	
	
	
	comment "Get the vector of formulae."
      end

      operation 1382441 "begin_formula"
	stereotype "const"
	const public return_type class_ref 441769 // const_formula_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_instances.begin ();
}
"
	
	
	
	
	comment "Get the vector of formulae."
      end

      operation 1382825 "begin_identity"
	public return_type class_ref 441897 // identity_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_identity.begin ();
}
"
	
	
	
	
	comment "Access the list of identities."
      end

      operation 1382953 "begin_identity"
	stereotype "const"
	const public return_type class_ref 442025 // const_identity_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_identity.begin ();
}
"
	
	
	
	
	comment "Access the list of identities."
      end

      operation 1167657 "compound"
	public explicit_return_type ""
	nparams 2
	  param inout name "a_parent" explicit_type "program"
	  param inout name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${volatile}${throw} 
: @{base_class} ()
, m_categories ()
, m_identity ()
, m_info ()
, m_instances ()
, m_label ()
, m_parent (${p0})
{
  m_label.swap (${p1});
}
"
	
	
	
	
	comment "Construct a new compound object, swallow a_label

\\post a_label.empty"
      end

      operation 1167913 "compound"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" explicit_type "compound"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	
	
	
	
	comment "no copy"
      end

      operation 1167785 "~compound"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile} throw ();
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile} throw () 
{}
"
	
	
	
	
      end

      operation 1475753 "empty_formula"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_instances.empty ();
}
"
	
	
	
	
	comment "Are there formula children?"
      end

      operation 1476009 "empty_identity"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_identity.empty ();
}
"
	
	
	
	
	comment "Are there 'identity' children"
      end

      operation 1382569 "end_formula"
	public return_type class_ref 441641 // formula_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_instances.end ();
}
"
	
	
	
	
	comment "Get an iterator to the one-past-last formula child"
      end

      operation 1382697 "end_formula"
	stereotype "const"
	const public return_type class_ref 441769 // const_formula_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_instances.end ();
}
"
	
	
	
	
	comment "Get a constant iterator to the one-past-last formula child"
      end

      operation 1383081 "end_identity"
	public return_type class_ref 441897 // identity_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_identity.end ();
}
"
	
	
	
	
	comment "Access the list of identities."
      end

      operation 1383209 "end_identity"
	stereotype "const"
	const public return_type class_ref 442025 // const_identity_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_identity.end ();
}
"
	
	
	
	
	comment "Access the list of identities."
      end

      operation 1501737 "find_formula"
	public return_type class_ref 441641 // formula_iterator
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Search for a formula with the given label"
      end

      operation 1659689 "find_formula"
	stereotype "const"
	const public return_type class_ref 441769 // const_formula_iterator
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Search for a formula with the given label"
      end

      operation 1384233 "get_attribute"
	const public explicit_return_type "bool"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param out name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Add attributes to element writer.

No default implementation."
      end

      operation 1383337 "has_information"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return NULL != m_info.get ();
}
"
	
	
	
	
	comment "Test if an information object exists."
      end

      operation 1113001 "information"
	stereotype "get"
	public explicit_return_type "info"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  @{require}(has_information (), \"Cannot get non-existent information object.\");
  return *m_info.get ();
}
"
	
	
	
	
	comment "Get the information content.

\\pre has_information ()"
      end

      operation 1383465 "information"
	stereotype "const"
	const public explicit_return_type "info"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  @{require}(has_information (), \"Cannot get non-existent information object.\");
  return *m_info.get ();
}
"
	
	
	
	
	comment "Get the information content.

\\pre has_information ()"
      end

      operation 1113513 "label"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_label;
}
"
	
	
	
	
      end

      operation 1168041 "operator="
	private explicit_return_type "compound"
	nparams 1
	  param in name "source" explicit_type "compound"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "no assignment"
      end

      operation 1383977 "parent"
	const public explicit_return_type "basic_datum"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile} throw ()${abstract};"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile} throw ()${staticnl}
{
  return m_parent;
}
"
	
	
	
	
	comment "Return a pointer to the parent object, may be NULL."
      end

      operation 1679017 "remove_child"
	public explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 356521 // formula
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  remove_priv (${p0}); // performs validity checking.
  erase (find (&${p0})); // Remove from base.
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Remove a_datum from our list of children.

\\pre a_datum.parent = this"
      end

      operation 1679145 "remove_child"
	public explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 356393 // identity
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  remove_priv (${p0}); // performs validity checking.
  erase (find (&${p0})); // Remove from base.
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Remove a_datum from our list of children.

\\pre a_datum.parent = this"
      end

      operation 1678761 "remove_priv"
	private explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 356521 // formula
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Remove a formula object.

\\pre a_datum.parent = this"
      end

      operation 1678889 "remove_priv"
	private explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 356393 // identity
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Remove a identity object.

\\pre a_datum.parent = this"
      end

      operation 1383849 "serial_name"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return data_access::names::${class}_name ();
}
"
	
	
	
	
	comment "The XML element name for this datum."
      end

      operation 1384105 "set_attribute"
	public explicit_return_type "void"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param in name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Write an attribute.  Throw an error if arguments are incorrect or if no 
attributes are allowed."
      end

      operation 1475881 "size_formula"
	const public explicit_return_type "uint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_instances.size ();
}
"
	
	
	
	
	comment "How many formula children are there?"
      end

      operation 1476137 "size_identity"
	const public explicit_return_type "uint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_identity.size ();
}
"
	
	
	
	
	comment "How many identity children are there?"
      end

      operation 1662505 "virt_remove_child"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 432681 // basic_datum
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Called when an object of a derived class will be removed.

throw exception if a_datum is not a child of derived class."
      end

      operation 1450025 "visit"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "a_visitor" explicit_type "visitor"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${p0}.on_visit (*this);
}
"
	
	
	
	
      end
    end

    class 480425 "compound_ref"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
{
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 490025 // <generalisation>
	relation 478633 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 490025 // <generalisation>
	  b parent class_ref 432681 // basic_datum
      end

      attribute 386985 "m_formulae"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The set of formulae to import, when empty import all."
      end

      classrelation 490537 // <composition>
	relation_ref 478889 // <composition>
      end

      attribute 386857 "m_label"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The label of the compound to import."
      end

      operation 1664681 "add_comment_swallow"
	public explicit_return_type "basic_datum"
	nparams 1
	  param inout name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  const bool empty_element (false);
  @{always}(empty_element, \"Can not add a comment to an EMPTY element\");
}
"
	
	
	
	
	comment "Throws an error as no children are allowed. "
      end

      operation 1532713 "add_formula_label"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_set" explicit_type "string"
	constraint "Add a formula label to the list of formulae"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  data_access::names::list_add (m_formulae, ${p0});
}
"
	
	
	
	
      end

      operation 1664809 "add_pi_swallow"
	public explicit_return_type "basic_datum"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param in name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  const bool empty_element (false);
  @{always}(empty_element, \"Can not add a processing-instruction to an EMPTY element\");
}
"
	
	
	
	
	comment "Throws an error as no children are allowed. "
      end

      operation 1664937 "add_text_swallow"
	public explicit_return_type "basic_datum"
	nparams 1
	  param in name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  const bool empty_element (false);
  @{always}(empty_element, \"Can not add text to an EMPTY element\");
}
"
	
	
	
	
	comment "Throws an error as no children are allowed. "
      end

      operation 1532457 "compound_label"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_label;
}
"
	
	
	
	
	comment "Get the label of the compound to import."
      end

      operation 1531817 "compound_ref"
	public explicit_return_type ""
	nparams 2
	  param inout name "a_parent" type class_ref 354089 // project
	  param inout name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${volatile}${throw} 
: basic_datum ()
, m_formulae ()
, m_importer (${p0})
, m_label ()
{
  m_label.swap (${p1});
}
"
	
	
	
	
	comment "Construct a new compound-ref object, swallow a_label

\\post a_label.empty"
      end

      operation 1531945 "~compound_ref"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile} throw ();
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile} throw ()
{}
"
	
	
	
	
      end

      operation 1532073 "compound_ref"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 480425 // compound_ref
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	
	
	
	
	comment "no copy"
      end

      operation 1532329 "formulae"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_formulae;
}
"
	
	
	
	
	comment "Get the list of formulae to import"
      end

      operation 1533353 "get_attribute"
	const public explicit_return_type "bool"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param out name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Add attributes to element writer.

No default implementation."
      end

      operation 1532201 "operator="
	private return_type class_ref 480425 // compound_ref
	nparams 1
	  param in name "source" type class_ref 480425 // compound_ref
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "no assign"
      end

      operation 1532585 "section"
	stereotype "get"
	const public return_type class_ref 354089 // project
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_importer;
}
"
	
	
	
	
	comment "Get a reference to the project this is part of."
      end

      operation 1532841 "serial_name"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return data_access::names::${class}_name ();
}
"
	
	
	
	
	comment "The XML element definition for this datum."
      end

      operation 1533225 "set_attribute"
	public explicit_return_type "void"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param in name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Write an attribute.  Throw an error if arguments are incorrect or if no 
attributes are allowed."
      end

      operation 1533097 "visit"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "a_visitor" explicit_type "visitor"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${p0}.on_visit (*this);
}
"
	
	
	
	
      end
    end

    class 469033 "data_scheme_helper"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
{
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This singleton class manages configuration information for the data_scheme library.

The target_project is the project of current interest. The library is free to not load
project files that do not match the target.

Added options:
  project,p = The target project for this application run.
  auto-open-memo,A = read all the memo-src objects automatically.
  auto-project,P = attempt to create a new project if not present"
      classrelation 467881 // <dependency>
	relation 457001 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 467881 // <dependency>
	  b parent class_ref 470185 // program_options
      end

      attribute 374313 "m_auto_memo"
	private explicit_type "bool"
	init_value "false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Should we automatically open memo objects?"
      end

      attribute 370729 "m_auto_project"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Whether to automatically create missing target projects."
      end

      attribute 369321 "m_target_project"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 370601 "s_exemplar"
	class_attribute private explicit_type "data_scheme_helper"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The Singleton object."
      end

      operation 1498409 "auto_open_memo"
	stereotype "get"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_auto_memo;
}
"
	
	
	
	
	comment "When this is true, the user indicated that they wanted the
application to attempt to automatically open the target of
memo-src objects while reading the parent document."
      end

      operation 1498537 "auto_open_memo"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_automake" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  m_auto_memo = ${p0};
}

"
	
	
	
	
	comment "When this is true, the user indicated that they wanted the
application to attempt to automatically open the target of
memo-src objects while reading the parent document."
      end

      operation 1490345 "auto_project"
	stereotype "get"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_auto_project;
}
"
	
	
	
	
	comment "When this is true, the user indicated that they wanted the
application to attempt to automatically create a new project
when it was not already present."
      end

      operation 1498281 "auto_project"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_automake" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  m_auto_project = ${p0};
}

"
	
	
	
	
	comment "When this is true, the user indicated that they wanted the
application to attempt to automatically create a new project
when it was not already present."
      end

      operation 1485225 "data_scheme_helper"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw}
: m_auto_memo (false)
, m_auto_project (false)
, m_target_project (\"default\") 
{
  register_options ();
}
"
	
	
	
	
	comment "Constructor for singleton."
      end

      operation 1485353 "~data_scheme_helper"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {}
"
	
	
	
	
      end

      operation 1485481 "data_scheme_helper"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" explicit_type "data_scheme_helper"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	
	
	
	
	comment "no copy"
      end

      operation 1485993 "helper"
	class_operation public explicit_return_type "data_scheme_helper"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return s_exemplar;
}
"
	
	
	
	
	comment "Get the singleton."
      end

      operation 1485609 "operator="
	private explicit_return_type "data_scheme_helper"
	nparams 1
	  param in name "source" explicit_type "data_scheme_helper"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "no assign"
      end

      operation 1490217 "register_options"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Add options to the configuration helper."
      end

      operation 1485737 "target_project"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_target_project;
}
"
	
	
	
	
	comment "The label of the target project, default is \"default\"!"
      end

      operation 1485865 "target_project"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0}& ${p0}${)}${const}${volatile}${throw}${abstract}
{
  m_target_project = ${p0};
}
"
	
	
	
	
	comment "Set the target project from a std string."
      end
    end

    class 355369 "datum"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      ncouples 1
      key "base_class" value "purpletree::dom::element"
      comment "This element contains data for a particular observable property of a formula(compound). 
It can contain any sort of data.

No extra methods are provided for building datum trees.  The methods available in dom::element should be sufficient (insert_before, replace_child, append_child etc)

Note: This relies on basic_datum to manage any textual content."
      class 446121 "ordinal_type"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name}
{
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 352809 "NO_ORDINAL"
	  public explicit_type "ordinal_type"
	  init_value "-1"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "The value that indicates no ordinal value was set."
	end
      end

      class 462505 "datum_iterator"
	visibility package stereotype "typedef" explicit_base_type "datum"
	cpp_decl "${comment}typedef boost::ptr_vector< ${type} >::iterator ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      class 462633 "const_datum_iterator"
	visibility package stereotype "typedef" explicit_base_type "datum"
	cpp_decl "${comment}typedef boost::ptr_vector< ${type} >::const_iterator ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      classrelation 421673 // <generalisation>
	relation 411433 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 421673 // <generalisation>
	  b parent class_ref 432681 // basic_datum
      end

      classrelation 426409 // m_parent (<directional aggregation>)
	relation 416169 o-->
	  a role_name "m_parent" multiplicity "1" private
	    comment "The parent element of this element"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	    classrelation_ref 426409 // m_parent (<directional aggregation>)
	  b parent class_ref 432681 // basic_datum
      end

      attribute 345897 "m_outcome"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The label of the outcome that this datum contains."
      end

      classrelation 297129 // m_data (<directional composition>)
	relation 290857 *-->
	  stereotype "ptr_vector"
	  a role_name "m_data" multiplicity "*" private
	    comment "Sub-content of this datum (if any)"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 297129 // m_data (<directional composition>)
	  b parent class_ref 355369 // datum
      end

      attribute 259881 "m_dim"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The unit dimensions of the property. This is to allow for conversion between different
software. Default is a dimensionless value.

The @dim contains a comma separated list of dimension constants. They specify the
unit dimensions of the content, for  example velocity (m/s) would be \"1,-1\" and
force (N=kg m /s2) would be \"1,-2,1\". The order of dimensions is fixed. The list
need only extend to the last non-zero element, so volume would be \"3\" not
\"3,0,0,0...\"."
      end

      attribute 260009 "m_format"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Optional format that the data can take, for use by software in reading the data.

How the atoms are listed, such as atom+xyz or atom+length+angle+dihedral or a map from one
atomlist onto another (for use with chem-notation etc).
format labels mean: \"axyz\" is atom label and x,y,z coordinates. \"alad\" is atom
label and length, angle, dihedral (eg z-matrix). \"map\" is pairs of atom numbers
that map one structure onto another. \"stdrep\" is a well-defined
representation that is understood by source/report plugins. \"cml\" indicates
content is in CML XML format. \"lab\" indicates the contents are laboratory
quantities. \"free\" indicates that a \"freeformat\" element will describe the
data somehow.
"
      end

      attribute 259241 "m_ordinal"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The (optional) position of this element in a \"set\" or \"list\" element.
The non-value is NO_ORDINAL (-1). All ordinal values must be larger
than this value."
      end

      attribute 260137 "m_scale"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A optional scaling for the datum value.  This can be SI recognised letters (\"k\"=kilo,
\"n\"=nano etc), an arbitrary number (\"1E-6\" or \"2345.67\") or an non-SI unit name (eg
\"hartree\").  It is recommended that unit names are not used, instead the constant that
scales the non-SI unit to the SI unit be used.

This value is a multiplier of the content. Some programs specify data as a
ratio of two integers, here the divisor can be specified as the scale using \"1/.....\"
"
      end

      operation 1421481 "add_child"
	public explicit_return_type "basic_datum"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param inout name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "add_child tests if this object can accept the tagname using the
meta_datum object. Only then is the virt_add_child method called. 

default action is to throw an error!

\\return /= NULL"
      end

      operation 1397161 "add_datum"
	public explicit_return_type "datum"
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  m_data.push_back (new datum (*this, ${p0}));
  append_child (m_data.back ());
  return m_data.back ();
}
"
	
	
	
	
	comment "Create a basic_datum child of this node with the type tagname a_name.
Throw an error  if the a_name is not correct. Throw an error if no 
children are allowed.  Returns a reference to the new child object.

\\return /= NULL"
      end

      operation 1472169 "begin_datum"
	public return_type class_ref 462505 // datum_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_data.begin ();
}
"
	
	
	
	
      end

      operation 1472297 "begin_datum"
	stereotype "const"
	const public return_type class_ref 462633 // const_datum_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_data.begin ();
}
"
	
	
	
	
      end

      operation 1157161 "datum"
	public explicit_return_type ""
	nparams 2
	  param inout name "a_parent" explicit_type "basic_datum"
	  param inout name "a_outcome" explicit_type "string"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${volatile}${throw}
: basic_datum ()
, m_parent (${p0})
, m_outcome ()
, m_data ()
, m_dim ()
, m_format ()
, m_ordinal (NO_ORDINAL)
, m_scale ()
{
  m_outcome.swap (${p1});
}
"
	
	
	
	
	comment "Construct a new datum object, swallow a_outcome

\\post a_outcome.empty"
      end

      operation 1157417 "datum"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" explicit_type "datum"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	
	
	
	
	comment "no Copy constructor"
      end

      operation 1157289 "~datum"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile} throw ()
{}"
	
	
	
	
      end

      operation 1166505 "dim"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_dim;
}
"
	
	
	
	
	comment "Get the unit dimensions of the property. This is to allow for conversion between different
software. Default is a dimensionless value (see 'scale' for information on converting non-SI
units).

The @dim contains a comma separated list of dimension constants. They specify the
unit dimensions of the content, for  example velocity (m/s) would be \"1,-1\" and
force (N=kg m /s2) would be \"1,-2,1\". The order of dimensions is fixed. The list
need only extend to the last non-zero element, so volume would be \"3\" not
\"3,0,0,0...\". It can also contain textual representations of the SI unit."
      end

      operation 1166377 "dim"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_val" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile} throw ()${abstract}
{
   m_dim.swap (${p0});
}
"
	
	
	
	
	comment "Set the unit dimensions of the property. This is to allow for conversion between different
software. Default is a dimensionless value (see 'scale' for information on converting non-SI
units). \\see dim() for more details."
      end

      operation 1472681 "empty_datum"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_data.empty ();
}
"
	
	
	
	
      end

      operation 1472425 "end_datum"
	public return_type class_ref 462505 // datum_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_data.end ();
}
"
	
	
	
	
      end

      operation 1472553 "end_datum"
	stereotype "const"
	const public return_type class_ref 462633 // const_datum_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_data.end ();
}
"
	
	
	
	
      end

      operation 1128361 "format"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_format;
}
"
	
	
	
	
	comment "Optional format that the data can take, for use by software in reading the data.

How the atoms are listed, such as atom+xyz or atom+length+angle+dihedral or a map from one
atomlist onto another (for use with chem-notation etc).
format labels mean: \"axyz\" is atom label and x,y,z coordinates. \"alad\" is atom
label and length, angle, dihedral (eg z-matrix). \"map\" is pairs of atom numbers
that map one structure onto another. \"stdrep\" is a well-defined
representation that is understood by source/report plugins. \"cml\" indicates
content is in CML XML format. \"lab\" indicates the contents are laboratory
quantities. \"free\" indicates that a \"freeformat\" element will describe the
data somehow.
"
      end

      operation 1128489 "format"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_str" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile} throw ()${abstract}
{
  m_format.swap (${p0});
}
"
	
	
	
	
	comment "Optional format that the data can take, for use by software in reading the data.

How the atoms are listed, such as atom+xyz or atom+length+angle+dihedral or a map from one
atomlist onto another (for use with chem-notation etc).
format labels mean: \"axyz\" is atom label and x,y,z coordinates. \"alad\" is atom
label and length, angle, dihedral (eg z-matrix). \"map\" is pairs of atom numbers
that map one structure onto another. \"stdrep\" is a well-defined
representation that is understood by source/report plugins. \"cml\" indicates
content is in CML XML format. \"lab\" indicates the contents are laboratory
quantities. \"free\" indicates that a \"freeformat\" element will describe the
data somehow.
"
      end

      operation 1407529 "get_attribute"
	const public explicit_return_type "bool"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param out name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Add attributes to the XML element"
      end

      operation 1320361 "has_ordinal"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_ordinal > NO_ORDINAL;
}
"
	
	
	
	
	comment "Does this datum have an ordinal set?"
      end

      operation 1128617 "outcome"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_outcome;
}
"
	
	
	
	
	comment "The name of the observable property.  Note that this name is 
context-specific.  This means that two datum objects with the 
same otucome attribute represent the same property type if their
contexts are the same.  Conversely, datum objects in different 
contexts but with the same outcome label may or may not 
represent the same property.

Examples names and one possible interpretation
charge        The integral charge of a molecule
multiplicity  The electronic multiplicity of a molecule. "
      end

      operation 1128745 "outcome"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_name" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile} throw ()${abstract}
{
  m_outcome.swap (${p0});
}
"
	
	
	
	
	comment "The name of the observable property.  Note that this name is 
context-specific.  This means that two datum objects with 
the same name attribute represent the same property type if 
their contexts are the same.  Conversely, datum objects in 
different contexts may or may not represent the same property.

charge      The charge on the molecule
multiplicity The multiplicity of the structure. "
      end

      operation 1157545 "operator="
	private explicit_return_type "datum"
	nparams 1
	  param in name "source" explicit_type "datum"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type}& ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "no assign"
      end

      operation 1394857 "parent"
	const public explicit_return_type "basic_datum"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_parent;
}
"
	
	
	
	
	comment "Return a pointer to the parent object, may be NULL."
      end

      operation 1128873 "ordinal"
	stereotype "get"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  @{require}(has_ordinal (), \"Can not get ordinal when not present.\");
  return m_ordinal;
}
"
	
	
	
	
	comment "Get the datum ordinal.  This defines the datum object position when the parent's hint
type is SET or LIST.

\\pre has_ordinal
\\post result >= 0"
      end

      operation 1129001 "ordinal"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_val" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
 @{require}(a_val > NO_ORDINAL, \"Can not set ordinal to zero or a negative number.\");
 m_ordinal = ${p0};
}
"
	
	
	
	
	comment "Set the datum ordinal value. \\see ordinal() for more details

\\pre a_val >= 0"
      end

      operation 1681577 "remove_child"
	public explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 355369 // datum
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  remove_priv (${p0}); // performs validity checking.
  erase (find (&${p0})); // Remove from base.
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Remove a_datum from our list of children.

\\pre a_datum.parent = this"
      end

      operation 1681449 "remove_priv"
	private explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 355369 // datum
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Remove a memo object.

\\pre a_datum.parent = this"
      end

      operation 1166249 "scale"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_scale;
}
"
	
	
	
	
	comment "A optional scaling for the datum value.  When this is not set the datum is
assumed to be in the standard SI units. This can be SI recognised letters (\"k\"=kilo,
\"n\"=nano etc), an arbitrary number (\"1E-6\" or \"2345.67\") or an non-SI unit name (eg
\"hartree\").  It is recommended that unit names are not used, instead the constant that
scales the non-SI unit to the SI unit be used.

This value is a multiplier of the content. Some programs specify data as a
ratio of two integers, here the divisor can be specified as the scale using \"1/.....\"
"
      end

      operation 1166121 "scale"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_val" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile} throw ()${abstract}
{
  m_scale.swap (${p0});
}
"
	
	
	
	
	comment "A optional scaling for the datum value.  \\see scale() for more details.
"
      end

      operation 1396905 "serial_name"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return data_access::names::${class}_name ();
}
"
	
	
	
	
	comment "The key name for this class during serialisation."
      end

      operation 1397033 "set_attribute"
	public explicit_return_type "void"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param in name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Write an attribute.  Throw an error if arguments are incorrect or if no 
attributes are allowed."
      end

      operation 1476265 "size_datum"
	const public explicit_return_type "uint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_data.size ();
}
"
	
	
	
	
	comment "The number of datum children of the datum object"
      end

      operation 1394985 "unset_ordinal"
	stereotype "set"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
 m_ordinal = NO_ORDINAL;
}
"
	
	
	
	
	comment "Set ordinal to non-value"
      end

      operation 1662633 "virt_remove_child"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 432681 // basic_datum
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Called when an object of a derived class will be removed.

throw exception if a_datum is not a child of derived class."
      end

      operation 1449641 "visit"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "a_visitor" explicit_type "visitor"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${p0}.on_visit (*this);
}
"
	
	
	
	
      end
    end

    class 356905 "experiment"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
#include \"data_scheme/experiment.hpp\""
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      ncouples 1
      key "base_class" value "basic_datum"
      comment "The outcome of a set of work done by the chemist/worker. Also the description of
what was done."
      classrelation 423081 // <generalisation>
	relation 412841 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 423081 // <generalisation>
	  b parent class_ref 432681 // basic_datum
      end

      classrelation 488233 // <dependency>
	relation 476841 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 488233 // <dependency>
	  b parent class_ref 353321 // program
      end

      classrelation 544553 // <dependency>
	relation 523433 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 544553 // <dependency>
	  b parent class_ref 470185 // program_options
      end

      class 462761 "const_info_iterator"
	visibility package stereotype "typedef" explicit_base_type "info"
	cpp_decl "${comment}typedef boost::ptr_vector< ${type} >::const_iterator ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      class 462889 "info_iterator"
	visibility package stereotype "typedef" explicit_base_type "info"
	cpp_decl "${comment}typedef boost::ptr_vector< ${type} >::iterator ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      class 461993 "const_memo_iterator"
	visibility package stereotype "typedef" explicit_base_type "memo"
	cpp_decl "${comment}typedef boost::ptr_vector< ${type} >::const_iterator ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      class 462121 "memo_iterator"
	visibility package stereotype "typedef" explicit_base_type "memo"
	cpp_decl "${comment}typedef boost::ptr_vector< ${type} >::iterator ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      attribute 261033 "m_date_start"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The starting date of the experiment
"
      end

      attribute 261161 "m_date_end"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The finish date for the expt."
      end

      classrelation 439081 // m_info (<directional composition>)
	relation 428713 *-->
	  stereotype "ptr_vector"
	  a role_name "m_info" multiplicity "*" private
	    comment "The information objects for this experiment."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 439081 // m_info (<directional composition>)
	  b parent class_ref 354601 // info
      end

      attribute 353705 "m_priority"
	private explicit_type "uint"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The priority of this experiment. Higher numbers have higher priority, default is 0"
      end

      attribute 260905 "m_reference"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A unique identifier. The equivalent of the page number/experiment number in a lab
notebook."
      end

      classrelation 294441 // m_results (<composition>)
	relation 288297 *---
	  stereotype "ptr_vector"
	  a role_name "m_results" multiplicity "*" private
	    comment "The parts of this experiment."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 294441 // m_results (<composition>)
	  b role_name "m_page" multiplicity "1" private
	    comment "The experiment this part is from. (parent)"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	    classrelation_ref 300457 // m_page (<composition>)
      end

      classrelation 320041 // <composition>
	relation_ref 312105 // <composition>
      end

      attribute 353833 "m_workers"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Space separated list of worker IDs"
      end

      operation 1422249 "add_child"
	public explicit_return_type "basic_datum"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "add_child tests if this object can accept the tagname using the
meta_datum object. Only then is the virt_add_child method called. 

default action is to throw an error!

\\return /= NULL"
      end

      operation 1421737 "add_info"
	public explicit_return_type "info"
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "add_info child. 

default action is to throw an error!

\\return /= NULL"
      end

      operation 1412905 "add_memo"
	public explicit_return_type "memo"
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "add_child tests if this object can accept the tagname using the
meta_datum object. Only then is the virt_add_child method called. 

default action is to throw an error!

\\pre find_memo (a_label) = end_memo
\\return /= NULL"
      end

      operation 1421609 "add_memo_src"
	public explicit_return_type "memo"
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "add_child tests if this object can accept the tagname using the
meta_datum object. Only then is the virt_add_child method called. 

default action is to throw an error!

\\return /= NULL"
      end

      operation 1473065 "begin_info"
	public return_type class_ref 462889 // info_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_info.begin ();
}
"
	
	
	
	
      end

      operation 1473193 "begin_info"
	stereotype "const"
	const public return_type class_ref 462761 // const_info_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_info.begin ();
}
"
	
	
	
	
      end

      operation 1471145 "begin_memo"
	public return_type class_ref 462121 // memo_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_results.begin ();
}
"
	
	
	
	
      end

      operation 1471273 "begin_memo"
	stereotype "const"
	const public return_type class_ref 461993 // const_memo_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_results.begin ();
}
"
	
	
	
	
      end

      operation 1509673 "create_memo"
	public explicit_return_type "memo"
	nparams 4
	  param in name "a_label" explicit_type "string"
	  param in name "a_compound" explicit_type "string"
	  param in name "a_formula" explicit_type "string"
	  param in name "a_mechanism" explicit_type "string"
	
	
	
	
	
	comment "TODO: Create and add a memo object. Unlike add_memo this must result
in a valid memo object.

\\pre not a_label.empty"
      end

      operation 1130409 "date_start"
	stereotype "get"
	const public return_type class_ref 349993 // date
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return (m_date_start.empty ()) ? ${type} () : boost::gregorian::from_undelimited_string (m_date_start);
}

"
	
	
	
	
	comment "The starting date of the experiment"
      end

      operation 1130537 "date_start"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_date" type class_ref 349993 // date
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0}& ${p0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0}& ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  m_${name} = boost::gregorian::to_iso_string (${p0});
}

"
	
	
	
	
	comment "The starting date of the experiment.  If a_date_str is empty then today's date is used."
      end

      operation 1130665 "date_end"
	stereotype "get"
	const public return_type class_ref 349993 // date
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return (m_date_end.empty ()) ? date_start () : boost::gregorian::from_undelimited_string (m_date_end);
}"
	
	
	
	
	comment "The finish date for the expt."
      end

      operation 1130793 "date_end"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_date" type class_ref 349993 // date
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0}& ${p0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0}& ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  const ${t0} l_start (date_start ());
  @{require} (l_start <= ${p0}, \"End date must be the same or after start date.\");
  if (l_start == ${p0} and not m_${name}.empty ())
  {
    m_${name}.clear ();
  }
  else
  {
    m_${name} = boost::gregorian::to_iso_string (${p0});
  }
}

"
	
	
	
	
	comment "The finish date for the expt. If a_date_str is empty, then value of date_start() is used.

\\pre a_date >= date_start ()"
      end

      operation 1473321 "empty_info"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_info.empty ();
}
"
	
	
	
	
      end

      operation 1472809 "empty_memo"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_results.empty ();
}
"
	
	
	
	
      end

      operation 1473449 "end_info"
	public return_type class_ref 462889 // info_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_info.end ();
}
"
	
	
	
	
      end

      operation 1473577 "end_info"
	stereotype "const"
	const public return_type class_ref 462761 // const_info_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_info.end ();
}
"
	
	
	
	
      end

      operation 1471401 "end_memo"
	public return_type class_ref 462121 // memo_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_results.end ();
}
"
	
	
	
	
      end

      operation 1471529 "end_memo"
	stereotype "const"
	const public return_type class_ref 461993 // const_memo_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_results.end ();
}
"
	
	
	
	
      end

      operation 1168425 "experiment"
	public explicit_return_type ""
	nparams 2
	  param inout name "a_parent" explicit_type "project"
	  param inout name "a_reference" explicit_type "string"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${volatile}${throw} 
: @{base_class} ()
, m_date_start ()
, m_date_end ()
, m_info ()
, m_priority (0)
, m_reference ()
, m_results ()
, m_section (${p0})
, m_workers ()
{
  m_reference.swap (${p1});
}
"
	
	
	
	
	comment "Construct a new experiment object as a child of a_parent. Swallow
a_reference

\\post a_reference.empty"
      end

      operation 1168681 "experiment"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" explicit_type "experiment"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	
	
	
	
	comment "no copy"
      end

      operation 1168553 "~experiment"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile} throw ();
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile} throw () 
{}
"
	
	
	
	
      end

      operation 1557929 "find_memo"
	public return_type class_ref 462121 // memo_iterator
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0}& ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "memo [data_scheme]"
      end

      operation 1659817 "find_memo"
	stereotype "const"
	const public return_type class_ref 461993 // const_memo_iterator
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0}& ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "memo [data_scheme]"
      end

      operation 1413289 "get_attribute"
	const public explicit_return_type "bool"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param out name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Add attributes to the XML element"
      end

      operation 1612073 "initialise"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Fill in the default information for a newly created
object."
      end

      operation 1168809 "operator="
	private explicit_return_type "experiment"
	nparams 1
	  param in name "source" explicit_type "experiment"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "no assign"
      end

      operation 1413033 "parent"
	const public explicit_return_type "basic_datum"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile} throw ()${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile} throw ()${staticnl}
{
  return m_section;
}
"
	
	
	
	
	comment "Return a pointer to the parent object, may be NULL."
      end

      operation 1132201 "priority"
	stereotype "get"
	const public explicit_return_type "uint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_priority;
}
"
	
	
	
	
	comment "Indicate the relative importance of the result set.  If you have several experiments
with similar result sets this attribute allows you to identify which sets should be
used for generating results.  It is currently a boolean value to indicate the experiment
data set to use."
      end

      operation 1132329 "priority"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_val" explicit_type "uint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile} throw ()${abstract}
{
  m_priority = ${p0};
}
"
	
	
	
	
	comment "Indicate the relative importance of the result set.  If you have several experiments
with similar result sets this attribute allows you to identify which sets should be
used for generating results.  It is currently a boolean value to indicate the experiment
data set to use."
      end

      operation 1130153 "reference"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_${name};
}
"
	
	
	
	
	comment "A unique identifier. The equivalent of the page number/experiment number in a lab
notebook."
      end

      operation 1680809 "remove_child"
	public explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 357033 // memo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  remove_priv (${p0}); // performs validity checking.
  erase (find (&${p0})); // Remove from base.
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Remove a_datum from our list of children.

\\pre a_datum.parent = this"
      end

      operation 1680937 "remove_child"
	public explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 354601 // info
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  remove_priv (${p0}); // performs validity checking.
  erase (find (&${p0})); // Remove from base.
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Remove a_datum from our list of children.

\\pre a_datum.parent = this"
      end

      operation 1680681 "remove_priv"
	private explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 357033 // memo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Remove a memo object.

\\pre a_datum.parent = this"
      end

      operation 1681065 "remove_priv"
	private explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 354601 // info
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Remove a info object.

\\pre a_datum.parent = this"
      end

      operation 1511209 "section"
	const public explicit_return_type "project"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_section;
}
"
	
	
	
	
	comment "The parent project"
      end

      operation 1412777 "serial_name"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return data_access::names::${class}_name ();
}
"
	
	
	
	
	comment "The XML element definition for this datum."
      end

      operation 1413161 "set_attribute"
	public explicit_return_type "void"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param in name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Write an attribute. Can assume that a_name and a_value are valid as per the
definition() object."
      end

      operation 1473705 "size_info"
	const public explicit_return_type "uint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_info.size ();
}
"
	
	
	
	
      end

      operation 1472937 "size_memo"
	const public explicit_return_type "uint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_results.size ();
}
"
	
	
	
	
      end

      operation 1131177 "worker_list"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_workers;
}
"
	
	
	
	
	comment "The list of workers on this experiment."
      end

      operation 1451305 "visit"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "a_visitor" explicit_type "visitor"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${p0}.on_visit (*this);
}
"
	
	
	
	
      end

      operation 1662761 "virt_remove_child"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 432681 // basic_datum
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Called when an object of a derived class will be removed.

throw exception if a_datum is not a child of derived class."
      end
    end

    class 354729 "filter"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      ncouples 1
      key "base_class" value "purpletree::dom::element"
      comment "This element contains information about an  
external filter that is available for operating on 
files created by the mechanism.

This element caches information about an
external filter that is available for
operating on files created by the
mechanism to import outcomes into the DB."
      classrelation 423209 // <generalisation>
	relation 412969 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 423209 // <generalisation>
	  b parent class_ref 432681 // basic_datum
      end

      attribute 350761 "m_label"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The filter label/ID"
      end

      attribute 350889 "m_href"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The location/URL of the filter"
      end

      attribute 351017 "m_outcomes"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "space separated list of outcomes."
      end

      classrelation 300585 // <composition>
	relation_ref 283177 // <composition>
      end

      attribute 383145 "m_type"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type of the filter. Currently supported are 'plugin' 
and 'regex'. Coming soon are 'shell' and 'python'."
      end

      operation 1427369 "add_outcome_label"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_set" explicit_type "string"
	constraint "Get the list of string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  data_access::names::list_add (m_outcomes, ${p0});
}
"
	
	
	
	
      end

      operation 1161513 "filter"
	public explicit_return_type ""
	nparams 2
	  param inout name "a_parent" explicit_type "mechanism"
	  param inout name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${volatile}${throw}
: basic_datum ()
, m_label ()
, m_href ()
, m_outcomes ()
, m_target (${p0})
, m_type ()
{
  m_label.swap (${p1});  
}
"
	
	
	
	
	comment "Construct a new filter object with a_parent and a_label. Swallows
a_label.

\\post a_label"
      end

      operation 1161769 "filter"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" explicit_type "filter"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	
	
	
	
	comment "no copy"
      end

      operation 1161641 "~filter"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile} throw ();
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile} throw () 
{}
"
	
	
	
	
      end

      operation 1519401 "filter_type"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile} throw ()${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile} throw ()${staticnl}
{
  return (m_type.empty () ? data_access::names::plugin_filter_name () : m_type);
}
"
	
	
	
	
      end

      operation 1519529 "filter_type"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_type" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile} throw ()${abstract}
{
  m_type.swap (${p0});
}

"
	
	
	
	
      end

      operation 1408169 "get_attribute"
	const public explicit_return_type "bool"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param out name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Add attributes to the XML element"
      end

      operation 1135529 "href"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_href;
}
"
	
	
	
	
      end

      operation 1135657 "href"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_str" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile} throw ()${abstract}
{
  m_href.swap (${p0});
}"
	
	
	
	
      end

      operation 1135273 "label"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_label;
}
"
	
	
	
	
      end

      operation 1161897 "operator="
	private explicit_return_type "filter"
	nparams 1
	  param in name "source" explicit_type "filter"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type}& ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "no assign"
      end

      operation 1407913 "parent"
	const public return_type class_ref 353705 // mechanism
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile} throw ()${abstract};"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile} throw ()${staticnl}
{
  return m_target;
}"
	
	
	
	
	comment "Return a pointer to the parent object"
      end

      operation 1405097 "outcomes"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_outcomes;
}
"
	
	
	
	
      end

      operation 1408297 "serial_name"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return data_access::names::${class}_name ();
}
"
	
	
	
	
	comment "The key for this class during serialisation"
      end

      operation 1408041 "set_attribute"
	cpp_virtual public explicit_return_type "void"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param in name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Write an attribute. Can assume that a_name and a_value are valid as per the
definition() object."
      end

      operation 1451177 "visit"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "a_visitor" explicit_type "visitor"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${p0}.on_visit (*this);
}
"
	
	
	
	
      end
    end

    class 356521 "formula"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      ncouples 1
      key "base_class" value "basic_datum"
      comment "This specifies a particular geometry of a molecule. Here formula means a particular
set of atom positions which may be described empirically, such as the \"ground
state\" for experimental results. It can also describe the product produced under a 
common set of conditions/procedure or a material made to a certain composition.

The relationship between a compound and formula is 1-to-many.  This means that a
formula can only have one parent compound."
      classrelation 423337 // <generalisation>
	relation 413097 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 423337 // <generalisation>
	  b parent class_ref 432681 // basic_datum
      end

      class 464041 "identity_iterator"
	visibility package stereotype "typedef" explicit_base_type "identity"
	cpp_decl "${comment}typedef boost::ptr_vector< ${type} >::iterator ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      class 464169 "const_identity_iterator"
	visibility package stereotype "typedef" explicit_base_type "identity"
	cpp_decl "${comment}typedef boost::ptr_vector< ${type} >::const_iterator ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      classrelation 323881 // m_identity (<directional composition>)
	relation 315433 *-->
	  stereotype "ptr_vector"
	  a role_name "m_identity" multiplicity "*" private
	    comment "The proper name for this formula."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 323881 // m_identity (<directional composition>)
	  b parent class_ref 356393 // identity
      end

      classrelation 437801 // m_info (<directional composition>)
	relation 427433 *-->
	  stereotype "auto_ptr"
	  a role_name "m_info" multiplicity "*" private
	    comment "The info for this formula"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 437801 // m_info (<directional composition>)
	  b parent class_ref 354601 // info
      end

      attribute 352937 "m_label"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The formula label attribute"
      end

      classrelation 300201 // m_moiety (<composition>)
	relation_ref 293289 // <composition>
      end

      operation 1422377 "add_child"
	public explicit_return_type "basic_datum"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "add_child tests if this object can accept the tagname using the
meta_datum object. Only then is the virt_add_child method called. 

default action is to throw an error!

\\return /= NULL"
      end

      operation 1422505 "add_identity"
	public explicit_return_type "identity"
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Create and return an identity object with a_label as a child of this object.

\\pre find_identity(a_label) = end_identity
\\return /= NULL"
      end

      operation 1409705 "add_info"
	public explicit_return_type "info"
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  @{require}(not has_information (), \"Attempt to add a second info object.\");
  ${body}
}
"
	
	
	
	
	comment "Add an info object as a child of this object.

\\pre not has_information
\\return /= NULL"
      end

      operation 1474857 "begin_identity"
	public return_type class_ref 464041 // identity_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_identity.begin ();
}
"
	
	
	
	
	comment "Return an iterator to the first identity child object."
      end

      operation 1474985 "begin_identity"
	stereotype "const"
	const public return_type class_ref 464169 // const_identity_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_identity.begin ();
}
"
	
	
	
	
	comment "Return an iterator to the first identity child object."
      end

      operation 1475369 "empty_identity"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_identity.empty ();
}
"
	
	
	
	
	comment "Return an iterator to the first identity child object."
      end

      operation 1475113 "end_identity"
	public return_type class_ref 464041 // identity_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_identity.end ();
}
"
	
	
	
	
	comment "Return an iterator to the first identity child object."
      end

      operation 1475241 "end_identity"
	stereotype "const"
	const public return_type class_ref 464169 // const_identity_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_identity.end ();
}
"
	
	
	
	
	comment "Return an iterator to the first identity child object."
      end

      operation 1159977 "formula"
	public explicit_return_type ""
	nparams 2
	  param inout name "a_parent" explicit_type "compound"
	  param inout name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${volatile}${throw}
: @{base_class} ()
, m_identity ()
, m_info ()
, m_label ()
, m_moiety (${p0})
{
  m_label.swap (${p1});
}
"
	
	
	
	
	comment "Construct a new formula object with a_parent and a_label. 

swallows a_label
\\post a_label.empty"
      end

      operation 1160233 "formula"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" explicit_type "formula"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	
	
	
	
	comment "no copy"
      end

      operation 1160105 "~formula"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile} throw ();
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile} throw () 
{}
"
	
	
	
	
      end

      operation 1409577 "get_attribute"
	const public explicit_return_type "bool"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param out name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  bool Result (false);
  if (data_access::names::label_name () == ${p0})
  {
    ${p1}.assign (m_label);
    Result = true;
  }
  return Result;
}
"
	
	
	
	
	comment "Add attributes to the XML element"
      end

      operation 1422633 "has_information"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return NULL != m_info.get ();
}
"
	
	
	
	
	comment "Does this formula have an information object?"
      end

      operation 1114537 "information"
	stereotype "get"
	public explicit_return_type "info"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual} ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  @{require}(has_information (), \"Attempt to access non-existent information object.\");
  return *(m_info.get ());
}
"
	
	
	
	
	comment "Get a reference to the information object.

\\pre has_information"
      end

      operation 1422761 "information"
	stereotype "const"
	const public explicit_return_type "info"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  @{require}(has_information (), \"Attempt to access non-existent information object.\");
  return *(m_info.get ());
}
"
	
	
	
	
	comment "Get a reference to the information object.

\\pre has_information"
      end

      operation 1114281 "label"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_label;
}
"
	
	
	
	
      end

      operation 1160361 "operator="
	private explicit_return_type "formula"
	nparams 1
	  param in name "source" explicit_type "formula"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};"
	
	
	
	
	comment "no assign"
      end

      operation 1409193 "parent"
	const public explicit_return_type "basic_datum"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile} throw ()${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile} throw ()${staticnl}
{
  return m_moiety;
}
"
	
	
	
	
	comment "Return a pointer to the parent object."
      end

      operation 1681321 "remove_child"
	public explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 356393 // identity
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  remove_priv (${p0}); // performs validity checking.
  erase (find (&${p0})); // Remove from base.
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Remove a_datum from our list of children.

\\pre a_datum.parent = this"
      end

      operation 1681193 "remove_priv"
	private explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 356393 // identity
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Remove a identity object.

\\pre a_datum.parent = this"
      end

      operation 1409321 "serial_name"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return data_access::names::${class}_name ();
}
"
	
	
	
	
	comment "The key for this class during serialisation."
      end

      operation 1526953 "set_attribute"
	cpp_virtual public explicit_return_type "void"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param in name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Throw an error as program has no attributes."
      end

      operation 1475497 "size_identity"
	const public explicit_return_type "uint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_identity.size ();
}
"
	
	
	
	
	comment "Return an iterator to the first identity child object."
      end

      operation 1451049 "visit"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "a_visitor" explicit_type "visitor"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${p0}.on_visit (*this);
}
"
	
	
	
	
      end

      operation 1662889 "virt_remove_child"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 432681 // basic_datum
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Called when an object of a derived class will be removed.

throw exception if a_datum is not a child of derived class."
      end
    end

    class 356393 "identity"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      ncouples 1
      key "base_class" value "purpletree::dom::element"
      comment "A compound is universally unique.  Within a program it is given an arbitrary ID.
However that are standards for uniquely identifying a compound across programs, eg
iupac-name, CAS number etc.  The content of this element contains this information
for use in matching compounds across databases."
      classrelation 423465 // <generalisation>
	relation 413225 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 423465 // <generalisation>
	  b parent class_ref 432681 // basic_datum
      end

      attribute 347177 "m_parent"
	private explicit_type "basic_datum"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The parent of this identity (Compound or Formula)"
      end

      attribute 346025 "m_type"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type of identity information.  This is from a standard catalog of identity types"
      end

      operation 1407785 "get_attribute"
	const public explicit_return_type "bool"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param out name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Add attributes to the XML element"
      end

      operation 1154345 "identity"
	public explicit_return_type ""
	nparams 2
	  param inout name "a_parent" explicit_type "basic_datum"
	  param inout name "a_type" explicit_type "string"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${volatile}${throw}
: basic_datum ()
, m_parent (${p0})
, m_type ()
{
  m_type.swap (${p1});
}
"
	
	
	
	
	comment "Construct a new identity object with a_parent and a_type. Swallows 
content of a_type

\\post a_type.empty"
      end

      operation 1154601 "identity"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" explicit_type "identity"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	
	
	
	
	comment "no copy"
      end

      operation 1154473 "~identity"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile} throw ();
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile} throw () 
{}
"
	
	
	
	
      end

      operation 1397673 "identity_type"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_type;
}
"
	
	
	
	
	comment "Get the identity type"
      end

      operation 1154729 "operator="
	private explicit_return_type "identity"
	nparams 1
	  param in name "source" explicit_type "identity"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "no assign"
      end

      operation 1399209 "parent"
	const public explicit_return_type "basic_datum"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_parent;
}
"
	
	
	
	
	comment "Return a pointer to the parent object, may be NULL."
      end

      operation 1399081 "serial_name"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return data_access::names::${class}_name ();
}
"
	
	
	
	
	comment "The key for this class during serialisation."
      end

      operation 1527081 "set_attribute"
	cpp_virtual public explicit_return_type "void"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param in name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Throw an error as program has no attributes."
      end

      operation 1450921 "visit"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "a_visitor" explicit_type "visitor"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${p0}.on_visit (*this);
}
"
	
	
	
	
      end
    end

    class 354601 "info"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      ncouples 1
      key "base_class" value "purpletree::dom::element"
      classrelation 424489 // <generalisation>
	relation 414249 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 424489 // <generalisation>
	  b parent class_ref 432681 // basic_datum
      end

      class 465321 "info_iterator"
	visibility package stereotype "typedef" explicit_base_type "info"
	cpp_decl "${comment}typedef boost::ptr_vector< ${type} >::iterator ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      class 465449 "const_info_iterator"
	visibility package stereotype "typedef" explicit_base_type "info"
	cpp_decl "${comment}typedef boost::ptr_vector< ${type} >::const_iterator ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      classrelation 290601 // m_content (<directional composition>)
	relation 284457 *-->
	  stereotype "ptr_vector"
	  a role_name "m_content" multiplicity "*" private
	    comment "The content of this information"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 290601 // m_content (<directional composition>)
	  b parent class_ref 354601 // info
      end

      attribute 257961 "m_name"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 349609 "m_parent"
	private explicit_type "basic_datum"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The parent of this object"
      end

      operation 1422889 "add_child"
	public explicit_return_type "basic_datum"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param inout name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "add_child tests if this object can accept the tagname using the
meta_datum object. Only then is the virt_add_child method called. 

default action is to throw an error!

\\return /= NULL"
      end

      operation 1403945 "add_info"
	public explicit_return_type "info"
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  m_content.push_back (new info (*this, ${p0}));
  // Always last
  append_child (m_content.back ());
  return m_content.back ();
}
"
	
	
	
	
	comment "add_child tests if this object can accept the tagname using the
meta_datum object. Only then is the virt_add_child method called. 

\\return /= NULL"
      end

      operation 1477801 "begin_info"
	public return_type class_ref 465321 // info_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_content.begin ();
}
"
	
	
	
	
      end

      operation 1477929 "begin_info"
	stereotype "const"
	const public return_type class_ref 465449 // const_info_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_content.begin ();
}
"
	
	
	
	
      end

      operation 1478313 "empty_info"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_content.empty ();
}
"
	
	
	
	
      end

      operation 1478057 "end_info"
	public return_type class_ref 465321 // info_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_content.end ();
}
"
	
	
	
	
      end

      operation 1478185 "end_info"
	stereotype "const"
	const public return_type class_ref 462761 // const_info_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_content.end ();
}
"
	
	
	
	
      end

      operation 1407657 "get_attribute"
	const public explicit_return_type "bool"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param out name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Add attributes to the XML element"
      end

      operation 1143977 "info"
	public explicit_return_type ""
	nparams 2
	  param inout name "a_parent" explicit_type "basic_datum"
	  param inout name "a_name" explicit_type "string"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${volatile}${throw}
: basic_datum()
, m_content ()
, m_name ()
, m_parent(${p0})
{
  m_name.swap (${p1});
}
"
	
	
	
	
	comment "Construct a new info object with a_parent and a_name. Swallow
content of a_name

\\post a_name.empty"
      end

      operation 1144233 "info"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" explicit_type "info"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	
	
	
	
	comment "no copy"
      end

      operation 1144105 "~info"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile} throw ()
{}
"
	
	
	
	
      end

      operation 1140777 "name"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_name;
}
"
	
	
	
	
      end

      operation 1140905 "name"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_str" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile} throw ()${abstract}
{
  m_name.swap (${p0});
}"
	
	
	
	
      end

      operation 1144361 "operator="
	private explicit_return_type "info"
	nparams 1
	  param in name "source" explicit_type "info"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "no copy"
      end

      operation 1403689 "parent"
	const public explicit_return_type "basic_datum"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_parent;
}
"
	
	
	
	
	comment "Return a pointer to the parent object, may be NULL."
      end

      operation 1681833 "remove_child"
	public explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 354601 // info
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  remove_priv (${p0}); // performs validity checking.
  erase (find (&${p0})); // Remove from base.
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Remove a_datum from our list of children.

\\pre a_datum.parent = this"
      end

      operation 1681705 "remove_priv"
	private explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 354601 // info
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Remove a info object.

\\pre a_datum.parent = this"
      end

      operation 1403561 "serial_name"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return data_access::names::${class}_name ();
}
"
	
	
	
	
	comment "The key for this class during serialisation."
      end

      operation 1403817 "set_attribute"
	cpp_virtual public explicit_return_type "void"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param in name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Write an attribute.  Throw an error if arguments are incorrect."
      end

      operation 1478441 "size_info"
	const public explicit_return_type "uint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_content.size ();
}
"
	
	
	
	
      end

      operation 1662377 "virt_remove_child"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 432681 // basic_datum
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Called when an object of a derived class will be removed.

throw exception if a_datum is not a child of derived class."
      end

      operation 1450793 "visit"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "a_visitor" explicit_type "visitor"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${p0}.on_visit (*this);
}
"
	
	
	
	
      end
    end

    class 353705 "mechanism"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      ncouples 1
      key "base_class" value "basic_datum"
      comment "This contain information about something that produces results. It can be a computer 
program or a piece of lab equipemnt. The content should be information that is
common to every time this \"mechanism\" is referred to. This might be the bibliographic
reference for a programme or the manufacturers address and model number. Set up parameters
may be included if they are common to every usage (such as detector type). Usage specific 
information is contained in elements below the \"experiment\" element.

NOTE The contents of this element can also refer to a set of published results. 
\\final"
      classrelation 418089 // <generalisation>
	relation 407977 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 418089 // <generalisation>
	  b parent class_ref 432681 // basic_datum
      end

      classrelation 482473 // <dependency>
	relation 471337 -_->
	  a default
	    cpp default "#include in header"
	    classrelation_ref 482473 // <dependency>
	  b parent class_ref 428969 // bind
      end

      class 465577 "filter_iterator"
	visibility package stereotype "typedef" explicit_base_type "filter"
	cpp_decl "${comment}typedef boost::ptr_vector< ${type} >::iterator ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      class 465705 "const_filter_iterator"
	visibility package stereotype "typedef" explicit_base_type "filter"
	cpp_decl "${comment}typedef boost::ptr_vector< ${type} >::const_iterator ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      class 465833 "settings_iterator"
	visibility package stereotype "typedef" explicit_base_type "settings"
	cpp_decl "${comment}typedef boost::ptr_vector< ${type} >::iterator ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      class 465961 "const_settings_iterator"
	visibility package stereotype "typedef" explicit_base_type "settings"
	cpp_decl "${comment}typedef boost::ptr_vector< ${type} >::const_iterator ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      classrelation 322985 // <aggregation>
	relation_ref 314665 // <aggregation>
      end

      classrelation 321705 // m_command_set (<composition>)
	relation 313769 *---
	  stereotype "ptr_vector"
	  a role_name "m_command_set" multiplicity "*" private
	    comment "A group of settings to perform some action."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 321705 // m_command_set (<composition>)
	  b role_name "m_target" multiplicity "1" private
	    comment "The target mechanism for these settings. (parent)"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	    classrelation_ref 321833 // m_target (<composition>)
      end

      attribute 258345 "m_label"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The cross-reference label for this mechanism"
      end

      classrelation 441769 // m_info (<directional composition>)
	relation 431401 *-->
	  stereotype "auto_ptr"
	  a role_name "m_info" multiplicity "*" private
	    comment "The mechanism information"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 441769 // m_info (<directional composition>)
	  b parent class_ref 354601 // info
      end

      classrelation 289193 // m_filter_set (<composition>)
	relation 283177 *---
	  stereotype "ptr_vector"
	  a role_name "m_filter_set" multiplicity "*" private
	    comment "The set of filters applicable to this mechanism."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 289193 // m_filter_set (<composition>)
	  b role_name "m_target" multiplicity "1" private
	    comment "The mechanism this filter works on."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	    classrelation_ref 300585 // <composition>
      end

      classrelation 417833 // <composition>
	relation_ref 281641 // <composition>
      end

      operation 1423529 "add_child"
	public explicit_return_type "basic_datum"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param inout name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "add_child tests if this object can accept the tagname using the
meta_datum object. Only then is the virt_add_child method called. 

default action is to throw an error!

\\return /= NULL"
      end

      operation 1423401 "add_info"
	public explicit_return_type "info"
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  @{require}(not has_information (), \"Attempt to add a second info object.\");
  ${body}
}
"
	
	
	
	
	comment "Add an info object.

\\pre not has_information
\\return /= NULL"
      end

      operation 1409961 "add_filter"
	public explicit_return_type "filter"
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Create and add a filter.

\\pre find_filter(a_label) = end_label
\\return /= NULL"
      end

      operation 1423657 "add_setting"
	public explicit_return_type "settings"
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Create and add a settings child object.

\\pre find_settings(a_label) = end_settings
\\return /= NULL"
      end

      operation 1478697 "begin_filter"
	public return_type class_ref 465577 // filter_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_filter_set.begin ();
}
"
	
	
	
	
      end

      operation 1478825 "begin_filter"
	stereotype "const"
	const public return_type class_ref 465705 // const_filter_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_filter_set.begin ();
}
"
	
	
	
	
      end

      operation 1479465 "begin_settings"
	public return_type class_ref 465833 // settings_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_command_set.begin ();
}
"
	
	
	
	
      end

      operation 1479593 "begin_settings"
	stereotype "const"
	const public return_type class_ref 465961 // const_settings_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_command_set.begin ();
}
"
	
	
	
	
      end

      operation 1479209 "empty_filter"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_filter_set.empty ();
}
"
	
	
	
	
      end

      operation 1479977 "empty_settings"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_command_set.empty ();
}
"
	
	
	
	
      end

      operation 1478953 "end_filter"
	public return_type class_ref 465577 // filter_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_filter_set.end ();
}
"
	
	
	
	
      end

      operation 1479081 "end_filter"
	stereotype "const"
	const public return_type class_ref 465705 // const_filter_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_filter_set.end ();
}
"
	
	
	
	
      end

      operation 1479721 "end_settings"
	public return_type class_ref 465833 // settings_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_command_set.end ();
}
"
	
	
	
	
      end

      operation 1479849 "end_settings"
	stereotype "const"
	const public return_type class_ref 465961 // const_settings_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_command_set.end ();
}
"
	
	
	
	
      end

      operation 1518121 "find_filter"
	public return_type class_ref 465577 // filter_iterator
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Find filter with matching label"
      end

      operation 1518249 "find_filter"
	stereotype "const"
	const public return_type class_ref 465705 // const_filter_iterator
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Find filter with matching label"
      end

      operation 1410345 "get_attribute"
	const public explicit_return_type "bool"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param out name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Add attributes to the XML element"
      end

      operation 1423017 "has_information"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return NULL != m_info.get ();
}
"
	
	
	
	
	comment "Does this formula have an information object?"
      end

      operation 1423273 "information"
	stereotype "get"
	public explicit_return_type "info"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual} ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  @{require}(has_information (), \"Attempt to access non-existent information object.\");
  return *(m_info.get ());
}
"
	
	
	
	
	comment "Get a reference to the information object.

\\pre has_information"
      end

      operation 1423145 "information"
	stereotype "const"
	const public explicit_return_type "info"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  @{require}(has_information (), \"Attempt to access non-existent information object.\");
  return *(m_info.get ());
}
"
	
	
	
	
	comment "Get a reference to the information object.

\\pre has_information"
      end

      operation 1133865 "label"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_label;
}
"
	
	
	
	
      end

      operation 1160745 "mechanism"
	public explicit_return_type ""
	nparams 2
	  param inout name "a_parent" explicit_type "program"
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${volatile}${throw};"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${volatile}${throw} 
: @{base_class} ()
, m_command_set ()
, m_label ()
, m_info ()
, m_filter_set ()
, m_site (${p0})
{
  m_label.swap (${p1});
}
"
	
	
	
	
	comment "Construct a new mechanism object with a_parent and a_label. Swallow
content of a_label

\\post a_label.empty"
      end

      operation 1405353 "mechanism"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" explicit_type "mechanism"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	
	
	
	
	comment "no copy"
      end

      operation 1160873 "~mechanism"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile} throw ();
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile} throw ()
{}
"
	
	
	
	
      end

      operation 1161001 "operator="
	private explicit_return_type "mechanism"
	nparams 1
	  param in name "source" explicit_type "mechanism"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "no assign"
      end

      operation 1410089 "parent"
	const public explicit_return_type "basic_datum"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile} throw ()${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile} throw ()${staticnl}
{
  return m_site;
}
"
	
	
	
	
	comment "Return a pointer to the parent object, may be NULL."
      end

      operation 1682089 "remove_child"
	public explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 354729 // filter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  remove_priv (${p0}); // performs validity checking.
  erase (find (&${p0})); // Remove from base.
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Remove a_datum from our list of children.

\\pre a_datum.parent = this"
      end

      operation 1682345 "remove_child"
	public explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 371497 // settings
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  remove_priv (${p0}); // performs validity checking.
  erase (find (&${p0})); // Remove from base.
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Remove a_datum from our list of children.

\\pre a_datum.parent = this"
      end

      operation 1682217 "remove_priv"
	private explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 354729 // filter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Remove a filter object.

\\pre a_datum.parent = this"
      end

      operation 1681961 "remove_priv"
	private explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 371497 // settings
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Remove a info object.

\\pre a_datum.parent = this"
      end

      operation 1409833 "serial_name"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return data_access::names::${class}_name ();
}
"
	
	
	
	
	comment "The key for this class during serialisation."
      end

      operation 1527209 "set_attribute"
	cpp_virtual public explicit_return_type "void"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param in name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Throw an error as program has no attributes."
      end

      operation 1479337 "size_filter"
	const public explicit_return_type "uint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_filter_set.size ();
}
"
	
	
	
	
      end

      operation 1480105 "size_settings"
	const public explicit_return_type "uint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_command_set.size ();
}
"
	
	
	
	
      end

      operation 1663017 "virt_remove_child"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 432681 // basic_datum
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Called when an object of a derived class will be removed.

throw exception if a_datum is not a child of derived class."
      end

      operation 1450665 "visit"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "a_visitor" explicit_type "visitor"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${p0}.on_visit (*this);
}
"
	
	
	
	
      end
    end

    class 357033 "memo"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      ncouples 1
      key "base_class" value "basic_datum"
      comment "This contains important settings for the operation that was performed to generate the 
results. It should provide details specific to this experiment and include all critical
input parameters.
                         
For computational chemistry this would mean details of the method, basis-set and
calculation type. 

NOTE: in Version 1 of DTD this information was contained in the \"calc-method\", \"comp-program\"
and \"lab-app\" elements. These elements have been replaced by this single element.

There might be no content in this element if all required information can be derived
from the \"mechanism\" element."
      classrelation 424617 // <generalisation>
	relation 414377 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 424617 // <generalisation>
	  b parent class_ref 432681 // basic_datum
      end

      classrelation 470441 // <dependency>
	relation 459561 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 470441 // <dependency>
	  b parent class_ref 469033 // data_scheme_helper
      end

      classrelation 488105 // <dependency>
	relation 476713 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 488105 // <dependency>
	  b parent class_ref 354089 // project
      end

      class 466089 "datum_iterator"
	visibility package stereotype "typedef" explicit_base_type "datum"
	cpp_decl "${comment}typedef boost::ptr_vector< ${type} >::iterator ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      class 466217 "const_datum_iterator"
	visibility package stereotype "typedef" explicit_base_type "datum"
	cpp_decl "${comment}typedef boost::ptr_vector< ${type} >::const_iterator ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      class 466345 "info_iterator"
	visibility package stereotype "typedef" explicit_base_type "info"
	cpp_decl "${comment}typedef boost::ptr_vector< ${type} >::iterator ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      class 466473 "const_info_iterator"
	visibility package stereotype "typedef" explicit_base_type "info"
	cpp_decl "${comment}typedef boost::ptr_vector< ${type} >::const_iterator ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      attribute 353577 "m_compound"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The compound this memo hold data about."
      end

      classrelation 447017 // m_document (<directional composition>)
	relation 436649 *-->
	  stereotype "auto_ptr"
	  a role_name "m_document" multiplicity "*" private
	    comment "The document associated for memo-src objects."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 447017 // m_document (<directional composition>)
	  b parent class_ref 449449 // persistence
      end

      attribute 353321 "m_filters"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Space separated list of applied filters."
      end

      attribute 353449 "m_formula"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The ids of any compounds and the formulae this
set of results is attributed to."
      end

      attribute 353193 "m_href"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A URL pointing to an external file containing the raw data."
      end

      classrelation 437929 // m_info (<directional composition>)
	relation 427561 *-->
	  stereotype "ptr_vector"
	  a role_name "m_info" multiplicity "*" private
	    comment "The textual content of the memo (if any)"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 437929 // m_info (<directional composition>)
	  b parent class_ref 354601 // info
      end

      attribute 261417 "m_label"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A name that identifies this memento.

This node has two related states.  When used as a child of 
'mechanism' the content defines a standard method or set of
operating conditions.  The @name is then a cross-reference 
target.  When used as a child of 'experiment' the content 
defines the actions that where actually performed. Then 
@name is a cross-reference reference to a 'mech-memento' 
child of the @mechanism referenced node.  In this
     [eg /../mechanism(@label=@mechanism)/mech-memento(@name=@name)]
situation the contents of the current node might only 
contain information that
relates to how a standard method was altered (if any) in this experiment."
      end

      attribute 353065 "m_mechanism"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The mechanism that was used to produce the contents of this memo."
      end

      classrelation 300457 // m_page (<composition>)
	relation_ref 288297 // <composition>
      end

      classrelation 323113 // m_results (<directional composition>)
	relation 314793 *-->
	  stereotype "ptr_vector"
	  a role_name "m_results" multiplicity "1..*" private
	    comment "The datum content of this memo (if any)"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 323113 // m_results (<directional composition>)
	  b multiplicity "1" parent class_ref 355369 // datum
      end

      operation 1423913 "add_child"
	public explicit_return_type "basic_datum"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param inout name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "add_child tests if this object can accept the tagname using the
meta_datum object. Only then is the virt_add_child method called. 

default action is to throw an error!

\\return /= NULL"
      end

      operation 1410601 "add_datum"
	cpp_virtual public explicit_return_type "datum"
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Create and add a datum object.

\\return /= NULL"
      end

      operation 1186857 "add_filter_label"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_filter" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  data_access::names::list_add (m_filters, ${p0});
}
"
	
	
	
	
	comment "Add a filter label to list of what extracted data into database."
      end

      operation 1423785 "add_info"
	cpp_virtual public explicit_return_type "info"
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Create and add an info object.

\\return /= NULL"
      end

      operation 1480233 "begin_datum"
	public return_type class_ref 466089 // datum_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_results.begin ();
}
"
	
	
	
	
      end

      operation 1480361 "begin_datum"
	stereotype "const"
	const public return_type class_ref 466217 // const_datum_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_results.begin ();
}
"
	
	
	
	
      end

      operation 1481001 "begin_info"
	public return_type class_ref 466345 // info_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_info.begin ();
}
"
	
	
	
	
      end

      operation 1481129 "begin_info"
	stereotype "const"
	const public return_type class_ref 466473 // const_info_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_info.begin ();
}
"
	
	
	
	
      end

      operation 1509929 "close"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "TODO Flush data to disk and revert to unopenned state. Freeing
any allocated resources.

\\pre is_src and is_open
(\\post not is_open)

TODO: currently does nothing!"
      end

      operation 1459753 "compound_label"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_compound;
}
"
	
	
	
	
	comment "Get the ID of the main comopund"
      end

      operation 1559721 "compound_formula"
	public explicit_return_type "void"
	nparams 2
	  param in name "a_cmpd" type class_ref 356009 // compound
	  param in name "a_form" type class_ref 356521 // formula
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Set the compound and formula attributes."
      end

      operation 1676969 "connect"
	public explicit_return_type "void"
	nparams 1
	  param inout name "a_uri" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Second part of constructor for memo-src objects. This sets the document
from a_uri. swallows content of a_uri

\\post a_uri.empty"
      end

      operation 1480617 "empty_datum"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_results.empty ();
}
"
	
	
	
	
      end

      operation 1481513 "empty_info"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_info.empty ();
}
"
	
	
	
	
      end

      operation 1480489 "end_datum"
	public return_type class_ref 466089 // datum_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_results.end ();
}
"
	
	
	
	
      end

      operation 1480873 "end_datum"
	stereotype "const"
	const public return_type class_ref 466217 // const_datum_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_results.end ();
}
"
	
	
	
	
      end

      operation 1481385 "end_info"
	public return_type class_ref 466345 // info_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_info.end ();
}
"
	
	
	
	
      end

      operation 1481257 "end_info"
	stereotype "const"
	const public return_type class_ref 466473 // const_info_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_info.end ();
}
"
	
	
	
	
      end

      operation 1186729 "filters"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_filters;
}
"
	
	
	
	
	comment "The list of filters on this mechanism action.  If this is a standard mech-memo then this will give the list of possible filters.  For a result mech-memo this will list the used filters."
      end

      operation 1550761 "find_datum"
	public return_type class_ref 466089 // datum_iterator
	nparams 1
	  param in name "a_outcome" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0}& ${p0}${)}${const}${volatile}${throw}${abstract}
{
  return find_datum (${p0}, begin_datum ());
}
"
	
	
	
	
	comment "Search for the first datum that has a_outcome. Start search from the
optional a_iter (defaults to begin_datum)"
      end

      operation 1551017 "find_datum"
	public return_type class_ref 466089 // datum_iterator
	nparams 2
	  param in name "a_outcome" explicit_type "string"
	  param in name "a_iter" type class_ref 466089 // datum_iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0}& ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0}& ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Search for the first datum that has a_outcome. Start search from the
optional a_iter (defaults to begin_datum)"
      end

      operation 1550889 "find_datum"
	stereotype "const"
	const public return_type class_ref 466217 // const_datum_iterator
	nparams 1
	  param in name "a_outcome" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0}& ${p0}${)}${const}${volatile}${throw}${abstract}
{
  return find_datum (${p0}, begin_datum ());
}
"
	
	
	
	
	comment "Search for the first datum that has a_outcome. Start search from the
optional a_iter (defaults to begin_datum)"
      end

      operation 1551145 "find_datum"
	stereotype "const"
	const public return_type class_ref 466217 // const_datum_iterator
	nparams 2
	  param in name "a_outcome" explicit_type "string"
	  param in name "a_iter" type class_ref 466217 // const_datum_iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0}& ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0}& ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Search for the first datum that has a_outcome. Start search from the
optional a_iter (defaults to begin_datum)"
      end

      operation 1459881 "formula_label"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_formula;
}
"
	
	
	
	
	comment "Get the ID of the main comopund"
      end

      operation 1410985 "get_attribute"
	const public explicit_return_type "bool"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param out name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Add attributes to the XML element"
      end

      operation 1190953 "href"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_href;
}
"
	
	
	
	
	comment "
\\return may be empty"
      end

      operation 1190825 "href"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_type" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile} throw ()${abstract}
{
  m_href.swap (${p0});
}
"
	
	
	
	
      end

      operation 1497385 "is_open"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  @{require}(is_src (), \"A non-src object is never open.\");
  return m_document->is_open ();
}
"
	
	
	
	
	comment "Has the sub-file been openned?

\\pre is_src"
      end

      operation 1439785 "is_src"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return NULL != m_document.get ();
}
"
	
	
	
	
	comment "Is this derived from a memo-src element?"
      end

      operation 1136553 "label"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_label;
}
"
	
	
	
	
      end

      operation 1497513 "label"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  @{require}(m_label.empty () or ${p0} == m_label, \"Once set, label can not be changed.\");
  if (m_label.empty ())
  {
    m_label.swap (${p0});
  }
}"
	
	
	
	
	comment "Set the label. Note this can only be done \"once\"

\\pre label.empty or a_label = label
\\post label = a_label"
      end

      operation 1498025 "make_src"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_path" type class_ref 361513 // path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  @{require}(not is_src (), \"Object is already a src type object.\");
  ${body}
  @{ensure}(is_src (), \"Failed to convert object into a src type object.\");
}
"
	
	
	
	
	comment "Convert the memo into a src type. This requires that the target file does not exist.

\\pre not is_src and ((a_base.empty and exists(parent.database_path)) or exists(a_base))
\\post is_src"
      end

      operation 1421993 "memo"
	public explicit_return_type ""
	nparams 2
	  param inout name "a_parent" explicit_type "experiment"
	  param inout name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${volatile}${throw}
: @{base_class} ()
, m_compound ()
, m_document ()
, m_filters ()
, m_formula ()
, m_href ()
, m_info ()
, m_label ()
, m_mechanism ()
, m_page (${p0})
, m_results ()
{
  m_label.swap (a_label);
}
"
	
	
	
	
	comment "Constructor for memo objects (from memo elements) using a_parent and
a_label. Swallows a_label content.

\\post a_label.empty"
      end

      operation 1677097 "memo"
	public explicit_return_type ""
	nparams 1
	  param inout name "a_parent" explicit_type "experiment"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}${)}${volatile}${throw}
: @{base_class} ()
, m_compound ()
, m_document ()
, m_filters ()
, m_formula ()
, m_href ()
, m_info ()
, m_label ()
, m_mechanism ()
, m_page (${p0})
, m_results ()
{}
"
	
	
	
	
	comment "Constructor for memo objects (from memo-src elements) using a_parent. You 
must use connect to complete construction of the memo-src object.
"
      end

      operation 1162793 "memo"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" explicit_type "memo"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	
	
	
	
	comment "no copy"
      end

      operation 1162665 "~memo"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile} throw ();
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile} throw () 
{}
"
	
	
	
	
      end

      operation 1162921 "operator="
	private explicit_return_type "memo"
	nparams 1
	  param in name "source" explicit_type "memo"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};"
	
	
	
	
	comment "no assign"
      end

      operation 1511081 "page"
	const public explicit_return_type "experiment"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_page;
}
"
	
	
	
	
	comment "Get the parent experiment page"
      end

      operation 1410729 "parent"
	const public explicit_return_type "basic_datum"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile} throw ()${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile} throw ()${staticnl}
{
  return m_page;
}
"
	
	
	
	
	comment "Return a pointer to the parent object, may be NULL."
      end

      operation 1509801 "read"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  @{require}(is_src () and not is_open (), \"Can not open a non-src or already open src element.\");
  m_document->read ();
}
"
	
	
	
	
	comment "Open a src type

\\pre is_src"
      end

      operation 1682729 "remove_child"
	public explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 355369 // datum
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  remove_priv (${p0}); // performs validity checking.
  erase (find (&${p0})); // Remove from base.
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Remove a_datum from our list of children.

\\pre a_datum.parent = this"
      end

      operation 1682601 "remove_child"
	public explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 354601 // info
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  remove_priv (${p0}); // performs validity checking.
  erase (find (&${p0})); // Remove from base.
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Remove a_datum from our list of children.

\\pre a_datum.parent = this"
      end

      operation 1682857 "remove_priv"
	private explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 355369 // datum
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Remove a info object.

\\pre a_datum.parent = this"
      end

      operation 1682473 "remove_priv"
	private explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 354601 // info
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Remove a info object.

\\pre a_datum.parent = this"
      end

      operation 1410473 "serial_name"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return data_access::names::${class}_name ();
}"
	
	
	
	
	comment "The key for this class during serialisation."
      end

      operation 1448745 "serial_src_name"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return data_access::names::${class}_src_name ();
}
"
	
	
	
	
	comment "The key for this class during serialisation."
      end

      operation 1410857 "set_attribute"
	public explicit_return_type "void"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param in name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Write an attribute. Can assume that a_name and a_value are valid as per the
definition() object."
      end

      operation 1480745 "size_datum"
	const public explicit_return_type "uint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_results.size ();
}
"
	
	
	
	
      end

      operation 1481641 "size_info"
	const public explicit_return_type "uint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_info.size ();
}
"
	
	
	
	
      end

      operation 1136297 "target_mechanism"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_mechanism;
}
"
	
	
	
	
	comment "This will always return a label for a mechanism.  The returned element will point to the direct parent if is_standard: mechanism   [data_scheme]"
      end

      operation 1169449 "target_mechanism"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_target" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile} throw ()${abstract}
{
  m_mechanism.swap (${p0});
}
"
	
	
	
	
	comment "Set the mechanism label.

\\pre program.end_mech != program.find_mech (a_target)"
      end

      operation 1442729 "uri_path"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return (is_src () ? m_document->${name} () : page ().section ().${name} ());
}
"
	
	
	
	
	comment "Get the full path to the document/source that contains the current element 
(also see basic_datum::uri_path)"
      end

      operation 1529385 "uri_scheme"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return (is_src () ? m_document->${name} () : page ().section ().${name} ());
}
"
	
	
	
	
	comment "Get the scheme used to connect to the document/source that contains 
the current element. (also see basic_datum::uri_scheme)"
      end

      operation 1446185 "uri"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  @{require}(is_src (), \"Can not get url from non-source object.\");
  return m_document->uri ();
}
"
	
	
	
	
	comment "The URI of the document (memo-src nodes)

\\pre is_src"
      end

      operation 1663145 "virt_remove_child"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 432681 // basic_datum
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Called when an object of a derived class will be removed.

throw exception if a_datum is not a child of derived class."
      end

      operation 1450537 "visit"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "a_visitor" explicit_type "visitor"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${p0}.on_visit (*this);
}
"
	
	
	
	
      end

      operation 1449129 "write"
	const public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  @{require}(is_src (), \"Can not call write on a non-source element.\");
  ${body}
}
"
	
	
	
	
	comment "Trigger document to write itself.

\\pre is_src"
      end
    end

    class 443561 "processing_instruction"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
{
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This represents character data elements it can be interspersed 
with other elements."
      classrelation 431017 // <generalisation>
	relation 420649 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 431017 // <generalisation>
	  b parent class_ref 435369 // basic_text
      end

      attribute 368169 "name"
	const_attribute public explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The name of the PI"
      end

      operation 1436713 "serial_name"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return data_access::names::processing_instruction_type ();
}
"
	
	
	
	
	comment "The key for this class during serialisation."
      end

      operation 1393833 "processing_instruction"
	public explicit_return_type ""
	nparams 3
	  param inout name "a_parent" explicit_type "basic_datum"
	  param in name "a_name" explicit_type "string"
	  param inout name "a_content" explicit_type "string"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}, const ${t1} & ${p1}, ${t2} & ${p2}${)}${volatile}${throw}
: basic_text (${p0}, ${p2})
, name (${p1})
{}
"
	
	
	
	
	comment "Create a processing_instruction object with a_parent, a_name and a_content.

Swallows content!
\\post a_content.empty"
      end

      operation 1394089 "processing_instruction"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" explicit_type "processing_instruction"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	
	
	
	
	comment "no copy"
      end

      operation 1393961 "~processing_instruction"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile} throw ()
{}"
	
	
	
	
      end

      operation 1450409 "visit"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "a_visitor" explicit_type "visitor"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${p0}.on_visit (*this);
}
"
	
	
	
	
      end
    end

    class 353321 "program"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      ncouples 1
      key "base_class" value "basic_datum"
      comment "A program  of research is a broad category of interest.  It is intended that the
contents of a possible paper do not cross program boundaries, although several
papers may be contained in a program. "
      classrelation 513065 // <dependency>
	relation 497321 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 513065 // <dependency>
	  b parent class_ref 469033 // data_scheme_helper
      end

      class 447785 "const_compound_iterator"
	visibility public stereotype "typedef" base_type class_ref 356009 // compound
	cpp_decl "${comment}typedef boost::ptr_vector< ${type} >::const_iterator ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	comment "Iterator type to access the set of compounds"
      end

      class 447529 "compound_iterator"
	visibility public stereotype "typedef" base_type class_ref 356009 // compound
	cpp_decl "${comment}typedef boost::ptr_vector< ${type} >::iterator ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	comment "Iterator type to access the set of compounds"
      end

      class 447913 "const_mechanism_iterator"
	visibility public stereotype "typedef" base_type class_ref 353705 // mechanism
	cpp_decl "${comment}typedef boost::ptr_vector< ${type} >::const_iterator ${name};

"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	comment "Iterator type to access the equipment list"
      end

      class 447273 "mechanism_iterator"
	visibility public stereotype "typedef" base_type class_ref 353705 // mechanism
	cpp_decl "${comment}typedef boost::ptr_vector< ${type} >::iterator ${name};

"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	comment "Iterator type to access the equipment list"
      end

      class 448041 "const_project_iterator"
	visibility public stereotype "typedef" base_type class_ref 354089 // project
	cpp_decl "${comment}typedef boost::ptr_vector< ${type} >::const_iterator ${name};

"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	comment "Iterator to access list of projects."
      end

      class 447657 "project_iterator"
	visibility public stereotype "typedef" base_type class_ref 354089 // project
	cpp_decl "${comment}typedef boost::ptr_vector< ${type} >::iterator ${name};

"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	comment "Iterator to access list of projects."
      end

      class 448169 "const_worker_iterator"
	visibility public stereotype "typedef" base_type class_ref 353577 // worker
	cpp_decl "${comment}typedef boost::ptr_vector< ${type} >::const_iterator ${name};

"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	comment "Iterator to access list of workers"
      end

      class 447401 "worker_iterator"
	visibility public stereotype "typedef" base_type class_ref 353577 // worker
	cpp_decl "${comment}typedef boost::ptr_vector< ${type} >::iterator ${name};

"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
	comment "Iterator to access list of workers"
      end

      classrelation 417577 // <generalisation>
	relation 407849 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 417577 // <generalisation>
	  b parent class_ref 432681 // basic_datum
      end

      classrelation 319657 // m_catalog (<composition>)
	relation 311977 *---
	  stereotype "ptr_vector"
	  a role_name "m_catalog" multiplicity "*" private
	    comment "The list of compounds for this site."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 319657 // m_catalog (<composition>)
	  b role_name "m_parent" multiplicity "1" private
	    comment "The parent program for this compound"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	    classrelation_ref 427817 // <composition>
      end

      classrelation 446761 // m_document (<directional composition>)
	relation 436393 *-->
	  stereotype "auto_ptr"
	  a role_name "m_document" multiplicity "*" private
	    comment "The XML document this program is related to.  It is nul when no document is associated."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 446761 // m_document (<directional composition>)
	  b parent class_ref 449449 // persistence
      end

      classrelation 287657 // m_equipment (<composition>)
	relation 281641 *---
	  stereotype "ptr_vector"
	  a role_name "m_equipment" multiplicity "*" private
	    comment "The result mechanisms for this site."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 287657 // m_equipment (<composition>)
	  b role_name "m_site" multiplicity "1" private
	    comment "The site this mechanism is located at. (parent)"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	    classrelation_ref 417833 // <composition>
      end

      classrelation 441641 // m_info (<directional composition>)
	relation 431273 *-->
	  stereotype "auto_ptr"
	  a role_name "m_info" multiplicity "*" private
	    comment "Information about this research program"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 441641 // m_info (<directional composition>)
	  b parent class_ref 354601 // info
      end

      classrelation 319401 // m_projects (<composition>)
	relation 311849 *---
	  stereotype "ptr_vector"
	  a role_name "m_projects" multiplicity "*" private
	    comment "The projects in this site."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 319401 // m_projects (<composition>)
	  b role_name "m_site" multiplicity "1" private
	    comment "Parent program"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	    classrelation_ref 417961 // m_site (<composition>)
      end

      classrelation 287529 // m_staff (<composition>)
	relation 281513 *---
	  stereotype "ptr_vector"
	  a role_name "m_staff" multiplicity "*" private
	    comment "The staff in this program."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 287529 // m_staff (<composition>)
	  b role_name "m_site" multiplicity "1" private
	    comment "The site (parent) this worker works at."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	    classrelation_ref 417705 // m_site (<composition>)
      end

      operation 1425193 "add_child"
	public explicit_return_type "basic_datum"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param inout name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "add_child tests if this object can accept the tagname using the
meta_datum object. Only then is the virt_add_child method called. 

default action is to throw an error!

\\return /= NULL"
      end

      operation 1424809 "add_compound"
	public explicit_return_type "compound"
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Create and add a worker object.

\\return /= nul"
      end

      operation 1424425 "add_info"
	public explicit_return_type "info"
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  @{require}(not has_information (), \"Attempt to add a second info object.\");
  ${body}
}
"
	
	
	
	
	comment "Add an info object.

\\pre not has_information
\\return /= NULL"
      end

      operation 1424681 "add_mechanism"
	public explicit_return_type "mechanism"
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Create and add a worker object.

\\return /= nul"
      end

      operation 1424937 "add_project"
	public explicit_return_type "project"
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Create and add a worker object.

\\return /= nul"
      end

      operation 1425065 "add_project_src"
	public explicit_return_type "project"
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Create and add a worker object.

\\return /= nul"
      end

      operation 1424553 "add_worker"
	public explicit_return_type "worker"
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Create and add a worker object.

\\return /= nul"
      end

      operation 1137833 "begin_compound"
	public return_type class_ref 447529 // compound_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_catalog.begin ();
}
"
	
	
	
	
	comment "view   [data_scheme]"
      end

      operation 1417641 "begin_compound"
	stereotype "const"
	const public return_type class_ref 447785 // const_compound_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_catalog.begin ();
}
"
	
	
	
	
	comment "view   [data_scheme]"
      end

      operation 1137577 "begin_mechanism"
	public return_type class_ref 447273 // mechanism_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_equipment.begin ();
}
"
	
	
	
	
	comment "mechanism   [data_scheme]"
      end

      operation 1417769 "begin_mechanism"
	stereotype "const"
	const public return_type class_ref 447913 // const_mechanism_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_equipment.begin ();
}
"
	
	
	
	
	comment "mechanism   [data_scheme]"
      end

      operation 1138089 "begin_project"
	public return_type class_ref 447657 // project_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_projects.begin ();
}
"
	
	
	
	
	comment "project   [data_scheme]"
      end

      operation 1417897 "begin_project"
	stereotype "const"
	const public return_type class_ref 448041 // const_project_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_projects.begin ();
}
"
	
	
	
	
	comment "project   [data_scheme]"
      end

      operation 1137321 "begin_worker"
	public return_type class_ref 447401 // worker_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_staff.begin ();
}
"
	
	
	
	
	comment "worker   [data_scheme]"
      end

      operation 1418025 "begin_worker"
	stereotype "const"
	const public return_type class_ref 448169 // const_worker_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_staff.begin ();
}
"
	
	
	
	
	comment "worker   [data_scheme]"
      end

      operation 1677481 "connect"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_uri" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0}& ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
{
  m_document = data_access::manager::server().connect (*this, ${p0}, false);
  m_document->read ();
}
"
	
	
	
	
	comment "Second part of constructor connects the program object to the serialisation source."
      end

      operation 1666089 "empty_compound"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_catalog.empty ();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 1666217 "empty_mechanism"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_equipment.empty ();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 1666345 "empty_project"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_projects.empty ();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 1666473 "empty_worker"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_staff.empty ();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 1418153 "end_compound"
	public return_type class_ref 447529 // compound_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_catalog.end ();
}
"
	
	
	
	
	comment "view   [data_scheme]"
      end

      operation 1418281 "end_compound"
	stereotype "const"
	const public return_type class_ref 447785 // const_compound_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_catalog.end ();
}
"
	
	
	
	
	comment "view   [data_scheme]"
      end

      operation 1418409 "end_mechanism"
	public return_type class_ref 447273 // mechanism_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_equipment.end ();
}
"
	
	
	
	
	comment "mechanism   [data_scheme]"
      end

      operation 1418537 "end_mechanism"
	stereotype "const"
	const public return_type class_ref 447913 // const_mechanism_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_equipment.end ();
}
"
	
	
	
	
	comment "mechanism   [data_scheme]"
      end

      operation 1418665 "end_project"
	public return_type class_ref 447657 // project_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_projects.end ();
}
"
	
	
	
	
	comment "project   [data_scheme]"
      end

      operation 1418793 "end_project"
	stereotype "const"
	const public return_type class_ref 448041 // const_project_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_projects.end ();
}
"
	
	
	
	
	comment "project   [data_scheme]"
      end

      operation 1418921 "end_worker"
	public return_type class_ref 447401 // worker_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_staff.end ();
}
"
	
	
	
	
	comment "worker   [data_scheme]"
      end

      operation 1419177 "end_worker"
	stereotype "const"
	const public return_type class_ref 448169 // const_worker_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_staff.end ();
}
"
	
	
	
	
	comment "worker   [data_scheme]"
      end

      operation 1417513 "find_compound"
	public return_type class_ref 447529 // compound_iterator
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "compound   [data_scheme]"
      end

      operation 1419305 "find_compound"
	stereotype "const"
	const public return_type class_ref 447785 // const_compound_iterator
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "compound   [data_scheme]"
      end

      operation 1138473 "find_mechanism"
	public return_type class_ref 447273 // mechanism_iterator
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "mechanism [data_scheme]"
      end

      operation 1419433 "find_mechanism"
	stereotype "const"
	const public return_type class_ref 447913 // const_mechanism_iterator
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "mechanism [data_scheme]"
      end

      operation 1138345 "find_project"
	public return_type class_ref 447657 // project_iterator
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Find an existing project element. This either returns a null element or a 'project' element.  This requires that a 'project-src' element will be followed."
      end

      operation 1419561 "find_project"
	stereotype "const"
	const public return_type class_ref 448041 // const_project_iterator
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Find an existing project element. This either returns a null element or a 'project' element.  This requires that a 'project-src' element will be followed."
      end

      operation 1138729 "find_worker"
	public return_type class_ref 447401 // worker_iterator
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "worker   [data_scheme]"
      end

      operation 1419689 "find_worker"
	stereotype "const"
	const public return_type class_ref 448169 // const_worker_iterator
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "worker   [data_scheme]"
      end

      operation 1424297 "has_information"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return NULL != m_info.get ();
}
"
	
	
	
	
	comment "Does this formula have an information object?"
      end

      operation 1424169 "information"
	stereotype "get"
	public explicit_return_type "info"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual} ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  @{require}(has_information (), \"Attempt to access non-existent information object.\");
  return *(m_info.get ());
}
"
	
	
	
	
	comment "Get a reference to the information object.

\\pre has_information"
      end

      operation 1424041 "information"
	stereotype "const"
	const public explicit_return_type "info"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  @{require}(has_information (), \"Attempt to access non-existent information object.\");
  return *(m_info.get ());
}
"
	
	
	
	
	comment "Get a reference to the information object.

\\pre has_information"
      end

      operation 1159209 "operator="
	private explicit_return_type "program"
	nparams 1
	  param in name "source" explicit_type "program"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "no assign"
      end

      operation 1420073 "parent"
	const public explicit_return_type "basic_datum"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  const bool program_has_no_parent (false);
  COMPCHEM_ALWAYS (program_has_no_parent, serial_name () + \" objects do not parents\");
  return *this;
}
"
	
	
	
	
	comment "Throw an error as program objects do not have parents.

Note: Returns a pointer to the parent object to compile 
without warnings."
      end

      operation 1158825 "program"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw}
: @{base_class} ()
, m_catalog ()
, m_document ()
, m_equipment ()
, m_info ()
, m_projects ()
, m_staff ()
{}
"
	
	
	
	
	comment "Default program constructor has no arguments?"
      end

      operation 1159081 "program"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" explicit_type "program"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	
	
	
	
	comment "no copy"
      end

      operation 1158953 "~program"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile} throw ();
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile} throw () 
{}
"
	
	
	
	
      end

      operation 1683881 "remove_child"
	public explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 356009 // compound
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  remove_priv (${p0}); // performs validity checking.
  erase (find (&${p0})); // Remove from base.
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Remove a_datum from our list of children.

\\pre a_datum.parent = this"
      end

      operation 1684137 "remove_child"
	public explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 353705 // mechanism
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  remove_priv (${p0}); // performs validity checking.
  erase (find (&${p0})); // Remove from base.
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Remove a_datum from our list of children.

\\pre a_datum.parent = this"
      end

      operation 1684393 "remove_child"
	public explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 354089 // project
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  remove_priv (${p0}); // performs validity checking.
  erase (find (&${p0})); // Remove from base.
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Remove a_datum from our list of children.

\\pre a_datum.parent = this"
      end

      operation 1684649 "remove_child"
	public explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 353577 // worker
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  remove_priv (${p0}); // performs validity checking.
  erase (find (&${p0})); // Remove from base.
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Remove a_datum from our list of children.

\\pre a_datum.parent = this"
      end

      operation 1684521 "remove_priv"
	private explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 356009 // compound
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Remove a formula object.

\\pre a_datum.parent = this"
      end

      operation 1684265 "remove_priv"
	private explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 353705 // mechanism
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Remove a formula object.

\\pre a_datum.parent = this"
      end

      operation 1684009 "remove_priv"
	private explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 354089 // project
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Remove a formula object.

\\pre a_datum.parent = this"
      end

      operation 1683753 "remove_priv"
	private explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 353577 // worker
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Remove a formula object.

\\pre a_datum.parent = this"
      end

      operation 1419945 "serial_name"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return data_access::names::${class}_name ();
}
"
	
	
	
	
	comment "The key for this class during serialisation."
      end

      operation 1397545 "set_attribute"
	cpp_virtual public explicit_return_type "void"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param in name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  @{always}(false, \"Class 'program' has no settable attributes\");
}
"
	
	
	
	
	comment "Throw an error as program has no attributes."
      end

      operation 1666601 "size_compound"
	const public explicit_return_type "uint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_catalog.size ();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 1666729 "size_mechanism"
	const public explicit_return_type "uint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_equipment.size ();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 1666857 "size_project"
	const public explicit_return_type "uint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_projects.size ();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 1666985 "size_worker"
	const public explicit_return_type "uint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_staff.size ();
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
      end

      operation 1557545 "target_project"
	public return_type class_ref 447657 // project_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Attempt to find the project named by data_scheme_helper.target_project.
Return end_project when project is not found (also auto_project)"
      end

      operation 1442473 "uri_path"
	const cpp_virtual public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return m_document->${name} ();
}
"
	
	
	
	
	comment "Get the full path to the document/source that contains the current element 
(also see basic_datum::uri_path)"
      end

      operation 1529257 "uri_scheme"
	const cpp_virtual public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return m_document->${name} ();
}
"
	
	
	
	
	comment "Get the scheme used to connect to the document/source that contains 
the current element. (also see basic_datum::uri_scheme)"
      end

      operation 1663273 "virt_remove_child"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 432681 // basic_datum
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Called when an object of a derived class will be removed.

throw exception if a_datum is not a child of derived class."
      end

      operation 1450281 "visit"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "a_visitor" explicit_type "visitor"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${p0}.on_visit (*this);
}
"
	
	
	
	
      end

      operation 1449385 "write"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Trigger document to write itself.

\\pre is_src"
      end
    end

    class 354089 "project"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      ncouples 1
      key "base_class" value "basic_datum"
      comment "Base type for project related types."
      classrelation 439209 // <generalisation>
	relation 428841 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 439209 // <generalisation>
	  b parent class_ref 432681 // basic_datum
      end

      classrelation 470313 // <dependency>
	relation 459433 -_->
	  a private
	    cpp default "#include in source"
	    classrelation_ref 470313 // <dependency>
	  b parent class_ref 469033 // data_scheme_helper
      end

      class 462249 "experiment_iterator"
	visibility package stereotype "typedef" base_type class_ref 356905 // experiment
	cpp_decl "${comment}typedef boost::ptr_vector< ${type} >::iterator ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      class 462377 "const_experiment_iterator"
	visibility package stereotype "typedef" base_type class_ref 356905 // experiment
	cpp_decl "${comment}typedef boost::ptr_vector< ${type} >::const_iterator ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      class 480681 "compound_ref_iterator"
	visibility package stereotype "typedef" base_type class_ref 480425 // compound_ref
	cpp_decl "${comment}typedef boost::ptr_vector< ${type} >::iterator ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      class 480809 "const_compound_ref_iterator"
	visibility package stereotype "typedef" base_type class_ref 480425 // compound_ref
	cpp_decl "${comment}typedef boost::ptr_vector< ${type} >::const_iterator ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      classrelation 319913 // m_activities (<composition>)
	relation 312105 *---
	  stereotype "ptr_vector"
	  a role_name "m_activities" multiplicity "*" private
	    comment "The experiments in this project."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 319913 // m_activities (<composition>)
	  b role_name "m_section" multiplicity "1" private
	    comment "The project this experiment was performed in. (parent)"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	    classrelation_ref 320041 // <composition>
      end

      classrelation 446889 // m_document (<directional composition>)
	relation 436521 *-->
	  stereotype "auto_ptr"
	  a role_name "m_document" multiplicity "*" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 446889 // m_document (<directional composition>)
	  b parent class_ref 449449 // persistence
      end

      classrelation 490409 // m_imports (<composition>)
	relation 478889 *---
	  stereotype "ptr_vector"
	  a role_name "m_imports" multiplicity "*" private
	    comment "The set of imported compounds"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 490409 // m_imports (<composition>)
	  b role_name "m_importer" multiplicity "1" private
	    comment "The importer of the compound referred to."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	    classrelation_ref 490537 // <composition>
      end

      classrelation 439337 // m_info (<directional composition>)
	relation 428969 *-->
	  stereotype "auto_ptr"
	  a role_name "m_info" multiplicity "*" private
	    comment "Information describing this project"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 439337 // m_info (<directional composition>)
	  b parent class_ref 354601 // info
      end

      attribute 354985 "m_label"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The project ID "
      end

      attribute 355241 "m_outcomes"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The set of target outcomes, which in turn implies the set of desired filters."
      end

      classrelation 417961 // m_site (<composition>)
	relation_ref 311849 // <composition>
      end

      attribute 355113 "m_workers"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The workers on this project"
      end

      operation 1425833 "add_child"
	public explicit_return_type "basic_datum"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param inout name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "add_child tests if this object can accept the tagname using the
meta_datum object. Only then is the virt_add_child method called. 

default action is to throw an error!

\\return /= NULL"
      end

      operation 1533609 "add_compound_ref"
	public return_type class_ref 480425 // compound_ref
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "add_child tests if this object can accept the tagname using the
meta_datum object. Only then is the virt_add_child method called. 

default action is to throw an error!

\\return /= NULL"
      end

      operation 1425705 "add_info"
	public explicit_return_type "info"
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  @{require}(not has_information (), \"Attempt to add a second info object.\");
  ${body}
}
"
	
	
	
	
	comment "Add an info object.

\\pre not has_information
\\return /= NULL"
      end

      operation 1415721 "add_experiment"
	public explicit_return_type "experiment"
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "add_child tests if this object can accept the tagname using the
meta_datum object. Only then is the virt_add_child method called. 

default action is to throw an error!

\\return /= NULL"
      end

      operation 1192105 "add_outcome_label"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_set" explicit_type "string"
	constraint "Get the list of string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  data_access::names::list_add (m_outcomes, ${p0});
}
"
	
	
	
	
      end

      operation 1117481 "add_worker_label"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_worker" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  data_access::names::list_add (m_workers, ${p0});
}
"
	
	
	
	
	comment "worker   [data_scheme]"
      end

      operation 1471657 "begin_experiment"
	public return_type class_ref 462249 // experiment_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_activities.begin ();
}
"
	
	
	
	
      end

      operation 1471785 "begin_experiment"
	stereotype "const"
	const public return_type class_ref 462377 // const_experiment_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_activities.begin ();
}
"
	
	
	
	
      end

      operation 1533865 "begin_compound_ref"
	public return_type class_ref 480681 // compound_ref_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_imports.begin ();
}
"
	
	
	
	
	comment "Get the first ref of a compound to import."
      end

      operation 1534121 "begin_compound_ref"
	stereotype "const"
	const public return_type class_ref 480809 // const_compound_ref_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_imports.begin ();
}
"
	
	
	
	
	comment "Get the first ref of a compound to import."
      end

      operation 1607593 "close"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "TODO Flush data to disk and revert to unopenned state. Freeing
any allocated resources.

\\pre is_src and is_open
(\\post not is_open)

TODO: currently does nothing!"
      end

      operation 1677225 "connect"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_uri" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Second part of constructor for proj-src derived objects. This
must be called after the contructor to create the document."
      end

      operation 1502889 "empty_experiment"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_activities.empty ();
}
"
	
	
	
	
      end

      operation 1534889 "empty_compound_ref"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_imports.empty ();
}
"
	
	
	
	
	comment "Get the first ref of a compound to import."
      end

      operation 1471913 "end_experiment"
	public return_type class_ref 462249 // experiment_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_activities.end ();
}
"
	
	
	
	
      end

      operation 1472041 "end_experiment"
	stereotype "const"
	const public return_type class_ref 462377 // const_experiment_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_activities.end ();
}
"
	
	
	
	
      end

      operation 1534761 "end_compound_ref"
	public return_type class_ref 480681 // compound_ref_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_imports.end ();
}
"
	
	
	
	
	comment "Get the first ref of a compound to import."
      end

      operation 1534633 "end_compound_ref"
	stereotype "const"
	const public return_type class_ref 480809 // const_compound_ref_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_imports.end ();
}
"
	
	
	
	
	comment "Get the first ref of a compound to import."
      end

      operation 1557673 "find_experiment"
	public return_type class_ref 462249 // experiment_iterator
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "experiment [data_scheme]"
      end

      operation 1557801 "find_experiment"
	stereotype "const"
	const public return_type class_ref 462377 // const_experiment_iterator
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "experiment [data_scheme]"
      end

      operation 1416105 "get_attribute"
	const public explicit_return_type "bool"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param out name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Add attributes to the XML element"
      end

      operation 1425577 "has_information"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return NULL != m_info.get ();
}
"
	
	
	
	
	comment "Does this formula have an information object?"
      end

      operation 1425449 "information"
	stereotype "get"
	public explicit_return_type "info"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual} ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  @{require}(has_information (), \"Attempt to access non-existent information object.\");
  return *(m_info.get ());
}
"
	
	
	
	
	comment "Get a reference to the information object.

\\pre has_information"
      end

      operation 1425321 "information"
	stereotype "const"
	const public explicit_return_type "info"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  @{require}(has_information (), \"Attempt to access non-existent information object.\");
  return *(m_info.get ());
}
"
	
	
	
	
	comment "Get a reference to the information object.

\\pre has_information"
      end

      operation 1612201 "initialise"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {}
"
	
	
	
	
	comment "Ensure that a newly created object has all the required
attributes and children by creating them if necessary."
      end

      operation 1497257 "is_open"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  @{require}(is_src (), \"A non-src object is never open.\");
  return m_document->is_open ();
}
"
	
	
	
	
	comment "Has the sub-file been openned?

\\pre is_src"
      end

      operation 1441193 "is_src"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return NULL != m_document.get ();
}
"
	
	
	
	
	comment "Is this derived from a memo-src element?"
      end

      operation 1115817 "label"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_label;
}
"
	
	
	
	
      end

      operation 1497641 "label"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  @{require}(m_label.empty () or ${p0} == m_label, \"Once set, label can not be changed.\");
  if (m_label.empty ())
  {
    m_label.swap (${p0});
  }
}"
	
	
	
	
	comment "Set the label. Note this can only be done \"once\"

\\pre label.empty or a_label = label
\\post label = a_label"
      end

      operation 1498153 "make_src"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_path" type class_ref 361513 // path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  @{require}(not is_src (), \"Object is already a src type object.\");
  ${body}
  @{ensure}(is_src (), \"Failed to convert object into a src type object.\");
}
"
	
	
	
	
	comment "Convert the memo into a src type.

\\pre not is_src and ((a_base.empty and exists(parent.database_path)) or exists(a_base))
\\post is_src"
      end

      operation 1170217 "operator="
	private explicit_return_type "project"
	nparams 1
	  param in name "source" explicit_type "project"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "no assign"
      end

      operation 1117097 "outcomes"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_outcomes;
}
"
	
	
	
	
	comment "Set of target outcomes"
      end

      operation 1415849 "parent"
	const public explicit_return_type "basic_datum"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile} throw ()${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile} throw ()${staticnl}
{
  return m_site;
}
"
	
	
	
	
	comment "Reference to the parent object."
      end

      operation 1422121 "project"
	public explicit_return_type ""
	nparams 2
	  param inout name "a_program" explicit_type "program"
	  param inout name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${volatile}${throw}
: @{base_class} ()
, m_activities ()
, m_document ()
, m_imports ()
, m_info ()
, m_label ()
, m_outcomes ()
, m_site (${p0})
, m_workers ()
{
  m_label.swap (${p1});
}
"
	
	
	
	
	comment "Constructor for project object (from project elements) with a_program
parent and a_label. Swallows content of a_label.

\\post a_label.empty"
      end

      operation 1677353 "project"
	public explicit_return_type ""
	nparams 1
	  param inout name "a_program" explicit_type "program"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}${)}${volatile}${throw}
: @{base_class} ()
, m_activities ()
, m_document ()
, m_imports ()
, m_info ()
, m_label ()
, m_outcomes ()
, m_site (${p0})
, m_workers ()
{}
"
	
	
	
	
	comment "First part of constructor for project objects(from proj-src elements) with a_program
parent. Call connect to complete construction."
      end

      operation 1170089 "project"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" explicit_type "project"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	
	
	
	
	comment "no copy"
      end

      operation 1169961 "~project"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile} throw ();
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile} throw () 
{}
"
	
	
	
	
      end

      operation 1530537 "read"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  @{require}(is_src () and not is_open (), \"Can not open a non-src or already open src element.\");
  m_document->read ();
}
"
	
	
	
	
	comment "Open a src type

\\pre is_src"
      end

      operation 1683369 "remove_child"
	public explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 356905 // experiment
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  remove_priv (${p0}); // performs validity checking.
  erase (find (&${p0})); // Remove from base.
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Remove a_datum from our list of children.

\\pre a_datum.parent = this"
      end

      operation 1683625 "remove_child"
	public explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 480425 // compound_ref
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  remove_priv (${p0}); // performs validity checking.
  erase (find (&${p0})); // Remove from base.
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Remove a_datum from our list of children.

\\pre a_datum.parent = this"
      end

      operation 1683497 "remove_priv"
	private explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 356905 // experiment
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Remove a info object.

\\pre a_datum.parent = this"
      end

      operation 1683241 "remove_priv"
	private explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 480425 // compound_ref
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Remove a info object.

\\pre a_datum.parent = this"
      end

      operation 1415593 "serial_name"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return data_access::names::${class}_name ();
}
"
	
	
	
	
	comment "The key for this class during serialisation."
      end

      operation 1448873 "serial_src_name"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return data_access::names::${class}_src_name ();
}
"
	
	
	
	
	comment "The key for this class during serialisation."
      end

      operation 1415977 "set_attribute"
	private explicit_return_type "void"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param in name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Write an attribute. Can assume that a_name and a_value are valid as per the
definition() object."
      end

      operation 1511337 "site"
	stereotype "get"
	const public explicit_return_type "program"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_site;
}
"
	
	
	
	
	comment "Get the project's parent site."
      end

      operation 1503017 "size_experiment"
	const public explicit_return_type "uint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_activities.size ();
}
"
	
	
	
	
      end

      operation 1534505 "size_compound_ref"
	const public explicit_return_type "uint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_imports.size ();
}
"
	
	
	
	
	comment "Get the first ref of a compound to import."
      end

      operation 1442601 "uri_path"
	const cpp_virtual public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return (is_src () ? m_document->${name} () : site ().${name} ());
}
"
	
	
	
	
	comment "Get the full path to the document/source that contains the current element"
      end

      operation 1529513 "uri_scheme"
	const cpp_virtual public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return (is_src () ? m_document->${name} () : site ().${name} ());
}
"
	
	
	
	
	comment "Get the scheme used to connect to the document/source that contains 
the current element."
      end

      operation 1446313 "uri"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  @{require}(is_src (), \"Can not get url from non-source object.\");
  return m_document->uri ();
}
"
	
	
	
	
	comment "The URI of the document (proj-src nodes)

\\pre is_src"
      end

      operation 1663401 "virt_remove_child"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 432681 // basic_datum
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Called when an object of a derived class will be removed.

throw exception if a_datum is not a child of derived class."
      end

      operation 1450153 "visit"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "a_visitor" explicit_type "visitor"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${p0}.on_visit (*this);
}
"
	
	
	
	
      end

      operation 1169705 "workers"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_workers;
}
"
	
	
	
	
	comment "List of workers involved in this project (people allowed to edit?)"
      end

      operation 1449257 "write"
	const public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  @{require}(is_src (), \"Can not call write on a non-source element.\");
  ${body}
}
"
	
	
	
	
	comment "Trigger document to write itself.

\\pre is_src"
      end
    end

    class 505641 "scoped_open"
      visibility package 
      nformals 1
      formal name "t_src_type" type "class" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit}
{
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Class to automatically open/close a src type object."
      class 505769 "value_type"
	visibility package stereotype "typedef" explicit_base_type "t_src_type"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      attribute 422057 "m_obj"
	private type class_ref 505769 // value_type
	multiplicity "1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The object to open/close."
      end

      operation 1607721 "scoped_open"
	public explicit_return_type ""
	nparams 1
	  param inout name "a_obj" type class_ref 505769 // value_type
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}${)}${volatile}${throw}
: m_obj (${p0}.is_src () and not ${p0}.is_open ()? &${p0} : NULL)
{
  if (NULL != m_obj) m_obj->read ();
}
"
	
	
	
	
      end

      operation 1608233 "scoped_open"
	public explicit_return_type ""
	nparams 1
	  param in name "a_obj" type class_ref 505769 // value_type
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
: m_obj (${p0}.is_src () and not ${p0}.is_open ()? const_cast< ${t0}* >(&${p0}) : NULL)
{
  if (NULL != m_obj) m_obj->read ();
}
"
	
	
	
	
	comment "Break constness when necessary in a controlled manner."
      end

      operation 1607849 "~scoped_open"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}
{
  if (NULL != m_obj) m_obj->close ();
}
"
	
	
	
	
      end

      operation 1607977 "scoped_open"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 505641 // scoped_open
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} &${)}${volatile}${throw};
"
	
	
	
	
	comment "no copy"
      end

      operation 1608105 "operator="
	private return_type class_ref 505641 // scoped_open
	nparams 1
	  param in name "source" type class_ref 505641 // scoped_open
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} &${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "no assign"
      end
    end

    class 371497 "settings"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      ncouples 1
      key "base_class" value "basic_datum"
      comment "Note that this can contain a datum or an info object but not both."
      classrelation 425257 // <generalisation>
	relation 415017 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 425257 // <generalisation>
	  b parent class_ref 432681 // basic_datum
      end

      classrelation 437161 // m_datum (<directional composition>)
	relation 426793 *-->
	  stereotype "auto_ptr"
	  a role_name "m_datum" multiplicity "*" private
	    comment "The datum object of this setting."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 437161 // m_datum (<directional composition>)
	  b parent class_ref 355369 // datum
      end

      attribute 352553 "m_filters"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The space separated list of filter IDs that can be used with this setting."
      end

      classrelation 437289 // m_info (<directional composition>)
	relation 426921 *-->
	  stereotype "auto_ptr"
	  a role_name "m_info" multiplicity "*" private
	    comment "The info object of these settings"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 437289 // m_info (<directional composition>)
	  b parent class_ref 354601 // info
      end

      attribute 352425 "m_label"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The objects unique ID"
      end

      attribute 352297 "m_outcomes"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The space separated list of supported outcomes."
      end

      classrelation 321833 // m_target (<composition>)
	relation_ref 313769 // <composition>
      end

      operation 1406761 "add_child"
	cpp_virtual public explicit_return_type "basic_datum"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param inout name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "add_child tests if this object can accept the tagname using the
meta_datum object. Only then is the virt_add_child method called. 

default action is to throw an error!

\\return /= NULL"
      end

      operation 1426473 "add_datum"
	public explicit_return_type "datum"
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  @{require}(not has_data (), \"Attempt to add a second datum object.\");
  ${body}
}
"
	
	
	
	
	comment "Add an info object.

\\pre not has_data
\\return /= NULL"
      end

      operation 1426345 "add_info"
	public explicit_return_type "info"
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  @{require}(not has_information (), \"Attempt to add a second info object.\");
  ${body}
}
"
	
	
	
	
	comment "Add an info object.

\\pre not has_information
\\return /= NULL"
      end

      operation 1212329 "add_filter_label"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_filter" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  data_access::names::list_add (m_filters, ${p0});
}
"
	
	
	
	
	comment "Add a filter label to list of what extracted data into database."
      end

      operation 1408425 "add_outcome_label"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_filter" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  data_access::names::list_add (m_outcomes, ${p0});
}
"
	
	
	
	
	comment "Add a filter label to list of what extracted data into database."
      end

      operation 1426601 "data"
	stereotype "get"
	public explicit_return_type "datum"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual} ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  @{require}(has_data (), \"Attempt to access non-existent datum object.\");
  return *(m_datum.get ());
}
"
	
	
	
	
	comment "Get a reference to the information object.

\\pre has_information"
      end

      operation 1426729 "data"
	stereotype "const"
	const public explicit_return_type "datum"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  @{require}(has_data (), \"Attempt to access non-existent datum object.\");
  return *(m_datum.get ());
}
"
	
	
	
	
	comment "Get a reference to the information object.

\\pre has_information"
      end

      operation 1212201 "filter_list"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_filters;
}
"
	
	
	
	
	comment "The list of filters on this mechanism action.  If this is a standard mech-memo then this will give the list of possible filters.  For a result mech-memo this will list the used filters."
      end

      operation 1407401 "get_attribute"
	const public explicit_return_type "bool"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param out name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Add attributes to the XML element"
      end

      operation 1406889 "has_data"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return NULL != m_datum.get ();
}
"
	
	
	
	
	comment "Check whether this has a datum sub-element."
      end

      operation 1426217 "has_information"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return NULL != m_info.get ();
}
"
	
	
	
	
	comment "Does this formula have an information object?"
      end

      operation 1426089 "information"
	stereotype "get"
	public explicit_return_type "info"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual} ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  @{require}(has_information (), \"Attempt to access non-existent information object.\");
  return *(m_info.get ());
}
"
	
	
	
	
	comment "Get a reference to the information object.

\\pre has_information"
      end

      operation 1425961 "information"
	stereotype "const"
	const public explicit_return_type "info"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  @{require}(has_information (), \"Attempt to access non-existent information object.\");
  return *(m_info.get ());
}
"
	
	
	
	
	comment "Get a reference to the information object.

\\pre has_information"
      end

      operation 1211945 "label"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_label;
}
"
	
	
	
	
      end

      operation 1661865 "outcomes"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_outcomes;
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Get the list of outcomes"
      end

      operation 1407145 "parent"
	const public explicit_return_type "basic_datum"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile} throw ()${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile} throw ()${staticnl}
{
  return m_target;
}"
	
	
	
	
	comment "Return a pointer to the parent object, may be NULL."
      end

      operation 1211433 "settings"
	public explicit_return_type ""
	nparams 2
	  param inout name "a_parent" explicit_type "mechanism"
	  param inout name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${volatile}${throw}
: @{base_class} ()
, m_datum ()
, m_filters ()
, m_info ()
, m_label ()
, m_outcomes ()
, m_target (${p0})
{
  m_label.swap (${p1});
}
"
	
	
	
	
	comment "Construct a new setting object with a_parent and a_label.
Swallows the content of a_label

\\post a_label.empty"
      end

      operation 1211049 "settings"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" explicit_type "settings"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	
	
	
	
	comment "no copy "
      end

      operation 1211561 "~settings"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile} throw ();
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile} throw () 
{}
"
	
	
	
	
      end

      operation 1406505 "operator="
	private explicit_return_type "settings"
	nparams 1
	  param in name "source" explicit_type "settings"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "no assign"
      end

      operation 1406633 "serial_name"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return data_access::names::${class}_name ();
}
"
	
	
	
	
	comment "The key for this class during serialisation."
      end

      operation 1407273 "set_attribute"
	public explicit_return_type "void"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param in name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Write an attribute.  Can assume that a_name and a_value are valid as
per the definition() object."
      end

      operation 1663529 "virt_remove_child"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 432681 // basic_datum
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Called when an object of a derived class will be removed.

throw exception if a_datum is not a child of derived class."
      end

      operation 1446569 "visit"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "a_visitor" explicit_type "visitor"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${p0}.on_visit (*this);
}
"
	
	
	
	
      end
    end

    class 443305 "text"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
{
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This represents character data elements it can be interspersed 
with other elements."
      classrelation 430761 // <generalisation>
	relation 420393 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 430761 // <generalisation>
	  b parent class_ref 435369 // basic_text
      end

      operation 1391145 "operator="
	private explicit_return_type "text"
	nparams 1
	  param in name "source" explicit_type "text"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "no assign"
      end

      operation 1436841 "serial_name"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return data_access::names::text_type ();
}
"
	
	
	
	
	comment "The XML element definition for this datum."
      end

      operation 1391529 "text"
	public explicit_return_type ""
	nparams 2
	  param inout name "a_parent" explicit_type "basic_datum"
	  param inout name "a_content" explicit_type "string"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${volatile}${throw}
: basic_text (${p0}, ${p1})
{}
"
	
	
	
	
	comment "Create a text element.

Swallows content!
\\post a_content.empty"
      end

      operation 1391657 "~text"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile} throw ()
{}"
	
	
	
	
      end

      operation 1391785 "text"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" explicit_type "text"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	
	
	
	
	comment "no copy"
      end

      operation 1449897 "visit"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "a_visitor" explicit_type "visitor"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${p0}.on_visit (*this);
}
"
	
	
	
	
      end
    end

    class 435241 "visitor"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
{
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class defines an abstract interface to an object that can 
visit the data objects in document-order. "
      operation 1417385 "on_visit"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "a_datum" type class_ref 432681 // basic_datum
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "Pure virtual method to operate on objects as basic_datum."
      end

      operation 1417257 "on_visit"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "a_datum" type class_ref 443433 // comment
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  on_visit_base (${p0});
}
"
	
	
	
	
	comment "Operator on comment objects."
      end

      operation 1440937 "on_visit"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "a_datum" type class_ref 356009 // compound
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  on_visit_base (${p0});
}
"
	
	
	
	
	comment "Operate on compound objects."
      end

      operation 1533481 "on_visit"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "a_datum" type class_ref 480425 // compound_ref
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  on_visit_base (${p0});
}
"
	
	
	
	
	comment "Operate on compound objects."
      end

      operation 1441065 "on_visit"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "a_datum" type class_ref 355369 // datum
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  on_visit_base (${p0});
}
"
	
	
	
	
	comment "Operate on datum objects."
      end

      operation 1444393 "on_visit"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "a_datum" type class_ref 356905 // experiment
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  on_visit_base (${p0});
}
"
	
	
	
	
	comment "Operate on experiment objects."
      end

      operation 1444521 "on_visit"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "a_datum" type class_ref 354729 // filter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  on_visit_base (${p0});
}
"
	
	
	
	
	comment "Operate on filter objects."
      end

      operation 1444649 "on_visit"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "a_datum" type class_ref 356521 // formula
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  on_visit_base (${p0});
}
"
	
	
	
	
	comment "Operate on formula objects."
      end

      operation 1444777 "on_visit"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "a_datum" type class_ref 356393 // identity
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  on_visit_base (${p0});
}
"
	
	
	
	
	comment "Operate on identity objects."
      end

      operation 1444905 "on_visit"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "a_datum" type class_ref 354601 // info
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  on_visit_base (${p0});
}
"
	
	
	
	
	comment "Operate on info objects."
      end

      operation 1445033 "on_visit"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "a_datum" type class_ref 353705 // mechanism
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  on_visit_base (${p0});
}
"
	
	
	
	
	comment "Operate on mechanism objects."
      end

      operation 1445161 "on_visit"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "a_datum" type class_ref 357033 // memo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  on_visit_base (${p0});
}
"
	
	
	
	
	comment "Operate on memo objects."
      end

      operation 1445289 "on_visit"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "a_datum" type class_ref 443561 // processing_instruction
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  on_visit_base (${p0});
}
"
	
	
	
	
	comment "Operate on processing_instruction objects."
      end

      operation 1445417 "on_visit"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "a_datum" type class_ref 353321 // program
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  on_visit_base (${p0});
}
"
	
	
	
	
	comment "Operate on program objects."
      end

      operation 1445545 "on_visit"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "a_datum" type class_ref 354089 // project
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  on_visit_base (${p0});
}
"
	
	
	
	
	comment "Operate on project objects."
      end

      operation 1445673 "on_visit"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "a_datum" type class_ref 371497 // settings
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  on_visit_base (${p0});
}
"
	
	
	
	
	comment "Operate on settings objects."
      end

      operation 1445929 "on_visit"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "a_datum" type class_ref 443305 // text
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  on_visit_base (${p0});
}
"
	
	
	
	
	comment "Operate on text objects."
      end

      operation 1466409 "on_visit"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "a_datum" type class_ref 353577 // worker
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  on_visit_base (${p0});
}
"
	
	
	
	
	comment "Operate on worker objects."
      end

      operation 1440809 "on_visit_base"
	private explicit_return_type "void"
	nparams 1
	  param in name "a_datum" type class_ref 432681 // basic_datum
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract}
{
  on_visit (${p0});
}
"
	
	
	
	
	comment "Calls the on_visit(const basic_datum&) method."
      end

      operation 1593513 "~visitor"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {}
"
	
	
	
	
      end
    end

    class 353577 "worker"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      ncouples 1
      key "base_class" value "basic_datum"
      comment " A person doing the work

This allows you to assign people to programs and projects. "
      classrelation 425129 // <generalisation>
	relation 414889 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 425129 // <generalisation>
	  b parent class_ref 432681 // basic_datum
      end

      class 467625 "info_iterator"
	visibility package stereotype "typedef" explicit_base_type "info"
	cpp_decl "${comment}typedef boost::ptr_vector< ${type} >::iterator ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      class 467753 "const_info_iterator"
	visibility package stereotype "typedef" explicit_base_type "info"
	cpp_decl "${comment}typedef boost::ptr_vector< ${type} >::const_iterator ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      classrelation 437417 // m_information (<directional composition>)
	relation 427049 *-->
	  stereotype "ptr_vector"
	  a role_name "m_information" multiplicity "*" private
	    comment "The set of info objects."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 437417 // m_information (<directional composition>)
	  b parent class_ref 354601 // info
      end

      attribute 258217 "m_label"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Data to enable cross-referencing an experimenter with an experiment "
      end

      classrelation 417705 // m_site (<composition>)
	relation_ref 281513 // <composition>
      end

      classrelation 322857 // m_skills (<aggregation>)
	relation 314665 o---
	  stereotype "vector"
	  a role_name "m_skills" multiplicity "*" private
	    comment "The set of mechanisms this worker knows"
	    classrelation_ref 322857 // m_skills (<aggregation>)
	  b role_name "m_operators" multiplicity "*" private
	    comment "The list of workers that know this mechanism"
	    classrelation_ref 322985 // <aggregation>
      end

      operation 1426857 "add_child"
	public explicit_return_type "basic_datum"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "add_child tests if this object can accept the tagname using the
meta_datum object. Only then is the virt_add_child method called. 

default action is to throw an error!

\\return /= NULL"
      end

      operation 1409065 "add_info"
	public explicit_return_type "info"
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "add_child tests if this object can accept the tagname using the
meta_datum object. Only then is the virt_add_child method called. 

default action is to throw an error!

\\return /= NULL"
      end

      operation 1483305 "begin_info"
	public return_type class_ref 467625 // info_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_information.begin ();
}
"
	
	
	
	
      end

      operation 1483817 "begin_info"
	stereotype "const"
	const public return_type class_ref 467753 // const_info_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_information.begin ();
}
"
	
	
	
	
      end

      operation 1483561 "empty_info"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_information.empty ();
}
"
	
	
	
	
      end

      operation 1483433 "end_info"
	public return_type class_ref 467625 // info_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_information.end ();
}
"
	
	
	
	
      end

      operation 1483945 "end_info"
	stereotype "const"
	const public return_type class_ref 467753 // const_info_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}
{
  return m_information.end ();
}
"
	
	
	
	
      end

      operation 1408937 "get_attribute"
	const public explicit_return_type "bool"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param out name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Add attributes to the XML element"
      end

      operation 1141033 "label"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_label;
}
"
	
	
	
	
      end

      operation 1141161 "label"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile} throw ()${abstract}
{
  m_label.swap (${p0});
}
"
	
	
	
	
      end

      operation 1408681 "parent"
	const public explicit_return_type "basic_datum"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile} throw ()${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile} throw ()${staticnl}
{
  return m_site;
}
"
	
	
	
	
	comment "Return a pointer to the parent object, may be NULL."
      end

      operation 1151145 "operator="
	private explicit_return_type "worker"
	nparams 1
	  param in name "source" explicit_type "worker"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "no assign"
      end

      operation 1683113 "remove_child"
	public explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 354601 // info
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  remove_priv (${p0}); // performs validity checking.
  erase (find (&${p0})); // Remove from base.
}"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Remove a_datum from our list of children.

\\pre a_datum.parent = this"
      end

      operation 1682985 "remove_priv"
	private explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 354601 // info
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Remove a info object.

\\pre a_datum.parent = this"
      end

      operation 1408553 "serial_name"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}
{
  return data_access::names::${class}_name ();
}
"
	
	
	
	
	comment "The XML element definition for this datum."
      end

      operation 1408809 "set_attribute"
	private explicit_return_type "void"
	nparams 2
	  param in name "a_name" explicit_type "string"
	  param in name "a_value" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Write an attribute. Can assume that a_name and a_value are valid as per the
definition() object."
      end

      operation 1483689 "size_info"
	const public explicit_return_type "uint"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile} throw ()${abstract}
{
  return m_information.size ();
}
"
	
	
	
	
      end

      operation 1662249 "virt_remove_child"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "a_datum" type class_ref 432681 // basic_datum
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	python_def "${@}${static}${abstract}def ${name}${(}${)}:
${docstring}${body}
"
	
	comment "Called when an object of a derived class will be removed.

throw exception if a_datum is not a child of derived class."
      end

      operation 1449769 "visit"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "a_visitor" explicit_type "visitor"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${p0}.on_visit (*this);
}
"
	
	
	
	
      end

      operation 1150761 "worker"
	public explicit_return_type ""
	nparams 2
	  param inout name "a_parent" explicit_type "program"
	  param in name "a_label" explicit_type "string"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${volatile}${throw}
: @{base_class}()
, m_information ()
, m_label ()
, m_site (${p0})
{
  m_label.swap (${p1});
}
"
	
	
	
	
	comment "Construct a new worker object with a_parent and a_label.
Swallow the content of a_label.

\\post a_label.empty"
      end

      operation 1151017 "worker"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" explicit_type "worker"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	
	
	
	
	comment "no copy"
      end

      operation 1150889 "~worker"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile} throw ();
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile} throw () 
{}
"
	
	
	
	
      end
    end

    classinstance 129321 "reader"
      type class_ref 479273 // xml_persistence
      attributes
        end
      relations
        end
    end

    classinstance 129449 "top"
      type class_ref 432681 // basic_datum
      attributes
        end
      relations
        end
    end

    classinstance 129577 "top_derived"
      type class_ref 356009 // compound
      attributes
        end
      relations
        end
    end
  end

  deploymentview 131113 "data_scheme"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    deploymentdiagram 164265 "data_scheme"
      package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
      draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
      size A4
    end

    artifact 144169 "data_scheme"
      stereotype "library"
      associated_artifacts
	artifact_ref 166569 // settings
	artifact_ref 232617 // compound_ref
	artifact_ref 143273 // experiment
	artifact_ref 142633 // worker
	artifact_ref 142505 // filter
	artifact_ref 143657 // compound
	artifact_ref 222889 // data_scheme_helper
	artifact_ref 143145 // memo
	artifact_ref 157993 // utility
	artifact_ref 202793 // basic_datum
	artifact_ref 253353 // xml
	artifact_ref 233897 // content_visitor
	artifact_ref 143529 // formula
	artifact_ref 143913 // project
	artifact_ref 142889 // mechanism
	artifact_ref 207785 // text
	artifact_ref 214569 // visitor
	artifact_ref 142249 // identity
	artifact_ref 141993 // info
	artifact_ref 144041 // program
	artifact_ref 141737 // datum
      end
      comment "The library for the data_scheme objects"
    end

    artifact 202793 "basic_datum"
      stereotype "source"
      cpp_h "#ifndef @{PREFIX}${NAME}_HPP
#define @{PREFIX}${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
// Manual includes
#include \"data_access/names.hpp\"
#include <algorithm>
#include <boost/bind.hpp>
// -
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 432681 // basic_datum
      end
    end

    artifact 143657 "compound"
      stereotype "source"
      cpp_h "#ifndef @{PREFIX}${NAME}_HPP
#define @{PREFIX}${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
// Manual includes
#include \"data_access/names.hpp\"
#include <boost/bind.hpp>
// -
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 356009 // compound
      end
    end

    artifact 232617 "compound_ref"
      stereotype "source"
      cpp_h "#ifndef @{PREFIX}${NAME}_HPP
#define @{PREFIX}${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
// Manual includes
#include \"data_access/names.hpp\"
// -
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 480425 // compound_ref
      end
    end

    artifact 222889 "data_scheme_helper"
      stereotype "source"
      cpp_h "#ifndef @{PREFIX}${NAME}_HPP
#define @{PREFIX}${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
// Manual includes in source
#include <boost/bind.hpp>
// -
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 469033 // data_scheme_helper
      end
    end

    artifact 141737 "datum"
      stereotype "source"
      cpp_h "#ifndef @{PREFIX}${NAME}_HPP
#define @{PREFIX}${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
#include <map>
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
// Manual includes
#include \"data_access/names.hpp\"
#include <boost/lexical_cast.hpp>
#include <boost/bind.hpp>
// -
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 355369 // datum
      end
    end

    artifact 143273 "experiment"
      stereotype "source"
      cpp_h "#ifndef @{PREFIX}${NAME}_HPP
#define @{PREFIX}${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
// Manual includes
#include \"data_access/names.hpp\"
#include <boost/lexical_cast.hpp>
#include <boost/bind.hpp>
// -
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 356905 // experiment
      end
    end

    artifact 142505 "filter"
      stereotype "source"
      cpp_h "#ifndef @{PREFIX}${NAME}_HPP
#define @{PREFIX}${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
// Manual includes
#include \"data_access/names.hpp\"
// -
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 354729 // filter
      end
    end

    artifact 143529 "formula"
      stereotype "source"
      cpp_h "#ifndef @{PREFIX}${NAME}_HPP
#define @{PREFIX}${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
// Manual includes
#include \"data_access/names.hpp\"
#include <boost/bind.hpp>
// -
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 356521 // formula
      end
    end

    artifact 142249 "identity"
      stereotype "source"
      cpp_h "#ifndef @{PREFIX}${NAME}_HPP
#define @{PREFIX}${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
// Manual includes
#include \"data_access/names.hpp\"
// -
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 356393 // identity
      end
    end

    artifact 141993 "info"
      stereotype "source"
      cpp_h "#ifndef @{PREFIX}${NAME}_HPP
#define @{PREFIX}${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
// Manual includes
#include \"data_access/names.hpp\"
#include <boost/bind.hpp>
// -
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 354601 // info
      end
    end

    artifact 142889 "mechanism"
      stereotype "source"
      cpp_h "#ifndef @{PREFIX}${NAME}_HPP
#define @{PREFIX}${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
// Manual includes
#include \"data_access/names.hpp\"
#include <boost/bind.hpp>
// -
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 353705 // mechanism
      end
    end

    artifact 143145 "memo"
      stereotype "source"
      cpp_h "#ifndef @{PREFIX}${NAME}_HPP
#define @{PREFIX}${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
// Manual source includes
#include \"data_access/names.hpp\"
#include \"data_access/manager.hpp\"
#include <boost/bind.hpp>
// -
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 357033 // memo
      end
    end

    artifact 144041 "program"
      stereotype "source"
      cpp_h "#ifndef @{PREFIX}${NAME}_HPP
#define @{PREFIX}${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
// Manual includes
#include \"data_access/names.hpp\"
#include \"data_access/manager.hpp\"
#include <boost/bind.hpp>
// -
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 353321 // program
      end
    end

    artifact 143913 "project"
      stereotype "source"
      cpp_h "#ifndef @{PREFIX}${NAME}_HPP
#define @{PREFIX}${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
// Manual includes
#include \"data_access/names.hpp\"
#include \"data_access/manager.hpp\"
#include <boost/bind.hpp>
// -
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 354089 // project
      end
    end

    artifact 246441 "scoped_open"
      stereotype "source"
      cpp_h "#ifndef @{PREFIX}${NAME}_HPP
#define @{PREFIX}${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      associated_classes
	class_ref 505641 // scoped_open
      end
    end

    artifact 166569 "settings"
      stereotype "source"
      cpp_h "#ifndef @{PREFIX}${NAME}_HPP
#define @{PREFIX}${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
// Manual includes
#include \"data_access/names.hpp\"
// -
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 371497 // settings
      end
    end

    artifact 207785 "text"
      stereotype "source"
      cpp_h "#ifndef @{PREFIX}${NAME}_HPP
#define @{PREFIX}${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
// Manual includes
#include \"data_access/names.hpp\"
// -
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 435369 // basic_text
	class_ref 443305 // text
	class_ref 443433 // comment
	class_ref 443561 // processing_instruction
      end
    end

    artifact 214569 "visitor"
      stereotype "source"
      cpp_h "#ifndef @{PREFIX}${NAME}_HPP
#define @{PREFIX}${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 435241 // visitor
      end
    end

    artifact 142633 "worker"
      stereotype "source"
      cpp_h "#ifndef @{PREFIX}${NAME}_HPP
#define @{PREFIX}${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// Orig author: Justin Finnerty
// $author:$
// Orig date: 
// $date:$
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
// -
#include \"data_access/names.hpp\"
#include <boost/bind.hpp>
// -
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 353577 // worker
      end
    end
  end

  classview 165161 "data_scheme utilities"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    associated_deployment_view deploymentview_ref 162217 // data_scheme utilities
    comment "A set of helper classes."
    class 484009 "content_visitor"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
{
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class collects the complete textual content of the current object and
all its descendents into the ostream object given in the constructor."
      classrelation 497705 // <generalisation>
	relation 484521 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 497705 // <generalisation>
	  b parent class_ref 435241 // visitor
      end

      attribute 390441 "m_os"
	private explicit_type "ostream"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Reference to a stream in which to insert the text."
      end

      operation 1541545 "content_visitor"
	public explicit_return_type ""
	nparams 1
	  param inout name "a_os" explicit_type "ostream"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}${)}${volatile} throw ()
: m_os (${p0})
{}
"
	
	
	
	
      end

      operation 1541673 "~content_visitor"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile} throw () {}
"
	
	
	
	
      end

      operation 1541801 "content_visitor"
	stereotype "copy"
	private explicit_return_type ""
	nparams 1
	  param in name "source" type class_ref 484009 // content_visitor
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	
	
	
	
	comment "no copy"
      end

      operation 1541289 "on_visit"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_datum" type class_ref 432681 // basic_datum
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Process children of any object."
      end

      operation 1541417 "on_visit"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_datum" type class_ref 443305 // text
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  m_os << ${p0}.the_content;
}
"
	
	
	
	
	comment "Operate on text objects."
      end

      operation 1541929 "operator="
	private return_type class_ref 484009 // content_visitor
	nparams 1
	  param in name "source" type class_ref 484009 // content_visitor
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "no assign"
      end
    end
  end

  deploymentview 162217 "data_scheme utilities"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 233897 "content_visitor"
      stereotype "source"
      cpp_h "#ifndef @{PREFIX}${NAME}_HPP
#define @{PREFIX}${NAME}_HPP

// ------------------------------------------------------------
// class: ${name}
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
#include \"config.hpp\"
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "// ------------------------------------------------------------
// class: ${name}
// $revision:$
// $log:$
// ------------------------------------------------------------

${comment}
${includes}
// Manual includes
#include <boost/bind.hpp>
// -
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 484009 // content_visitor
      end
    end
  end

  package_ref 154537 // py

  package_ref 142249 // test cases

  classview 159273 "dv2_unused"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 371625 "basic_outcome"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The intended result of using a mechanism."
      attribute 271017 "label"
	private explicit_type ""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The name/id of the outcome"
      end

      attribute 271145 "dimensions"
	private explicit_type ""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The dimensions of the outcome as a tuple eg speed (ms-1) is distance=[1], time=[-1]. "
      end

      attribute 271273 "formats"
	private explicit_type ""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The list of formats that this outcome can take (eg geometry specifications as xyz, z-mat)"
      end

      attribute 271401 "units"
	private explicit_type ""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The units of the outcome. The first unit is SI."
      end

      attribute 271529 "scales"
	private explicit_type ""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The set of values used to scale non-si units to the standard."
      end
    end

    class 357545 "report_memo"
      visibility package 
      nactuals 1
      actual class class_ref 178601 // basic_names
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      ncouples 1
      key "base_class" value "purpletree::dom::element"
      comment "This contains the settings used to generate a particular report using a standard view object.  It is used by the view object to specialise its operation."
      operation 1137961 "create_report"
	public explicit_return_type "element"
	nparams 1
	  param in name "a_report" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0}& ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0}& ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Create a new report element"
      end

      classrelation 425001 // <generalisation>
	relation 414761 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 425001 // <generalisation>
	  b parent class_ref 432681 // basic_datum
      end

      classrelation 308009 // <generalisation>
	relation 300969 ---|>
	  a private
	    cpp default "${type}"
	    classrelation_ref 308009 // <generalisation>
	  b parent class_ref 178601 // basic_names
      end

      classrelation 308137 // <generalisation>
	relation 301097 ---|>
	  a private
	    cpp default "${type}"
	    classrelation_ref 308137 // <generalisation>
	  b parent class_ref 361641 // utility_
      end

      classrelation 295721 // m_view (<directional aggregation>)
	relation 289449 o-->
	  a role_name "m_view" multiplicity "1" private
	    comment "The view element this memento is for."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 295721 // m_view (<directional aggregation>)
	  b parent class_ref 353961 // view
      end

      operation 1139753 "owner_report"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}{
  return @{get_utf8} (get_attribute (view_name ())); }
"
	
	
	
	
	comment "This gets the label of the report"
      end

      operation 1139881 "owner_report"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_view" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract}{
  set_attribute (view_name (), @{set_utf8}(${p0})); }
"
	
	
	
	
      end

      operation 1158313 "content"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
  std::stringstream Result;
  content (Result);
  return Result.str (); }
"
	
	
	
	
	comment "This concatenates the content of all text nodes below this one into a single string.  No special formatting is applied, in particular no characters are added between text strings.  For finer control of the output string use the content(a_formatter) method."
      end

      operation 1158185 "content"
	stereotype "get"
	const public explicit_return_type "void"
	nparams 1
	  param inout name "a_os" explicit_type "std::ostream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "This concatenates the content of all text nodes below this one into a single string.  No special formatting is applied, in particular no characters are added between text strings.  For finer control manually manipulate the contained nodes."
      end

      operation 1155497 "operator="
	public explicit_return_type "report_memo"
	nparams 1
	  param in name "source" explicit_type "report_memo"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} {
  @{base_class}::${name} (${p0});
  return *this; }
"
	
	
	
	
      end

      operation 1155113 "report_memo"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}: @{base_class} () {}
"
	
	
	
	
      end

      operation 1155625 "report_memo"
	stereotype "base"
	public explicit_return_type ""
	nparams 1
	  param in name "a_node" explicit_type "node"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}: @{base_class} (${p0}) {
  COMPCHEM_REQUIRE (${p0}.is_null() or check_name (view_memo_name (), ${p0})
          , \"Passed element has the wrong tag name.\"); }"
	
	
	
	
      end

      operation 1155753 "report_memo"
	stereotype "base"
	public explicit_return_type ""
	nparams 1
	  param in name "a_elem" explicit_type "element"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}: @{base_class} (${p0}) {
  COMPCHEM_REQUIRE (${p0}.is_null() or check_name (view_memo_name (), ${p0})
          , \"Passed element has the wrong tag name.\"); }
"
	
	
	
	
      end

      operation 1155369 "report_memo"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" explicit_type "report_memo"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}: @{base_class} (${p0}) {}
"
	
	
	
	
      end

      operation 1155241 "~report_memo"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {}
"
	
	
	
	
      end
    end

    class 361641 "utility_"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 265385 "s_separate_compound"
	class_attribute private explicit_type "bool"
	init_value "(false)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Whether each compound should be in a separate file."
      end

      attribute 265513 "s_separate_formula"
	class_attribute private explicit_type "bool"
	init_value "(true)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Whether each formula should have a separate file."
      end

      attribute 265257 "s_separate_project"
	class_attribute private explicit_type "bool"
	init_value "(true)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Whether each project should be in a separate file."
      end

      operation 1159721 "add_to_list"
	class_operation public explicit_return_type "void"
	nparams 3
	  param in name "a_item" explicit_type "string"
	  param in name "a_attr" explicit_type "dom_string"
	  param in name "a_node" explicit_type "element"
	constraint "\\pre not a_item.empty and not a_attr.empty and not a_node.is_null
\\post list contain a_item (unchecked)"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Add a_item to the list of items in a_attr of a_node.  Only add the item iff a_item is not present.

\\pre not a_item.empty and not a_attr.empty and not a_node.is_null
\\post list contain a_item (unchecked)"
      end

      operation 1158057 "ancestor_with_name"
	class_operation public explicit_return_type "node"
	nparams 2
	  param in name "a_name" explicit_type "dom_string"
	  param in name "a_node" explicit_type "node"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Return the parent iff it is an element with the given name, otherwise returns a nul node."
      end

      operation 324521 "check_name"
	class_operation public explicit_return_type "bool"
	nparams 2
	  param in name "a_name" explicit_type "dom_string"
	  param in name "a_node" explicit_type "node"
	constraint "\\pre not a_node.is_null
\\pre not a_name.empty"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Does `a_name` match the value of `a_node`s node_name.

\\pre not a_node.is_null
\\pre not a_name.empty"
      end

      operation 1183017 "create_element"
	class_operation public explicit_return_type "element"
	nparams 5
	  param in name "a_src_tag" explicit_type "dom_string"
	  param in name "a_tag" explicit_type "dom_string"
	  param in name "a_label" explicit_type "string"
	  param in name "a_own_file" explicit_type "bool"
	  param in name "a_parent" explicit_type "element"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}std::pair < ${type}, ${type} > ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}std::pair < ${type}, ${type} > ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Create an element named a_tag.  If it should be in a_own_file, then create 
a_src_tag element and new document as well.  Returns a pair of elements.  
If the second element (src element) is not null then it should be appended 
to a_parent, otherwise the first (full element) should.  Always return the 
first element."
      end

      operation 325929 "get_element"
	class_operation public explicit_return_type "element"
	nparams 2
	  param in name "a_name" explicit_type "dom_string"
	  param in name "a_node" explicit_type "element"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract} {
  REQUIRE(not ${p1}.is_null (), \"Cannot get anything from a null node.\");
  REQUIRE(false == ${p0}.empty(), \"Cannot return unnamed element\");
  return next_element_with_name_priv (${p0}, ${p1}.first_child ()); }
"
	
	
	
	
	comment "Get the first node content with node_name() = `a_name` as content in this object? Content is defined as only ELEMENT_NODE type nodes.

\\pre a_node.ELEMENT_NODE = a_node.node_type()
\\pre false = a_name.empty()
\\result may be nul"
      end

      operation 1142057 "get_element"
	class_operation public explicit_return_type "element"
	nparams 3
	  param in name "a_name1" explicit_type "dom_string"
	  param in name "a_name2" explicit_type "dom_string"
	  param in name "a_node" explicit_type "element"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract} {
  REQUIRE(not ${p2}.is_null (), \"Cannot get anything from a null node.\");
  REQUIRE(false == ${p0}.empty(), \"Cannot return unnamed element\");
  REQUIRE(false == ${p1}.empty(), \"Cannot return unnamed element\");
  return next_element_with_name_priv (${p0}, ${p1}, ${p2}.first_child ()); }"
	
	
	
	
	comment "Get the first node content with node_name() = `a_name1` or `a_name2` as content in this object? Content is defined as only ELEMENT_NODE type nodes.

\\pre not a_node.is_null and a_node.ELEMENT_NODE = a_node.node_type()
\\pre false = a_name1.empty() and a_name2.empty()
\\result may be nul"
      end

      operation 1142569 "get_element"
	class_operation public explicit_return_type "element"
	nparams 3
	  param in name "a_name_begin" explicit_type "dom_string"
	  param in name "a_name_end" explicit_type "dom_string"
	  param in name "a_node" explicit_type "element"
	constraint "\\pre not a_node.is_null and a_node.ELEMENT_NODE = a_node.node_type()
\\pre NULL != a_name_begin and NULL != a_name_end"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Get the first node content with node_name() in [a_name_begin,a_name_end) as content in a_node? Content is defined as only ELEMENT_NODE type nodes.

\\pre not a_node.is_null and a_node.ELEMENT_NODE = a_node.node_type()
\\pre NULL != a_name_begin and NULL != a_name_end and a_name_begin < a_name_end
\\pre (implied) no string may be empty as internally uses check_name
\\result may be nul"
      end

      operation 1142313 "get_element_with_attribute"
	class_operation public explicit_return_type "element"
	nparams 4
	  param in name "a_name" explicit_type "dom_string"
	  param in name "a_attr" explicit_type "dom_string"
	  param in name "a_value" explicit_type "dom_string"
	  param in name "a_node" explicit_type "element"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}${)}${const}${volatile}${throw}${abstract} {
  REQUIRE(not a_node.is_null (), \"Cannot search a nul node.\");
  REQUIRE(false == a_name.empty(), \"Cannot return an unnamed element\");
  REQUIRE(false == a_attr.empty(), \"Cannot find an unnamed attribute\");
  REQUIRE(false == a_value.empty(), \"Cannot find an unspecified value\");
  return ${name}_priv (${p0}, ${p1}, ${p2}, ${p3}); }
"
	
	
	
	
	comment "Get the first node content with node_name() = `a_name` as content in this object? Content is defined as only ELEMENT_NODE type nodes.

\\pre a_node.ELEMENT_NODE = a_node.node_type()
\\pre false = a_name.empty()
\\result may be nul"
      end

      operation 1177897 "get_element_with_attribute_with_self"
	class_operation public explicit_return_type "element"
	nparams 4
	  param in name "a_name" explicit_type "dom_string"
	  param in name "a_attr" explicit_type "dom_string"
	  param in name "a_value" explicit_type "dom_string"
	  param in name "a_node" explicit_type "element"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}${)}${const}${volatile}${throw}${abstract} {
  REQUIRE(not a_node.is_null (), \"Cannot search a nul node.\");
  REQUIRE(false == a_name.empty(), \"Cannot return an unnamed element\");
  REQUIRE(false == a_attr.empty(), \"Cannot find an unnamed attribute\");
  REQUIRE(false == a_value.empty(), \"Cannot find an unspecified value\");
  return (check_name (${p0}, ${p3}) and a_value == ${p3}.get_attribute (${p1}))? ${p3}: get_element_with_attribute_priv (${p0}, ${p1}, ${p2}, ${p3}); }
"
	
	
	
	
	comment "Get the first node content with node_name() = `a_name` as this object or its content? Content is defined as only ELEMENT_NODE type nodes.

\\pre a_node.ELEMENT_NODE = a_node.node_type()
\\pre false = a_name.empty()
\\result may be nul"
      end

      operation 1196073 "get_element_with_attribute_priv"
	class_operation private explicit_return_type "element"
	nparams 4
	  param in name "a_name" explicit_type "dom_string"
	  param in name "a_attr" explicit_type "dom_string"
	  param in name "a_value" explicit_type "dom_string"
	  param in name "a_node" explicit_type "element"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Get the first node content with node_name() = `a_name` as content in this object? Content is defined as only ELEMENT_NODE type nodes.

\\pre a_node.ELEMENT_NODE = a_node.node_type()
\\pre false = a_name.empty()
\\result may be nul"
      end

      operation 1167273 "insert_element"
	class_operation public explicit_return_type "void"
	nparams 4
	  param in name "a_sibling_begin" explicit_type "dom_string"
	  param in name "a_sibling_end" explicit_type "dom_string"
	  param inout name "a_new_node" explicit_type "element"
	  param inout name "a_node" explicit_type "element"
	constraint "a_sibling_begin /= nul, a_sibling_end /= nul and a_sibling < a_sibling_end
not a_node.is_null and not a_new_node.is_null"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${abstract};"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl} {
COMPCHEM_REQUIRE (not ${p2}.is_null (), \"Can not insert a nul node\");
// Other precondition checks performed in get_element
purpletree::dom::node l_node (get_element (${p0}, ${p1}, ${p3}));
if (l_node.is_null ()) { ${p3}.append_child (${p2}); }
else if (not l_node.is_equal (${p2})) { ${p3}.insert_before (${p2}, l_node); }}"
	
	
	
	
	comment "This method inserts the a_new_node into a_node.  The first node with one of the names in the list [a_sibling_begin, a_sibling_end) is found a_new_node is inserted before it. It there are no nodes found nodes then a_new_node is simply appended.

If a_new_node == insert position then no change is made."
      end

      operation 1183145 "is_separate_compound"
	stereotype "get"
	class_operation public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
  return s_separate_compound; }
"
	
	
	
	
      end

      operation 1183273 "is_separate_formula"
	stereotype "get"
	class_operation public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
  return s_separate_formula; }
"
	
	
	
	
      end

      operation 1183401 "is_separate_project"
	stereotype "get"
	class_operation public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
  return s_separate_project; }
"
	
	
	
	
      end

      operation 1141673 "next_element_with_name"
	class_operation public explicit_return_type "element"
	nparams 2
	  param in name "a_name" explicit_type "dom_string"
	  param in name "a_node" explicit_type "element"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract} {
  COMPCHEM_REQUIRE (not ${p1}.is_null (), \"Cannot get relatives of a nul node.\");
  COMPCHEM_REQUIRE (not ${p0}.empty (), \"Cannot find an unnamed tag.\");
  return ${name}_priv (${p0}, ${p1}.next_sibling ()); }"
	
	
	
	
	comment "Return the next_sibling iff it is an element with the given name (skipping whitespace nodes).  Otherwise return a nul node."
      end

      operation 1170601 "next_element_with_name"
	class_operation public explicit_return_type "element"
	nparams 3
	  param in name "a_name1" explicit_type "dom_string"
	  param in name "a_name2" explicit_type "dom_string"
	  param in name "a_node" explicit_type "element"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract} {
  COMPCHEM_REQUIRE (not ${p2}.is_null (), \"Cannot get relatives of a nul node.\");
  COMPCHEM_REQUIRE (not ${p0}.empty (), \"Cannot find unnamed tag.\");
  COMPCHEM_REQUIRE (not ${p1}.empty (), \"Cannot find unnamed tag.\");
  return ${name}_priv (${p0}, ${p1}, ${p2}.next_sibling ()); }
"
	
	
	
	
	comment "Return the next_sibling iff it is an element with the given name (skipping whitespace nodes).  Otherwise return a nul node."
      end

      operation 1200809 "next_element_with_name_priv"
	class_operation public explicit_return_type "element"
	nparams 2
	  param in name "a_name" explicit_type "dom_string"
	  param in name "a_node" explicit_type "node"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Return the next_sibling iff it is an element with the given name (skipping whitespace nodes).  Otherwise return a nul node."
      end

      operation 1200937 "next_element_with_name_priv"
	class_operation public explicit_return_type "element"
	nparams 3
	  param in name "a_name1" explicit_type "dom_string"
	  param in name "a_name2" explicit_type "dom_string"
	  param in name "a_node" explicit_type "node"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Return the next_sibling iff it is an element with the given name (skipping whitespace nodes).  Otherwise return a nul node."
      end

      operation 1141801 "previous_element_with_name"
	class_operation public explicit_return_type "node"
	nparams 2
	  param in name "a_name" explicit_type "dom_string"
	  param in name "a_node" explicit_type "node"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Return the next_sibling iff it is an element with the given name (skipping whitespace nodes).  Otherwise return a nul node."
      end

      operation 1170729 "previous_element_with_name"
	class_operation public explicit_return_type "node"
	nparams 3
	  param in name "a_name1" explicit_type "dom_string"
	  param in name "a_name2" explicit_type "dom_string"
	  param in name "a_node" explicit_type "node"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Return the next_sibling iff it is an element with the given name (skipping whitespace nodes).  Otherwise return a nul node."
      end

      operation 1183529 "register_options"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "a_opt_set" type class_ref 350761 // options_description
	  param inout name "a_conf_set" type class_ref 350761 // options_description
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Register options for the data scheme library.  Th a_opt_set is used for processing all the configuration sources.  The a_conf_set is only used for the configuration files."
      end

      operation 1142441 "set_element"
	class_operation public explicit_return_type "void"
	nparams 4
	  param in name "a_sibling_begin" explicit_type "dom_string"
	  param in name "a_sibling_end" explicit_type "dom_string"
	  param inout name "a_new_node" explicit_type "node"
	  param inout name "a_node" explicit_type "node"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "This method inserts the a_new_node into a_node.  Firstly it tries to find a node with the same name.  If such a node exists then it is checked for equality.  If a_new_node is not equal to the old node, then it replaces the old node.  If there are no existing nodes, then the first node with one of the names in the list [a_sibling_begin, a_sibling_end) is found.  If such is found then a_new_node is inserted before it. It there are no sibling nodes then a_new_node is appended.

This is similar to insert_element except that it allows only one element with a_new_node.node_name to be in the child list. It replaces one if it exists."
      end

      operation 1159849 "split_attribute_list"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "a_set" explicit_type "string"
	  param in name "a_attr" explicit_type "dom_string"
	  param in name "a_node" explicit_type "element"
	constraint "not a_attr.empty
not a_node.is_null"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}std::set< ${t0} > & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}std::set< ${t0} > & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Add a_item to the list of items in a_attr of a_node.  Only add the item iff a_item is not present."
      end

      operation 1173417 "target_name"
	class_operation public explicit_return_type "dom_string"
	nparams 1
	  param in name "a_tag" explicit_type "dom_string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Look up the target tag_name for a proxy element with a_tag."
      end

      classrelation 394281 // <dependency>
	relation 385321 -_->
	  a default
	    cpp default "#include in header"
	    classrelation_ref 394281 // <dependency>
	  b parent class_ref 361385 // filesystem
      end

      classrelation 395049 // <dependency>
	relation 386089 -_->
	  a package
	    cpp default "#include in source"
	    classrelation_ref 395049 // <dependency>
	  b parent class_ref 361385 // filesystem
      end

      classrelation 395177 // <dependency>
	relation 386217 -_->
	  a default
	    cpp default "#include in header"
	    classrelation_ref 395177 // <dependency>
	  b parent class_ref 178601 // basic_names
      end

      classrelation 395305 // <dependency>
	relation 386345 -_->
	  a default
	    cpp default "#include in header"
	    classrelation_ref 395305 // <dependency>
	  b parent class_ref 360233 // xml_access_helper
      end
    end

    class 361769 "unused"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 1117609 "chem_notation_name"
	class_operation public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
static ${type} Result (@{c2xmlstr}(\"chem-notation\"));
return Result; }
"
	
	
	
	
	comment "Name of chemical notation container element in XML appl"
      end

      operation 1117865 "chem_note_name"
	class_operation public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
static ${type} Result (@{c2xmlstr} (\"chem-note\"));
return Result; }
"
	
	
	
	
	comment "Name of chemical notation reference attribute in XML appl"
      end

      operation 1119145 "formula_src_name"
	class_operation public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
  static ${type} Result (@{c2xmlstr}(\"form-src\"));
  return Result; }
"
	
	
	
	
	comment "Name of link element to a forumla element in XML appl"
      end

      operation 1122089 "formulation_name"
	class_operation public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
static ${type} Result (@{c2xmlstr}(\"formulation\"));
return Result; }
"
	
	
	
	
	comment "Name of formula container element in XML appl"
      end

      operation 1156393 "source_id_name"
	class_operation private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
static ${type} Result (@{c2xmlstr}(\"src-id\"));
return Result; }
"
	
	
	
	
	comment "The name of the scale attribute in the XML appl."
      end

      operation 1158441 "view_name"
	class_operation public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
static ${type} Result (@{c2xmlstr}(\"view\"));
return Result; }
"
	
	
	
	
	comment "Name of the \"type\" attribute in 'view' elements"
      end

      operation 1159593 "view_memo_name"
	class_operation public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
static ${type} Result (@{c2xmlstr}(\"view-memo\"));
return Result; }
"
	
	
	
	
	comment "Name of the \"type\" attribute in 'view' elements"
      end

      operation 1141929 "parent_element_with_name"
	class_operation public explicit_return_type "node"
	nparams 2
	  param in name "a_name" explicit_type "dom_string"
	  param in name "a_node" explicit_type "node"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Return the parent iff it is an element with the given name, otherwise returns a nul node."
      end

      operation 331817 "get_attribute_priv"
	class_operation private explicit_return_type "dom_string"
	nparams 2
	  param in name "a_name" explicit_type "dom_string"
	  param in name "a_node" explicit_type "node"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Get a attribute value as a dom_string from a DOM node.

(\\pre has_attribute(...) should be checked elsewhere)"
      end

      operation 325545 "get_value"
	class_operation public explicit_return_type "string"
	nparams 1
	  param in name "a_node" explicit_type "node"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Return a string representation of the value content of `a_node`. This may be empty."
      end

      operation 325801 "has_element"
	class_operation public explicit_return_type "bool"
	nparams 2
	  param in name "a_name" explicit_type "dom_string"
	  param in name "a_node" explicit_type "node"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Is there content with node_name() = `a_name` as content in this object? Content is defined as only ELEMENT_NODE type nodes.

\\pre a_node.ELEMENT_NODE = a_node.node_type()
\\pre false = a_name.empty()"
      end

      operation 325673 "has_content"
	class_operation public explicit_return_type "bool"
	nparams 1
	  param in name "a_node" explicit_type "node"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Is there sub-object content in this object? Content is defined as any ELEMENT_NODE type nodes.

\\pre a_node.ELEMENT_NODE = a_node.node_type()"
      end

      operation 324393 "has_attribute"
	class_operation public explicit_return_type "bool"
	nparams 2
	  param in name "a_name" explicit_type "dom_string"
	  param in name "a_node" explicit_type "node"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Test if a DOM node has the named attribute."
      end

      operation 324649 "is_element"
	class_operation public explicit_return_type "bool"
	nparams 1
	  param in name "a_node" explicit_type "node"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Is this an ELEMENT_NODE type DOM node?"
      end

      operation 324265 "get_attribute"
	class_operation public explicit_return_type "string"
	nparams 2
	  param in name "a_name" explicit_type "dom_string"
	  param in name "a_node" explicit_type "node"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "Get a attribute value as a C++ string from a DOM node. (calls get_attribute_priv)

(\\pre has_attribute(...) should be checked elsewhere)"
      end
    end

    class 357673 "value"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A value type is a single or vector quantity that has physical dimensions and an optional scale.  

This type represents a scientific value.  It is represented by three components. (1) as a vector of the exponents of physical dimensions. (2) as a scalar, or non-SI unit name that can be used to find a scalar, that converts the current value onot the SI unit scale. (3) an actual value.  It is used to describe a physical measurable quantity."
      class 357801 "validator_t"
	visibility package stereotype "typedef" explicit_base_type "string"
	cpp_decl "${comment}typedef bool (*${name})(const ${type}&);
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      attribute 261929 "is_valid_dim"
	class_attribute private explicit_type "validator_t"
	init_value " (NULL)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Functor to check that a particular string represents a valid dimension"
      end

      attribute 262057 "is_valid_scale"
	class_attribute private explicit_type "validator_t"
	init_value " (NULL)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Check if a string represent a valid scale"
      end

      attribute 261801 "m_amount"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The 'value' of this object"
      end

      attribute 261545 "m_dim"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The unit dimensions of the property. This is to allow for conversion between different
software. Default is a dimensionless value.

The @dim contains a comma separated list of dimension constants. They specify the
unit dimensions of the content, for  example velocity (m/s) would be \"1,-1\" and
force (N=kg m /s2) would be \"1,-2,1\". The order of dimensions is fixed. The list
need only extend to the last non-zero element, so volume would be \"3\" not
\"3,0,0,0...\"."
      end

      attribute 261673 "m_scale"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A optional scaling for the datum value.  This can be SI recognised letters (\"k\"=kilo,
\"n\"=nano etc), an arbitrary number (\"1E-6\" or \"2345.67\") or an non-SI unit name (eg
\"hartree\").  It is recommended that unit names are not used, instead the constant that
scales the non-SI unit to the SI unit be used.

This value is a multiplier of the content. Some programs specify data as a
ratio of two integers, here the divisor can be specified as the scale using \"1/.....\"
"
      end

      operation 1142697 "amount"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract} { return m_${name}; }
"
	
	
	
	
	comment "The 'value' of this object"
      end

      operation 1142825 "amount"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_val" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0}& ${p0}${)}${const}${volatile}${throw}${abstract} { m_${name}.assign (${p0}); }
"
	
	
	
	
	comment "The 'value' of this object"
      end

      operation 1142953 "dim"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract} { return m_${name}; }
"
	
	
	
	
	comment "The unit dimensions of the property. This is to allow for conversion between different
software. Default is a dimensionless value.

The @dim contains a comma separated list of dimension constants. They specify the
unit dimensions of the content, for  example velocity (m/s) would be \"1,-1\" and
force (N=kg m /s2) would be \"1,-2,1\". The order of dimensions is fixed. The list
need only extend to the last non-zero element, so volume would be \"3\" not
\"3,0,0,0...\"."
      end

      operation 1143081 "dim"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_val" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0}& ${p0}${)}${const}${volatile}${throw}${abstract} {
 REQUIRE (not is_valid_${name} or (*is_valid_${name})(${p0}), \"Cannot set attribute as value is invalid\");
 m_${name}.assign (${p0}); }
"
	
	
	
	
	comment "The unit dimensions of the property. This is to allow for conversion between different
software. Default is a dimensionless value.

The @dim contains a comma separated list of dimension constants. They specify the
unit dimensions of the content, for  example velocity (m/s) would be \"1,-1\" and
force (N=kg m /s2) would be \"1,-2,1\". The order of dimensions is fixed. The list
need only extend to the last non-zero element, so volume would be \"3\" not
\"3,0,0,0...\"."
      end

      operation 1143209 "scale"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type}& ${name}${(}${)}${const}${volatile}${throw}${abstract} { return m_${name}; }
"
	
	
	
	
	comment "A optional scaling for the datum value.  This can be SI recognised letters (\"k\"=kilo,
\"n\"=nano etc), an arbitrary number (\"1E-6\" or \"2345.67\") or an non-SI unit name (eg
\"hartree\").  It is recommended that unit names are not used, instead the constant that
scales the non-SI unit to the SI unit be used.

This value is a multiplier of the content. Some programs specify data as a
ratio of two integers, here the divisor can be specified as the scale using \"1/.....\"
"
      end

      operation 1143337 "scale"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_val" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0}& ${p0}${)}${const}${volatile}${throw}${abstract} { 
 REQUIRE (not is_valid_${name} or (*is_valid_${name})(${p0}), \"Cannot set attribute as value is invalid\");
 m_${name}.assign (${p0}); }
"
	
	
	
	
	comment "A optional scaling for the datum value.  This can be SI recognised letters (\"k\"=kilo,
\"n\"=nano etc), an arbitrary number (\"1E-6\" or \"2345.67\") or an non-SI unit name (eg
\"hartree\").  It is recommended that unit names are not used, instead the constant that
scales the non-SI unit to the SI unit be used.

This value is a multiplier of the content. Some programs specify data as a
ratio of two integers, here the divisor can be specified as the scale using \"1/.....\"
"
      end

      operation 1143465 "value"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}
: m_amount ()
, m_dim ()
, m_scale () {}
"
	
	
	
	
      end

      operation 1143593 "~value"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {}
"
	
	
	
	
      end

      operation 1143721 "value"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" explicit_type "value"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
: m_amount (${p0}.m_amount)
, m_dim (${p0}.m_dim)
, m_scale (${p0}.m_scale)
{}
"
	
	
	
	
      end

      operation 1143849 "operator="
	public explicit_return_type "value"
	nparams 1
	  param in name "source" explicit_type "value"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} {
 m_amount.assign (${p0}.m_amount);
 m_dim.assign (${p0}.m_dim);
 m_scale.assign (${p0}.m_scale);
 return *this;
}

"
	
	
	
	
      end
    end

    class 353961 "view"
      visibility package 
      nactuals 1
      actual class class_ref 178601 // basic_names
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      ncouples 1
      key "base_class" value "purpletree::dom::element"
      comment "The view is an element containing links to documents that can process the   
database information into reports. This implementation forces these documents to be
an XSLT stylesheet. The content of the label is a user defined name for the data report.

In parallel to this DTD ise development of a set of XSLT stylesheets. The design goal
of these stylesheets is to allow document users the ability to: (A) Focus report  
development at \"formula\" and lower levels, with projects and compounds  being handled by 
the \"system\". (B) Allow reports to be selected from this list, using a variable set during 
invocation. "
      classrelation 424873 // <generalisation>
	relation 414633 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 424873 // <generalisation>
	  b parent class_ref 432681 // basic_datum
      end

      classrelation 307753 // <generalisation>
	relation 300713 ---|>
	  a private
	    cpp default "${type}"
	    classrelation_ref 307753 // <generalisation>
	  b parent class_ref 178601 // basic_names
      end

      classrelation 307881 // <generalisation>
	relation 300841 ---|>
	  a private
	    cpp default "${type}"
	    classrelation_ref 307881 // <generalisation>
	  b parent class_ref 361641 // utility_
      end

      attribute 259369 "type"
	private explicit_type ""
	cpp_decl ""
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type \"MIME\" type of this report (currently fixed to refer to an XSL stylesheet)
"
      end

      attribute 259497 "label"
	private explicit_type ""
	cpp_decl ""
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The label used to refer to this report "
      end

      operation 1153193 "href"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}{
  return @{get_utf8} (get_attribute (${name}_name ())); }
"
	
	
	
	
      end

      operation 1153321 "href"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_type" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0}& ${p0}${)}${const}${volatile}${throw}${abstract}{
  set_attribute (${name}_name (), @{c2xmlstr} (${p0})); }
"
	
	
	
	
      end

      operation 1152937 "label"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}{
  return @{get_utf8} (get_attribute (${name}_name ())); }
"
	
	
	
	
      end

      operation 1153065 "label"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_type" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0}& ${p0}${)}${const}${volatile}${throw}${abstract}{
  set_attribute (${name}_name (), @{c2xmlstr} (${p0})); }
"
	
	
	
	
      end

      operation 1158697 "next"
	public explicit_return_type "view"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}{
  return next_element_with_name (view_name (), *this); }
"
	
	
	
	
      end

      operation 1152553 "operator="
	public explicit_return_type "view"
	nparams 1
	  param in name "source" explicit_type "view"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} {
  purpletree::dom::element::operator= (${p0});
  return *this;  }
"
	
	
	
	
      end

      operation 1158569 "previous"
	public explicit_return_type "view"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}{
  return previous_element_with_name (view_name (), *this); }
"
	
	
	
	
      end

      operation 1139241 "type"
	stereotype "get"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract}{
  return @{get_utf8} (get_attribute (${name}_name ())); }
"
	
	
	
	
      end

      operation 1139369 "type"
	stereotype "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "a_type" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0}& ${p0}${)}${const}${volatile}${throw}${abstract}{
  set_attribute (${name}_name (), @{c2xmlstr} (${p0})); }
"
	
	
	
	
      end

      operation 1152169 "view"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}: purpletree::dom::element () {}"
	
	
	
	
      end

      operation 1152681 "view"
	stereotype "base"
	public explicit_return_type ""
	nparams 1
	  param in name "a_node" explicit_type "node"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} : @{base_class} (${p0}) {
  COMPCHEM_REQUIRE (${p0}.is_null() or check_name (view_name (), ${p0})
          , \"Passed element has the wrong tag name.\"); }
"
	
	
	
	
      end

      operation 1152809 "view"
	stereotype "base"
	public explicit_return_type ""
	nparams 1
	  param in name "a_element" explicit_type "element"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw} : @{base_class} (${p0}) {
  COMPCHEM_REQUIRE (${p0}.is_null() or check_name (view_name (), ${p0})
          , \"Passed element has the wrong tag name.\"); }
"
	
	
	
	
      end

      operation 1152425 "view"
	stereotype "copy"
	public explicit_return_type ""
	nparams 1
	  param in name "source" explicit_type "view"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}: purpletree::dom::element (${p0}) {}
"
	
	
	
	
      end

      operation 1152297 "~view"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {}
"
	
	
	
	
      end
    end
  end

  deploymentview 157225 "unused"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 156329 "value"
      stereotype "source"
      associated_classes
	class_ref 357673 // value
      end
    end

    artifact 157737 "utility"
      stereotype "source"
      associated_classes
	class_ref 361641 // utility_
      end
      comment "
// Manual Includes in source
#include <boost/format.hpp>
#include <boost/tokenizer.hpp>
// -"
    end

    artifact 142761 "report"
      stereotype "source"
      associated_classes
	class_ref 353961 // view
      end
    end

    artifact 155945 "report_memo"
      stereotype "source"
      associated_classes
	class_ref 357545 // report_memo
      end
    end

    artifact 167721 "outcome"
      stereotype "source"
      associated_classes
	class_ref 371625 // basic_outcome
      end
    end
  end
end
