class plugin_filter_direct
!!!1087145.cpp!!!	output(inout a_twiglet : any) : void
REQUIRE (is_valid (), "Can not get any information with an invalid plugin.");
// Perform operation
const int l_esize (256);
char l_errbuf [l_esize];
m_error = base_plugin_filter::output (a_twiglet, &l_errbuf[0], l_esize);
// If an error occurred capture error message.
if (0 != m_error) {
  l_errbuf[l_esize - 1] = '\0';
  m_error_msg << &l_errbuf[0]; }
!!!1087657.cpp!!!	plugin_filter_direct()
: m_error (0)
, m_error_msg () {
if (&::plugin_object == NULL) {
  m_error = 2;
  m_error_msg << "Could not find valid filter object.\n"; }
else {
  plugin (&::plugin_object);
  // Object created was invalid!
  if (not is_valid ()) {
    m_error = 2;
    m_error_msg << "Found plugin object is not valid!"; }}}
!!!1087273.cpp!!!	process(inout a_filetype : base_filetype) : void
// PRE
REQUIRE(true == is_valid (), "Filter must be valid before processing.");
// LOCAL
const int l_size(256);
char l_errbuf[l_size];
char l_linebuf[l_size];
// DO
// Test is suitable
m_error = base_plugin_filter::can_process (a_filetype, &l_errbuf[0], l_size);
if (1 == m_error) {
  m_error_msg << name () << " is not usable for current file\n";
  finalise(); }
else if (0 != m_error) {
  // Any other non-zero value is an error
  l_errbuf[l_size - 1] = '\0';
  m_error_msg << name () << ": " << &l_errbuf[0];
  finalise (); }
// Set error is not suitable
// Perform processing.
for (int l_lsize = l_size;
     0 == m_error
	 && a_filetype.next_segment (&l_linebuf[0], l_lsize);
     l_lsize = l_size) {
  m_error = base_plugin_filter::process (&l_linebuf[0], l_lsize
		    , &l_errbuf[0], l_size);
  if (0 != m_error) {
    // Ensure nul terminated
    l_errbuf[l_size - 1] = '\0';
    m_error_msg << &l_errbuf[0]; }}
// Set error if not end of file
if (0 == m_error && not a_filetype.eof ()) {
  m_error = 1;
  m_error_msg << name () << "Reading of file terminated before end of file."; }
// END
