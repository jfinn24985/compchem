class matcher_filter
!!!1541161.cpp!!!	make_matcher(in a_line : string, inout a_mode : mode_constant) : basic_matcher
// Set a_mode to default (first)
a_mode = first;
// Helper class to provide two internal conversion functions.
class helper__
{
public:
  static int convert_type (std::string a_type)
  {
    COMPCHEM_REQUIRE (not a_type.empty (), "Invalid matcher phrase with no type");
    boost::to_lower (a_type); // Convert to lower case
    const int invalid_string (-1);
    int valid_matcher_type_string (invalid_string);
    if ("byte" == a_type) valid_matcher_type_string = 0;
    else if ("line" == a_type) valid_matcher_type_string = 1;
    else if ("string" == a_type) valid_matcher_type_string = 2;
    else if ("regex" == a_type) valid_matcher_type_string = 3;
    COMPCHEM_ALWAYS (valid_matcher_type_string != invalid_string, "Invalid matcher type \"" + a_type +  "\", can be 'byte', 'line', 'string' or 'regex'");
    return valid_matcher_type_string;
  }
  static mode_constant convert_mode (std::string a_mode_str)
  {
    COMPCHEM_REQUIRE (not a_mode_str.empty (), "Invalid matcher phrase with no type");
    boost::to_lower (a_mode_str); // Convert to lower case
    mode_constant Result;
    bool valid_mode_string (false);
    if ("first" == a_mode_str) { Result = first; valid_mode_string = true; }
    else if ("last" == a_mode_str) { Result = last; valid_mode_string = true; }
    else if ("accum" == a_mode_str) { Result = accum; valid_mode_string = true; }
    COMPCHEM_ALWAYS (valid_mode_string, "Invalid matcher mode \"" + a_mode_str +  "\", can be 'first', 'last' or 'accum'");
    return Result;
  }
};
//////////////////////
// Split the content into tokens and process
std::auto_ptr< basic_matcher > Result;
boost::tokenizer < boost::escaped_list_separator < char > > l_defn_tokenizer (a_line);
boost::tokenizer < boost::escaped_list_separator < char > >::iterator l_defn_iter (l_defn_tokenizer.begin ());
COMPCHEM_ALWAYS (l_defn_iter != l_defn_tokenizer.end () and not l_defn_iter->empty ()
                 , "Invalid filter definition, is empty or has no type text.");
// First element should be a type.
// 'byte'|'lines'|'string'|'regex'

switch (helper__::convert_type (*l_defn_iter))
{
case 0:
{
  // Byte matcher. Next element should be a number
  ++l_defn_iter;
  COMPCHEM_ALWAYS (l_defn_iter != l_defn_tokenizer.end (), "Invalid filter 'byte' definition with byte count");
  unsigned int l_count (boost::lexical_cast< unsigned int >(*l_defn_iter));
  Result.reset (new matcher_bytes (l_count));
}
break;
case 1:
{
  // Byte matcher. Next element should be a number
  ++l_defn_iter;
  COMPCHEM_ALWAYS (l_defn_iter != l_defn_tokenizer.end (), "Invalid filter 'line' definition with line count");
  unsigned int l_count (boost::lexical_cast< unsigned int >(*l_defn_iter));
  Result.reset (new matcher_lines (l_count));
}
case 2:
{
  // Have a string matcher
  std::string l_match;
  ++l_defn_iter;
  COMPCHEM_ALWAYS (l_defn_iter != l_defn_tokenizer.end (), "Invalid filter 'string' definition with match phrase");
  l_match.assign (*l_defn_iter);
  ++l_defn_iter;
  if (l_defn_iter == l_defn_tokenizer.end () and l_defn_iter->empty ())
  {
    // Search string type.
    Result.reset (new matcher_string_search (l_match));
  }
  else
  {
    std::string l_format (*l_defn_iter);
    ++l_defn_iter;
    if (l_defn_iter != l_defn_tokenizer.end () and l_defn_iter->empty ())
    {
      a_mode = helper__::convert_mode (*l_defn_iter);
    }
    Result.reset (new matcher_string (l_match, l_format));
  }
}
break;
case 3:
{
  // Have a regex matcher
  std::string l_match;
  ++l_defn_iter;
  COMPCHEM_ALWAYS (l_defn_iter != l_defn_tokenizer.end (), "Invalid filter 'regex' definition with match phrase");
  l_match.assign (*l_defn_iter);
  ++l_defn_iter;
  if (l_defn_iter == l_defn_tokenizer.end () and l_defn_iter->empty ())
  {
    // Search string type.
    Result.reset (new matcher_regex_search (l_match));
  }
  else
  {
    std::string l_format (*l_defn_iter);
    ++l_defn_iter;
    if (l_defn_iter != l_defn_tokenizer.end () and l_defn_iter->empty ())
    {
      a_mode = helper__::convert_mode (*l_defn_iter);
    }
    Result.reset (new matcher_regex (l_match, l_format));
  }
}
break;
default:
  COMPCHEM_CHECK (false, "Should never get here, invalid type in filter definition.");
  break;
}
COMPCHEM_ENSURE (NULL != Result.get (), "Problem! Failed to create a new matcher object.");
return Result.release ();
!!!1538985.cpp!!!	output_string(out a_result : string) : int
int Result (CCHEM_SUPPLIER_SUCCESS);
// Ensure a_result is empty
COMPCHEM_REQUIRE (a_result.empty (), "Result string object should start empty.");
if (NULL == m_main.second.get ())
{
  // Have not processed anything!
  Result = CCHEM_SUPPLIER_BADCONFIG;
  m_error.assign ("Attempt to get results before processing data.");
}
else
{
  const std::string l_tmp (m_result.str ());
  if (l_tmp.empty () or m_start_result.empty ()) // No results
  {
    Result = CCHEM_SUPPLIER_UNUSABLE;
  }
  else
  {
    if (not m_start_result.empty ())
    {
      a_result.assign (m_start_result);
    }
    else if (accum == m_main.first)
    {
      // first : one result, enclosing element not needed.
      // last : one result, enclosing element not needed
      // accum : multiple results, enclosing element needed
      a_result.assign ("<datum outcome=\"" + outcomes () + "\">");
    }
    if (not l_tmp.empty ())
    {
      // Only in mode = 2 will m_result be 'closed'
      a_result.append (l_tmp);
      // first : no ending tag
      // last : no ending tag
      // accum : ending tag already appended
      if (accum != m_main.first)
      {
        a_result.append ("</datum>");
      }
    }
    if (not m_start_result.empty () or accum == m_main.first)
    {
      // Add closing tag because we created opening tag for !m_start_result.empty () 
      // or accum == m_main->mode.
      a_result.append ("</datum>");
    }
  }
}
return Result;
!!!1720873.cpp!!!	parse_filter() : void
////////////////////////////////////
// Get the filter's text content.
std::stringstream l_content;
if (not get_filter ().empty ())
{
  data_scheme::content_visitor l_visit (l_content);
  get_filter ().visit (l_visit);
}
else
{
  // Try file
  COMPCHEM_ALWAYS (boost::filesystem::exists (get_filter ().href ())
     , "A filter of type 'regex' must contain the definition or @href must point to a file with the definition");
  std::ifstream l_is (get_filter ().href ().c_str ());
  std::copy (std::istream_iterator< char > (l_is)
            , std::istream_iterator< char > ()
            , std::ostream_iterator< char > (l_content));
}
// Test is l_content is empty.
COMPCHEM_ALWAYS (not l_content.eof ()
     , "A filter of type 'regex' must contain the definition or @href must point to a file with the definition");
//////////////////////
// Split the content into tokens and process
// Parse the content
std::string l_line;
std::getline (l_content, l_line);
m_main.second.reset (make_matcher (l_line, m_main.first));
// Current always starts out pointing to the first created matcher.
m_current = m_main.second.get ();
if (not l_content.eof ())
{
  std::getline (l_content, l_line);
  m_start = m_main;
  m_main.second.reset (make_matcher (l_line, m_main.first));
}
if (not l_content.eof ())
{
  std::getline (l_content, l_line);
  mode_constant l_ignored;
  m_main.second.reset (new matcher_end_pair (m_main.second.release (), make_matcher (l_line, l_ignored)));
}
COMPCHEM_ALWAYS (l_content.eof (), "Filter definition contains more than three lines.");
// Now call 'reset' to initialise m_current.
reset ();
!!!1539241.cpp!!!	process_part(in a_buffer : string) : int
int Result (CCHEM_SUPPLIER_SUCCESS);
std::string l_output;
// Process current matcher
if (m_current->process_part (a_buffer, l_output))
{
  switch (m_current == m_main.second.get () ? m_main.first : m_start.first)
  {
  case accum:
    // In accumulate mode, append data
    m_result << l_output << "</datum>";
    break;
  case first:
    // In first mode switch processor or signal exit
    if (m_current == m_start.second.get ())
    {
      // Current matcher was start -> switch
      m_start_result.assign (l_output);
      m_current = m_main.second.get ();
    }
    else
    {
      // Invalidate processor and signal completion
      m_current = NULL;
      Result = CCHEM_SUPPLIER_COMPLETE;
    }
    break;
  case last:
    // In last mode only save the latest output
    m_result.str (l_output);
    break;
  }
}
return Result;
!!!1311273.cpp!!!	reset() : void
if (NULL == m_main.second.get ())
{
  // Need to initialise
  parse_filter ();
}
else
{
  // Reset result stream.
  m_result.str (std::string ());
  // Reset cursor
  if (NULL != m_start.second.get ())
  {
    m_current = m_start.second.get ();
  }
  else
  {
    m_current = m_main.second.get ();
  }
}
