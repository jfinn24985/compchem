class entry_ctl
!!!1031337.cpp!!!	create_item() : item_iterator
  // LOCAL
  // PRE
  is_valid ();
  // DO
  
  // Create new node
  purpletree::dom::element l_node (get_parent_node ().owner_document ().create_element (get_node_name ()));
  ENSURE (not l_node.is_null (), "Cannot create a new element");
  
  // Create any required sub-nodes and attributes to give a valid twig.
  // Set start date
  xml_traits::set_date_attribute (l_node
  				, DATE_ATTR_NAME
  				, boost::gregorian::day_clock::local_day()
  				, true);
        
  // Add to parent node
  l_node = get_parent_node ().append_child (l_node);
  
  // Indicate that document is dirty.
  journal_ctl::make_dirty (l_node.owner_document ());
  
  // Create iterator
  item_iterator Result = item_iterator (*this, l_node);
  
  // DONE
  ENSURE (Result != end (), "Iterator should not equal end ().");
  return Result;
!!!1031849.cpp!!!	get_action(in a_cursor : item_iterator) : string
  // PRE
  require_valid_iterator (a_cursor);
  // DO
  std::string Result;
  purpletree::dom::element l_elem (xml_traits::find_node_by_name ((*a_cursor).first_child ()
  								, ACTION_NODE_NAME));
  if (not l_elem.is_null ())
  {
    Result = xml_traits::get_node_content (l_elem);
  }
  return Result;
!!!1031977.cpp!!!	get_entry_date(in a_cursor : item_iterator) : boost::gregorian::date
  // PRE
  require_valid_iterator (a_cursor);
  // DO
  boost::gregorian::date Result (xml_traits::get_date_attribute (*a_cursor
  							       , DATE_ATTR_NAME));
  ENSURE (not Result.is_not_a_date ()
  	, "Invalid 'entry' node, 'date' attribute is invalid.");
  return Result;
!!!1032233.cpp!!!	get_observation(in a_cursor : item_iterator) : string
  // PRE
  require_valid_iterator (a_cursor);
  // DO
  std::string Result;
  purpletree::dom::element l_elem (xml_traits::find_node_by_name ((*a_cursor).first_child ()
  								, OBSERVATION_NODE_NAME));
  if (not l_elem.is_null ())
  {
    Result = xml_traits::get_node_content (l_elem);
  }
  return Result;
!!!1032489.cpp!!!	is_valid() : void
  base_t::is_valid ();
  INVARIANT (xml_traits::is_element(get_parent_node (), PARENT_NODE_NAME)
             , "List control must have a parent element or right type.");
!!!1032617.cpp!!!	is_valid_iterator(in a_cursor : item_iterator) : bool
  return xml_traits::is_element (*a_cursor, ENTRY_NODE_NAME);
!!!1033001.cpp!!!	set_action(inout a_cursor : item_iterator, in a_value : string) : void
  // PRE
  require_valid_iterator (a_cursor);
  
  // DO
  purpletree::dom::element l_node (xml_traits::find_node_by_name ((*a_cursor).first_child ()
  								, ACTION_NODE_NAME));
  
  // Is there no node but a new value?
  if (l_node.is_null () and not a_value.empty ())
  {
    // There is no existing node, we need to add one.
    // An action node is at the end of the entry node.
    l_node = (*a_cursor).append_child ((*a_cursor).owner_document ().create_element (ACTION_NODE_NAME));
    CHECK (not l_node.is_null (), "Newly created element should not be null.");
  }
  // If there is a node
  if (not l_node.is_null ())
  {
    if (xml_traits::set_node_content (l_node, a_value))
      {
        journal_ctl::make_dirty ((*a_cursor).owner_document ());
      }
  }
  ENSURE (a_value == get_action (a_cursor), "Real value does not equal value input to set_action");
!!!1033129.cpp!!!	set_observation(inout a_cursor : item_iterator, in a_value : string) : void
  require_valid_iterator (a_cursor);
  // DO
  purpletree::dom::element l_node (xml_traits::find_node_by_name ((*a_cursor).first_child (), OBSERVATION_NODE_NAME));
  purpletree::dom::document l_doc ((*a_cursor).owner_document ());
  // Test if new node is required.
  if (l_node.is_null () and not a_value.empty ())
  {
    // There is no existing node, we need to add one.
    // An observation node is the first entry.
    l_node = (*a_cursor).first_child ();
    if (l_node.is_null ())
      {
        // No other children so can append
        l_node = (*a_cursor).append_child (l_doc.create_element (OBSERVATION_NODE_NAME));
      }
    else
      {
        // Prepend to first child.
        l_node = (*a_cursor).insert_before (l_doc.create_element (OBSERVATION_NODE_NAME), l_node);
      }
    CHECK (not l_node.is_null (), "Newly created element should not be null");
  }
  if (not l_node.is_null ())
  {
    if (xml_traits::set_node_content (l_node, a_value))
      {
        journal_ctl::make_dirty (l_doc);
      }
  }
  ENSURE (a_value == get_observation (a_cursor), "Real value does not equal value input to set_observation.");
!!!1033257.cpp!!!	set_sequence(inout a_cursor : item_iterator, in a_value : string) : void
  // PRE
  require_valid_iterator (a_cursor);
  // DO
  if (xml_traits::set_attribute (*a_cursor
  			       , SEQUENCE_ATTR_NAME
  			       , purpletree::dom::set_utf8 (a_value)))
  {
    journal_ctl::make_dirty ((*a_cursor).owner_document ());
  }
  ENSURE (a_value == get_sequence (a_cursor), "Real value does not equal input value to set_sequence.");
