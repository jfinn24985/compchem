class worker
!!!1426857.cpp!!!	add_child(in a_name : string, in a_label : string) : basic_datum
if (data_access::names::info_name () != a_name)
{
  const bool bad_child_name (false);
  COMPCHEM_ALWAYS (bad_child_name, serial_name() + " class has no child with name " + a_name);
}
return add_info (a_label);
!!!1409065.cpp!!!	add_info(in a_label : string) : info
m_information.push_back (new info (*this, a_label));
// Always last
append_child (m_information.back ());
return m_information.back ();
!!!1408937.cpp!!!	get_attribute(in a_name : string, out a_value : string) : bool
bool Result (false);
if (data_access::names::label_name () == a_name)
{
  a_value.assign (m_label);
  Result = true;
}
return Result;
!!!1682985.cpp!!!	remove_priv(inout a_datum : info) : void
COMPCHEM_REQUIRE (&(a_datum.parent ()) == this, "attempt to remove an object that is not a child of this object.");
bool object_is_child (false);
for (info_iterator l_f = begin_info (); l_f != end_info (); ++l_f)
{
  if (&(*l_f) == &a_datum)
  {
    m_information.erase (l_f);
    object_is_child = true;
    break;
  }
}
COMPCHEM_ENSURE (true == object_is_child, "child object not found in child list");
!!!1408809.cpp!!!	set_attribute(in a_name : string, in a_value : string) : void
if (data_access::names::label_name () == a_name) 
{
  COMPCHEM_ALWAYS (a_value == label (), serial_name () + " object labels cannot be changed after construction");
}
else
{
  const bool bad_attribute_name (false);
  COMPCHEM_ALWAYS (bad_attribute_name, serial_name () + " objects do not have an attribute named " + a_name);
}

!!!1662249.cpp!!!	virt_remove_child(inout a_datum : basic_datum) : void
COMPCHEM_ALWAYS (not empty_info (), "attempt to remove child from empty object");
// a_datum should be an info object!
bool object_is_my_child (false);
info * l_tmp (dynamic_cast< info * >(a_datum));
if (NULL != l_tmp)
{
  object_is_my_child = true;
  remove_priv (*l_tmp);
}
COMPCHEM_ALWAYS (true == object_is_my_child, "attempt to remove non-child object");
