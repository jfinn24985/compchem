format 55
"SAX" // /xmlreader::SAX
  revision 2
  modified_by 41 "finnerty"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_infonote default shadow default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default
  
  comment "FUTURE: Use a SAX2 underlying interface for the XML reader"
  classview 169769 "expat"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_infonote default shadow default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default
    associated_deployment_view deploymentview_ref 166953 // expat
    comment "Use the expat SAX2 interface"
    class 504233 "xml_reader"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Interface to an XML reader type

This version of the reader class uses a SAX2 implementation."
      class 503721 "node_types"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum {
${items}
};
"
	java_decl "${comment}${@}${public}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}enum ${name} {
${items}};
"
	explicit_switch_type ""
	
	attribute 414377 "START_ELEMENT"
	  public explicit_type ""
	  init_value "= 1"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 414505 "ATTRIBUTE"
	  public explicit_type ""
	  init_value "= 2"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 414633 "TEXT"
	  public explicit_type ""
	  init_value "= 3"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 414761 "CDATA"
	  public explicit_type ""
	  init_value "= 4"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 414889 "ENTITY"
	  public explicit_type ""
	  init_value "= 5"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 415017 "ENTITY_DECL"
	  public explicit_type ""
	  init_value "= 6"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 415145 "PI"
	  public explicit_type ""
	  init_value "= 7"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 415273 "COMMENT"
	  public explicit_type ""
	  init_value "= 8"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 415401 "DOCUMENT"
	  public explicit_type ""
	  init_value "= 9"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 415529 "DOCTYPE"
	  public explicit_type ""
	  init_value "= 10"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 415657 "DOCFRAG"
	  public explicit_type ""
	  init_value "= 11"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 415785 "NOTATION"
	  public explicit_type ""
	  init_value "= 12"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 415913 "END_ELEMENT"
	  public explicit_type ""
	  init_value "= 15"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 503849 "parser_property"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum
{
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl "${comment}${visibility}final class ${name} {
${items}}
"
	python_2_2 python_decl "class ${name}:
${docstring}${members}
"
	idl_decl "${comment}enum ${name} {
${items}};
"
	explicit_switch_type ""
	
	comment "Constants that can be used to control optional aspects of the 
parser/reader."
	attribute 416041 "UNSUPPORTED"
	  public type class_ref 503849 // parser_property
	  init_value "= 0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Value indicates a property is unsupported."
	end

	attribute 416169 "LOAD_DTD"
	  public type class_ref 503849 // parser_property
	  init_value "= 0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Load the DTD while parsing the document."
	end

	attribute 416297 "DEFAULT_ATTRIBUTES"
	  public type class_ref 503849 // parser_property
	  init_value "= 0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Will automatically set default attributes (implies
loading the DTD)."
	end

	attribute 416425 "VALIDATE"
	  public type class_ref 503849 // parser_property
	  init_value "= 0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Validate the document against the DTD (implies
loading the DTD.)"
	end

	attribute 416553 "EXPAND_ENTITIES"
	  public type class_ref 503849 // parser_property
	  init_value "= 0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Expand any entities into their final form (implies
loading the DTD)"
	end
      end

      attribute 418985 "m_parser_okay"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1599785 "attribute"
	const public explicit_return_type "string"
	nparams 1
	  param in name "a_key" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} {
  COMPCHEM_REQUIRE(this->has_attribute (a_key), \"No attribute with given name: \" + a_key);
  return t_reader_traits::attribute (this->m_reader, a_key); }
"
	
	
	
	
	comment "Get value of attribute of give name from element

\\pre has_attribute (a_key)"
      end

      operation 1599913 "attribute_count"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
  COMPCHEM_REQUIRE(not this->is_attribute (), \"Cannot get attribute from an attribute\");
  return t_reader_traits::attribute_count (this->m_reader); }
"
	
	
	
	
	comment "How many attributes are present?

\\pre !is_attribute"
      end

      operation 1600041 "base_uri"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
  COMPCHEM_REQUIRE(this->is_doc_valid (), \"Cannot continue with invalid document\");
  return t_reader_traits::base_uri (this->m_reader); }
"
	
	
	
	
	comment "Base URI of document"
      end

      operation 1600169 "debug"
	const public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
  t_reader_traits::debug (); }
"
	
	
	
	
	comment "Provide some debugging information."
      end

      operation 1600297 "depth"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
  COMPCHEM_REQUIRE(this->is_doc_valid (), \"Cannot continue with invalid document\");
   return t_reader_traits::depth (this->m_reader); }
"
	
	
	
	
	comment "Depth of node in tree"
      end

      operation 1600425 "empty"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
  COMPCHEM_REQUIRE(this->is_doc_valid (), \"Cannot continue with invalid document\");
  return t_reader_traits::empty (this->m_reader); }
"
	
	
	
	
	comment "Does element have no content?"
      end

      operation 1600553 "first_attribute"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
  COMPCHEM_REQUIRE(this->has_attributes ()
		, \"Cannot use first_attribute() on element with no attributes\");
  t_reader_traits::first_attribute (this->m_reader, this->m_parser_okay); }
"
	
	
	
	
	comment "Move to first attribute of this element

\\pre has_attributes()"
      end

      operation 1600681 "has_attributes"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
  COMPCHEM_REQUIRE(not this->is_attribute (), \"Cannot get attribute from an attribute\");
  return t_reader_traits::has_attributes (this->m_reader); }
"
	
	
	
	
	comment "Does element have attributes?

\\pre !is_attribute"
      end

      operation 1600809 "has_attribute"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "a_key" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} {
  COMPCHEM_REQUIRE(not this->is_attribute (), \"Cannot get attribute from an attribute\");
  return t_reader_traits::has_attribute (this->m_reader, a_key); }
"
	
	
	
	
	comment "Does element have attribute of give name?"
      end

      operation 1600937 "has_value"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
  COMPCHEM_REQUIRE(this->is_doc_valid (), \"Cannot continue with invalid document\");
  return t_reader_traits::has_value (this->m_reader); }
"
	
	
	
	
	comment "Does element have a value?"
      end

      operation 1601065 "is_attribute"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
  return (basic_xml_reader::ATTRIBUTE == this->node_type ()); }
"
	
	
	
	
	comment "Is the current position an attribute node?"
      end

      operation 1601193 "is_default"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
  COMPCHEM_REQUIRE(this->is_attribute (), \"Must be an attribute\");
  return t_reader_traits::is_default (this->m_reader); }
"
	
	
	
	
	comment "Does the attribute have its default value

\\pre is_attribute()"
      end

      operation 1601321 "is_doc_valid"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return this->m_parser_okay; }
"
	
	
	
	
	comment "Has the parser found the document valid so far

This should always be true until next() returns false. Then
this indicates whether the next() failed because the end of
document was reached or if the document was some how invalid.

This is implicit \\pre condition to all methods"
      end

      operation 1601449 "local_name"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
  COMPCHEM_REQUIRE(this->is_doc_valid (), \"Cannot continue with invalid document\");
  return t_reader_traits::local_name (this->m_reader); }
"
	
	
	
	
	comment "local name of node"
      end

      operation 1601577 "name"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
  COMPCHEM_REQUIRE(this->is_doc_valid (), \"Cannot continue with invalid document\");
  return t_reader_traits::name (this->m_reader); }
"
	
	
	
	
	comment "name, possibly qualified, of node"
      end

      operation 1601705 "namespace_uri"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
  COMPCHEM_REQUIRE(this->is_doc_valid (), \"Cannot continue with invalid document\");
  return t_reader_traits::namespace_uri (this->m_reader); }
"
	
	
	
	
	comment "URI of namespace of node"
      end

      operation 1601833 "next_attribute"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
  COMPCHEM_REQUIRE(this->is_attribute ()
		, \"Cannot use next_attribute() on non-attribute\");
  return t_reader_traits::next_attribute (this->m_reader, this->m_parser_okay); }
"
	
	
	
	
	comment "Move to next attribute of an element

\\pre is_attribute

\\return false if no next attribute"
      end

      operation 1601961 "node_type"
	const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
  COMPCHEM_REQUIRE(this->is_doc_valid (), \"Cannot continue with invalid document\");
  return t_reader_traits::node_type (this->m_reader); }
"
	
	
	
	
	comment "Type of node"
      end

      operation 1602089 "parser_property"
	stereotype "get"
	const public explicit_return_type "bool"
	nparams 1
	  param in name "a_option" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract}
{
  return t_reader_traits::get_${name}(m_reader, ${p0}, m_parser_okay);
}

"
	
	
	
	
	comment "Attempt to get parser property corresponding to a_option.  
Returns the current state of the property if option is 
supported by the current implementation. Unsupported 
properties always return false. 

Throws an error if getting a valid option failed in CHECK mode"
      end

      operation 1602217 "parser_property"
	stereotype "set"
	public explicit_return_type "bool"
	nparams 2
	  param in name "a_option" explicit_type "int"
	  param in name "a_on" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract}
{
  bool Result (false);
  if (${p0} != UNSUPPORTED)
  {
    t_reader_traits::set_${name}(m_reader, ${p0}, ${p1}, m_parser_okay);
    Result = m_parser_okay;
  }
  return Result;
}
"
	
	
	
	
	comment "Attempt to set parser attribute corresponding to a_option to
on or off.  Returns true if option is supported by the
current implementation and option was set, false if unsupported
or an error occured setting the property.

Throws an error if setting a valid option failed in CHECK mode"
      end

      operation 1602345 "prefix"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
  COMPCHEM_REQUIRE(this->is_doc_valid (), \"Cannot continue with invalid document\");
  return t_reader_traits::prefix (this->m_reader); }"
	
	
	
	
	comment "Prefix part of name"
      end

      operation 1602473 "read"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
  COMPCHEM_REQUIRE(not this->is_attribute (), \"Cannot use read() on attribute\");
  return t_reader_traits::read (this->m_reader, this->m_parser_okay); }
"
	
	
	
	
	comment "Move the reader to the next node. 

\\return false at end of document.

\\pre !is_attribute"
      end

      operation 1602601 "to_element"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
  COMPCHEM_REQUIRE(this->is_attribute (), \"Cannot use to_element() on non-attribute\");
  t_reader_traits::to_element (this->m_reader, this->m_parser_okay); }
"
	
	
	
	
	comment "Move from attribute to enclosing element

\\pre is_attribute"
      end

      operation 1602729 "value"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
  COMPCHEM_REQUIRE(this->is_doc_valid (), \"Cannot continue with invalid document\");
  return t_reader_traits::value (this->m_reader); }
"
	
	
	
	
	comment "The textual value of node"
      end

      operation 1602857 "xml_lang"
	const public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
  COMPCHEM_REQUIRE(this->is_doc_valid (), \"Cannot continue with invalid document\");
  return t_reader_traits::xml_lang (this->m_reader); }
"
	
	
	
	
	comment "XML:Lang thingy"
      end

      operation 1602985 "xml_reader"
	public explicit_return_type ""
	nparams 1
	  param in name "a_filename" explicit_type "string"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw}
: m_parser_okay(false)
, m_reader(t_reader_traits::new_reader (${p0})) {
  this->m_parser_okay = (NULL != this->m_reader); }
"
	
	
	
	
	comment "create an xml_reader from a file"
      end

      operation 1603113 "xml_reader"
	public explicit_return_type ""
	nparams 1
	  param inout name "a_stream" explicit_type "std::istream"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}${)}${volatile}${throw}
: m_parser_okay (false)
, m_reader (t_reader_traits::new_reader (${p0})) {
  this->m_parser_okay = (NULL != this->m_reader); }
"
	
	
	
	
	comment "create an xml_reader from a stream"
      end

      operation 1603241 "xml_reader"
	public explicit_return_type ""
	nparams 2
	  param inout name "a_buffer" explicit_type "char"
	  param in name "a_sz" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${volatile}${throw}
: m_parser_okay(false)
, m_reader(t_reader_traits::new_reader (${p0}, ${p1})) {
  this->m_parser_okay = (NULL != this->m_reader); }
"
	
	
	
	
	comment "create an xml_reader from a buffer.  This uses the buffer directly
and it is the responsibility of the creator to ensure that this
buffer exists for the duration of the reader."
      end

      operation 1603369 "~xml_reader"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {
  if (this->m_reader != NULL){
    t_reader_traits::delete_reader (this->m_reader); }}
"
	
	
	
	
      end

      operation 1603497 "xml_reader"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${)}${volatile}${throw};
"
	
	
	
	
	comment "no default"
      end

      operation 1603625 "xml_reader"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 504233 // xml_reader
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${)}${volatile}${throw};
"
	
	
	
	
	comment "no copy"
      end

      operation 1603753 "operator ="
	private return_type class_ref 504233 // xml_reader
	nparams 1
	  param in name "" type class_ref 504233 // xml_reader
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "no copy"
      end
    end

    class 504105 "basic_state"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit}
{
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Base class for SAX2 based xmlreader.  This class handles provides the 
conversion from SAX2 to xmlreader style in a implementation independent
way.

The way it works.
* Calls to read() runs the SAX2 parser until an event signals the beginning of the
next node_type object. The content of the current node are then available for querying.
* The library runs the SAX2 parser in a separate thread?"
      attribute 419113 "node_type"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The node type"
      end

      attribute 419241 "attributes"
	public explicit_type "string"
	multiplicity "*"
	stereotype "map"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}, ${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The attributes."
      end

      attribute 419369 "value"
	public explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The element value"
      end

      attribute 419497 "name"
	public explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The element name"
      end
    end

    class 502185 "state"
      visibility package 
      nformals 1
      formal name "t_xml_char" type "class" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit}
{
${members}
};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class manages the xmlreader state and SAX callback functions.

Notes:
@{PREFIX}XML_CALL is a macro for defining special calling conventions 
when necessary."
      class 503977 "xml_char_type"
	visibility package stereotype "typedef" explicit_base_type "t_xml_char"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      operation 1598889 "start_element_handler"
	class_operation private explicit_return_type "void"
	nparams 3
	  param in name "a_state" explicit_type "any"
	  param in name "a_name" type class_ref 503977 // xml_char_type
	  param in name "a_attributes" type class_ref 503977 // xml_char_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}@{PREFIX}XML_CALL ${type} ${name}${(}${t0} ${p0}, const ${t1} * ${p1}, const ${t2} ** ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}@{PREFIX}XML_CALL ${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}, const ${t2} ** ${p2}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Handler for the start-of-element event."
      end

      operation 1599017 "end_element_handler"
	class_operation private explicit_return_type "void"
	nparams 2
	  param in name "a_state" explicit_type "any"
	  param in name "a_name" type class_ref 503977 // xml_char_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}@{PREFIX}XML_CALL ${type} ${name}${(}${t0} ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}@{PREFIX}XML_CALL ${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Handle the end-of-element event"
      end

      operation 1599145 "char_data_handler"
	class_operation private explicit_return_type "void"
	nparams 3
	  param in name "a_state" explicit_type "any"
	  param in name "a_value" type class_ref 503977 // xml_char_type
	  param in name "a_len" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}@{PREFIX}XML_CALL ${type} ${name}${(}${t0} ${p0}, const ${t1} * ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}@{PREFIX}XML_CALL ${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Handle character data."
      end

      operation 1599273 "pi_handler"
	class_operation private explicit_return_type "void"
	nparams 3
	  param in name "a_state" explicit_type "any"
	  param in name "a_name" type class_ref 503977 // xml_char_type
	  param in name "a_value" type class_ref 503977 // xml_char_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}@{PREFIX}XML_CALL ${type} ${name}${(}${t0} ${p0}, const ${t1} * ${p1}, const ${t2} * ${p2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}@{PREFIX}XML_CALL ${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}, const ${t2} * ${p2}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Handler for processing instructions."
      end

      operation 1599401 "comment_handler"
	class_operation private explicit_return_type "void"
	nparams 2
	  param in name "a_state" explicit_type "any"
	  param in name "a_value" type class_ref 503977 // xml_char_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}@{PREFIX}XML_CALL ${type} ${name}${(}${t0} ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}@{PREFIX}XML_CALL ${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Handler for comment data."
      end

      operation 1599529 "start_cdata_handler"
	class_operation private explicit_return_type "void"
	nparams 1
	  param in name "a_state" explicit_type "any"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}@{PREFIX}XML_CALL ${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}@{PREFIX}XML_CALL ${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Handler for beginning of CDATA section."
      end

      operation 1599657 "end_cdata_handler"
	class_operation private explicit_return_type "void"
	nparams 1
	  param in name "a_state" explicit_type "any"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}@{PREFIX}XML_CALL ${type} ${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}@{PREFIX}XML_CALL ${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}
{
  ${body}
}
"
	
	
	
	
	comment "Handler for beginning of CDATA section."
      end
    end

    class 503465 "sax2_reader_traits"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Interface to a SAX2 reader type

The implementation can instantiate an object of this type by
calling the make_xml_reader function.

This class is to be used with the xml_reader template. Most methods 
do not test their preconditions here, assuming they have been tested 
in the xml_reader template."
      class 503593 "reader_t"
	visibility package stereotype "typedef" explicit_base_type "xmlTextReaderPtr"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl "${comment}typedef ${type} ${name};
"
	explicit_switch_type ""
	
      end

      operation 1594921 "attribute"
	class_operation public explicit_return_type "string"
	nparams 2
	  param in name "a_reader" type class_ref 499369 // reader_t
	  param in name "a_key" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract} {
  return to_string(xmlTextReaderGetAttribute (a_reader, reinterpret_cast< const xmlChar* > (a_key.c_str()))); }
"
	
	
	
	
	comment "Get value of attribute of give name from element

\\pre (assumed) has_attribute (a_key)"
      end

      operation 1595049 "attribute_count"
	class_operation cpp_inline public explicit_return_type "int"
	nparams 1
	  param in name "a_reader" type class_ref 499369 // reader_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${)}${const}${volatile}${throw}${abstract} {
  return xmlTextReaderAttributeCount (a_reader); }
"
	
	
	
	
	comment "How many attributes are present?

\\pre  (assumed) !is_attribute"
      end

      operation 1595177 "base_uri"
	class_operation public explicit_return_type "string"
	nparams 1
	  param in name "a_reader" type class_ref 499369 // reader_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${)}${const}${volatile}${throw}${abstract} {
  return as_string (xmlTextReaderBaseUri (a_reader)); }
"
	
	
	
	
	comment "Base URI of node"
      end

      operation 1595305 "close_callback"
	class_operation private explicit_return_type "int"
	nparams 1
	  param inout name "a_context" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract} {
      // Do nothing
      return 0; }
"
	
	
	
	
	comment "Helpers for istream reader"
      end

      operation 1595433 "debug"
	class_operation public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
  xmlMemDisplay (stderr); }
"
	
	
	
	
	comment "Dump debugging information to error stream"
      end

      operation 1595561 "delete_reader"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "a_reader" type class_ref 499369 // reader_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} {
  if (a_reader != NULL) {
    xmlFreeTextReader (a_reader); }
  a_reader = NULL; }
"
	
	
	
	
      end

      operation 1595689 "depth"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "a_reader" type class_ref 499369 // reader_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${)}${const}${volatile}${throw}${abstract} {
  return xmlTextReaderDepth (a_reader); }
"
	
	
	
	
	comment "How deep is this node?"
      end

      operation 1595817 "empty"
	class_operation public explicit_return_type "bool"
	nparams 1
	  param in name "a_reader" type class_ref 499369 // reader_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${)}${const}${volatile}${throw}${abstract} {
  return (0 != xmlTextReaderIsEmptyElement (a_reader)); }
"
	
	
	
	
	comment "Does element have no content?"
      end

      operation 1595945 "first_attribute"
	class_operation public explicit_return_type "void"
	nparams 2
	  param in name "a_reader" type class_ref 499369 // reader_t
	  param inout name "a_parser_okay" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract} {
  const int l_result = xmlTextReaderMoveToFirstAttribute (a_reader);
  if (l_result != 1) {
    a_parser_okay = false;
    COMPCHEM_CHECK(false, \"first_attribute() failed\"); }}
"
	
	
	
	
	comment "Move to first attribute of this element

\\pre (assumed) has_attributes()
\\post not has_attributes -> a_parser_okay = false"
      end

      operation 1596073 "get_parser_property"
	class_operation public explicit_return_type "bool"
	nparams 3
	  param in name "a_reader" type class_ref 499369 // reader_t
	  param in name "a_prop" explicit_type "int"
	  param inout name "a_parser_okay" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} & ${p2}${)}${const}${volatile}${throw}${abstract}
{
  bool Result (false);
  switch (xmlTextReaderGetParserProp(${p0}, ${p1}))
  {
  case 0:
    break;
  case 1:
    Result = true;
    break;
  case -1: // fall through
  default:    
    ${p2} = false;
    COMPCHEM_CHECK(false, \"get_parser_property failed\");
  }
  return Result;
}

"
	
	
	
	
	comment "Get the current setting of a parser property."
      end

      operation 1596201 "has_attributes"
	class_operation public explicit_return_type "bool"
	nparams 1
	  param in name "a_reader" type class_ref 499369 // reader_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${)}${const}${volatile}${throw}${abstract} {
  return (1 == xmlTextReaderHasAttributes (a_reader)); }
"
	
	
	
	
	comment "Does element have attributes?

\\pre (assumed) !is_attribute"
      end

      operation 1596329 "has_attribute"
	class_operation public explicit_return_type "bool"
	nparams 2
	  param in name "a_reader" type class_ref 499369 // reader_t
	  param in name "a_key" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract} {
  bool Result (false);
  xmlChar* l_value (xmlTextReaderGetAttribute (a_reader
                  , reinterpret_cast< const xmlChar* >(a_key.c_str())));
  if (NULL != l_value) {
    xmlFree(l_value);
    Result = true; }
  return Result; }
"
	
	
	
	
	comment "Does element have attribute of give name?"
      end

      operation 1596457 "has_value"
	class_operation public explicit_return_type "bool"
	nparams 1
	  param in name "a_reader" type class_ref 499369 // reader_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${)}${const}${volatile}${throw}${abstract} {
  return (1 == xmlTextReaderHasValue (a_reader)); }
"
	
	
	
	
	comment "/ Does element have a value?"
      end

      operation 1596585 "is_default"
	class_operation public explicit_return_type "bool"
	nparams 1
	  param in name "a_reader" type class_ref 499369 // reader_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${)}${const}${volatile}${throw}${abstract} {
  return (1 == xmlTextReaderIsDefault (a_reader)); }
"
	
	
	
	
	comment "Does the attribute have its default value

\\pre is_attribute()"
      end

      operation 1596713 "local_name"
	class_operation public explicit_return_type "string"
	nparams 1
	  param in name "a_reader" type class_ref 499369 // reader_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${)}${const}${volatile}${throw}${abstract} {
  return as_string (xmlTextReaderConstLocalName (a_reader)); }
"
	
	
	
	
	comment "local name of node"
      end

      operation 1596841 "name"
	class_operation public explicit_return_type "string"
	nparams 1
	  param in name "a_reader" type class_ref 499369 // reader_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${)}${const}${volatile}${throw}${abstract} {
  return as_string (xmlTextReaderConstName (a_reader)); }
"
	
	
	
	
	comment "name, possibly qualified, of node"
      end

      operation 1596969 "namespace_uri"
	class_operation public explicit_return_type "string"
	nparams 1
	  param in name "a_reader" type class_ref 499369 // reader_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${)}${const}${volatile}${throw}${abstract} {
  return as_string (xmlTextReaderConstNamespaceUri (a_reader)); }
"
	
	
	
	
	comment "/ URI of namespace of node"
      end

      operation 1597097 "new_reader"
	class_operation public return_type class_ref 499369 // reader_t
	nparams 1
	  param in name "a_filename" explicit_type "string"
	nexceptions 1
	  explicit_exception "std::logic_error"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} {
  reader_t Result (xmlNewTextReaderFilename (a_filename.c_str ()));
  if (Result == NULL) {
    throw std::logic_error (\"Unable to open file: \" + a_filename); }
  return Result; }
"
	
	
	
	
	comment "Create a new reader"
      end

      operation 1597225 "new_reader"
	class_operation public return_type class_ref 499369 // reader_t
	nparams 1
	  param inout name "a_stream" explicit_type "std::istream"
	nexceptions 1
	  explicit_exception "std::logic_error"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${abstract} {
  reader_t Result (xmlReaderForIO (&xml2_reader_traits::read_callback
				   , &xml2_reader_traits::close_callback
				   , (void*)(&a_stream)
				   , \"Xml2Reader/dummy/filename\"
				   , NULL 
				   , 0));
  if (Result == NULL) {
    throw std::logic_error (\"Unable to create reader for stream\"); }
  return Result; }
"
	
	
	
	
      end

      operation 1597353 "new_reader"
	class_operation protected return_type class_ref 499369 // reader_t
	nparams 2
	  param inout name "a_buffer" explicit_type "char"
	  param in name "a_sz" explicit_type "int"
	nexceptions 1
	  explicit_exception "std::logic_error"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${abstract} {
  reader_t Result (xmlReaderForMemory (${p0}
				      , ${p1}
				      , \"Xml2Reader/dummy/filename\"
				      , NULL 
				      , 0));
  if (Result == NULL) {
    throw std::logic_error (\"Unable to create reader for buffer\"); }
  return Result; }
"
	
	
	
	
      end

      operation 1597481 "next_attribute"
	class_operation public explicit_return_type "bool"
	nparams 2
	  param in name "a_reader" type class_ref 499369 // reader_t
	  param inout name "a_parser_okay" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract} {
  const int Result (xmlTextReaderMoveToNextAttribute (a_reader));
  if (-1 == Result) {
    a_parser_okay = false; }
  return (Result == 1); }
"
	
	
	
	
	comment "Move to next attribute of an element

\\pre is_attribute

\\return false if no next attribute"
      end

      operation 1597609 "node_type"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "a_reader" type class_ref 499369 // reader_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${)}${const}${volatile}${throw}${abstract} {
  return xmlTextReaderNodeType (a_reader); }
"
	
	
	
	
	comment "Type of node"
      end

      operation 1597737 "prefix"
	class_operation public explicit_return_type "string"
	nparams 1
	  param in name "a_reader" type class_ref 499369 // reader_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${)}${const}${volatile}${throw}${abstract} {
  return as_string (xmlTextReaderConstPrefix (a_reader)); }
"
	
	
	
	
	comment "/ Prefix part of name"
      end

      operation 1597865 "read"
	class_operation public explicit_return_type "bool"
	nparams 2
	  param in name "a_reader" type class_ref 499369 // reader_t
	  param inout name "a_parser_okay" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract} {
  const int Result (xmlTextReaderRead(a_reader));
  if (-1 == Result) {
    a_parser_okay = false; }
  return (1 == Result); }
"
	
	
	
	
	comment "Move the reader to the next node. 

\\return false at end of document.

\\pre !is_attribute"
      end

      operation 1597993 "read_callback"
	class_operation private explicit_return_type "int"
	nparams 3
	  param inout name "a_context" explicit_type "void"
	  param inout name "a_buffer" explicit_type "char"
	  param in name "a_len" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}${)}${const}${volatile}${throw}${abstract} {
  std::istream* l_in_stream = static_cast< std::istream* > (a_context);
  int Result(-1);
  // DEBUG fprintf (stderr, \"Asked to put data in %p[0-%d]\\n\", ${p1}, ${p2});
  l_in_stream->read (a_buffer, a_len);
  if (l_in_stream->good () || l_in_stream->eof ()) {
    Result = l_in_stream->gcount ();
    } // fprintf(stderr, \"(%d)[%.*s]\\n\", Result, Result, ${p1});
  return Result; }
"
	
	
	
	
	comment "Helpers for istream reader -"
      end

      operation 1598121 "set_parser_property"
	class_operation public explicit_return_type "void"
	nparams 4
	  param in name "a_reader" type class_ref 499369 // reader_t
	  param in name "a_prop" explicit_type "int"
	  param in name "a_set" explicit_type "bool"
	  param inout name "a_parser_okay" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} & ${p3}${)}${const}${volatile}${throw}${abstract}
{
  if (0 != xmlTextReaderSetParserProp(${p0}, ${p1}, (${p2}?1:0)))
  {
    ${p3} = false;
    COMPCHEM_CHECK(false, \"set_parser_property failed\");
  }
}

"
	
	
	
	
	comment "Set a parser property."
      end

      operation 1598249 "to_element"
	class_operation public explicit_return_type "void"
	nparams 2
	  param in name "a_reader" type class_ref 499369 // reader_t
	  param inout name "a_parser_okay" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${abstract} {
  const int Result = xmlTextReaderMoveToElement (a_reader);
  if (Result != 1) {
    a_parser_okay = false;
    COMPCHEM_CHECK(false, \"to_element() failed\"); }}
"
	
	
	
	
	comment "/ \\brief Move from attribute to enclosing element
/
/ \\pre is_attribute"
      end

      operation 1598377 "to_string"
	class_operation private explicit_return_type "string"
	nparams 1
	  param inout name "a_str" explicit_type "xmlChar"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${abstract} {
  std::string Result;
  if (a_str != NULL) {
    Result.assign (reinterpret_cast< const char* > (a_str));
    xmlFree (a_str); }
  return Result; }
"
	
	
	
	
	comment "Helper to convert xmlchar to string on returns. Free memory allocated for a_str."
      end

      operation 1598505 "as_string"
	class_operation private explicit_return_type "string"
	nparams 1
	  param inout name "a_str" explicit_type "xmlChar"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${abstract} {
  std::string Result;
  if (a_str != NULL) {
    Result.assign (reinterpret_cast< const char* > (a_str)); }
  return Result; }
"
	
	
	
	
	comment "Helper to convert xmlchar to string on returns. *Does not* free a_str."
      end

      operation 1598633 "value"
	class_operation public explicit_return_type "string"
	nparams 1
	  param in name "a_reader" type class_ref 499369 // reader_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${)}${const}${volatile}${throw}${abstract} {
  return as_string (xmlTextReaderConstValue (a_reader)); }
"
	
	
	
	
	comment "The textual value of node"
      end

      operation 1598761 "xml_lang"
	class_operation public explicit_return_type "string"
	nparams 1
	  param in name "a_reader" type class_ref 499369 // reader_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${)}${const}${volatile}${throw}${abstract} {
  return as_string (xmlTextReaderConstXmlLang (a_reader)); }
"
	
	
	
	
	comment "XML:Lang thingy"
      end
    end

  end

  deploymentview 166953 "expat"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default
  end
end
