class test_node_visitor
!!!1204009.cpp!!!	for_end_loop(in a_start : node, in a_depth : int) : void
unsigned int l_count (0);
const std::string l_space (256, ' ');
for (node_visitor l_cursor (a_start), l_end (l_cursor.end());
     l_cursor != l_end and l_count < 1000;
     ++l_cursor, ++l_count) {
  COMPCHEM_CHECK(0 <= a_depth, "Depth should never be negative."); 
  std::string l_pre;
  if (l_cursor.is_first ()) { // first time at node
    l_pre = l_space.substr (0, std::min ((size_t)a_depth, l_space.size ()));
    if (not l_cursor.is_leaf ()) {
      ++a_depth; // Only increment if not leaf
      l_pre.insert(0, ">>"); }
    else {
      l_pre.insert(0, "=="); }}
   else {
    --a_depth;
    l_pre = "<<" + l_space.substr (0, std::min ((size_t)a_depth, l_space.size ())); }
  log << WTCH << l_pre << "[" << a_depth << "][" << purpletree::dom::get_utf8 ((*l_cursor).node_name ())
      << "] type[" << l_cursor->node_type () << "]";
      if (l_cursor->node_type () == l_cursor->TEXT_NODE) {
        log << " = \"" << purpletree::dom::get_utf8 (l_cursor->node_value ()) << "\""; }
      log << "\n"; }
!!!1204137.cpp!!!	for_test_loop(in a_start : node, in a_depth : int) : void
unsigned int l_count (0);
const std::string l_space (256, ' ');
for (node_visitor l_cursor (a_start);
     l_cursor and l_count < 1000;
     ++l_cursor, ++l_count) {
  COMPCHEM_CHECK(0 <= a_depth, "Depth should never be negative."); 
  std::string l_pre;
  if (l_cursor.is_first ()) { // first time at node
    l_pre = l_space.substr (0, std::min ((size_t)a_depth, l_space.size ())); 
    if (not l_cursor.is_leaf ()) {
      ++a_depth; // Only increment if not leaf
      l_pre.insert(0, ">>"); }
    else {
      l_pre.insert(0, "=="); }}
  else {
    --a_depth;
    l_pre = "<<" + l_space.substr (0, std::min ((size_t)a_depth, l_space.size ())); }
  if ((*l_cursor).node_type () == (*l_cursor).DOCUMENT_NODE) {
    log << WTCH << l_pre << "[" << a_depth << "] At document node\n"; }
  else {
    log << WTCH << l_pre << "[" << a_depth << "][" << purpletree::dom::get_utf8 (l_cursor->node_name ())
        << "] type[" << (*l_cursor).node_type () << "]\n"; }}
!!!1203753.cpp!!!	main_test(in argc : int, in argv : char) : int
using data_access::namespace purpletree::dom;
// LOCAL
int Result (0);
// DO
log << TTLE << "Getting test database\n";
document l_doc;
try {
  if (not test::helper().initialise (argc, argv)) {
    Result = 1; }
  else {
    l_doc = data_scheme::test::helper().document ();
    if (l_doc.is_null ()) {
    Result = 1; }}
}
catch (const std::exception &a_err) {
  log << EXCP << a_err.what () << "\n";
  Result = 1; }
if (0 == Result and not l_doc.document_element ().is_null ()) {
  //if (0 != fork ()) {
  //  COMPCHEM_SETLOG("error/node_visitor__end_01.log");
  //  COMPCHEM_LOG("end test: test if null node_visitor == self.end");
  //  node_visitor l_test_iterator;
  //  COMPCHEM_ALWAYS(l_test_iterator != l_test_iterator.end(), "Null iterator must equal self.end");
  //  log << IFNO << "Should not get here: " << __LINE__ << "\n";
  //  std::exit(0); }

  log << TTLE << "Logic tests\n";
  element l_elem (l_doc.document_element ());
  node_visitor l_test_iterator;
  log << COMM << "Null iterator must equal self.end\n";
  if (l_test_iterator == l_test_iterator.end()) {
    log << IFYS << "Pass\n"; }
  else {
    log << IFNO << "Fail\n"; }
  log << COMM << "Null iterator must be false\n";
  if (not l_test_iterator) {
    log << IFYS << "Pass\n"; }
  else {
    log << IFNO << "Fail\n"; }
  l_test_iterator = l_elem;
  log << COMM << "Assigned iterator must not be false if not l_node.is_null\n";
  if (l_test_iterator or l_elem.is_null ()) {
    log << IFYS << "Pass\n"; }
  else {
    log << IFNO << "Fail\n"; }
  log << COMM << "Assigned iterator must equal l_node\n";
  if (l_test_iterator == l_elem) {
    log << IFYS << "Pass\n"; }
  else {
    log << IFNO << "Fail\n"; }
  log << COMM << "Incrementing assigned iterator must equal l_node.first_child or end\n";
  node_visitor l_test_end (l_test_iterator.end ());
  ++l_test_iterator;
  if (l_test_iterator == l_elem.first_child () or l_test_iterator == l_test_end) {
    log << IFYS << "Pass\n"; }
  else {
    log << IFNO << "Fail\n"; }
  

  log << TTLE << "Motion test (tests op(++), op(*) and not op(->))\n";
  implementation::serialise (l_doc, std::cout);
  log << WTCH << "Iterator motion (for iter != end) Depth starts = 0.\n";
  for_end_loop (l_doc.document_element (), 0);
  log << WTCH << "Iterator motion (for bool(iter)) Depth starts = 10.\n";
  for_test_loop (l_doc.document_element (), 10);
  element l_docelem (l_doc.document_element ());
  log << WTCH << "Got doc element\n";
  l_elem = utility::get_element \(data_access::names::mechanism_name (), l_docelem);
  log << WTCH << "Got sub-element\n";
  if (not l_elem.is_null ()) {
    log << WTCH << "Iterator motion on subset (for iter != end) Depth starts = 0.\n";
    for_end_loop (l_elem, 0);
    log << WTCH << "Iterator motion (for bool(iter)) Depth starts = 10.\n";
    for_test_loop (l_elem, 10); }
  l_elem = utility::get_element \(data_access::names::project_name (), l_docelem);
  if (not l_elem.is_null ()) {   
    l_elem = utility::get_element \(data_access::names::compound_src_name (), l_elem);
    if (not l_elem.is_null ()) {
      attr l_attr = l_elem.get_attribute_node \(data_access::names::label_name ());
      log << WTCH << "Got attribute\n";
      if (not l_attr.is_null ()) {
        log << WTCH << "Iterator motion on attribute (for iter != end).\n";
        for_end_loop (l_attr, 0);
        log << WTCH << "Iterator motion on attribute (for bool(iter)).\n";
        for_test_loop (l_attr, 10);  }}}
  if (not l_doc.is_null ()) {
    log << WTCH << "Iterator motion on document (for iter != end).\n";
    for_end_loop (l_doc, 0);
    log << WTCH << "Iterator motion on document (for bool(iter)).\n";
    for_test_loop (l_doc, 10); }
}
return Result;
