class test_contract_error
!!!1339305.cpp!!!	main_test() : void
class helper 
{
public:
  static void test_always ()
  {
    COMPCHEM_ALWAYS (false, "Test of 'COMPCHEM_ALWAYS' DbC macro");
  }
  static void test_require ()
  {
    COMPCHEM_REQUIRE (false, "Test of 'COMPCHEM_REQUIRE' DbC macro");
  }
  static void test_ensure ()
  {
    COMPCHEM_ENSURE (false, "Test of 'COMPCHEM_ENSURE' DbC macro");
  }
  static void test_invariant ()
  {
    COMPCHEM_INVARIANT (false, "Test of 'COMPCHEM_INVARIANT' DbC macro");
  }
  static void test_check ()
  {
    COMPCHEM_CHECK (false, "Test of 'COMPCHEM_CHECK' DbC macro");
  }
};
try
{
  log () << COMM << "Error codes:\n";
  bool_test (0 == contract_error::always, "Always    = [0]");
  bool_test (1 == contract_error::require, "Require   = [1]");
  bool_test (2 == contract_error::ensure, "Ensure    = [2]");
  bool_test (3 == contract_error::invariant, "Invariant = [3]");
  bool_test (4 == contract_error::check, "Check     = [4]");
  bool_test (5 == contract_error::max_level, "Max Level = [5]");
  bool_test (4000 == contract_error::s_size, "Buffer Sz = [4000]");
  log () << COMM << "Check macros:\n";
  monitor_function (contract_error::always, &helper::test_always, "Test of 'COMPCHEM_ALWAYS' DbC macro");
  monitor_function (contract_error::require, &helper::test_require, "Test of 'COMPCHEM_REQUIRE' DbC macro");
  monitor_function (contract_error::ensure, &helper::test_ensure, "Test of 'COMPCHEM_ENSURE' DbC macro");
  monitor_function (contract_error::invariant, &helper::test_invariant, "Test of 'COMPCHEM_INVARIANT' DbC macro");
  monitor_function (contract_error::check, &helper::test_check, "Test of 'COMPCHEM_CHECK' DbC macro");
}
catch (const contract_error &err)
{
  log () << IFNO << "Caught contract error level [" << err.level << "]\n" << err.what () << "\n";
}
catch (const std::exception &err)
{
  log () << IFNO << "Caught std::exception:\n" << err.what () << "\n";
}
